
PracaInz_v6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1b0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800b360  0800b360  0000c360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b834  0800b834  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b834  0800b834  0000c834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b83c  0800b83c  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b83c  0800b83c  0000c83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b840  0800b840  0000c840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b844  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d4  2**0
                  CONTENTS
 10 .bss          00004fd0  200001d4  200001d4  0000d1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200051a4  200051a4  0000d1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001870c  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b94  00000000  00000000  00025910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  000294a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc6  00000000  00000000  0002a940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f9d6  00000000  00000000  0002b906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015fc0  00000000  00000000  0004b2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee176  00000000  00000000  0006129c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014f412  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a68  00000000  00000000  0014f458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00155ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b348 	.word	0x0800b348

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	0800b348 	.word	0x0800b348

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4907      	ldr	r1, [pc, #28]	@ (800103c <__NVIC_EnableIRQ+0x38>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	@ (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	@ (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <can_filter_init>:
#include "can.h"

/*!
 *  \brief Initialize can filter
 */
void can_filter_init ( uint16_t can_client_id, uint32_t can_filter_mask ){
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	80fb      	strh	r3, [r7, #6]

	/* Enter filter initialization mode */
	CAN1->FMR |= CAN_FMR_FINIT;
 80010a0:	4b23      	ldr	r3, [pc, #140]	@ (8001130 <can_filter_init+0x9c>)
 80010a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010a6:	4a22      	ldr	r2, [pc, #136]	@ (8001130 <can_filter_init+0x9c>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

	/* Deactivate filter bank */
	CAN1->FA1R &= ~CAN_FA1R_FACT0;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <can_filter_init+0x9c>)
 80010b2:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80010b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001130 <can_filter_init+0x9c>)
 80010b8:	f023 0301 	bic.w	r3, r3, #1
 80010bc:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c

	/*----------------- FILTER BANK 0 -----------------------*/

	/* Use filter bank 0 in IDENTIFIER MASK MODE 1 */
	CAN1->FM1R &= ~CAN_FM1R_FBM0;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <can_filter_init+0x9c>)
 80010c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80010c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001130 <can_filter_init+0x9c>)
 80010c8:	f023 0301 	bic.w	r3, r3, #1
 80010cc:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204

	/* CAN filter scale - use 1 single 32 bit register */
	CAN1->FS1R |= CAN_FS1R_FSC0;
 80010d0:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <can_filter_init+0x9c>)
 80010d2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80010d6:	4a16      	ldr	r2, [pc, #88]	@ (8001130 <can_filter_init+0x9c>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c

	/* assign to FIFO 0 */
	CAN1->FFA1R &= ~CAN_FFA1R_FFA0;
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <can_filter_init+0x9c>)
 80010e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80010e6:	4a12      	ldr	r2, [pc, #72]	@ (8001130 <can_filter_init+0x9c>)
 80010e8:	f023 0301 	bic.w	r3, r3, #1
 80010ec:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
	CAN1->FA1R |= CAN_FA1R_FACT0; */

	/*--------------- FILTER CONTENT ------------------------*/

	/* Register 1 - filter */
	CAN1->sFilterRegister[0].FR1 = (can_client_id << STDID_POS);
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001130 <can_filter_init+0x9c>)
 80010f4:	055b      	lsls	r3, r3, #21
 80010f6:	f8c2 3240 	str.w	r3, [r2, #576]	@ 0x240

	/* Register 2 - filter mask */
	CAN1->sFilterRegister[0].FR2 = (CAN_FILTER_MASK);
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <can_filter_init+0x9c>)
 80010fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <can_filter_init+0xa0>)
 80010fe:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244

	/* Filter activation register */
	CAN1->FA1R |= CAN_FA1R_FACT0;
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <can_filter_init+0x9c>)
 8001104:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8001108:	4a09      	ldr	r2, [pc, #36]	@ (8001130 <can_filter_init+0x9c>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	/*CAN1->sFilterRegister[1].FR2 = (can_filter_mask << STDID_POS);*/

	/*-------------------------------------------------------*/

	/* Leave filter initialization mode */
	CAN1->FMR &= ~CAN_FMR_FINIT;
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <can_filter_init+0x9c>)
 8001114:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001118:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <can_filter_init+0x9c>)
 800111a:	f023 0301 	bic.w	r3, r3, #1
 800111e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40006400 	.word	0x40006400
 8001134:	ffe00000 	.word	0xffe00000

08001138 <can_init>:

void can_init (){
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0

	/* Enable clock access to CAN */
	RCC->APB1ENR |= RCC_APB1ENR_CAN1;
 800113c:	4b4c      	ldr	r3, [pc, #304]	@ (8001270 <can_init+0x138>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	4a4b      	ldr	r2, [pc, #300]	@ (8001270 <can_init+0x138>)
 8001142:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001146:	6413      	str	r3, [r2, #64]	@ 0x40

	/*---------------------- GPIOD ---------------------*/

	/* Enable pins - port D */
	RCC->AHB1ENR |= RCC_GPIOD_EN;
 8001148:	4b49      	ldr	r3, [pc, #292]	@ (8001270 <can_init+0x138>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114c:	4a48      	ldr	r2, [pc, #288]	@ (8001270 <can_init+0x138>)
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	6313      	str	r3, [r2, #48]	@ 0x30

	/* PD0 - CAN1_RD */
	GPIOD->MODER |= MODE_PD0_1;
 8001154:	4b47      	ldr	r3, [pc, #284]	@ (8001274 <can_init+0x13c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a46      	ldr	r2, [pc, #280]	@ (8001274 <can_init+0x13c>)
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~MODE_PD0_0;
 8001160:	4b44      	ldr	r3, [pc, #272]	@ (8001274 <can_init+0x13c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a43      	ldr	r2, [pc, #268]	@ (8001274 <can_init+0x13c>)
 8001166:	f023 0301 	bic.w	r3, r3, #1
 800116a:	6013      	str	r3, [r2, #0]

	/* Set PD0 alternate function to CAN1_RD (AF9) */
	GPIOD->AFR[0] |= AFRL0_3;
 800116c:	4b41      	ldr	r3, [pc, #260]	@ (8001274 <can_init+0x13c>)
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	4a40      	ldr	r2, [pc, #256]	@ (8001274 <can_init+0x13c>)
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] &= ~AFRL0_2;
 8001178:	4b3e      	ldr	r3, [pc, #248]	@ (8001274 <can_init+0x13c>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	4a3d      	ldr	r2, [pc, #244]	@ (8001274 <can_init+0x13c>)
 800117e:	f023 0304 	bic.w	r3, r3, #4
 8001182:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] &= ~AFRL0_1;
 8001184:	4b3b      	ldr	r3, [pc, #236]	@ (8001274 <can_init+0x13c>)
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	4a3a      	ldr	r2, [pc, #232]	@ (8001274 <can_init+0x13c>)
 800118a:	f023 0302 	bic.w	r3, r3, #2
 800118e:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= AFRL0_0;
 8001190:	4b38      	ldr	r3, [pc, #224]	@ (8001274 <can_init+0x13c>)
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	4a37      	ldr	r2, [pc, #220]	@ (8001274 <can_init+0x13c>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6213      	str	r3, [r2, #32]

	/* PD1 - CAN1_TD */
	GPIOD->MODER |= MODE_PD1_1;
 800119c:	4b35      	ldr	r3, [pc, #212]	@ (8001274 <can_init+0x13c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a34      	ldr	r2, [pc, #208]	@ (8001274 <can_init+0x13c>)
 80011a2:	f043 0308 	orr.w	r3, r3, #8
 80011a6:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~MODE_PD1_0;
 80011a8:	4b32      	ldr	r3, [pc, #200]	@ (8001274 <can_init+0x13c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a31      	ldr	r2, [pc, #196]	@ (8001274 <can_init+0x13c>)
 80011ae:	f023 0304 	bic.w	r3, r3, #4
 80011b2:	6013      	str	r3, [r2, #0]

	/* Set PD1 alternate function to CAN1_TD (AF9) */
	GPIOD->AFR[0] |= AFRL1_3;
 80011b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001274 <can_init+0x13c>)
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	4a2e      	ldr	r2, [pc, #184]	@ (8001274 <can_init+0x13c>)
 80011ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011be:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] &= ~AFRL1_2;
 80011c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001274 <can_init+0x13c>)
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001274 <can_init+0x13c>)
 80011c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80011ca:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] &= ~AFRL1_1;
 80011cc:	4b29      	ldr	r3, [pc, #164]	@ (8001274 <can_init+0x13c>)
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	4a28      	ldr	r2, [pc, #160]	@ (8001274 <can_init+0x13c>)
 80011d2:	f023 0320 	bic.w	r3, r3, #32
 80011d6:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= AFRL1_0;
 80011d8:	4b26      	ldr	r3, [pc, #152]	@ (8001274 <can_init+0x13c>)
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	4a25      	ldr	r2, [pc, #148]	@ (8001274 <can_init+0x13c>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	6213      	str	r3, [r2, #32]

	/* ------------------------------------------------------ */

	/* ENTER initialization mode - set INRQ in CAN_MC */
	CAN1->MCR |= CAN_MCR_INRQ;
 80011e4:	4b24      	ldr	r3, [pc, #144]	@ (8001278 <can_init+0x140>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a23      	ldr	r2, [pc, #140]	@ (8001278 <can_init+0x140>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6013      	str	r3, [r2, #0]

	/* Wait until INAK bit in CAN_MSR is set */
	while ( ! (CAN1->MSR & CAN_MSR_INAK) ){}
 80011f0:	bf00      	nop
 80011f2:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <can_init+0x140>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f9      	beq.n	80011f2 <can_init+0xba>

	/* Leave sleep mode, after reset CAN is in SLEEP mode */
	CAN1->MCR &= ~CAN_MCR_SLEEP;
 80011fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <can_init+0x140>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a1d      	ldr	r2, [pc, #116]	@ (8001278 <can_init+0x140>)
 8001204:	f023 0302 	bic.w	r3, r3, #2
 8001208:	6013      	str	r3, [r2, #0]

	/* Wait until SLAK bit in CAN_MSR is cleared */
	while ( CAN1->MSR & CAN_MSR_SLAK ) {}
 800120a:	bf00      	nop
 800120c:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <can_init+0x140>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f9      	bne.n	800120c <can_init+0xd4>
	 * BS2	-	2
	 * BRP	- 	11
	 */

	/* Set BTR */
	CAN1->BTR = 0x001a0005;
 8001218:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <can_init+0x140>)
 800121a:	4a18      	ldr	r2, [pc, #96]	@ (800127c <can_init+0x144>)
 800121c:	61da      	str	r2, [r3, #28]

	/* ------------------- Set receiver -----------------------*/
	CAN1->IER |= ( CAN_IER_FMPIE0 | CAN_IER_FMPIE1 );
 800121e:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <can_init+0x140>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a15      	ldr	r2, [pc, #84]	@ (8001278 <can_init+0x140>)
 8001224:	f043 0312 	orr.w	r3, r3, #18
 8001228:	6153      	str	r3, [r2, #20]


	/*---------------------------------------------------------*/

	/*------------------- Set filters -------------------------*/
	can_filter_init(CAN_ECU_ID, CAN_FILTER_MASK);
 800122a:	4915      	ldr	r1, [pc, #84]	@ (8001280 <can_init+0x148>)
 800122c:	f240 70df 	movw	r0, #2015	@ 0x7df
 8001230:	f7ff ff30 	bl	8001094 <can_filter_init>

	/* LEAVE initialization mode */
	CAN1->MCR &= ~CAN_MCR_INRQ;
 8001234:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <can_init+0x140>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0f      	ldr	r2, [pc, #60]	@ (8001278 <can_init+0x140>)
 800123a:	f023 0301 	bic.w	r3, r3, #1
 800123e:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority(CAN1_RX0_IRQn,15);
 8001240:	210f      	movs	r1, #15
 8001242:	2014      	movs	r0, #20
 8001244:	f7ff fefc 	bl	8001040 <__NVIC_SetPriority>
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001248:	2014      	movs	r0, #20
 800124a:	f7ff fedb 	bl	8001004 <__NVIC_EnableIRQ>

	NVIC_SetPriority(CAN1_RX1_IRQn,15);
 800124e:	210f      	movs	r1, #15
 8001250:	2015      	movs	r0, #21
 8001252:	f7ff fef5 	bl	8001040 <__NVIC_SetPriority>
	NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001256:	2015      	movs	r0, #21
 8001258:	f7ff fed4 	bl	8001004 <__NVIC_EnableIRQ>


	/* Wait until INAK bit in CAN_MSR is cleared */
	while ( (CAN1->MSR & CAN_MSR_INAK) ){}
 800125c:	bf00      	nop
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <can_init+0x140>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f9      	bne.n	800125e <can_init+0x126>
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	40020c00 	.word	0x40020c00
 8001278:	40006400 	.word	0x40006400
 800127c:	001a0005 	.word	0x001a0005
 8001280:	ffe00000 	.word	0xffe00000

08001284 <can_receive>:

uint8_t tank_level_receive ( uint8_t *can_data ){
	return (100 * can_data[3])/255;
}

int can_receive(struct can_frame *msg, uint8_t FIFO_No ){
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]

		/* Read message can id */
		msg->_can_id = ((CAN1->sFIFOMailBox[FIFO_No].RIR & 0xffe00000) >> 21);
 8001290:	4a30      	ldr	r2, [pc, #192]	@ (8001354 <can_receive+0xd0>)
 8001292:	78fb      	ldrb	r3, [r7, #3]
 8001294:	331b      	adds	r3, #27
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	4413      	add	r3, r2
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	0d5b      	lsrs	r3, r3, #21
 800129e:	b29b      	uxth	r3, r3
 80012a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	801a      	strh	r2, [r3, #0]

		/* Read message length */
		msg->_dlc = (CAN1->sFIFOMailBox[FIFO_No].RDTR & 0xf);
 80012aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001354 <can_receive+0xd0>)
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	331b      	adds	r3, #27
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	4413      	add	r3, r2
 80012b4:	3304      	adds	r3, #4
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	709a      	strb	r2, [r3, #2]

		for ( uint8_t i = 0; i < msg->_dlc; ++i ){
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e028      	b.n	800131c <can_receive+0x98>

			if ( i < 4 ){
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d810      	bhi.n	80012f2 <can_receive+0x6e>
				msg->_data[i] = (CAN1->sFIFOMailBox[FIFO_No].RDLR >> (8 * i));
 80012d0:	4a20      	ldr	r2, [pc, #128]	@ (8001354 <can_receive+0xd0>)
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	011b      	lsls	r3, r3, #4
 80012d6:	4413      	add	r3, r2
 80012d8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	40da      	lsrs	r2, r3
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	b2d1      	uxtb	r1, r2
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	460a      	mov	r2, r1
 80012ee:	70da      	strb	r2, [r3, #3]
 80012f0:	e011      	b.n	8001316 <can_receive+0x92>
			}
			else {
				msg->_data[i] = ( CAN1->sFIFOMailBox[FIFO_No].RDHR >> ((8*(i)) % 32));
 80012f2:	4a18      	ldr	r2, [pc, #96]	@ (8001354 <can_receive+0xd0>)
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	4413      	add	r3, r2
 80012fa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	f003 0318 	and.w	r3, r3, #24
 8001308:	40da      	lsrs	r2, r3
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	b2d1      	uxtb	r1, r2
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	460a      	mov	r2, r1
 8001314:	70da      	strb	r2, [r3, #3]
		for ( uint8_t i = 0; i < msg->_dlc; ++i ){
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	3301      	adds	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	789b      	ldrb	r3, [r3, #2]
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	429a      	cmp	r2, r3
 8001324:	d3d1      	bcc.n	80012ca <can_receive+0x46>
			}
		}

		if ( FIFO_No == 0){
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d106      	bne.n	800133a <can_receive+0xb6>
			CAN1->RF0R |= (1U << 5);
 800132c:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <can_receive+0xd0>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	4a08      	ldr	r2, [pc, #32]	@ (8001354 <can_receive+0xd0>)
 8001332:	f043 0320 	orr.w	r3, r3, #32
 8001336:	60d3      	str	r3, [r2, #12]
 8001338:	e005      	b.n	8001346 <can_receive+0xc2>
		} else {
			CAN1->RF1R |= (1U << 5);
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <can_receive+0xd0>)
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	4a05      	ldr	r2, [pc, #20]	@ (8001354 <can_receive+0xd0>)
 8001340:	f043 0320 	orr.w	r3, r3, #32
 8001344:	6113      	str	r3, [r2, #16]
		}

		return 0;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	40006400 	.word	0x40006400

08001358 <gpiob_init>:
 *  Created on: Oct 25, 2024
 *      Author: tomasz
 */
#include "gpiob.h"

void gpiob_init(void){
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_GPIOB_EN;
 800135c:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <gpiob_init+0x7c>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001360:	4a1c      	ldr	r2, [pc, #112]	@ (80013d4 <gpiob_init+0x7c>)
 8001362:	f043 0302 	orr.w	r3, r3, #2
 8001366:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOB->MODER &= ~MODE_PB14_1;
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <gpiob_init+0x80>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a1a      	ldr	r2, [pc, #104]	@ (80013d8 <gpiob_init+0x80>)
 800136e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8001372:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= MODE_PB14_0;
 8001374:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <gpiob_init+0x80>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a17      	ldr	r2, [pc, #92]	@ (80013d8 <gpiob_init+0x80>)
 800137a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137e:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~MODE_PB7_1;
 8001380:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <gpiob_init+0x80>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a14      	ldr	r2, [pc, #80]	@ (80013d8 <gpiob_init+0x80>)
 8001386:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800138a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= MODE_PB7_0;
 800138c:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <gpiob_init+0x80>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a11      	ldr	r2, [pc, #68]	@ (80013d8 <gpiob_init+0x80>)
 8001392:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001396:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~MODE_PB0_1;
 8001398:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <gpiob_init+0x80>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0e      	ldr	r2, [pc, #56]	@ (80013d8 <gpiob_init+0x80>)
 800139e:	f023 0302 	bic.w	r3, r3, #2
 80013a2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= MODE_PB0_0;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <gpiob_init+0x80>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0b      	ldr	r2, [pc, #44]	@ (80013d8 <gpiob_init+0x80>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~MODE_PB1_1;
 80013b0:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <gpiob_init+0x80>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a08      	ldr	r2, [pc, #32]	@ (80013d8 <gpiob_init+0x80>)
 80013b6:	f023 0308 	bic.w	r3, r3, #8
 80013ba:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= MODE_PB1_0;
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <gpiob_init+0x80>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a05      	ldr	r2, [pc, #20]	@ (80013d8 <gpiob_init+0x80>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6013      	str	r3, [r2, #0]

}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020400 	.word	0x40020400

080013dc <__NVIC_EnableIRQ>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db0b      	blt.n	8001406 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	4907      	ldr	r1, [pc, #28]	@ (8001414 <__NVIC_EnableIRQ+0x38>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	2001      	movs	r0, #1
 80013fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e100 	.word	0xe000e100

08001418 <__NVIC_SetPriority>:
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	@ (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	@ (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <compute_uart_div>:

/********************* USART INTERRUPT FLAGS ************************************/

/***************************** USART 2 ******************************************/

uint16_t compute_uart_div ( uint32_t peripheralClock, uint32_t baudRate ){
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
	return ((peripheralClock + (baudRate/2U))/baudRate);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	085a      	lsrs	r2, r3, #1
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	441a      	add	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	fbb2 f3f3 	udiv	r3, r2, r3
 8001484:	b29b      	uxth	r3, r3
	/*return peripheralClock / ( 8 * 2 * baudRate );*/

}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <set_uart_baudrate>:

void set_uart_baudrate(USART_TypeDef *USART, uint32_t peripheralClock, uint32_t baudRate){
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
	USART->BRR = compute_uart_div(peripheralClock,baudRate);
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	68b8      	ldr	r0, [r7, #8]
 80014a2:	f7ff ffe3 	bl	800146c <compute_uart_div>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	609a      	str	r2, [r3, #8]
}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <uart2_rx_tx_init>:
 * 	Receive PIN - do not use DMA controller, use interrupt
 *
 *
 ************************** GPS MODULE ******************************
 */
void uart2_rx_tx_init(){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0

	/************** Configure UART2 GPIO PIN (PORT D) ***************/

	/* Enable access to PORTD */
	RCC->AHB1ENR |= RCC_GPIOD_EN;
 80014bc:	4b40      	ldr	r3, [pc, #256]	@ (80015c0 <uart2_rx_tx_init+0x108>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c0:	4a3f      	ldr	r2, [pc, #252]	@ (80015c0 <uart2_rx_tx_init+0x108>)
 80014c2:	f043 0308 	orr.w	r3, r3, #8
 80014c6:	6313      	str	r3, [r2, #48]	@ 0x30

	/************************ TRANSMIT PIN ******************************/

	/* Set PD5 to alternate function */
	GPIOD->MODER |= MODE_PD5_1;
 80014c8:	4b3e      	ldr	r3, [pc, #248]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a3d      	ldr	r2, [pc, #244]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 80014ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014d2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(MODE_PD5_0);
 80014d4:	4b3b      	ldr	r3, [pc, #236]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a3a      	ldr	r2, [pc, #232]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 80014da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80014de:	6013      	str	r3, [r2, #0]

	/* Set PD5 alternate function to TX */
	GPIOD->AFR[0] &= ~(AFRL5_3);
 80014e0:	4b38      	ldr	r3, [pc, #224]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	4a37      	ldr	r2, [pc, #220]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 80014e6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80014ea:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= AFRL5_2;
 80014ec:	4b35      	ldr	r3, [pc, #212]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4a34      	ldr	r2, [pc, #208]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 80014f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014f6:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= AFRL5_1;
 80014f8:	4b32      	ldr	r3, [pc, #200]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4a31      	ldr	r2, [pc, #196]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 80014fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001502:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= AFRL5_0;
 8001504:	4b2f      	ldr	r3, [pc, #188]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	4a2e      	ldr	r2, [pc, #184]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 800150a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800150e:	6213      	str	r3, [r2, #32]

	/************************* RECEIVE PIN *****************************/

	/* Set PD6 to alternate function */
	GPIOD->MODER |= MODE_PD6_1;
 8001510:	4b2c      	ldr	r3, [pc, #176]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a2b      	ldr	r2, [pc, #172]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 8001516:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800151a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(MODE_PD6_0);
 800151c:	4b29      	ldr	r3, [pc, #164]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a28      	ldr	r2, [pc, #160]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 8001522:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001526:	6013      	str	r3, [r2, #0]

	/* Set PD6 alternate function to RX (AF7) */
	GPIOD->AFR[0] &= ~(AFRL6_3);
 8001528:	4b26      	ldr	r3, [pc, #152]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4a25      	ldr	r2, [pc, #148]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 800152e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8001532:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= AFRL6_2;
 8001534:	4b23      	ldr	r3, [pc, #140]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4a22      	ldr	r2, [pc, #136]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 800153a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800153e:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= AFRL6_1;
 8001540:	4b20      	ldr	r3, [pc, #128]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4a1f      	ldr	r2, [pc, #124]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 8001546:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800154a:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= AFRL6_0;
 800154c:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	4a1c      	ldr	r2, [pc, #112]	@ (80015c4 <uart2_rx_tx_init+0x10c>)
 8001552:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001556:	6213      	str	r3, [r2, #32]

	/************************ Configure UART ***************************/

	/* Enable clock access to UART2 */
	RCC->APB1ENR |= RCC_USART2_EN;
 8001558:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <uart2_rx_tx_init+0x108>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155c:	4a18      	ldr	r2, [pc, #96]	@ (80015c0 <uart2_rx_tx_init+0x108>)
 800155e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001562:	6413      	str	r3, [r2, #64]	@ 0x40

	set_uart_baudrate(USART2,APB1_CLK,USART2_BAUDRATE);
 8001564:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001568:	4917      	ldr	r1, [pc, #92]	@ (80015c8 <uart2_rx_tx_init+0x110>)
 800156a:	4818      	ldr	r0, [pc, #96]	@ (80015cc <uart2_rx_tx_init+0x114>)
 800156c:	f7ff ff91 	bl	8001492 <set_uart_baudrate>

	/* Enable DMA for TX */
	USART2->CR3 = CR3_DMAT | CR3_DMAR;
 8001570:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <uart2_rx_tx_init+0x114>)
 8001572:	22c0      	movs	r2, #192	@ 0xc0
 8001574:	615a      	str	r2, [r3, #20]

	/* Configure transfer direction */
	USART2->CR1 = CR1_TE | CR1_RE;
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <uart2_rx_tx_init+0x114>)
 8001578:	220c      	movs	r2, #12
 800157a:	60da      	str	r2, [r3, #12]

	/* Clear all flags */
	USART2->SR &= ~SR_TC;
 800157c:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <uart2_rx_tx_init+0x114>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a12      	ldr	r2, [pc, #72]	@ (80015cc <uart2_rx_tx_init+0x114>)
 8001582:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001586:	6013      	str	r3, [r2, #0]
	USART2->SR &= ~SR_IDLE;
 8001588:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <uart2_rx_tx_init+0x114>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0f      	ldr	r2, [pc, #60]	@ (80015cc <uart2_rx_tx_init+0x114>)
 800158e:	f023 0310 	bic.w	r3, r3, #16
 8001592:	6013      	str	r3, [r2, #0]
	/*
	 * -> Receive interrupt enable
	 * -> TCIE transmission complete interrupt
	 *
	 */
	USART2->CR1 |= CR1_IDLEIE;
 8001594:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <uart2_rx_tx_init+0x114>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4a0c      	ldr	r2, [pc, #48]	@ (80015cc <uart2_rx_tx_init+0x114>)
 800159a:	f043 0310 	orr.w	r3, r3, #16
 800159e:	60d3      	str	r3, [r2, #12]

	/* Enable UART */
	USART2->CR1 |= CR1_UE;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <uart2_rx_tx_init+0x114>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <uart2_rx_tx_init+0x114>)
 80015a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015aa:	60d3      	str	r3, [r2, #12]


	/* Enable USART2 interrupt in NVIC */
	NVIC_SetPriority(USART2_IRQn,15);
 80015ac:	210f      	movs	r1, #15
 80015ae:	2026      	movs	r0, #38	@ 0x26
 80015b0:	f7ff ff32 	bl	8001418 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 80015b4:	2026      	movs	r0, #38	@ 0x26
 80015b6:	f7ff ff11 	bl	80013dc <__NVIC_EnableIRQ>

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020c00 	.word	0x40020c00
 80015c8:	0280de80 	.word	0x0280de80
 80015cc:	40004400 	.word	0x40004400

080015d0 <uart3_rx_tx_init>:

void uart3_rx_tx_init(void){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0

	/************** Configure UART3 GPIO PIN (PORT B) ***************/

	/* Enable access to PORTB */
	RCC->AHB1ENR |= RCC_GPIOB_EN;
 80015d4:	4b40      	ldr	r3, [pc, #256]	@ (80016d8 <uart3_rx_tx_init+0x108>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d8:	4a3f      	ldr	r2, [pc, #252]	@ (80016d8 <uart3_rx_tx_init+0x108>)
 80015da:	f043 0302 	orr.w	r3, r3, #2
 80015de:	6313      	str	r3, [r2, #48]	@ 0x30

	/************************ TRANSMIT PIN ******************************/

	/* Set PB10 to alternate function */
	GPIOB->MODER |= MODE_PB10_1;
 80015e0:	4b3e      	ldr	r3, [pc, #248]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a3d      	ldr	r2, [pc, #244]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 80015e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015ea:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~MODE_PB10_0;
 80015ec:	4b3b      	ldr	r3, [pc, #236]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a3a      	ldr	r2, [pc, #232]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 80015f2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80015f6:	6013      	str	r3, [r2, #0]

	/* Set PB10 alternate function to TX */
	GPIOB->AFR[1] &= ~AFRH10_3;
 80015f8:	4b38      	ldr	r3, [pc, #224]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 80015fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fc:	4a37      	ldr	r2, [pc, #220]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 80015fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001602:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= AFRH10_2;
 8001604:	4b35      	ldr	r3, [pc, #212]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 8001606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001608:	4a34      	ldr	r2, [pc, #208]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 800160a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800160e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= AFRH10_1;
 8001610:	4b32      	ldr	r3, [pc, #200]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 8001612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001614:	4a31      	ldr	r2, [pc, #196]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 8001616:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800161a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= AFRH10_0;
 800161c:	4b2f      	ldr	r3, [pc, #188]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 800161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001620:	4a2e      	ldr	r2, [pc, #184]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 8001622:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001626:	6253      	str	r3, [r2, #36]	@ 0x24

	/************************* RECEIVE PIN *****************************/

	/* Set PB11 to alternate function */
	GPIOB->MODER |= MODE_PB11_1;
 8001628:	4b2c      	ldr	r3, [pc, #176]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a2b      	ldr	r2, [pc, #172]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 800162e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001632:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~MODE_PB11_0;
 8001634:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a28      	ldr	r2, [pc, #160]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 800163a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800163e:	6013      	str	r3, [r2, #0]

	/* Set PB11 alternate function to RX */
	GPIOB->AFR[1] &= ~AFRH11_3;
 8001640:	4b26      	ldr	r3, [pc, #152]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 8001642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001644:	4a25      	ldr	r2, [pc, #148]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 8001646:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800164a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= AFRH11_2;
 800164c:	4b23      	ldr	r3, [pc, #140]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 800164e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001650:	4a22      	ldr	r2, [pc, #136]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 8001652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001656:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= AFRH11_1;
 8001658:	4b20      	ldr	r3, [pc, #128]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 800165a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165c:	4a1f      	ldr	r2, [pc, #124]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 800165e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001662:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= AFRH11_0;
 8001664:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 8001666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001668:	4a1c      	ldr	r2, [pc, #112]	@ (80016dc <uart3_rx_tx_init+0x10c>)
 800166a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800166e:	6253      	str	r3, [r2, #36]	@ 0x24

	/************************* Configure UART **************************/

	/* Enable UART3 access to clock */
	RCC->APB1ENR |= RCC_USART3_EN;
 8001670:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <uart3_rx_tx_init+0x108>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	4a18      	ldr	r2, [pc, #96]	@ (80016d8 <uart3_rx_tx_init+0x108>)
 8001676:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800167a:	6413      	str	r3, [r2, #64]	@ 0x40

	/* Set baudrate */
	set_uart_baudrate(USART3,APB1_CLK,USART3_BAUDRATE);
 800167c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001680:	4917      	ldr	r1, [pc, #92]	@ (80016e0 <uart3_rx_tx_init+0x110>)
 8001682:	4818      	ldr	r0, [pc, #96]	@ (80016e4 <uart3_rx_tx_init+0x114>)
 8001684:	f7ff ff05 	bl	8001492 <set_uart_baudrate>

	/* Select to use DMA module for UART */
	USART3->CR3 = CR3_DMAT | CR3_DMAR;
 8001688:	4b16      	ldr	r3, [pc, #88]	@ (80016e4 <uart3_rx_tx_init+0x114>)
 800168a:	22c0      	movs	r2, #192	@ 0xc0
 800168c:	615a      	str	r2, [r3, #20]

	/* Configure transfer direction */
	USART3->CR1 = CR1_TE | CR1_RE;
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <uart3_rx_tx_init+0x114>)
 8001690:	220c      	movs	r2, #12
 8001692:	60da      	str	r2, [r3, #12]

	/* Clear all flags */
	USART3->SR &= ~SR_TC;
 8001694:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <uart3_rx_tx_init+0x114>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <uart3_rx_tx_init+0x114>)
 800169a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800169e:	6013      	str	r3, [r2, #0]
	USART3->SR &= ~SR_IDLE;
 80016a0:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <uart3_rx_tx_init+0x114>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0f      	ldr	r2, [pc, #60]	@ (80016e4 <uart3_rx_tx_init+0x114>)
 80016a6:	f023 0310 	bic.w	r3, r3, #16
 80016aa:	6013      	str	r3, [r2, #0]

	/* Enable receive and transfer interrupt */
	/* USART3->CR1 |= CR1_TCIE | CR1_RXNEIE;*/
	USART3->CR1 |= CR1_IDLEIE;
 80016ac:	4b0d      	ldr	r3, [pc, #52]	@ (80016e4 <uart3_rx_tx_init+0x114>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4a0c      	ldr	r2, [pc, #48]	@ (80016e4 <uart3_rx_tx_init+0x114>)
 80016b2:	f043 0310 	orr.w	r3, r3, #16
 80016b6:	60d3      	str	r3, [r2, #12]

	/* Enable UART */
	USART3->CR1 |= CR1_UE;
 80016b8:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <uart3_rx_tx_init+0x114>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	4a09      	ldr	r2, [pc, #36]	@ (80016e4 <uart3_rx_tx_init+0x114>)
 80016be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016c2:	60d3      	str	r3, [r2, #12]

	/* Enable interrupt in NVIC */
	NVIC_SetPriority(USART3_IRQn,15);
 80016c4:	210f      	movs	r1, #15
 80016c6:	2027      	movs	r0, #39	@ 0x27
 80016c8:	f7ff fea6 	bl	8001418 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART3_IRQn);
 80016cc:	2027      	movs	r0, #39	@ 0x27
 80016ce:	f7ff fe85 	bl	80013dc <__NVIC_EnableIRQ>
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020400 	.word	0x40020400
 80016e0:	0280de80 	.word	0x0280de80
 80016e4:	40004800 	.word	0x40004800

080016e8 <uart5_rx_tx_init>:

void uart5_rx_tx_init(void){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0

	/* Configure GPIO pins (PORTD, PORTC) */

	/* Enable access to clock for pins PORTD and PORTC */
	RCC->AHB1ENR |= RCC_GPIOC_EN;
 80016ec:	4b43      	ldr	r3, [pc, #268]	@ (80017fc <uart5_rx_tx_init+0x114>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f0:	4a42      	ldr	r2, [pc, #264]	@ (80017fc <uart5_rx_tx_init+0x114>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_GPIOD_EN;
 80016f8:	4b40      	ldr	r3, [pc, #256]	@ (80017fc <uart5_rx_tx_init+0x114>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fc:	4a3f      	ldr	r2, [pc, #252]	@ (80017fc <uart5_rx_tx_init+0x114>)
 80016fe:	f043 0308 	orr.w	r3, r3, #8
 8001702:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Set GPIO PC12 mode to alternate mode */
	GPIOC->MODER |= MODE_PC12_1;
 8001704:	4b3e      	ldr	r3, [pc, #248]	@ (8001800 <uart5_rx_tx_init+0x118>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a3d      	ldr	r2, [pc, #244]	@ (8001800 <uart5_rx_tx_init+0x118>)
 800170a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800170e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~MODE_PC12_0;
 8001710:	4b3b      	ldr	r3, [pc, #236]	@ (8001800 <uart5_rx_tx_init+0x118>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a3a      	ldr	r2, [pc, #232]	@ (8001800 <uart5_rx_tx_init+0x118>)
 8001716:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800171a:	6013      	str	r3, [r2, #0]

	/* Set alternate function to usart tx */
	GPIOC->AFR[1] |= AFRH12_3;
 800171c:	4b38      	ldr	r3, [pc, #224]	@ (8001800 <uart5_rx_tx_init+0x118>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001720:	4a37      	ldr	r2, [pc, #220]	@ (8001800 <uart5_rx_tx_init+0x118>)
 8001722:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001726:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOC->AFR[1] &= ~AFRH12_2;
 8001728:	4b35      	ldr	r3, [pc, #212]	@ (8001800 <uart5_rx_tx_init+0x118>)
 800172a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172c:	4a34      	ldr	r2, [pc, #208]	@ (8001800 <uart5_rx_tx_init+0x118>)
 800172e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001732:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOC->AFR[1] &= ~AFRH12_1;
 8001734:	4b32      	ldr	r3, [pc, #200]	@ (8001800 <uart5_rx_tx_init+0x118>)
 8001736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001738:	4a31      	ldr	r2, [pc, #196]	@ (8001800 <uart5_rx_tx_init+0x118>)
 800173a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800173e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOC->AFR[1] &= ~AFRH12_0;
 8001740:	4b2f      	ldr	r3, [pc, #188]	@ (8001800 <uart5_rx_tx_init+0x118>)
 8001742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001744:	4a2e      	ldr	r2, [pc, #184]	@ (8001800 <uart5_rx_tx_init+0x118>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800174a:	6253      	str	r3, [r2, #36]	@ 0x24

	/* Set GPIO PD2 mode to alternate mode */
	GPIOD->MODER |= MODE_PD2_1;
 800174c:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <uart5_rx_tx_init+0x11c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a2c      	ldr	r2, [pc, #176]	@ (8001804 <uart5_rx_tx_init+0x11c>)
 8001752:	f043 0320 	orr.w	r3, r3, #32
 8001756:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~MODE_PD2_0;
 8001758:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <uart5_rx_tx_init+0x11c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a29      	ldr	r2, [pc, #164]	@ (8001804 <uart5_rx_tx_init+0x11c>)
 800175e:	f023 0310 	bic.w	r3, r3, #16
 8001762:	6013      	str	r3, [r2, #0]

	/* Set alternate function to usart rx AF8 */
	GPIOD->AFR[0] |= AFRL2_3;
 8001764:	4b27      	ldr	r3, [pc, #156]	@ (8001804 <uart5_rx_tx_init+0x11c>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4a26      	ldr	r2, [pc, #152]	@ (8001804 <uart5_rx_tx_init+0x11c>)
 800176a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800176e:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] &= ~AFRL2_2;
 8001770:	4b24      	ldr	r3, [pc, #144]	@ (8001804 <uart5_rx_tx_init+0x11c>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4a23      	ldr	r2, [pc, #140]	@ (8001804 <uart5_rx_tx_init+0x11c>)
 8001776:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800177a:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] &= ~AFRL2_1;
 800177c:	4b21      	ldr	r3, [pc, #132]	@ (8001804 <uart5_rx_tx_init+0x11c>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4a20      	ldr	r2, [pc, #128]	@ (8001804 <uart5_rx_tx_init+0x11c>)
 8001782:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001786:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] &= ~AFRL2_0;
 8001788:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <uart5_rx_tx_init+0x11c>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	4a1d      	ldr	r2, [pc, #116]	@ (8001804 <uart5_rx_tx_init+0x11c>)
 800178e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001792:	6213      	str	r3, [r2, #32]

	/* Configure UART */
	RCC->APB1ENR |= RCC_UART5_EN;
 8001794:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <uart5_rx_tx_init+0x114>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	4a18      	ldr	r2, [pc, #96]	@ (80017fc <uart5_rx_tx_init+0x114>)
 800179a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800179e:	6413      	str	r3, [r2, #64]	@ 0x40

	/* Set baudrate */
	set_uart_baudrate(UART5, APB1_CLK, UART5_BAUDRATE);
 80017a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017a4:	4918      	ldr	r1, [pc, #96]	@ (8001808 <uart5_rx_tx_init+0x120>)
 80017a6:	4819      	ldr	r0, [pc, #100]	@ (800180c <uart5_rx_tx_init+0x124>)
 80017a8:	f7ff fe73 	bl	8001492 <set_uart_baudrate>

	/* Enable DMA */
	UART5->CR3 = CR3_DMAT | CR3_DMAR;
 80017ac:	4b17      	ldr	r3, [pc, #92]	@ (800180c <uart5_rx_tx_init+0x124>)
 80017ae:	22c0      	movs	r2, #192	@ 0xc0
 80017b0:	615a      	str	r2, [r3, #20]

	/* Set transfer direction */
	UART5->CR1 = CR1_TE | CR1_RE;
 80017b2:	4b16      	ldr	r3, [pc, #88]	@ (800180c <uart5_rx_tx_init+0x124>)
 80017b4:	220c      	movs	r2, #12
 80017b6:	60da      	str	r2, [r3, #12]

	/* Clear all flags */
	UART5->SR &= ~SR_TC;
 80017b8:	4b14      	ldr	r3, [pc, #80]	@ (800180c <uart5_rx_tx_init+0x124>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a13      	ldr	r2, [pc, #76]	@ (800180c <uart5_rx_tx_init+0x124>)
 80017be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80017c2:	6013      	str	r3, [r2, #0]
	UART5->SR &= ~SR_IDLE;
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <uart5_rx_tx_init+0x124>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a10      	ldr	r2, [pc, #64]	@ (800180c <uart5_rx_tx_init+0x124>)
 80017ca:	f023 0310 	bic.w	r3, r3, #16
 80017ce:	6013      	str	r3, [r2, #0]

	/* Enable IDLE line interrupt */
	UART5->CR1 |= CR1_IDLEIE;
 80017d0:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <uart5_rx_tx_init+0x124>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	@ (800180c <uart5_rx_tx_init+0x124>)
 80017d6:	f043 0310 	orr.w	r3, r3, #16
 80017da:	60d3      	str	r3, [r2, #12]

	/* Enable UART */
	UART5->CR1 |= CR1_UE;
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <uart5_rx_tx_init+0x124>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <uart5_rx_tx_init+0x124>)
 80017e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017e6:	60d3      	str	r3, [r2, #12]

	/* Enable UART5 interrupt in NVIC */
	NVIC_SetPriority(UART5_IRQn,15);
 80017e8:	210f      	movs	r1, #15
 80017ea:	2035      	movs	r0, #53	@ 0x35
 80017ec:	f7ff fe14 	bl	8001418 <__NVIC_SetPriority>
	NVIC_EnableIRQ(UART5_IRQn);
 80017f0:	2035      	movs	r0, #53	@ 0x35
 80017f2:	f7ff fdf3 	bl	80013dc <__NVIC_EnableIRQ>
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020800 	.word	0x40020800
 8001804:	40020c00 	.word	0x40020c00
 8001808:	0280de80 	.word	0x0280de80
 800180c:	40005000 	.word	0x40005000

08001810 <dma1_init>:

void dma1_init(void){
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0

	/* Enable clock access to DMA1 */
	RCC->AHB1ENR |= RCC_DMA1_EN;
 8001814:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <dma1_init+0x30>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	4a09      	ldr	r2, [pc, #36]	@ (8001840 <dma1_init+0x30>)
 800181a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800181e:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Enable DMA interrupt in NVIC */
	/*NVIC_EnableIRQ(DMA1_Stream3_IRQn);*/

	/* Enable DMA Stream3 interrupt in NVIC */
	NVIC_SetPriority(DMA1_Stream3_IRQn,15);
 8001820:	210f      	movs	r1, #15
 8001822:	200e      	movs	r0, #14
 8001824:	f7ff fdf8 	bl	8001418 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001828:	200e      	movs	r0, #14
 800182a:	f7ff fdd7 	bl	80013dc <__NVIC_EnableIRQ>

	/* Enable DMA Stream7 interrupt in NVIC */
	NVIC_SetPriority(DMA1_Stream7_IRQn,15);
 800182e:	210f      	movs	r1, #15
 8001830:	202f      	movs	r0, #47	@ 0x2f
 8001832:	f7ff fdf1 	bl	8001418 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001836:	202f      	movs	r0, #47	@ 0x2f
 8001838:	f7ff fdd0 	bl	80013dc <__NVIC_EnableIRQ>
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800

08001844 <dma1_stream1_rx_config>:
	NVIC_SetPriority(DMA1_Stream0_IRQn,15);
	/* Enable DMA Stream5 interrupt in NVIC */
	NVIC_EnableIRQ(DMA1_Stream0_IRQn);
}

void dma1_stream1_rx_config(uint32_t dst_buffer){
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

	/* Disable DMA1 stream 1 */
	DMA1_Stream1->CR &= ~DMA_SXCR_EN;
 800184c:	4b2d      	ldr	r3, [pc, #180]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a2c      	ldr	r2, [pc, #176]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	6013      	str	r3, [r2, #0]

	/* Wait until EN bit is set to 0 */
	while ( DMA1_Stream1->CR & DMA_SXCR_EN ){}
 8001858:	bf00      	nop
 800185a:	4b2a      	ldr	r3, [pc, #168]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f9      	bne.n	800185a <dma1_stream1_rx_config+0x16>

	/* Clear all interrupt flags related to stream 1 */
	DMA1->LIFCR = LIFCR_CTCIF1 | LIFCR_CHTIF1 | LIFCR_CTEIF1 |
 8001866:	4b28      	ldr	r3, [pc, #160]	@ (8001908 <dma1_stream1_rx_config+0xc4>)
 8001868:	f44f 6274 	mov.w	r2, #3904	@ 0xf40
 800186c:	609a      	str	r2, [r3, #8]
			LIFCR_CDMEIF1 | LIFCR_CFEIF1;
	/* Writing 1 to each of those bits clears
	 * corresponding bit in interrupt register */

	/* Set peripheral address */
	DMA1_Stream1->PAR = (uint32_t)(&(USART3->DR));
 800186e:	4b25      	ldr	r3, [pc, #148]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 8001870:	4a26      	ldr	r2, [pc, #152]	@ (800190c <dma1_stream1_rx_config+0xc8>)
 8001872:	609a      	str	r2, [r3, #8]

	/* Set memory address */
	DMA1_Stream1->M0AR = (uint32_t)(dst_buffer);
 8001874:	4a23      	ldr	r2, [pc, #140]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	60d3      	str	r3, [r2, #12]

	/* Set number of transfers */
	DMA1_Stream1->NDTR = (uint16_t) BUFFER_SIZE_USART2;
 800187a:	4b22      	ldr	r3, [pc, #136]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 800187c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001880:	605a      	str	r2, [r3, #4]

	/* Select channel (4) */
	DMA1_Stream1->CR &= ~DMA_SXCR_CHSEL_0;
 8001882:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a1f      	ldr	r2, [pc, #124]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 8001888:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800188c:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR &= ~DMA_SXCR_CHSEL_1;
 800188e:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1c      	ldr	r2, [pc, #112]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 8001894:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001898:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SXCR_CHSEL_2;
 800189a:	4b1a      	ldr	r3, [pc, #104]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a19      	ldr	r2, [pc, #100]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 80018a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80018a4:	6013      	str	r3, [r2, #0]

	/* Enable memory address increment */
	DMA1_Stream1->CR |= DMA_SXCR_MINC;
 80018a6:	4b17      	ldr	r3, [pc, #92]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a16      	ldr	r2, [pc, #88]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 80018ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018b0:	6013      	str	r3, [r2, #0]

	/* Enable transfer complete interrupt */
	DMA1_Stream1->CR |= DMA_SXCR_TCIE | DMA_SXCR_HTIE;
 80018b2:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a13      	ldr	r2, [pc, #76]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 80018b8:	f043 0318 	orr.w	r3, r3, #24
 80018bc:	6013      	str	r3, [r2, #0]

	/* Enable circular mode */
	DMA1_Stream1->CR |= DMA_SXCR_CRC;
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a10      	ldr	r2, [pc, #64]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 80018c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c8:	6013      	str	r3, [r2, #0]

	/* Set transfer direction (peripheral to memory) */
	DMA1_Stream1->CR &= ~DMA_SXCR_DIR_1;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 80018d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80018d4:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR &= ~DMA_SXCR_DIR_0;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 80018dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80018e0:	6013      	str	r3, [r2, #0]

	/* Enable DMA stream */
	DMA1_Stream1->CR |= DMA_SXCR_EN;
 80018e2:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a07      	ldr	r2, [pc, #28]	@ (8001904 <dma1_stream1_rx_config+0xc0>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6013      	str	r3, [r2, #0]

	/* Enable DMA Stream1 interrupt in NVIC */
	NVIC_SetPriority(DMA1_Stream1_IRQn,15);
 80018ee:	210f      	movs	r1, #15
 80018f0:	200c      	movs	r0, #12
 80018f2:	f7ff fd91 	bl	8001418 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80018f6:	200c      	movs	r0, #12
 80018f8:	f7ff fd70 	bl	80013dc <__NVIC_EnableIRQ>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40026028 	.word	0x40026028
 8001908:	40026000 	.word	0x40026000
 800190c:	40004804 	.word	0x40004804

08001910 <dma1_stream3_tx_config>:

void dma1_stream3_tx_config(uint32_t source_buffer, uint32_t length){
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]


	/*Disable DMA1 stream 3*/
	DMA1_Stream3->CR &= ~DMA_SXCR_EN;
 800191a:	4b28      	ldr	r3, [pc, #160]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a27      	ldr	r2, [pc, #156]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	6013      	str	r3, [r2, #0]

	/* Wait until DMA1 stream3 enable bit is 0 */
	while((DMA1_Stream3->CR & DMA_SXCR_EN)) {}
 8001926:	bf00      	nop
 8001928:	4b24      	ldr	r3, [pc, #144]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f9      	bne.n	8001928 <dma1_stream3_tx_config+0x18>

	/* Clear all interrupt flags related to DMA1 stream 3 */
	DMA1->LIFCR = LIFCR_CTCIF3 | LIFCR_CHTIF3 | LIFCR_CTEIF3 | LIFCR_CDMEIF3 | LIFCR_CFEIF3;
 8001934:	4b22      	ldr	r3, [pc, #136]	@ (80019c0 <dma1_stream3_tx_config+0xb0>)
 8001936:	f04f 6274 	mov.w	r2, #255852544	@ 0xf400000
 800193a:	609a      	str	r2, [r3, #8]

	/* Set peripheral address */
	DMA1_Stream3->PAR = (uint32_t) (&(USART3->DR));
 800193c:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 800193e:	4a21      	ldr	r2, [pc, #132]	@ (80019c4 <dma1_stream3_tx_config+0xb4>)
 8001940:	609a      	str	r2, [r3, #8]

	/* Set memory address */
	DMA1_Stream3->M0AR = (uint32_t)(source_buffer);
 8001942:	4a1e      	ldr	r2, [pc, #120]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	60d3      	str	r3, [r2, #12]

	/* Set number of transfers */
	DMA1_Stream3->NDTR = length;
 8001948:	4a1c      	ldr	r2, [pc, #112]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	6053      	str	r3, [r2, #4]

	/* Select channel (4) */
	DMA1_Stream3->CR &= ~DMA_SXCR_CHSEL_0;
 800194e:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a1a      	ldr	r2, [pc, #104]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 8001954:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001958:	6013      	str	r3, [r2, #0]
	DMA1_Stream3->CR &= ~DMA_SXCR_CHSEL_1;
 800195a:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a17      	ldr	r2, [pc, #92]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 8001960:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001964:	6013      	str	r3, [r2, #0]
	DMA1_Stream3->CR |= DMA_SXCR_CHSEL_2;
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a14      	ldr	r2, [pc, #80]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 800196c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001970:	6013      	str	r3, [r2, #0]

	/* Enable memory address increment */
	DMA1_Stream3->CR |= DMA_SXCR_MINC;
 8001972:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a11      	ldr	r2, [pc, #68]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 8001978:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800197c:	6013      	str	r3, [r2, #0]

	/* Set transfer direction (memory to peripheral 01) */
	DMA1_Stream3->CR &= ~DMA_SXCR_DIR_1;
 800197e:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a0e      	ldr	r2, [pc, #56]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 8001984:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001988:	6013      	str	r3, [r2, #0]
	DMA1_Stream3->CR |= DMA_SXCR_DIR_0;
 800198a:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a0b      	ldr	r2, [pc, #44]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 8001990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001994:	6013      	str	r3, [r2, #0]

	DMA1_Stream3->CR |= DMA_SXCR_TCIE;
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a08      	ldr	r2, [pc, #32]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 800199c:	f043 0310 	orr.w	r3, r3, #16
 80019a0:	6013      	str	r3, [r2, #0]

	/* Enable DMA stream */
	DMA1_Stream3->CR |= DMA_SXCR_EN;
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a05      	ldr	r2, [pc, #20]	@ (80019bc <dma1_stream3_tx_config+0xac>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6013      	str	r3, [r2, #0]

}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40026058 	.word	0x40026058
 80019c0:	40026000 	.word	0x40026000
 80019c4:	40004804 	.word	0x40004804

080019c8 <dma1_stream5_rx_config>:

/********************** USART2 DMA STREAMS ***************************/
void dma1_stream5_rx_config(uint32_t rx_buffer){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

	/* Disable DMA1 stream 5 */
		DMA1_Stream5->CR &= ~ DMA_SXCR_EN;
 80019d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a2c      	ldr	r2, [pc, #176]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	6013      	str	r3, [r2, #0]

		/* Wait until EN bit is set to 0 */
		while ( DMA1_Stream5->CR & DMA_SXCR_EN ){}
 80019dc:	bf00      	nop
 80019de:	4b2a      	ldr	r3, [pc, #168]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f9      	bne.n	80019de <dma1_stream5_rx_config+0x16>

		/* Clear all interrupt flags related to stream 1 */
		DMA1->HIFCR = HIFCR_CTCIF5 | HIFCR_CHTIF5 |
 80019ea:	4b28      	ldr	r3, [pc, #160]	@ (8001a8c <dma1_stream5_rx_config+0xc4>)
 80019ec:	f44f 6274 	mov.w	r2, #3904	@ 0xf40
 80019f0:	60da      	str	r2, [r3, #12]

		/* Writing 1 to each of those bits clears
		 * corresponding bit in interrupt register */

		/* Set peripheral address */
		DMA1_Stream5->PAR = (uint32_t)(&(USART2->DR));
 80019f2:	4b25      	ldr	r3, [pc, #148]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 80019f4:	4a26      	ldr	r2, [pc, #152]	@ (8001a90 <dma1_stream5_rx_config+0xc8>)
 80019f6:	609a      	str	r2, [r3, #8]

		/* Set memory address */
		DMA1_Stream5->M0AR = (uint32_t)(rx_buffer);
 80019f8:	4a23      	ldr	r2, [pc, #140]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	60d3      	str	r3, [r2, #12]

		/* Set number of transfers */
		DMA1_Stream5->NDTR = (uint16_t) BUFFER_SIZE_USART2;
 80019fe:	4b22      	ldr	r3, [pc, #136]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a04:	605a      	str	r2, [r3, #4]

		/* Select channel (4) */
		DMA1_Stream5->CR |= DMA_SXCR_CHSEL_2;
 8001a06:	4b20      	ldr	r3, [pc, #128]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a0c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001a10:	6013      	str	r3, [r2, #0]
		DMA1_Stream5->CR &= ~DMA_SXCR_CHSEL_1;
 8001a12:	4b1d      	ldr	r3, [pc, #116]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a1c      	ldr	r2, [pc, #112]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a18:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001a1c:	6013      	str	r3, [r2, #0]
		DMA1_Stream5->CR &= ~DMA_SXCR_CHSEL_0;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a19      	ldr	r2, [pc, #100]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a24:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001a28:	6013      	str	r3, [r2, #0]

		/* Enable memory address increment */
		DMA1_Stream5->CR |= DMA_SXCR_MINC;
 8001a2a:	4b17      	ldr	r3, [pc, #92]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a16      	ldr	r2, [pc, #88]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a34:	6013      	str	r3, [r2, #0]

		/* Enable transfer complete interrupt */
		DMA1_Stream5->CR |= DMA_SXCR_TCIE | DMA_SXCR_HTIE;
 8001a36:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a13      	ldr	r2, [pc, #76]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a3c:	f043 0318 	orr.w	r3, r3, #24
 8001a40:	6013      	str	r3, [r2, #0]

		/* Enable circular mode */
		DMA1_Stream5->CR |= DMA_SXCR_CRC;
 8001a42:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a10      	ldr	r2, [pc, #64]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a4c:	6013      	str	r3, [r2, #0]

		/* Set transfer direction (peripheral to memory) */
		DMA1_Stream5->CR &= ~DMA_SXCR_DIR_1;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a0d      	ldr	r2, [pc, #52]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a58:	6013      	str	r3, [r2, #0]
		DMA1_Stream5->CR &= ~DMA_SXCR_DIR_0;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001a64:	6013      	str	r3, [r2, #0]

		/* Enable DMA stream */
		DMA1_Stream5->CR |= DMA_SXCR_EN;
 8001a66:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a07      	ldr	r2, [pc, #28]	@ (8001a88 <dma1_stream5_rx_config+0xc0>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6013      	str	r3, [r2, #0]

		NVIC_SetPriority(DMA1_Stream5_IRQn,15);
 8001a72:	210f      	movs	r1, #15
 8001a74:	2010      	movs	r0, #16
 8001a76:	f7ff fccf 	bl	8001418 <__NVIC_SetPriority>
		/* Enable DMA Stream5 interrupt in NVIC */
		NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a7a:	2010      	movs	r0, #16
 8001a7c:	f7ff fcae 	bl	80013dc <__NVIC_EnableIRQ>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40026088 	.word	0x40026088
 8001a8c:	40026000 	.word	0x40026000
 8001a90:	40004404 	.word	0x40004404

08001a94 <usart3_process_data>:

	}

}

void usart3_process_data ( uint8_t *ptr, size_t length, char *response ){
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]

	/* Copy length bytes to ptr */
	strncat(response,(char*)ptr, length);
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	68f9      	ldr	r1, [r7, #12]
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f006 fe86 	bl	80087b6 <strncat>
		while ( !(UART5->SR & SR_TXE) ) {}

		while(	!(UART5->SR & SR_TC )) {}

	}*/
}
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <usart3_dma_check_buffer>:
		ptr->old_pos = pos;
	}
	}
}

int usart3_dma_check_buffer( uart_ds *ptr, char *response ){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]

	size_t pos = BUFFER_SIZE_USART2 - (size_t) GET_DMA_DATA_LENGTH_USART3();
 8001abe:	4b23      	ldr	r3, [pc, #140]	@ (8001b4c <usart3_dma_check_buffer+0x98>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001ac6:	60fb      	str	r3, [r7, #12]
	DMA1_Stream1->NDTR = BUFFER_SIZE_USART2;
 8001ac8:	4b20      	ldr	r3, [pc, #128]	@ (8001b4c <usart3_dma_check_buffer+0x98>)
 8001aca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ace:	605a      	str	r2, [r3, #4]


	if ( pos >= 0 ){

		if ( pos != ptr->old_pos ){
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d02f      	beq.n	8001b3c <usart3_dma_check_buffer+0x88>

		if ( pos > ptr->old_pos ){
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d90e      	bls.n	8001b06 <usart3_dma_check_buffer+0x52>
			usart3_process_data(&(ptr->uart_rx_dma_buffer[ptr->old_pos]),pos - ptr->old_pos,response);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	18d0      	adds	r0, r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff ffc8 	bl	8001a94 <usart3_process_data>
 8001b04:	e016      	b.n	8001b34 <usart3_dma_check_buffer+0x80>
		}
		else{
			usart3_process_data(&(ptr->uart_rx_dma_buffer[ptr->old_pos]),BUFFER_SIZE_USART2 - ptr->old_pos,response);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	18d0      	adds	r0, r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b16:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f7ff ffb9 	bl	8001a94 <usart3_process_data>
			if ( pos > 0 ){
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <usart3_dma_check_buffer+0x80>
				usart3_process_data(&(ptr->uart_rx_dma_buffer[0]),pos, response);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	68f9      	ldr	r1, [r7, #12]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ffb0 	bl	8001a94 <usart3_process_data>
			}
		}

		ptr->old_pos = pos;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	}

	}

	return (int) strlen(response);
 8001b3c:	6838      	ldr	r0, [r7, #0]
 8001b3e:	f7fe fba7 	bl	8000290 <strlen>
 8001b42:	4603      	mov	r3, r0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40026028 	.word	0x40026028

08001b50 <DMA1_Stream6_IRQHandler>:

	return ret_code;
}


void DMA1_Stream6_IRQHandler(void){
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0

}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <count_r_n>:

extern SemaphoreHandle_t GSM_receiver;
extern SemaphoreHandle_t TX_cplt;
extern uart_ds usart3;

int count_r_n ( char *response, int r_n_number ){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]

	char *ptr;
	int number_of_occurences = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]

	ptr = strstr(response,"\r\n");
 8001b6e:	490c      	ldr	r1, [pc, #48]	@ (8001ba0 <count_r_n+0x40>)
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f006 fe45 	bl	8008800 <strstr>
 8001b76:	60f8      	str	r0, [r7, #12]

	while ( ptr != NULL ){
 8001b78:	e00a      	b.n	8001b90 <count_r_n+0x30>

		ptr += 2;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	60fb      	str	r3, [r7, #12]
		number_of_occurences++;
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	3301      	adds	r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
		ptr = strstr(ptr,"\r\n");
 8001b86:	4906      	ldr	r1, [pc, #24]	@ (8001ba0 <count_r_n+0x40>)
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f006 fe39 	bl	8008800 <strstr>
 8001b8e:	60f8      	str	r0, [r7, #12]
	while ( ptr != NULL ){
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f1      	bne.n	8001b7a <count_r_n+0x1a>

	}

	return number_of_occurences;
 8001b96:	68bb      	ldr	r3, [r7, #8]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	0800b360 	.word	0x0800b360

08001ba4 <receive_line_module>:

int receive_line_module (SemaphoreHandle_t sim_module,
		uart_ds *uart3, char *response,  int r_n_number ){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]

	int length = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
	response[0] = '\0';
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]

	while (1){

		/* Wait until new message has come */
		xSemaphoreTake(sim_module,portMAX_DELAY);
 8001bbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f002 fd6d 	bl	80046a0 <xQueueSemaphoreTake>

		usart3_dma_check_buffer(uart3,response);
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	68b8      	ldr	r0, [r7, #8]
 8001bca:	f7ff ff73 	bl	8001ab4 <usart3_dma_check_buffer>

		length = count_r_n(response,r_n_number);
 8001bce:	6839      	ldr	r1, [r7, #0]
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ffc5 	bl	8001b60 <count_r_n>
 8001bd6:	6178      	str	r0, [r7, #20]

		if ( length == r_n_number ){
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d101      	bne.n	8001be4 <receive_line_module+0x40>
			return 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	e005      	b.n	8001bf0 <receive_line_module+0x4c>
		} else if ( length > r_n_number ){
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dde7      	ble.n	8001bbc <receive_line_module+0x18>
			return -1;
 8001bec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
		}

	}

	return 0;
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <configure_module>:


	return 0;
}

int configure_module(){
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b0aa      	sub	sp, #168	@ 0xa8
 8001bfc:	af00      	add	r7, sp, #0

	char messg[64];
	char response[64];

	/* Handshake - check hardware */
	strcpy(messg,"AT\r\n");
 8001bfe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001c02:	4a9a      	ldr	r2, [pc, #616]	@ (8001e6c <configure_module+0x274>)
 8001c04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c08:	6018      	str	r0, [r3, #0]
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	7019      	strb	r1, [r3, #0]
	dma1_stream3_tx_config((uint32_t) messg, strlen(messg));
 8001c0e:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8001c12:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fb3a 	bl	8000290 <strlen>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4620      	mov	r0, r4
 8001c22:	f7ff fe75 	bl	8001910 <dma1_stream3_tx_config>

	xSemaphoreTake(TX_cplt, portMAX_DELAY);
 8001c26:	4b92      	ldr	r3, [pc, #584]	@ (8001e70 <configure_module+0x278>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 fd36 	bl	80046a0 <xQueueSemaphoreTake>
	receive_line_module(GSM_receiver,&usart3,response,2);
 8001c34:	4b8f      	ldr	r3, [pc, #572]	@ (8001e74 <configure_module+0x27c>)
 8001c36:	6818      	ldr	r0, [r3, #0]
 8001c38:	1d3a      	adds	r2, r7, #4
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	498e      	ldr	r1, [pc, #568]	@ (8001e78 <configure_module+0x280>)
 8001c3e:	f7ff ffb1 	bl	8001ba4 <receive_line_module>

	/* Enable full functionality of the modem */
	do {
		strcpy(messg,"AT+CFUN=1\r\n");
 8001c42:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001c46:	4a8d      	ldr	r2, [pc, #564]	@ (8001e7c <configure_module+0x284>)
 8001c48:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		dma1_stream3_tx_config((uint32_t) messg, strlen(messg));
 8001c4e:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8001c52:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fb1a 	bl	8000290 <strlen>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4620      	mov	r0, r4
 8001c62:	f7ff fe55 	bl	8001910 <dma1_stream3_tx_config>
		xSemaphoreTake(TX_cplt, portMAX_DELAY);
 8001c66:	4b82      	ldr	r3, [pc, #520]	@ (8001e70 <configure_module+0x278>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f002 fd16 	bl	80046a0 <xQueueSemaphoreTake>
		receive_line_module(GSM_receiver,&usart3,response,2);
 8001c74:	4b7f      	ldr	r3, [pc, #508]	@ (8001e74 <configure_module+0x27c>)
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	1d3a      	adds	r2, r7, #4
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	497e      	ldr	r1, [pc, #504]	@ (8001e78 <configure_module+0x280>)
 8001c7e:	f7ff ff91 	bl	8001ba4 <receive_line_module>
		GPIOB->ODR ^= ODR_PB14;
 8001c82:	4b7f      	ldr	r3, [pc, #508]	@ (8001e80 <configure_module+0x288>)
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	4a7e      	ldr	r2, [pc, #504]	@ (8001e80 <configure_module+0x288>)
 8001c88:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 8001c8c:	6153      	str	r3, [r2, #20]
	} while ( strstr(response,"OK") == NULL );
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	497c      	ldr	r1, [pc, #496]	@ (8001e84 <configure_module+0x28c>)
 8001c92:	4618      	mov	r0, r3
 8001c94:	f006 fdb4 	bl	8008800 <strstr>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0d1      	beq.n	8001c42 <configure_module+0x4a>

	GPIOB->ODR &= ~ODR_PB14;
 8001c9e:	4b78      	ldr	r3, [pc, #480]	@ (8001e80 <configure_module+0x288>)
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	4a77      	ldr	r2, [pc, #476]	@ (8001e80 <configure_module+0x288>)
 8001ca4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ca8:	6153      	str	r3, [r2, #20]


	/* Check if SIM is ready to action */
	do {
		strcpy(messg,"AT+CPIN?\r\n");
 8001caa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001cae:	4a76      	ldr	r2, [pc, #472]	@ (8001e88 <configure_module+0x290>)
 8001cb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cb2:	c303      	stmia	r3!, {r0, r1}
 8001cb4:	801a      	strh	r2, [r3, #0]
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	0c12      	lsrs	r2, r2, #16
 8001cba:	701a      	strb	r2, [r3, #0]
		dma1_stream3_tx_config((uint32_t) messg, strlen(messg));
 8001cbc:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8001cc0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fae3 	bl	8000290 <strlen>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f7ff fe1e 	bl	8001910 <dma1_stream3_tx_config>
		xSemaphoreTake(TX_cplt, portMAX_DELAY);
 8001cd4:	4b66      	ldr	r3, [pc, #408]	@ (8001e70 <configure_module+0x278>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f002 fcdf 	bl	80046a0 <xQueueSemaphoreTake>
		receive_line_module(GSM_receiver,&usart3,response,3);
 8001ce2:	4b64      	ldr	r3, [pc, #400]	@ (8001e74 <configure_module+0x27c>)
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	1d3a      	adds	r2, r7, #4
 8001ce8:	2303      	movs	r3, #3
 8001cea:	4963      	ldr	r1, [pc, #396]	@ (8001e78 <configure_module+0x280>)
 8001cec:	f7ff ff5a 	bl	8001ba4 <receive_line_module>
		GPIOB->ODR ^= ODR_PB14;
 8001cf0:	4b63      	ldr	r3, [pc, #396]	@ (8001e80 <configure_module+0x288>)
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	4a62      	ldr	r2, [pc, #392]	@ (8001e80 <configure_module+0x288>)
 8001cf6:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 8001cfa:	6153      	str	r3, [r2, #20]

		while ( !(UART5->SR & SR_TXE) ) {}
 8001cfc:	bf00      	nop
 8001cfe:	4b63      	ldr	r3, [pc, #396]	@ (8001e8c <configure_module+0x294>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f9      	beq.n	8001cfe <configure_module+0x106>

			while(	!(UART5->SR & SR_TC )) {}
 8001d0a:	bf00      	nop
 8001d0c:	4b5f      	ldr	r3, [pc, #380]	@ (8001e8c <configure_module+0x294>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f9      	beq.n	8001d0c <configure_module+0x114>


			for ( size_t i = 0; i < strlen(response); ++i ){
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001d1e:	e019      	b.n	8001d54 <configure_module+0x15c>

				UART5->DR = response[i];
 8001d20:	1d3a      	adds	r2, r7, #4
 8001d22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d26:	4413      	add	r3, r2
 8001d28:	781a      	ldrb	r2, [r3, #0]
 8001d2a:	4b58      	ldr	r3, [pc, #352]	@ (8001e8c <configure_module+0x294>)
 8001d2c:	605a      	str	r2, [r3, #4]

				while ( !(UART5->SR & SR_TXE) ) {}
 8001d2e:	bf00      	nop
 8001d30:	4b56      	ldr	r3, [pc, #344]	@ (8001e8c <configure_module+0x294>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f9      	beq.n	8001d30 <configure_module+0x138>

				while(	!(UART5->SR & SR_TC )) {}
 8001d3c:	bf00      	nop
 8001d3e:	4b53      	ldr	r3, [pc, #332]	@ (8001e8c <configure_module+0x294>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f9      	beq.n	8001d3e <configure_module+0x146>
			for ( size_t i = 0; i < strlen(response); ++i ){
 8001d4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fa9a 	bl	8000290 <strlen>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d3dc      	bcc.n	8001d20 <configure_module+0x128>

		}
	} while ( strstr(response,": READY") == NULL );
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	4949      	ldr	r1, [pc, #292]	@ (8001e90 <configure_module+0x298>)
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f006 fd48 	bl	8008800 <strstr>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d099      	beq.n	8001caa <configure_module+0xb2>

	GPIOB->ODR &= ~ODR_PB14;
 8001d76:	4b42      	ldr	r3, [pc, #264]	@ (8001e80 <configure_module+0x288>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	4a41      	ldr	r2, [pc, #260]	@ (8001e80 <configure_module+0x288>)
 8001d7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d80:	6153      	str	r3, [r2, #20]

	while ( !(UART5->SR & SR_TXE) ) {}
 8001d82:	bf00      	nop
 8001d84:	4b41      	ldr	r3, [pc, #260]	@ (8001e8c <configure_module+0x294>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f9      	beq.n	8001d84 <configure_module+0x18c>

		while(	!(UART5->SR & SR_TC )) {}
 8001d90:	bf00      	nop
 8001d92:	4b3e      	ldr	r3, [pc, #248]	@ (8001e8c <configure_module+0x294>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f9      	beq.n	8001d92 <configure_module+0x19a>


		for ( size_t i = 0; i < strlen(response); ++i ){
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001da4:	e019      	b.n	8001dda <configure_module+0x1e2>

			UART5->DR = response[i];
 8001da6:	1d3a      	adds	r2, r7, #4
 8001da8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001dac:	4413      	add	r3, r2
 8001dae:	781a      	ldrb	r2, [r3, #0]
 8001db0:	4b36      	ldr	r3, [pc, #216]	@ (8001e8c <configure_module+0x294>)
 8001db2:	605a      	str	r2, [r3, #4]

			while ( !(UART5->SR & SR_TXE) ) {}
 8001db4:	bf00      	nop
 8001db6:	4b35      	ldr	r3, [pc, #212]	@ (8001e8c <configure_module+0x294>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f9      	beq.n	8001db6 <configure_module+0x1be>

			while(	!(UART5->SR & SR_TC )) {}
 8001dc2:	bf00      	nop
 8001dc4:	4b31      	ldr	r3, [pc, #196]	@ (8001e8c <configure_module+0x294>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f9      	beq.n	8001dc4 <configure_module+0x1cc>
		for ( size_t i = 0; i < strlen(response); ++i ){
 8001dd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fa57 	bl	8000290 <strlen>
 8001de2:	4602      	mov	r2, r0
 8001de4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d3dc      	bcc.n	8001da6 <configure_module+0x1ae>

	}

	/* Set APN name */
	do {
		strcpy(messg,"AT+CSTT=\"internet\",\"\",\"\"\r\n");
 8001dec:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001df0:	4a28      	ldr	r2, [pc, #160]	@ (8001e94 <configure_module+0x29c>)
 8001df2:	461c      	mov	r4, r3
 8001df4:	4615      	mov	r5, r2
 8001df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001dfe:	c403      	stmia	r4!, {r0, r1}
 8001e00:	8022      	strh	r2, [r4, #0]
 8001e02:	3402      	adds	r4, #2
 8001e04:	0c13      	lsrs	r3, r2, #16
 8001e06:	7023      	strb	r3, [r4, #0]
		dma1_stream3_tx_config((uint32_t) messg, strlen(messg));
 8001e08:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8001e0c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fa3d 	bl	8000290 <strlen>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	f7ff fd78 	bl	8001910 <dma1_stream3_tx_config>
		xSemaphoreTake(TX_cplt, portMAX_DELAY);
 8001e20:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <configure_module+0x278>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 fc39 	bl	80046a0 <xQueueSemaphoreTake>
		receive_line_module(GSM_receiver,&usart3,response,2);
 8001e2e:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <configure_module+0x27c>)
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	1d3a      	adds	r2, r7, #4
 8001e34:	2302      	movs	r3, #2
 8001e36:	4910      	ldr	r1, [pc, #64]	@ (8001e78 <configure_module+0x280>)
 8001e38:	f7ff feb4 	bl	8001ba4 <receive_line_module>
		GPIOB->ODR ^= ODR_PB14;
 8001e3c:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <configure_module+0x288>)
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	4a0f      	ldr	r2, [pc, #60]	@ (8001e80 <configure_module+0x288>)
 8001e42:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 8001e46:	6153      	str	r3, [r2, #20]

		while ( !(UART5->SR & SR_TXE) ) {}
 8001e48:	bf00      	nop
 8001e4a:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <configure_module+0x294>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f9      	beq.n	8001e4a <configure_module+0x252>

			while(	!(UART5->SR & SR_TC )) {}
 8001e56:	bf00      	nop
 8001e58:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <configure_module+0x294>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f9      	beq.n	8001e58 <configure_module+0x260>


			for ( size_t i = 0; i < strlen(response); ++i ){
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001e6a:	e02f      	b.n	8001ecc <configure_module+0x2d4>
 8001e6c:	0800b364 	.word	0x0800b364
 8001e70:	2000060c 	.word	0x2000060c
 8001e74:	20000608 	.word	0x20000608
 8001e78:	200003f8 	.word	0x200003f8
 8001e7c:	0800b36c 	.word	0x0800b36c
 8001e80:	40020400 	.word	0x40020400
 8001e84:	0800b378 	.word	0x0800b378
 8001e88:	0800b37c 	.word	0x0800b37c
 8001e8c:	40005000 	.word	0x40005000
 8001e90:	0800b388 	.word	0x0800b388
 8001e94:	0800b390 	.word	0x0800b390

				UART5->DR = response[i];
 8001e98:	1d3a      	adds	r2, r7, #4
 8001e9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e9e:	4413      	add	r3, r2
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	4b9f      	ldr	r3, [pc, #636]	@ (8002120 <configure_module+0x528>)
 8001ea4:	605a      	str	r2, [r3, #4]

				while ( !(UART5->SR & SR_TXE) ) {}
 8001ea6:	bf00      	nop
 8001ea8:	4b9d      	ldr	r3, [pc, #628]	@ (8002120 <configure_module+0x528>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f9      	beq.n	8001ea8 <configure_module+0x2b0>

				while(	!(UART5->SR & SR_TC )) {}
 8001eb4:	bf00      	nop
 8001eb6:	4b9a      	ldr	r3, [pc, #616]	@ (8002120 <configure_module+0x528>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f9      	beq.n	8001eb6 <configure_module+0x2be>
			for ( size_t i = 0; i < strlen(response); ++i ){
 8001ec2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe f9de 	bl	8000290 <strlen>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d3dc      	bcc.n	8001e98 <configure_module+0x2a0>

		}
	} while ( strstr(response,"internet") == NULL );
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	4990      	ldr	r1, [pc, #576]	@ (8002124 <configure_module+0x52c>)
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f006 fc8c 	bl	8008800 <strstr>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f43f af7e 	beq.w	8001dec <configure_module+0x1f4>

	GPIOB->ODR &= ~ODR_PB14;
 8001ef0:	4b8d      	ldr	r3, [pc, #564]	@ (8002128 <configure_module+0x530>)
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	4a8c      	ldr	r2, [pc, #560]	@ (8002128 <configure_module+0x530>)
 8001ef6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001efa:	6153      	str	r3, [r2, #20]

	while ( !(UART5->SR & SR_TXE) ) {}
 8001efc:	bf00      	nop
 8001efe:	4b88      	ldr	r3, [pc, #544]	@ (8002120 <configure_module+0x528>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f9      	beq.n	8001efe <configure_module+0x306>

	while(	!(UART5->SR & SR_TC )) {}
 8001f0a:	bf00      	nop
 8001f0c:	4b84      	ldr	r3, [pc, #528]	@ (8002120 <configure_module+0x528>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f9      	beq.n	8001f0c <configure_module+0x314>


	for ( size_t i = 0; i < strlen(response); ++i ){
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f1e:	e019      	b.n	8001f54 <configure_module+0x35c>

		UART5->DR = response[i];
 8001f20:	1d3a      	adds	r2, r7, #4
 8001f22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f26:	4413      	add	r3, r2
 8001f28:	781a      	ldrb	r2, [r3, #0]
 8001f2a:	4b7d      	ldr	r3, [pc, #500]	@ (8002120 <configure_module+0x528>)
 8001f2c:	605a      	str	r2, [r3, #4]

		while ( !(UART5->SR & SR_TXE) ) {}
 8001f2e:	bf00      	nop
 8001f30:	4b7b      	ldr	r3, [pc, #492]	@ (8002120 <configure_module+0x528>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f9      	beq.n	8001f30 <configure_module+0x338>

		while(	!(UART5->SR & SR_TC )) {}
 8001f3c:	bf00      	nop
 8001f3e:	4b78      	ldr	r3, [pc, #480]	@ (8002120 <configure_module+0x528>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f9      	beq.n	8001f3e <configure_module+0x346>
	for ( size_t i = 0; i < strlen(response); ++i ){
 8001f4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe f99a 	bl	8000290 <strlen>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d3dc      	bcc.n	8001f20 <configure_module+0x328>



	/* Start wireless connection */
	do {
		strcpy(messg,"AT+CIICR\r\n");
 8001f66:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f6a:	4a70      	ldr	r2, [pc, #448]	@ (800212c <configure_module+0x534>)
 8001f6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f6e:	c303      	stmia	r3!, {r0, r1}
 8001f70:	801a      	strh	r2, [r3, #0]
 8001f72:	3302      	adds	r3, #2
 8001f74:	0c12      	lsrs	r2, r2, #16
 8001f76:	701a      	strb	r2, [r3, #0]
		dma1_stream3_tx_config((uint32_t) messg, strlen(messg));
 8001f78:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8001f7c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe f985 	bl	8000290 <strlen>
 8001f86:	4603      	mov	r3, r0
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	f7ff fcc0 	bl	8001910 <dma1_stream3_tx_config>
		xSemaphoreTake(TX_cplt, portMAX_DELAY);
 8001f90:	4b67      	ldr	r3, [pc, #412]	@ (8002130 <configure_module+0x538>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f002 fb81 	bl	80046a0 <xQueueSemaphoreTake>
		receive_line_module(GSM_receiver,&usart3,response,2);
 8001f9e:	4b65      	ldr	r3, [pc, #404]	@ (8002134 <configure_module+0x53c>)
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	1d3a      	adds	r2, r7, #4
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	4964      	ldr	r1, [pc, #400]	@ (8002138 <configure_module+0x540>)
 8001fa8:	f7ff fdfc 	bl	8001ba4 <receive_line_module>
		GPIOB->ODR ^= ODR_PB14;
 8001fac:	4b5e      	ldr	r3, [pc, #376]	@ (8002128 <configure_module+0x530>)
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	4a5d      	ldr	r2, [pc, #372]	@ (8002128 <configure_module+0x530>)
 8001fb2:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 8001fb6:	6153      	str	r3, [r2, #20]

		while ( !(UART5->SR & SR_TXE) ) {}
 8001fb8:	bf00      	nop
 8001fba:	4b59      	ldr	r3, [pc, #356]	@ (8002120 <configure_module+0x528>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f9      	beq.n	8001fba <configure_module+0x3c2>

			while(	!(UART5->SR & SR_TC )) {}
 8001fc6:	bf00      	nop
 8001fc8:	4b55      	ldr	r3, [pc, #340]	@ (8002120 <configure_module+0x528>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f9      	beq.n	8001fc8 <configure_module+0x3d0>


			for ( size_t i = 0; i < strlen(response); ++i ){
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001fda:	e019      	b.n	8002010 <configure_module+0x418>

				UART5->DR = response[i];
 8001fdc:	1d3a      	adds	r2, r7, #4
 8001fde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001fe2:	4413      	add	r3, r2
 8001fe4:	781a      	ldrb	r2, [r3, #0]
 8001fe6:	4b4e      	ldr	r3, [pc, #312]	@ (8002120 <configure_module+0x528>)
 8001fe8:	605a      	str	r2, [r3, #4]

				while ( !(UART5->SR & SR_TXE) ) {}
 8001fea:	bf00      	nop
 8001fec:	4b4c      	ldr	r3, [pc, #304]	@ (8002120 <configure_module+0x528>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f9      	beq.n	8001fec <configure_module+0x3f4>

				while(	!(UART5->SR & SR_TC )) {}
 8001ff8:	bf00      	nop
 8001ffa:	4b49      	ldr	r3, [pc, #292]	@ (8002120 <configure_module+0x528>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f9      	beq.n	8001ffa <configure_module+0x402>
			for ( size_t i = 0; i < strlen(response); ++i ){
 8002006:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800200a:	3301      	adds	r3, #1
 800200c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe f93c 	bl	8000290 <strlen>
 8002018:	4602      	mov	r2, r0
 800201a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800201e:	4293      	cmp	r3, r2
 8002020:	d3dc      	bcc.n	8001fdc <configure_module+0x3e4>

		}
	} while ( strstr(response,"OK") == NULL );
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	4945      	ldr	r1, [pc, #276]	@ (800213c <configure_module+0x544>)
 8002026:	4618      	mov	r0, r3
 8002028:	f006 fbea 	bl	8008800 <strstr>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d099      	beq.n	8001f66 <configure_module+0x36e>

	GPIOB->ODR &= ~ODR_PB14;
 8002032:	4b3d      	ldr	r3, [pc, #244]	@ (8002128 <configure_module+0x530>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	4a3c      	ldr	r2, [pc, #240]	@ (8002128 <configure_module+0x530>)
 8002038:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800203c:	6153      	str	r3, [r2, #20]

	while ( !(UART5->SR & SR_TXE) ) {}
 800203e:	bf00      	nop
 8002040:	4b37      	ldr	r3, [pc, #220]	@ (8002120 <configure_module+0x528>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f9      	beq.n	8002040 <configure_module+0x448>

		while(	!(UART5->SR & SR_TC )) {}
 800204c:	bf00      	nop
 800204e:	4b34      	ldr	r3, [pc, #208]	@ (8002120 <configure_module+0x528>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f9      	beq.n	800204e <configure_module+0x456>


		for ( size_t i = 0; i < strlen(response); ++i ){
 800205a:	2300      	movs	r3, #0
 800205c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002060:	e019      	b.n	8002096 <configure_module+0x49e>

			UART5->DR = response[i];
 8002062:	1d3a      	adds	r2, r7, #4
 8002064:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002068:	4413      	add	r3, r2
 800206a:	781a      	ldrb	r2, [r3, #0]
 800206c:	4b2c      	ldr	r3, [pc, #176]	@ (8002120 <configure_module+0x528>)
 800206e:	605a      	str	r2, [r3, #4]

			while ( !(UART5->SR & SR_TXE) ) {}
 8002070:	bf00      	nop
 8002072:	4b2b      	ldr	r3, [pc, #172]	@ (8002120 <configure_module+0x528>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f9      	beq.n	8002072 <configure_module+0x47a>

			while(	!(UART5->SR & SR_TC )) {}
 800207e:	bf00      	nop
 8002080:	4b27      	ldr	r3, [pc, #156]	@ (8002120 <configure_module+0x528>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f9      	beq.n	8002080 <configure_module+0x488>
		for ( size_t i = 0; i < strlen(response); ++i ){
 800208c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002090:	3301      	adds	r3, #1
 8002092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe f8f9 	bl	8000290 <strlen>
 800209e:	4602      	mov	r2, r0
 80020a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d3dc      	bcc.n	8002062 <configure_module+0x46a>

	}


	do {
		strcpy(messg,"AT+CIFSR\r\n");
 80020a8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80020ac:	4a24      	ldr	r2, [pc, #144]	@ (8002140 <configure_module+0x548>)
 80020ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80020b0:	c303      	stmia	r3!, {r0, r1}
 80020b2:	801a      	strh	r2, [r3, #0]
 80020b4:	3302      	adds	r3, #2
 80020b6:	0c12      	lsrs	r2, r2, #16
 80020b8:	701a      	strb	r2, [r3, #0]
		dma1_stream3_tx_config((uint32_t) messg, strlen(messg));
 80020ba:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 80020be:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe f8e4 	bl	8000290 <strlen>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4619      	mov	r1, r3
 80020cc:	4620      	mov	r0, r4
 80020ce:	f7ff fc1f 	bl	8001910 <dma1_stream3_tx_config>
		xSemaphoreTake(TX_cplt, portMAX_DELAY);
 80020d2:	4b17      	ldr	r3, [pc, #92]	@ (8002130 <configure_module+0x538>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020da:	4618      	mov	r0, r3
 80020dc:	f002 fae0 	bl	80046a0 <xQueueSemaphoreTake>
		receive_line_module(GSM_receiver,&usart3,response,2);
 80020e0:	4b14      	ldr	r3, [pc, #80]	@ (8002134 <configure_module+0x53c>)
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	1d3a      	adds	r2, r7, #4
 80020e6:	2302      	movs	r3, #2
 80020e8:	4913      	ldr	r1, [pc, #76]	@ (8002138 <configure_module+0x540>)
 80020ea:	f7ff fd5b 	bl	8001ba4 <receive_line_module>
		GPIOB->ODR ^= ODR_PB14;
 80020ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002128 <configure_module+0x530>)
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	4a0d      	ldr	r2, [pc, #52]	@ (8002128 <configure_module+0x530>)
 80020f4:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 80020f8:	6153      	str	r3, [r2, #20]

		while ( !(UART5->SR & SR_TXE) ) {}
 80020fa:	bf00      	nop
 80020fc:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <configure_module+0x528>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f9      	beq.n	80020fc <configure_module+0x504>

			while(	!(UART5->SR & SR_TC )) {}
 8002108:	bf00      	nop
 800210a:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <configure_module+0x528>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f9      	beq.n	800210a <configure_module+0x512>


			for ( size_t i = 0; i < strlen(response); ++i ){
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800211c:	e02c      	b.n	8002178 <configure_module+0x580>
 800211e:	bf00      	nop
 8002120:	40005000 	.word	0x40005000
 8002124:	0800b3ac 	.word	0x0800b3ac
 8002128:	40020400 	.word	0x40020400
 800212c:	0800b3b8 	.word	0x0800b3b8
 8002130:	2000060c 	.word	0x2000060c
 8002134:	20000608 	.word	0x20000608
 8002138:	200003f8 	.word	0x200003f8
 800213c:	0800b378 	.word	0x0800b378
 8002140:	0800b3c4 	.word	0x0800b3c4

				UART5->DR = response[i];
 8002144:	1d3a      	adds	r2, r7, #4
 8002146:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800214a:	4413      	add	r3, r2
 800214c:	781a      	ldrb	r2, [r3, #0]
 800214e:	4b3b      	ldr	r3, [pc, #236]	@ (800223c <configure_module+0x644>)
 8002150:	605a      	str	r2, [r3, #4]

				while ( !(UART5->SR & SR_TXE) ) {}
 8002152:	bf00      	nop
 8002154:	4b39      	ldr	r3, [pc, #228]	@ (800223c <configure_module+0x644>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f9      	beq.n	8002154 <configure_module+0x55c>

				while(	!(UART5->SR & SR_TC )) {}
 8002160:	bf00      	nop
 8002162:	4b36      	ldr	r3, [pc, #216]	@ (800223c <configure_module+0x644>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f9      	beq.n	8002162 <configure_module+0x56a>
			for ( size_t i = 0; i < strlen(response); ++i ){
 800216e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002172:	3301      	adds	r3, #1
 8002174:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe f888 	bl	8000290 <strlen>
 8002180:	4602      	mov	r2, r0
 8002182:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002186:	4293      	cmp	r3, r2
 8002188:	d3dc      	bcc.n	8002144 <configure_module+0x54c>

		}
	} while ( strstr(response,"OK") == NULL );
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	492c      	ldr	r1, [pc, #176]	@ (8002240 <configure_module+0x648>)
 800218e:	4618      	mov	r0, r3
 8002190:	f006 fb36 	bl	8008800 <strstr>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d086      	beq.n	80020a8 <configure_module+0x4b0>

	GPIOB->ODR &= ~ODR_PB14;
 800219a:	4b2a      	ldr	r3, [pc, #168]	@ (8002244 <configure_module+0x64c>)
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	4a29      	ldr	r2, [pc, #164]	@ (8002244 <configure_module+0x64c>)
 80021a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021a4:	6153      	str	r3, [r2, #20]

	char *ptr;
	ptr = strstr(response,"\r\n");
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	4927      	ldr	r1, [pc, #156]	@ (8002248 <configure_module+0x650>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	f006 fb28 	bl	8008800 <strstr>
 80021b0:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	ptr += 2;
 80021b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021b8:	3302      	adds	r3, #2
 80021ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	while ( !(UART5->SR & SR_TXE) ) {}
 80021be:	bf00      	nop
 80021c0:	4b1e      	ldr	r3, [pc, #120]	@ (800223c <configure_module+0x644>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f9      	beq.n	80021c0 <configure_module+0x5c8>

		while(	!(UART5->SR & SR_TC )) {}
 80021cc:	bf00      	nop
 80021ce:	4b1b      	ldr	r3, [pc, #108]	@ (800223c <configure_module+0x644>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f9      	beq.n	80021ce <configure_module+0x5d6>


		for ( size_t i = 0; i < strlen(response); ++i ){
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80021e0:	e019      	b.n	8002216 <configure_module+0x61e>

			UART5->DR = response[i];
 80021e2:	1d3a      	adds	r2, r7, #4
 80021e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021e8:	4413      	add	r3, r2
 80021ea:	781a      	ldrb	r2, [r3, #0]
 80021ec:	4b13      	ldr	r3, [pc, #76]	@ (800223c <configure_module+0x644>)
 80021ee:	605a      	str	r2, [r3, #4]

			while ( !(UART5->SR & SR_TXE) ) {}
 80021f0:	bf00      	nop
 80021f2:	4b12      	ldr	r3, [pc, #72]	@ (800223c <configure_module+0x644>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f9      	beq.n	80021f2 <configure_module+0x5fa>

			while(	!(UART5->SR & SR_TC )) {}
 80021fe:	bf00      	nop
 8002200:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <configure_module+0x644>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f9      	beq.n	8002200 <configure_module+0x608>
		for ( size_t i = 0; i < strlen(response); ++i ){
 800220c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002210:	3301      	adds	r3, #1
 8002212:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe f839 	bl	8000290 <strlen>
 800221e:	4602      	mov	r2, r0
 8002220:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002224:	4293      	cmp	r3, r2
 8002226:	d3dc      	bcc.n	80021e2 <configure_module+0x5ea>
	xSemaphoreTake(GSM_receiver,portMAX_DELAY);

	vTaskDelay(5000);
	usart3_dma_check_buffer(&usart3);*/

	vTaskDelay(2000);
 8002228:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800222c:	f002 fe8c 	bl	8004f48 <vTaskDelay>





	return 0;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	37a8      	adds	r7, #168	@ 0xa8
 8002236:	46bd      	mov	sp, r7
 8002238:	bdb0      	pop	{r4, r5, r7, pc}
 800223a:	bf00      	nop
 800223c:	40005000 	.word	0x40005000
 8002240:	0800b378 	.word	0x0800b378
 8002244:	40020400 	.word	0x40020400
 8002248:	0800b360 	.word	0x0800b360

0800224c <main>:
void obd_module(void *parameters);
void send_task(void *parameters );


int main(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af02      	add	r7, sp, #8

	/* HAL_Init contains NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4) */
	HAL_Init();
 8002252:	f000 fc49 	bl	8002ae8 <HAL_Init>
	SystemClock_Config();
 8002256:	f000 fa03 	bl	8002660 <SystemClock_Config>

	gpiob_init(); /* Init user's LED's */
 800225a:	f7ff f87d 	bl	8001358 <gpiob_init>

	/* Create QUEUE's */
	if ( (gpsReceiver = xQueueCreate(QUEUE_LENGTH,sizeof(uint8_t))) == NULL ){
 800225e:	2200      	movs	r2, #0
 8002260:	2101      	movs	r1, #1
 8002262:	200a      	movs	r0, #10
 8002264:	f001 feab 	bl	8003fbe <xQueueGenericCreate>
 8002268:	4603      	mov	r3, r0
 800226a:	4a3d      	ldr	r2, [pc, #244]	@ (8002360 <main+0x114>)
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	4b3c      	ldr	r3, [pc, #240]	@ (8002360 <main+0x114>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d105      	bne.n	8002282 <main+0x36>
	  GPIOB->ODR |= ODR_PB14;
 8002276:	4b3b      	ldr	r3, [pc, #236]	@ (8002364 <main+0x118>)
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	4a3a      	ldr	r2, [pc, #232]	@ (8002364 <main+0x118>)
 800227c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002280:	6153      	str	r3, [r2, #20]
	}

	if ( (CAN_receiver = xQueueCreate(QUEUE_LENGTH,sizeof(uint8_t))) == NULL ){
 8002282:	2200      	movs	r2, #0
 8002284:	2101      	movs	r1, #1
 8002286:	200a      	movs	r0, #10
 8002288:	f001 fe99 	bl	8003fbe <xQueueGenericCreate>
 800228c:	4603      	mov	r3, r0
 800228e:	4a36      	ldr	r2, [pc, #216]	@ (8002368 <main+0x11c>)
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b35      	ldr	r3, [pc, #212]	@ (8002368 <main+0x11c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d105      	bne.n	80022a6 <main+0x5a>
	  GPIOB->ODR |= ODR_PB14;
 800229a:	4b32      	ldr	r3, [pc, #200]	@ (8002364 <main+0x118>)
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	4a31      	ldr	r2, [pc, #196]	@ (8002364 <main+0x118>)
 80022a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022a4:	6153      	str	r3, [r2, #20]
	}

	/* Create SEMAPHORES */
	if ( (GSM_receiver = xSemaphoreCreateBinary()) == NULL ){
 80022a6:	2203      	movs	r2, #3
 80022a8:	2100      	movs	r1, #0
 80022aa:	2001      	movs	r0, #1
 80022ac:	f001 fe87 	bl	8003fbe <xQueueGenericCreate>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4a2e      	ldr	r2, [pc, #184]	@ (800236c <main+0x120>)
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b2d      	ldr	r3, [pc, #180]	@ (800236c <main+0x120>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d105      	bne.n	80022ca <main+0x7e>
		GPIOB->ODR |= ODR_PB14;
 80022be:	4b29      	ldr	r3, [pc, #164]	@ (8002364 <main+0x118>)
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	4a28      	ldr	r2, [pc, #160]	@ (8002364 <main+0x118>)
 80022c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022c8:	6153      	str	r3, [r2, #20]
	}

	if ( (TX_cplt = xSemaphoreCreateBinary()) == NULL ){
 80022ca:	2203      	movs	r2, #3
 80022cc:	2100      	movs	r1, #0
 80022ce:	2001      	movs	r0, #1
 80022d0:	f001 fe75 	bl	8003fbe <xQueueGenericCreate>
 80022d4:	4603      	mov	r3, r0
 80022d6:	4a26      	ldr	r2, [pc, #152]	@ (8002370 <main+0x124>)
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b25      	ldr	r3, [pc, #148]	@ (8002370 <main+0x124>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d105      	bne.n	80022ee <main+0xa2>
		GPIOB->ODR |= ODR_PB14;
 80022e2:	4b20      	ldr	r3, [pc, #128]	@ (8002364 <main+0x118>)
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002364 <main+0x118>)
 80022e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ec:	6153      	str	r3, [r2, #20]
	}

	/* Create event group */
	if ( (dataReceived = xEventGroupCreate()) == NULL ){
 80022ee:	f001 fcb1 	bl	8003c54 <xEventGroupCreate>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002374 <main+0x128>)
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002374 <main+0x128>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d105      	bne.n	800230c <main+0xc0>
		GPIOB->ODR |= ODR_PB14;
 8002300:	4b18      	ldr	r3, [pc, #96]	@ (8002364 <main+0x118>)
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	4a17      	ldr	r2, [pc, #92]	@ (8002364 <main+0x118>)
 8002306:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800230a:	6153      	str	r3, [r2, #20]
	 * Bi1 1 - received and processed data from GPS
	 * Bit 2 - created packet to send
	 *
	 */

	uart2_rx_tx_init();
 800230c:	f7ff f8d4 	bl	80014b8 <uart2_rx_tx_init>
	uart3_rx_tx_init();
 8002310:	f7ff f95e 	bl	80015d0 <uart3_rx_tx_init>
	uart5_rx_tx_init();
 8002314:	f7ff f9e8 	bl	80016e8 <uart5_rx_tx_init>

	dma1_init();
 8002318:	f7ff fa7a 	bl	8001810 <dma1_init>
	dma1_stream5_rx_config((uint32_t) usart2.uart_rx_dma_buffer);
 800231c:	4b16      	ldr	r3, [pc, #88]	@ (8002378 <main+0x12c>)
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fb52 	bl	80019c8 <dma1_stream5_rx_config>
	dma1_stream1_rx_config((uint32_t) usart3.uart_rx_dma_buffer);
 8002324:	4b15      	ldr	r3, [pc, #84]	@ (800237c <main+0x130>)
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fa8c 	bl	8001844 <dma1_stream1_rx_config>

	can_init();
 800232c:	f7fe ff04 	bl	8001138 <can_init>

	if ( pdPASS != xTaskCreate(obd_module,"CAN", 256, NULL, configMAX_PRIORITIES-1, NULL)){
	 GPIOB->ODR |= ODR_PB7;
	}*/

	if ( pdPASS != xTaskCreate(send_task,"SEND", 256, NULL, configMAX_PRIORITIES -1, NULL)){
 8002330:	2300      	movs	r3, #0
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	2337      	movs	r3, #55	@ 0x37
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2300      	movs	r3, #0
 800233a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800233e:	4910      	ldr	r1, [pc, #64]	@ (8002380 <main+0x134>)
 8002340:	4810      	ldr	r0, [pc, #64]	@ (8002384 <main+0x138>)
 8002342:	f002 fca3 	bl	8004c8c <xTaskCreate>
 8002346:	4603      	mov	r3, r0
 8002348:	2b01      	cmp	r3, #1
 800234a:	d005      	beq.n	8002358 <main+0x10c>
		GPIOB->ODR |= ODR_PB7;
 800234c:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <main+0x118>)
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	4a04      	ldr	r2, [pc, #16]	@ (8002364 <main+0x118>)
 8002352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002356:	6153      	str	r3, [r2, #20]
	}

	vTaskStartScheduler();
 8002358:	f002 fe2c 	bl	8004fb4 <vTaskStartScheduler>

  while (1)
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <main+0x110>
 8002360:	20000600 	.word	0x20000600
 8002364:	40020400 	.word	0x40020400
 8002368:	20000604 	.word	0x20000604
 800236c:	20000608 	.word	0x20000608
 8002370:	2000060c 	.word	0x2000060c
 8002374:	20000610 	.word	0x20000610
 8002378:	200001f0 	.word	0x200001f0
 800237c:	200003f8 	.word	0x200003f8
 8002380:	0800b3d0 	.word	0x0800b3d0
 8002384:	08002735 	.word	0x08002735

08002388 <CAN1_RX0_IRQHandler>:
  {
  }
}

void CAN1_RX0_IRQHandler(void){
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0

	if ( CAN1->RF0R & CAN_RF0R_FMP0 ){
 800238e:	4b18      	ldr	r3, [pc, #96]	@ (80023f0 <CAN1_RX0_IRQHandler+0x68>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d025      	beq.n	80023e6 <CAN1_RX0_IRQHandler+0x5e>

		/* FIFO No */
		uint8_t d = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	71fb      	strb	r3, [r7, #7]

		xHigherPriorityTaskWoken = pdFALSE;
 800239e:	4b15      	ldr	r3, [pc, #84]	@ (80023f4 <CAN1_RX0_IRQHandler+0x6c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

		if ( xQueueSendFromISR(CAN_receiver,&d,&xHigherPriorityTaskWoken) != pdPASS ){
 80023a4:	4b14      	ldr	r3, [pc, #80]	@ (80023f8 <CAN1_RX0_IRQHandler+0x70>)
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	1df9      	adds	r1, r7, #7
 80023aa:	2300      	movs	r3, #0
 80023ac:	4a11      	ldr	r2, [pc, #68]	@ (80023f4 <CAN1_RX0_IRQHandler+0x6c>)
 80023ae:	f001 ff67 	bl	8004280 <xQueueGenericSendFromISR>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d005      	beq.n	80023c4 <CAN1_RX0_IRQHandler+0x3c>
			GPIOB->ODR |= ODR_PB7;
 80023b8:	4b10      	ldr	r3, [pc, #64]	@ (80023fc <CAN1_RX0_IRQHandler+0x74>)
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	4a0f      	ldr	r2, [pc, #60]	@ (80023fc <CAN1_RX0_IRQHandler+0x74>)
 80023be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023c2:	6153      	str	r3, [r2, #20]
		}

		/* Receive message - read CAN frame */
		can_receive(&msg_receive, d);
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	4619      	mov	r1, r3
 80023c8:	480d      	ldr	r0, [pc, #52]	@ (8002400 <CAN1_RX0_IRQHandler+0x78>)
 80023ca:	f7fe ff5b 	bl	8001284 <can_receive>

		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80023ce:	4b09      	ldr	r3, [pc, #36]	@ (80023f4 <CAN1_RX0_IRQHandler+0x6c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d007      	beq.n	80023e6 <CAN1_RX0_IRQHandler+0x5e>
 80023d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <CAN1_RX0_IRQHandler+0x7c>)
 80023d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	f3bf 8f4f 	dsb	sy
 80023e2:	f3bf 8f6f 	isb	sy

	}

}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40006400 	.word	0x40006400
 80023f4:	20000614 	.word	0x20000614
 80023f8:	20000604 	.word	0x20000604
 80023fc:	40020400 	.word	0x40020400
 8002400:	20000618 	.word	0x20000618
 8002404:	e000ed04 	.word	0xe000ed04

08002408 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void){
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0

	if ( CAN1->RF1R & CAN_RF1R_FMP1){
 800240e:	4b15      	ldr	r3, [pc, #84]	@ (8002464 <CAN1_RX1_IRQHandler+0x5c>)
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d020      	beq.n	800245c <CAN1_RX1_IRQHandler+0x54>

			uint8_t d = 1;
 800241a:	2301      	movs	r3, #1
 800241c:	71fb      	strb	r3, [r7, #7]
			xHigherPriorityTaskWoken = pdFALSE;
 800241e:	4b12      	ldr	r3, [pc, #72]	@ (8002468 <CAN1_RX1_IRQHandler+0x60>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

			if ( xQueueSendFromISR(CAN_receiver,&d,&xHigherPriorityTaskWoken) == errQUEUE_FULL ){
 8002424:	4b11      	ldr	r3, [pc, #68]	@ (800246c <CAN1_RX1_IRQHandler+0x64>)
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	1df9      	adds	r1, r7, #7
 800242a:	2300      	movs	r3, #0
 800242c:	4a0e      	ldr	r2, [pc, #56]	@ (8002468 <CAN1_RX1_IRQHandler+0x60>)
 800242e:	f001 ff27 	bl	8004280 <xQueueGenericSendFromISR>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d105      	bne.n	8002444 <CAN1_RX1_IRQHandler+0x3c>
				GPIOB->ODR |= ODR_PB7;
 8002438:	4b0d      	ldr	r3, [pc, #52]	@ (8002470 <CAN1_RX1_IRQHandler+0x68>)
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	4a0c      	ldr	r2, [pc, #48]	@ (8002470 <CAN1_RX1_IRQHandler+0x68>)
 800243e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002442:	6153      	str	r3, [r2, #20]
			}

			portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8002444:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <CAN1_RX1_IRQHandler+0x60>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d007      	beq.n	800245c <CAN1_RX1_IRQHandler+0x54>
 800244c:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <CAN1_RX1_IRQHandler+0x6c>)
 800244e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	f3bf 8f6f 	isb	sy
	}
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40006400 	.word	0x40006400
 8002468:	20000614 	.word	0x20000614
 800246c:	20000604 	.word	0x20000604
 8002470:	40020400 	.word	0x40020400
 8002474:	e000ed04 	.word	0xe000ed04

08002478 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0

	if (USART2->SR & SR_IDLE){
 800247e:	4b16      	ldr	r3, [pc, #88]	@ (80024d8 <USART2_IRQHandler+0x60>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	2b00      	cmp	r3, #0
 8002488:	d022      	beq.n	80024d0 <USART2_IRQHandler+0x58>

		uint8_t d = 1;
 800248a:	2301      	movs	r3, #1
 800248c:	71fb      	strb	r3, [r7, #7]

		xHigherPriorityTaskWoken = pdFALSE;
 800248e:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <USART2_IRQHandler+0x64>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
		USART2->DR;
 8002494:	4b10      	ldr	r3, [pc, #64]	@ (80024d8 <USART2_IRQHandler+0x60>)
 8002496:	685b      	ldr	r3, [r3, #4]

		/* Check if message has been sent correctly */
		if( xQueueSendFromISR(gpsReceiver,&d,&xHigherPriorityTaskWoken) != pdPASS ){
 8002498:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <USART2_IRQHandler+0x68>)
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	1df9      	adds	r1, r7, #7
 800249e:	2300      	movs	r3, #0
 80024a0:	4a0e      	ldr	r2, [pc, #56]	@ (80024dc <USART2_IRQHandler+0x64>)
 80024a2:	f001 feed 	bl	8004280 <xQueueGenericSendFromISR>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d005      	beq.n	80024b8 <USART2_IRQHandler+0x40>
			GPIOB->ODR |= ODR_PB7;
 80024ac:	4b0d      	ldr	r3, [pc, #52]	@ (80024e4 <USART2_IRQHandler+0x6c>)
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	4a0c      	ldr	r2, [pc, #48]	@ (80024e4 <USART2_IRQHandler+0x6c>)
 80024b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024b6:	6153      	str	r3, [r2, #20]
		}

		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80024b8:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <USART2_IRQHandler+0x64>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <USART2_IRQHandler+0x58>
 80024c0:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <USART2_IRQHandler+0x70>)
 80024c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	f3bf 8f6f 	isb	sy
	}
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40004400 	.word	0x40004400
 80024dc:	20000614 	.word	0x20000614
 80024e0:	20000600 	.word	0x20000600
 80024e4:	40020400 	.word	0x40020400
 80024e8:	e000ed04 	.word	0xe000ed04

080024ec <USART3_IRQHandler>:

void USART3_IRQHandler (void){
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0

	if ( USART3->SR & SR_IDLE ){
 80024f0:	4b13      	ldr	r3, [pc, #76]	@ (8002540 <USART3_IRQHandler+0x54>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0310 	and.w	r3, r3, #16
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d01f      	beq.n	800253c <USART3_IRQHandler+0x50>

		xHigherPriorityTaskWoken = pdFALSE;
 80024fc:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <USART3_IRQHandler+0x58>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
		USART3->DR;
 8002502:	4b0f      	ldr	r3, [pc, #60]	@ (8002540 <USART3_IRQHandler+0x54>)
 8002504:	685b      	ldr	r3, [r3, #4]


		if ( xSemaphoreGiveFromISR(GSM_receiver,&xHigherPriorityTaskWoken) != pdPASS ){
 8002506:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <USART3_IRQHandler+0x5c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	490e      	ldr	r1, [pc, #56]	@ (8002544 <USART3_IRQHandler+0x58>)
 800250c:	4618      	mov	r0, r3
 800250e:	f001 ff55 	bl	80043bc <xQueueGiveFromISR>
 8002512:	4603      	mov	r3, r0
 8002514:	2b01      	cmp	r3, #1
 8002516:	d005      	beq.n	8002524 <USART3_IRQHandler+0x38>
			GPIOB->ODR |= ODR_PB7;
 8002518:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <USART3_IRQHandler+0x60>)
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	4a0b      	ldr	r2, [pc, #44]	@ (800254c <USART3_IRQHandler+0x60>)
 800251e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002522:	6153      	str	r3, [r2, #20]
		}

		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8002524:	4b07      	ldr	r3, [pc, #28]	@ (8002544 <USART3_IRQHandler+0x58>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <USART3_IRQHandler+0x50>
 800252c:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <USART3_IRQHandler+0x64>)
 800252e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	f3bf 8f6f 	isb	sy
	}

}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40004800 	.word	0x40004800
 8002544:	20000614 	.word	0x20000614
 8002548:	20000608 	.word	0x20000608
 800254c:	40020400 	.word	0x40020400
 8002550:	e000ed04 	.word	0xe000ed04

08002554 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void){
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0

	xHigherPriorityTaskWoken = pdFALSE;
 8002558:	4b12      	ldr	r3, [pc, #72]	@ (80025a4 <DMA1_Stream1_IRQHandler+0x50>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

	if (((DMA1->LISR) & LIFSR_CTCIF1)){
 800255e:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <DMA1_Stream1_IRQHandler+0x54>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <DMA1_Stream1_IRQHandler+0x22>

		/*xSemaphoreGiveFromISR(GSM_receiver,&xHigherPriorityTaskWoken);*/
		DMA1->LIFCR |= LIFCR_CTCIF1;
 800256a:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <DMA1_Stream1_IRQHandler+0x54>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	4a0e      	ldr	r2, [pc, #56]	@ (80025a8 <DMA1_Stream1_IRQHandler+0x54>)
 8002570:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002574:	6093      	str	r3, [r2, #8]
	}

	if (((DMA1->LISR) & LIFSR_CHTIF1)){
 8002576:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <DMA1_Stream1_IRQHandler+0x54>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <DMA1_Stream1_IRQHandler+0x46>

		GPIOB->ODR |= ODR_PB14;
 8002582:	4b0a      	ldr	r3, [pc, #40]	@ (80025ac <DMA1_Stream1_IRQHandler+0x58>)
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	4a09      	ldr	r2, [pc, #36]	@ (80025ac <DMA1_Stream1_IRQHandler+0x58>)
 8002588:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800258c:	6153      	str	r3, [r2, #20]
		/*xSemaphoreGiveFromISR(GSM_receiver,&xHigherPriorityTaskWoken);*/
		DMA1->LIFCR |= LIFCR_CHTIF1;
 800258e:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <DMA1_Stream1_IRQHandler+0x54>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	4a05      	ldr	r2, [pc, #20]	@ (80025a8 <DMA1_Stream1_IRQHandler+0x54>)
 8002594:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002598:	6093      	str	r3, [r2, #8]
	}
}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	20000614 	.word	0x20000614
 80025a8:	40026000 	.word	0x40026000
 80025ac:	40020400 	.word	0x40020400

080025b0 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void){
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0

	xHigherPriorityTaskWoken = pdFALSE;
 80025b4:	4b0b      	ldr	r3, [pc, #44]	@ (80025e4 <DMA1_Stream3_IRQHandler+0x34>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]

	if ( ((DMA1->LISR) & LIFSR_CTCIF3)){
 80025ba:	4b0b      	ldr	r3, [pc, #44]	@ (80025e8 <DMA1_Stream3_IRQHandler+0x38>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <DMA1_Stream3_IRQHandler+0x2e>
		xSemaphoreGiveFromISR(TX_cplt,&xHigherPriorityTaskWoken);
 80025c6:	4b09      	ldr	r3, [pc, #36]	@ (80025ec <DMA1_Stream3_IRQHandler+0x3c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4906      	ldr	r1, [pc, #24]	@ (80025e4 <DMA1_Stream3_IRQHandler+0x34>)
 80025cc:	4618      	mov	r0, r3
 80025ce:	f001 fef5 	bl	80043bc <xQueueGiveFromISR>
		DMA1->LIFCR |= LIFCR_CTCIF3;
 80025d2:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <DMA1_Stream3_IRQHandler+0x38>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	4a04      	ldr	r2, [pc, #16]	@ (80025e8 <DMA1_Stream3_IRQHandler+0x38>)
 80025d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80025dc:	6093      	str	r3, [r2, #8]
	}
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000614 	.word	0x20000614
 80025e8:	40026000 	.word	0x40026000
 80025ec:	2000060c 	.word	0x2000060c

080025f0 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0

	uint8_t d =1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	71fb      	strb	r3, [r7, #7]
	xHigherPriorityTaskWoken = pdFALSE;
 80025fa:	4b16      	ldr	r3, [pc, #88]	@ (8002654 <DMA1_Stream5_IRQHandler+0x64>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

	if (((DMA1->HISR) & HIFSR_CTCIF5)){
 8002600:	4b15      	ldr	r3, [pc, #84]	@ (8002658 <DMA1_Stream5_IRQHandler+0x68>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00c      	beq.n	8002626 <DMA1_Stream5_IRQHandler+0x36>

		xQueueSendFromISR(gpsReceiver,&d,&xHigherPriorityTaskWoken);
 800260c:	4b13      	ldr	r3, [pc, #76]	@ (800265c <DMA1_Stream5_IRQHandler+0x6c>)
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	1df9      	adds	r1, r7, #7
 8002612:	2300      	movs	r3, #0
 8002614:	4a0f      	ldr	r2, [pc, #60]	@ (8002654 <DMA1_Stream5_IRQHandler+0x64>)
 8002616:	f001 fe33 	bl	8004280 <xQueueGenericSendFromISR>
		DMA1->HIFCR |= HIFCR_CTCIF5;
 800261a:	4b0f      	ldr	r3, [pc, #60]	@ (8002658 <DMA1_Stream5_IRQHandler+0x68>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	4a0e      	ldr	r2, [pc, #56]	@ (8002658 <DMA1_Stream5_IRQHandler+0x68>)
 8002620:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002624:	60d3      	str	r3, [r2, #12]
	}

	if (((DMA1->HISR) & HIFSR_CHTIF5)){
 8002626:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <DMA1_Stream5_IRQHandler+0x68>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00c      	beq.n	800264c <DMA1_Stream5_IRQHandler+0x5c>

		xQueueSendFromISR(gpsReceiver,&d,&xHigherPriorityTaskWoken);
 8002632:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <DMA1_Stream5_IRQHandler+0x6c>)
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	1df9      	adds	r1, r7, #7
 8002638:	2300      	movs	r3, #0
 800263a:	4a06      	ldr	r2, [pc, #24]	@ (8002654 <DMA1_Stream5_IRQHandler+0x64>)
 800263c:	f001 fe20 	bl	8004280 <xQueueGenericSendFromISR>
		DMA1->HIFCR |= HIFCR_CHTIF5;
 8002640:	4b05      	ldr	r3, [pc, #20]	@ (8002658 <DMA1_Stream5_IRQHandler+0x68>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4a04      	ldr	r2, [pc, #16]	@ (8002658 <DMA1_Stream5_IRQHandler+0x68>)
 8002646:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800264a:	60d3      	str	r3, [r2, #12]
	}
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000614 	.word	0x20000614
 8002658:	40026000 	.word	0x40026000
 800265c:	20000600 	.word	0x20000600

08002660 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b094      	sub	sp, #80	@ 0x50
 8002664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002666:	f107 0320 	add.w	r3, r7, #32
 800266a:	2230      	movs	r2, #48	@ 0x30
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f006 f899 	bl	80087a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002674:	f107 030c 	add.w	r3, r7, #12
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002684:	2300      	movs	r3, #0
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	4b28      	ldr	r3, [pc, #160]	@ (800272c <SystemClock_Config+0xcc>)
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	4a27      	ldr	r2, [pc, #156]	@ (800272c <SystemClock_Config+0xcc>)
 800268e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002692:	6413      	str	r3, [r2, #64]	@ 0x40
 8002694:	4b25      	ldr	r3, [pc, #148]	@ (800272c <SystemClock_Config+0xcc>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026a0:	2300      	movs	r3, #0
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	4b22      	ldr	r3, [pc, #136]	@ (8002730 <SystemClock_Config+0xd0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a21      	ldr	r2, [pc, #132]	@ (8002730 <SystemClock_Config+0xd0>)
 80026aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002730 <SystemClock_Config+0xd0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026bc:	2301      	movs	r3, #1
 80026be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80026c0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80026c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026c6:	2302      	movs	r3, #2
 80026c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80026ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026d0:	2304      	movs	r3, #4
 80026d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80026d4:	23a8      	movs	r3, #168	@ 0xa8
 80026d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026d8:	2302      	movs	r3, #2
 80026da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80026dc:	2307      	movs	r3, #7
 80026de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026e0:	f107 0320 	add.w	r3, r7, #32
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fb0f 	bl	8002d08 <HAL_RCC_OscConfig>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80026f0:	f000 f82b 	bl	800274a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026f4:	230f      	movs	r3, #15
 80026f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026f8:	2302      	movs	r3, #2
 80026fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002700:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800270a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800270c:	f107 030c 	add.w	r3, r7, #12
 8002710:	2105      	movs	r1, #5
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fd70 	bl	80031f8 <HAL_RCC_ClockConfig>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800271e:	f000 f814 	bl	800274a <Error_Handler>
  }
}
 8002722:	bf00      	nop
 8002724:	3750      	adds	r7, #80	@ 0x50
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800
 8002730:	40007000 	.word	0x40007000

08002734 <send_task>:
	while(1){

	}
}

void send_task ( void *parameters ){
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

	/* Initialize array for message */

	configure_module();
 800273c:	f7ff fa5c 	bl	8001bf8 <configure_module>
	while (1) {

		/*xEventGroupWaitBits(dataReceived,3, pdTRUE, pdTRUE, portMAX_DELAY);*/
		/* message_length = prepare_json( &packetData,message); */

		vTaskDelay(4000);
 8002740:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8002744:	f002 fc00 	bl	8004f48 <vTaskDelay>
 8002748:	e7fa      	b.n	8002740 <send_task+0xc>

0800274a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800274e:	b672      	cpsid	i
}
 8002750:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002752:	bf00      	nop
 8002754:	e7fd      	b.n	8002752 <Error_Handler+0x8>
	...

08002758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	4b12      	ldr	r3, [pc, #72]	@ (80027ac <HAL_MspInit+0x54>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	4a11      	ldr	r2, [pc, #68]	@ (80027ac <HAL_MspInit+0x54>)
 8002768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800276c:	6453      	str	r3, [r2, #68]	@ 0x44
 800276e:	4b0f      	ldr	r3, [pc, #60]	@ (80027ac <HAL_MspInit+0x54>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	603b      	str	r3, [r7, #0]
 800277e:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <HAL_MspInit+0x54>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	4a0a      	ldr	r2, [pc, #40]	@ (80027ac <HAL_MspInit+0x54>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002788:	6413      	str	r3, [r2, #64]	@ 0x40
 800278a:	4b08      	ldr	r3, [pc, #32]	@ (80027ac <HAL_MspInit+0x54>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002796:	2200      	movs	r2, #0
 8002798:	210f      	movs	r1, #15
 800279a:	f06f 0001 	mvn.w	r0, #1
 800279e:	f000 fa89 	bl	8002cb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800

080027b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08c      	sub	sp, #48	@ 0x30
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80027c0:	2300      	movs	r3, #0
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002884 <HAL_InitTick+0xd4>)
 80027c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002884 <HAL_InitTick+0xd4>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80027d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002884 <HAL_InitTick+0xd4>)
 80027d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027dc:	f107 020c 	add.w	r2, r7, #12
 80027e0:	f107 0310 	add.w	r3, r7, #16
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 ff12 	bl	8003610 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80027ec:	f000 fefc 	bl	80035e8 <HAL_RCC_GetPCLK2Freq>
 80027f0:	4603      	mov	r3, r0
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f8:	4a23      	ldr	r2, [pc, #140]	@ (8002888 <HAL_InitTick+0xd8>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	0c9b      	lsrs	r3, r3, #18
 8002800:	3b01      	subs	r3, #1
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002804:	4b21      	ldr	r3, [pc, #132]	@ (800288c <HAL_InitTick+0xdc>)
 8002806:	4a22      	ldr	r2, [pc, #136]	@ (8002890 <HAL_InitTick+0xe0>)
 8002808:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800280a:	4b20      	ldr	r3, [pc, #128]	@ (800288c <HAL_InitTick+0xdc>)
 800280c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002810:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002812:	4a1e      	ldr	r2, [pc, #120]	@ (800288c <HAL_InitTick+0xdc>)
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002818:	4b1c      	ldr	r3, [pc, #112]	@ (800288c <HAL_InitTick+0xdc>)
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800281e:	4b1b      	ldr	r3, [pc, #108]	@ (800288c <HAL_InitTick+0xdc>)
 8002820:	2200      	movs	r2, #0
 8002822:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002824:	4b19      	ldr	r3, [pc, #100]	@ (800288c <HAL_InitTick+0xdc>)
 8002826:	2200      	movs	r2, #0
 8002828:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800282a:	4818      	ldr	r0, [pc, #96]	@ (800288c <HAL_InitTick+0xdc>)
 800282c:	f000 ff22 	bl	8003674 <HAL_TIM_Base_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002836:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800283a:	2b00      	cmp	r3, #0
 800283c:	d11b      	bne.n	8002876 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800283e:	4813      	ldr	r0, [pc, #76]	@ (800288c <HAL_InitTick+0xdc>)
 8002840:	f000 ff72 	bl	8003728 <HAL_TIM_Base_Start_IT>
 8002844:	4603      	mov	r3, r0
 8002846:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800284a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800284e:	2b00      	cmp	r3, #0
 8002850:	d111      	bne.n	8002876 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002852:	2019      	movs	r0, #25
 8002854:	f000 fa4a 	bl	8002cec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b0f      	cmp	r3, #15
 800285c:	d808      	bhi.n	8002870 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800285e:	2200      	movs	r2, #0
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	2019      	movs	r0, #25
 8002864:	f000 fa26 	bl	8002cb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002868:	4a0a      	ldr	r2, [pc, #40]	@ (8002894 <HAL_InitTick+0xe4>)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e002      	b.n	8002876 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002876:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800287a:	4618      	mov	r0, r3
 800287c:	3730      	adds	r7, #48	@ 0x30
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
 8002888:	431bde83 	.word	0x431bde83
 800288c:	20000624 	.word	0x20000624
 8002890:	40010000 	.word	0x40010000
 8002894:	20000004 	.word	0x20000004

08002898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800289c:	bf00      	nop
 800289e:	e7fd      	b.n	800289c <NMI_Handler+0x4>

080028a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028a4:	bf00      	nop
 80028a6:	e7fd      	b.n	80028a4 <HardFault_Handler+0x4>

080028a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028ac:	bf00      	nop
 80028ae:	e7fd      	b.n	80028ac <MemManage_Handler+0x4>

080028b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028b4:	bf00      	nop
 80028b6:	e7fd      	b.n	80028b4 <BusFault_Handler+0x4>

080028b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028bc:	bf00      	nop
 80028be:	e7fd      	b.n	80028bc <UsageFault_Handler+0x4>

080028c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028d4:	4802      	ldr	r0, [pc, #8]	@ (80028e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80028d6:	f000 ff97 	bl	8003808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000624 	.word	0x20000624

080028e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return 1;
 80028e8:	2301      	movs	r3, #1
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <_kill>:

int _kill(int pid, int sig)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028fe:	f006 f835 	bl	800896c <__errno>
 8002902:	4603      	mov	r3, r0
 8002904:	2216      	movs	r2, #22
 8002906:	601a      	str	r2, [r3, #0]
  return -1;
 8002908:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <_exit>:

void _exit (int status)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800291c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff ffe7 	bl	80028f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002926:	bf00      	nop
 8002928:	e7fd      	b.n	8002926 <_exit+0x12>

0800292a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e00a      	b.n	8002952 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800293c:	f3af 8000 	nop.w
 8002940:	4601      	mov	r1, r0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	60ba      	str	r2, [r7, #8]
 8002948:	b2ca      	uxtb	r2, r1
 800294a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3301      	adds	r3, #1
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	429a      	cmp	r2, r3
 8002958:	dbf0      	blt.n	800293c <_read+0x12>
  }

  return len;
 800295a:	687b      	ldr	r3, [r7, #4]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	e009      	b.n	800298a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	60ba      	str	r2, [r7, #8]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	3301      	adds	r3, #1
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	429a      	cmp	r2, r3
 8002990:	dbf1      	blt.n	8002976 <_write+0x12>
  }
  return len;
 8002992:	687b      	ldr	r3, [r7, #4]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <_close>:

int _close(int file)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029c4:	605a      	str	r2, [r3, #4]
  return 0;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <_isatty>:

int _isatty(int file)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029dc:	2301      	movs	r3, #1
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b085      	sub	sp, #20
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a0c:	4a14      	ldr	r2, [pc, #80]	@ (8002a60 <_sbrk+0x5c>)
 8002a0e:	4b15      	ldr	r3, [pc, #84]	@ (8002a64 <_sbrk+0x60>)
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a18:	4b13      	ldr	r3, [pc, #76]	@ (8002a68 <_sbrk+0x64>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a20:	4b11      	ldr	r3, [pc, #68]	@ (8002a68 <_sbrk+0x64>)
 8002a22:	4a12      	ldr	r2, [pc, #72]	@ (8002a6c <_sbrk+0x68>)
 8002a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a26:	4b10      	ldr	r3, [pc, #64]	@ (8002a68 <_sbrk+0x64>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d207      	bcs.n	8002a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a34:	f005 ff9a 	bl	800896c <__errno>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a42:	e009      	b.n	8002a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a44:	4b08      	ldr	r3, [pc, #32]	@ (8002a68 <_sbrk+0x64>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a4a:	4b07      	ldr	r3, [pc, #28]	@ (8002a68 <_sbrk+0x64>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	4a05      	ldr	r2, [pc, #20]	@ (8002a68 <_sbrk+0x64>)
 8002a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a56:	68fb      	ldr	r3, [r7, #12]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20030000 	.word	0x20030000
 8002a64:	00000400 	.word	0x00000400
 8002a68:	2000066c 	.word	0x2000066c
 8002a6c:	200051a8 	.word	0x200051a8

08002a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a74:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <SystemInit+0x20>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7a:	4a05      	ldr	r2, [pc, #20]	@ (8002a90 <SystemInit+0x20>)
 8002a7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002a94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002acc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a98:	f7ff ffea 	bl	8002a70 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a9c:	480c      	ldr	r0, [pc, #48]	@ (8002ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a9e:	490d      	ldr	r1, [pc, #52]	@ (8002ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa4:	e002      	b.n	8002aac <LoopCopyDataInit>

08002aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aaa:	3304      	adds	r3, #4

08002aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab0:	d3f9      	bcc.n	8002aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8002adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ab4:	4c0a      	ldr	r4, [pc, #40]	@ (8002ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ab8:	e001      	b.n	8002abe <LoopFillZerobss>

08002aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002abc:	3204      	adds	r2, #4

08002abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac0:	d3fb      	bcc.n	8002aba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002ac2:	f005 ff59 	bl	8008978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ac6:	f7ff fbc1 	bl	800224c <main>
  bx  lr    
 8002aca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002acc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ad4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002ad8:	0800b844 	.word	0x0800b844
  ldr r2, =_sbss
 8002adc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002ae0:	200051a4 	.word	0x200051a4

08002ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ae4:	e7fe      	b.n	8002ae4 <ADC_IRQHandler>
	...

08002ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002aec:	4b0e      	ldr	r3, [pc, #56]	@ (8002b28 <HAL_Init+0x40>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b28 <HAL_Init+0x40>)
 8002af2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002af8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b28 <HAL_Init+0x40>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0a      	ldr	r2, [pc, #40]	@ (8002b28 <HAL_Init+0x40>)
 8002afe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b04:	4b08      	ldr	r3, [pc, #32]	@ (8002b28 <HAL_Init+0x40>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a07      	ldr	r2, [pc, #28]	@ (8002b28 <HAL_Init+0x40>)
 8002b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b10:	2003      	movs	r0, #3
 8002b12:	f000 f8c4 	bl	8002c9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b16:	200f      	movs	r0, #15
 8002b18:	f7ff fe4a 	bl	80027b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b1c:	f7ff fe1c 	bl	8002758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023c00 	.word	0x40023c00

08002b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b30:	4b03      	ldr	r3, [pc, #12]	@ (8002b40 <HAL_GetTick+0x14>)
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20000670 	.word	0x20000670

08002b44 <__NVIC_SetPriorityGrouping>:
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b54:	4b0c      	ldr	r3, [pc, #48]	@ (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b60:	4013      	ands	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b76:	4a04      	ldr	r2, [pc, #16]	@ (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	60d3      	str	r3, [r2, #12]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <__NVIC_GetPriorityGrouping>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b90:	4b04      	ldr	r3, [pc, #16]	@ (8002ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	f003 0307 	and.w	r3, r3, #7
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <__NVIC_EnableIRQ>:
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db0b      	blt.n	8002bd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	4907      	ldr	r1, [pc, #28]	@ (8002be0 <__NVIC_EnableIRQ+0x38>)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2001      	movs	r0, #1
 8002bca:	fa00 f202 	lsl.w	r2, r0, r2
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000e100 	.word	0xe000e100

08002be4 <__NVIC_SetPriority>:
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	6039      	str	r1, [r7, #0]
 8002bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	db0a      	blt.n	8002c0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	490c      	ldr	r1, [pc, #48]	@ (8002c30 <__NVIC_SetPriority+0x4c>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	0112      	lsls	r2, r2, #4
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	440b      	add	r3, r1
 8002c08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002c0c:	e00a      	b.n	8002c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4908      	ldr	r1, [pc, #32]	@ (8002c34 <__NVIC_SetPriority+0x50>)
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	3b04      	subs	r3, #4
 8002c1c:	0112      	lsls	r2, r2, #4
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	440b      	add	r3, r1
 8002c22:	761a      	strb	r2, [r3, #24]
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000e100 	.word	0xe000e100
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b089      	sub	sp, #36	@ 0x24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f1c3 0307 	rsb	r3, r3, #7
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	bf28      	it	cs
 8002c56:	2304      	movcs	r3, #4
 8002c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	d902      	bls.n	8002c68 <NVIC_EncodePriority+0x30>
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3b03      	subs	r3, #3
 8002c66:	e000      	b.n	8002c6a <NVIC_EncodePriority+0x32>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	43d9      	mvns	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c90:	4313      	orrs	r3, r2
         );
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3724      	adds	r7, #36	@ 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff ff4c 	bl	8002b44 <__NVIC_SetPriorityGrouping>
}
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc6:	f7ff ff61 	bl	8002b8c <__NVIC_GetPriorityGrouping>
 8002cca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	6978      	ldr	r0, [r7, #20]
 8002cd2:	f7ff ffb1 	bl	8002c38 <NVIC_EncodePriority>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff ff80 	bl	8002be4 <__NVIC_SetPriority>
}
 8002ce4:	bf00      	nop
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ff54 	bl	8002ba8 <__NVIC_EnableIRQ>
}
 8002d00:	bf00      	nop
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e267      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d075      	beq.n	8002e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d26:	4b88      	ldr	r3, [pc, #544]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d00c      	beq.n	8002d4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d32:	4b85      	ldr	r3, [pc, #532]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d112      	bne.n	8002d64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3e:	4b82      	ldr	r3, [pc, #520]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d4a:	d10b      	bne.n	8002d64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d05b      	beq.n	8002e10 <HAL_RCC_OscConfig+0x108>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d157      	bne.n	8002e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e242      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d6c:	d106      	bne.n	8002d7c <HAL_RCC_OscConfig+0x74>
 8002d6e:	4b76      	ldr	r3, [pc, #472]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a75      	ldr	r2, [pc, #468]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e01d      	b.n	8002db8 <HAL_RCC_OscConfig+0xb0>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x98>
 8002d86:	4b70      	ldr	r3, [pc, #448]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6f      	ldr	r2, [pc, #444]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b6d      	ldr	r3, [pc, #436]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a6c      	ldr	r2, [pc, #432]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCC_OscConfig+0xb0>
 8002da0:	4b69      	ldr	r3, [pc, #420]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a68      	ldr	r2, [pc, #416]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b66      	ldr	r3, [pc, #408]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a65      	ldr	r2, [pc, #404]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d013      	beq.n	8002de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7ff feb4 	bl	8002b2c <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7ff feb0 	bl	8002b2c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	@ 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e207      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	4b5b      	ldr	r3, [pc, #364]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xc0>
 8002de6:	e014      	b.n	8002e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7ff fea0 	bl	8002b2c <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df0:	f7ff fe9c 	bl	8002b2c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	@ 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e1f3      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e02:	4b51      	ldr	r3, [pc, #324]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0xe8>
 8002e0e:	e000      	b.n	8002e12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d063      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2a:	4b47      	ldr	r3, [pc, #284]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d11c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e36:	4b44      	ldr	r3, [pc, #272]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d116      	bne.n	8002e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e42:	4b41      	ldr	r3, [pc, #260]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_RCC_OscConfig+0x152>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e1c7      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4937      	ldr	r1, [pc, #220]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6e:	e03a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e78:	4b34      	ldr	r3, [pc, #208]	@ (8002f4c <HAL_RCC_OscConfig+0x244>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7e:	f7ff fe55 	bl	8002b2c <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e86:	f7ff fe51 	bl	8002b2c <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e1a8      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e98:	4b2b      	ldr	r3, [pc, #172]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea4:	4b28      	ldr	r3, [pc, #160]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4925      	ldr	r1, [pc, #148]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eba:	4b24      	ldr	r3, [pc, #144]	@ (8002f4c <HAL_RCC_OscConfig+0x244>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7ff fe34 	bl	8002b2c <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec8:	f7ff fe30 	bl	8002b2c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e187      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eda:	4b1b      	ldr	r3, [pc, #108]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d036      	beq.n	8002f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002efa:	4b15      	ldr	r3, [pc, #84]	@ (8002f50 <HAL_RCC_OscConfig+0x248>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7ff fe14 	bl	8002b2c <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f08:	f7ff fe10 	bl	8002b2c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e167      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x200>
 8002f26:	e01b      	b.n	8002f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f28:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <HAL_RCC_OscConfig+0x248>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7ff fdfd 	bl	8002b2c <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f34:	e00e      	b.n	8002f54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f36:	f7ff fdf9 	bl	8002b2c <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d907      	bls.n	8002f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e150      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	42470000 	.word	0x42470000
 8002f50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f54:	4b88      	ldr	r3, [pc, #544]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1ea      	bne.n	8002f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8097 	beq.w	800309c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f72:	4b81      	ldr	r3, [pc, #516]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10f      	bne.n	8002f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	4b7d      	ldr	r3, [pc, #500]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	4a7c      	ldr	r2, [pc, #496]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f8e:	4b7a      	ldr	r3, [pc, #488]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9e:	4b77      	ldr	r3, [pc, #476]	@ (800317c <HAL_RCC_OscConfig+0x474>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d118      	bne.n	8002fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002faa:	4b74      	ldr	r3, [pc, #464]	@ (800317c <HAL_RCC_OscConfig+0x474>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a73      	ldr	r2, [pc, #460]	@ (800317c <HAL_RCC_OscConfig+0x474>)
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb6:	f7ff fdb9 	bl	8002b2c <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbe:	f7ff fdb5 	bl	8002b2c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e10c      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd0:	4b6a      	ldr	r3, [pc, #424]	@ (800317c <HAL_RCC_OscConfig+0x474>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d106      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x2ea>
 8002fe4:	4b64      	ldr	r3, [pc, #400]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe8:	4a63      	ldr	r2, [pc, #396]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ff0:	e01c      	b.n	800302c <HAL_RCC_OscConfig+0x324>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCC_OscConfig+0x30c>
 8002ffa:	4b5f      	ldr	r3, [pc, #380]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffe:	4a5e      	ldr	r2, [pc, #376]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003000:	f043 0304 	orr.w	r3, r3, #4
 8003004:	6713      	str	r3, [r2, #112]	@ 0x70
 8003006:	4b5c      	ldr	r3, [pc, #368]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300a:	4a5b      	ldr	r2, [pc, #364]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6713      	str	r3, [r2, #112]	@ 0x70
 8003012:	e00b      	b.n	800302c <HAL_RCC_OscConfig+0x324>
 8003014:	4b58      	ldr	r3, [pc, #352]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003018:	4a57      	ldr	r2, [pc, #348]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003020:	4b55      	ldr	r3, [pc, #340]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003024:	4a54      	ldr	r2, [pc, #336]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003026:	f023 0304 	bic.w	r3, r3, #4
 800302a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d015      	beq.n	8003060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7ff fd7a 	bl	8002b2c <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	e00a      	b.n	8003052 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303c:	f7ff fd76 	bl	8002b2c <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e0cb      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003052:	4b49      	ldr	r3, [pc, #292]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0ee      	beq.n	800303c <HAL_RCC_OscConfig+0x334>
 800305e:	e014      	b.n	800308a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003060:	f7ff fd64 	bl	8002b2c <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003066:	e00a      	b.n	800307e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7ff fd60 	bl	8002b2c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e0b5      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307e:	4b3e      	ldr	r3, [pc, #248]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1ee      	bne.n	8003068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d105      	bne.n	800309c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003090:	4b39      	ldr	r3, [pc, #228]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	4a38      	ldr	r2, [pc, #224]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800309a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80a1 	beq.w	80031e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030a6:	4b34      	ldr	r3, [pc, #208]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d05c      	beq.n	800316c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d141      	bne.n	800313e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ba:	4b31      	ldr	r3, [pc, #196]	@ (8003180 <HAL_RCC_OscConfig+0x478>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7ff fd34 	bl	8002b2c <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c8:	f7ff fd30 	bl	8002b2c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e087      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030da:	4b27      	ldr	r3, [pc, #156]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fc:	085b      	lsrs	r3, r3, #1
 80030fe:	3b01      	subs	r3, #1
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	491b      	ldr	r1, [pc, #108]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003110:	4b1b      	ldr	r3, [pc, #108]	@ (8003180 <HAL_RCC_OscConfig+0x478>)
 8003112:	2201      	movs	r2, #1
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7ff fd09 	bl	8002b2c <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311e:	f7ff fd05 	bl	8002b2c <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e05c      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003130:	4b11      	ldr	r3, [pc, #68]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x416>
 800313c:	e054      	b.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313e:	4b10      	ldr	r3, [pc, #64]	@ (8003180 <HAL_RCC_OscConfig+0x478>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7ff fcf2 	bl	8002b2c <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314c:	f7ff fcee 	bl	8002b2c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e045      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	4b06      	ldr	r3, [pc, #24]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x444>
 800316a:	e03d      	b.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d107      	bne.n	8003184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e038      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
 8003178:	40023800 	.word	0x40023800
 800317c:	40007000 	.word	0x40007000
 8003180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003184:	4b1b      	ldr	r3, [pc, #108]	@ (80031f4 <HAL_RCC_OscConfig+0x4ec>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d028      	beq.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d121      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d11a      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031b4:	4013      	ands	r3, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031bc:	4293      	cmp	r3, r2
 80031be:	d111      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ca:	085b      	lsrs	r3, r3, #1
 80031cc:	3b01      	subs	r3, #1
 80031ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800

080031f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0cc      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800320c:	4b68      	ldr	r3, [pc, #416]	@ (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d90c      	bls.n	8003234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b65      	ldr	r3, [pc, #404]	@ (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b63      	ldr	r3, [pc, #396]	@ (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0b8      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800324c:	4b59      	ldr	r3, [pc, #356]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a58      	ldr	r2, [pc, #352]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003256:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003264:	4b53      	ldr	r3, [pc, #332]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4a52      	ldr	r2, [pc, #328]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800326e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b50      	ldr	r3, [pc, #320]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	494d      	ldr	r1, [pc, #308]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d044      	beq.n	8003318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b47      	ldr	r3, [pc, #284]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d119      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e07f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d003      	beq.n	80032b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b6:	4b3f      	ldr	r3, [pc, #252]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e06f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c6:	4b3b      	ldr	r3, [pc, #236]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e067      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d6:	4b37      	ldr	r3, [pc, #220]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f023 0203 	bic.w	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4934      	ldr	r1, [pc, #208]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e8:	f7ff fc20 	bl	8002b2c <HAL_GetTick>
 80032ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f0:	f7ff fc1c 	bl	8002b2c <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e04f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	4b2b      	ldr	r3, [pc, #172]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 020c 	and.w	r2, r3, #12
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	429a      	cmp	r2, r3
 8003316:	d1eb      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003318:	4b25      	ldr	r3, [pc, #148]	@ (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d20c      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b22      	ldr	r3, [pc, #136]	@ (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b20      	ldr	r3, [pc, #128]	@ (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e032      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334c:	4b19      	ldr	r3, [pc, #100]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4916      	ldr	r1, [pc, #88]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800336a:	4b12      	ldr	r3, [pc, #72]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	490e      	ldr	r1, [pc, #56]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800337e:	f000 f821 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003382:	4602      	mov	r2, r0
 8003384:	4b0b      	ldr	r3, [pc, #44]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	490a      	ldr	r1, [pc, #40]	@ (80033b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003390:	5ccb      	ldrb	r3, [r1, r3]
 8003392:	fa22 f303 	lsr.w	r3, r2, r3
 8003396:	4a09      	ldr	r2, [pc, #36]	@ (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800339a:	4b09      	ldr	r3, [pc, #36]	@ (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fa06 	bl	80027b0 <HAL_InitTick>

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40023c00 	.word	0x40023c00
 80033b4:	40023800 	.word	0x40023800
 80033b8:	0800b3f4 	.word	0x0800b3f4
 80033bc:	20000000 	.word	0x20000000
 80033c0:	20000004 	.word	0x20000004

080033c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c8:	b094      	sub	sp, #80	@ 0x50
 80033ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033dc:	4b79      	ldr	r3, [pc, #484]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d00d      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0x40>
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	f200 80e1 	bhi.w	80035b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x34>
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0x3a>
 80033f6:	e0db      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f8:	4b73      	ldr	r3, [pc, #460]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80033fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033fc:	e0db      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033fe:	4b73      	ldr	r3, [pc, #460]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x208>)
 8003400:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003402:	e0d8      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003404:	4b6f      	ldr	r3, [pc, #444]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800340c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800340e:	4b6d      	ldr	r3, [pc, #436]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d063      	beq.n	80034e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800341a:	4b6a      	ldr	r3, [pc, #424]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	099b      	lsrs	r3, r3, #6
 8003420:	2200      	movs	r2, #0
 8003422:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003424:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342c:	633b      	str	r3, [r7, #48]	@ 0x30
 800342e:	2300      	movs	r3, #0
 8003430:	637b      	str	r3, [r7, #52]	@ 0x34
 8003432:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003436:	4622      	mov	r2, r4
 8003438:	462b      	mov	r3, r5
 800343a:	f04f 0000 	mov.w	r0, #0
 800343e:	f04f 0100 	mov.w	r1, #0
 8003442:	0159      	lsls	r1, r3, #5
 8003444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003448:	0150      	lsls	r0, r2, #5
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4621      	mov	r1, r4
 8003450:	1a51      	subs	r1, r2, r1
 8003452:	6139      	str	r1, [r7, #16]
 8003454:	4629      	mov	r1, r5
 8003456:	eb63 0301 	sbc.w	r3, r3, r1
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003468:	4659      	mov	r1, fp
 800346a:	018b      	lsls	r3, r1, #6
 800346c:	4651      	mov	r1, sl
 800346e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003472:	4651      	mov	r1, sl
 8003474:	018a      	lsls	r2, r1, #6
 8003476:	4651      	mov	r1, sl
 8003478:	ebb2 0801 	subs.w	r8, r2, r1
 800347c:	4659      	mov	r1, fp
 800347e:	eb63 0901 	sbc.w	r9, r3, r1
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800348e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003496:	4690      	mov	r8, r2
 8003498:	4699      	mov	r9, r3
 800349a:	4623      	mov	r3, r4
 800349c:	eb18 0303 	adds.w	r3, r8, r3
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	462b      	mov	r3, r5
 80034a4:	eb49 0303 	adc.w	r3, r9, r3
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034b6:	4629      	mov	r1, r5
 80034b8:	024b      	lsls	r3, r1, #9
 80034ba:	4621      	mov	r1, r4
 80034bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034c0:	4621      	mov	r1, r4
 80034c2:	024a      	lsls	r2, r1, #9
 80034c4:	4610      	mov	r0, r2
 80034c6:	4619      	mov	r1, r3
 80034c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034ca:	2200      	movs	r2, #0
 80034cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034d4:	f7fd fbe8 	bl	8000ca8 <__aeabi_uldivmod>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4613      	mov	r3, r2
 80034de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034e0:	e058      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e2:	4b38      	ldr	r3, [pc, #224]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	099b      	lsrs	r3, r3, #6
 80034e8:	2200      	movs	r2, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	4611      	mov	r1, r2
 80034ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034f2:	623b      	str	r3, [r7, #32]
 80034f4:	2300      	movs	r3, #0
 80034f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034fc:	4642      	mov	r2, r8
 80034fe:	464b      	mov	r3, r9
 8003500:	f04f 0000 	mov.w	r0, #0
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	0159      	lsls	r1, r3, #5
 800350a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800350e:	0150      	lsls	r0, r2, #5
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4641      	mov	r1, r8
 8003516:	ebb2 0a01 	subs.w	sl, r2, r1
 800351a:	4649      	mov	r1, r9
 800351c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800352c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003530:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003534:	ebb2 040a 	subs.w	r4, r2, sl
 8003538:	eb63 050b 	sbc.w	r5, r3, fp
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	00eb      	lsls	r3, r5, #3
 8003546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800354a:	00e2      	lsls	r2, r4, #3
 800354c:	4614      	mov	r4, r2
 800354e:	461d      	mov	r5, r3
 8003550:	4643      	mov	r3, r8
 8003552:	18e3      	adds	r3, r4, r3
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	464b      	mov	r3, r9
 8003558:	eb45 0303 	adc.w	r3, r5, r3
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800356a:	4629      	mov	r1, r5
 800356c:	028b      	lsls	r3, r1, #10
 800356e:	4621      	mov	r1, r4
 8003570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003574:	4621      	mov	r1, r4
 8003576:	028a      	lsls	r2, r1, #10
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800357e:	2200      	movs	r2, #0
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	61fa      	str	r2, [r7, #28]
 8003584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003588:	f7fd fb8e 	bl	8000ca8 <__aeabi_uldivmod>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4613      	mov	r3, r2
 8003592:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003594:	4b0b      	ldr	r3, [pc, #44]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	3301      	adds	r3, #1
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80035a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035ae:	e002      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035b0:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80035b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3750      	adds	r7, #80	@ 0x50
 80035bc:	46bd      	mov	sp, r7
 80035be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800
 80035c8:	00f42400 	.word	0x00f42400
 80035cc:	007a1200 	.word	0x007a1200

080035d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d4:	4b03      	ldr	r3, [pc, #12]	@ (80035e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000000 	.word	0x20000000

080035e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035ec:	f7ff fff0 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b05      	ldr	r3, [pc, #20]	@ (8003608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	0b5b      	lsrs	r3, r3, #13
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4903      	ldr	r1, [pc, #12]	@ (800360c <HAL_RCC_GetPCLK2Freq+0x24>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40023800 	.word	0x40023800
 800360c:	0800b404 	.word	0x0800b404

08003610 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	220f      	movs	r2, #15
 800361e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003620:	4b12      	ldr	r3, [pc, #72]	@ (800366c <HAL_RCC_GetClockConfig+0x5c>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 0203 	and.w	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800362c:	4b0f      	ldr	r3, [pc, #60]	@ (800366c <HAL_RCC_GetClockConfig+0x5c>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003638:	4b0c      	ldr	r3, [pc, #48]	@ (800366c <HAL_RCC_GetClockConfig+0x5c>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003644:	4b09      	ldr	r3, [pc, #36]	@ (800366c <HAL_RCC_GetClockConfig+0x5c>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	08db      	lsrs	r3, r3, #3
 800364a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003652:	4b07      	ldr	r3, [pc, #28]	@ (8003670 <HAL_RCC_GetClockConfig+0x60>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 020f 	and.w	r2, r3, #15
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	601a      	str	r2, [r3, #0]
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800
 8003670:	40023c00 	.word	0x40023c00

08003674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e041      	b.n	800370a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f839 	bl	8003712 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3304      	adds	r3, #4
 80036b0:	4619      	mov	r1, r3
 80036b2:	4610      	mov	r0, r2
 80036b4:	f000 f9ca 	bl	8003a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b01      	cmp	r3, #1
 800373a:	d001      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e04e      	b.n	80037de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a23      	ldr	r2, [pc, #140]	@ (80037ec <HAL_TIM_Base_Start_IT+0xc4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d022      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x80>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800376a:	d01d      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x80>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1f      	ldr	r2, [pc, #124]	@ (80037f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d018      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x80>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a1e      	ldr	r2, [pc, #120]	@ (80037f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d013      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x80>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1c      	ldr	r2, [pc, #112]	@ (80037f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00e      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x80>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a1b      	ldr	r2, [pc, #108]	@ (80037fc <HAL_TIM_Base_Start_IT+0xd4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d009      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x80>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a19      	ldr	r2, [pc, #100]	@ (8003800 <HAL_TIM_Base_Start_IT+0xd8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d004      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x80>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a18      	ldr	r2, [pc, #96]	@ (8003804 <HAL_TIM_Base_Start_IT+0xdc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d111      	bne.n	80037cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b06      	cmp	r3, #6
 80037b8:	d010      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0201 	orr.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ca:	e007      	b.n	80037dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40010000 	.word	0x40010000
 80037f0:	40000400 	.word	0x40000400
 80037f4:	40000800 	.word	0x40000800
 80037f8:	40000c00 	.word	0x40000c00
 80037fc:	40010400 	.word	0x40010400
 8003800:	40014000 	.word	0x40014000
 8003804:	40001800 	.word	0x40001800

08003808 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d020      	beq.n	800386c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01b      	beq.n	800386c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0202 	mvn.w	r2, #2
 800383c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f8dc 	bl	8003a10 <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f8ce 	bl	80039fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f8df 	bl	8003a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d020      	beq.n	80038b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d01b      	beq.n	80038b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0204 	mvn.w	r2, #4
 8003888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2202      	movs	r2, #2
 800388e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8b6 	bl	8003a10 <HAL_TIM_IC_CaptureCallback>
 80038a4:	e005      	b.n	80038b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f8a8 	bl	80039fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f8b9 	bl	8003a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d020      	beq.n	8003904 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01b      	beq.n	8003904 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0208 	mvn.w	r2, #8
 80038d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2204      	movs	r2, #4
 80038da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f890 	bl	8003a10 <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f882 	bl	80039fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f893 	bl	8003a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	2b00      	cmp	r3, #0
 800390c:	d020      	beq.n	8003950 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0310 	and.w	r3, r3, #16
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01b      	beq.n	8003950 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0210 	mvn.w	r2, #16
 8003920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2208      	movs	r2, #8
 8003926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f86a 	bl	8003a10 <HAL_TIM_IC_CaptureCallback>
 800393c:	e005      	b.n	800394a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f85c 	bl	80039fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f86d 	bl	8003a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00c      	beq.n	8003974 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d007      	beq.n	8003974 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0201 	mvn.w	r2, #1
 800396c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f83a 	bl	80039e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00c      	beq.n	8003998 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f910 	bl	8003bb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00c      	beq.n	80039bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d007      	beq.n	80039bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f83e 	bl	8003a38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00c      	beq.n	80039e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d007      	beq.n	80039e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0220 	mvn.w	r2, #32
 80039d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f8e2 	bl	8003ba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039e0:	bf00      	nop
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a46      	ldr	r2, [pc, #280]	@ (8003b78 <TIM_Base_SetConfig+0x12c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d013      	beq.n	8003a8c <TIM_Base_SetConfig+0x40>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a6a:	d00f      	beq.n	8003a8c <TIM_Base_SetConfig+0x40>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a43      	ldr	r2, [pc, #268]	@ (8003b7c <TIM_Base_SetConfig+0x130>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00b      	beq.n	8003a8c <TIM_Base_SetConfig+0x40>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a42      	ldr	r2, [pc, #264]	@ (8003b80 <TIM_Base_SetConfig+0x134>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d007      	beq.n	8003a8c <TIM_Base_SetConfig+0x40>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a41      	ldr	r2, [pc, #260]	@ (8003b84 <TIM_Base_SetConfig+0x138>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d003      	beq.n	8003a8c <TIM_Base_SetConfig+0x40>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a40      	ldr	r2, [pc, #256]	@ (8003b88 <TIM_Base_SetConfig+0x13c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d108      	bne.n	8003a9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a35      	ldr	r2, [pc, #212]	@ (8003b78 <TIM_Base_SetConfig+0x12c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d02b      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aac:	d027      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a32      	ldr	r2, [pc, #200]	@ (8003b7c <TIM_Base_SetConfig+0x130>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d023      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a31      	ldr	r2, [pc, #196]	@ (8003b80 <TIM_Base_SetConfig+0x134>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d01f      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a30      	ldr	r2, [pc, #192]	@ (8003b84 <TIM_Base_SetConfig+0x138>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d01b      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a2f      	ldr	r2, [pc, #188]	@ (8003b88 <TIM_Base_SetConfig+0x13c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d017      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a2e      	ldr	r2, [pc, #184]	@ (8003b8c <TIM_Base_SetConfig+0x140>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a2d      	ldr	r2, [pc, #180]	@ (8003b90 <TIM_Base_SetConfig+0x144>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00f      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2c      	ldr	r2, [pc, #176]	@ (8003b94 <TIM_Base_SetConfig+0x148>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8003b98 <TIM_Base_SetConfig+0x14c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2a      	ldr	r2, [pc, #168]	@ (8003b9c <TIM_Base_SetConfig+0x150>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a29      	ldr	r2, [pc, #164]	@ (8003ba0 <TIM_Base_SetConfig+0x154>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d108      	bne.n	8003b10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a10      	ldr	r2, [pc, #64]	@ (8003b78 <TIM_Base_SetConfig+0x12c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <TIM_Base_SetConfig+0xf8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a12      	ldr	r2, [pc, #72]	@ (8003b88 <TIM_Base_SetConfig+0x13c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d103      	bne.n	8003b4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d105      	bne.n	8003b6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f023 0201 	bic.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	611a      	str	r2, [r3, #16]
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40010000 	.word	0x40010000
 8003b7c:	40000400 	.word	0x40000400
 8003b80:	40000800 	.word	0x40000800
 8003b84:	40000c00 	.word	0x40000c00
 8003b88:	40010400 	.word	0x40010400
 8003b8c:	40014000 	.word	0x40014000
 8003b90:	40014400 	.word	0x40014400
 8003b94:	40014800 	.word	0x40014800
 8003b98:	40001800 	.word	0x40001800
 8003b9c:	40001c00 	.word	0x40001c00
 8003ba0:	40002000 	.word	0x40002000

08003ba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003bd0:	4b05      	ldr	r3, [pc, #20]	@ (8003be8 <SysTick_Handler+0x1c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003bd4:	f001 fe52 	bl	800587c <xTaskGetSchedulerState>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d001      	beq.n	8003be2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003bde:	f002 fd4b 	bl	8006678 <xPortSysTickHandler>
  }
}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	e000e010 	.word	0xe000e010

08003bec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4a07      	ldr	r2, [pc, #28]	@ (8003c18 <vApplicationGetIdleTaskMemory+0x2c>)
 8003bfc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4a06      	ldr	r2, [pc, #24]	@ (8003c1c <vApplicationGetIdleTaskMemory+0x30>)
 8003c02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2280      	movs	r2, #128	@ 0x80
 8003c08:	601a      	str	r2, [r3, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20000674 	.word	0x20000674
 8003c1c:	2000071c 	.word	0x2000071c

08003c20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a07      	ldr	r2, [pc, #28]	@ (8003c4c <vApplicationGetTimerTaskMemory+0x2c>)
 8003c30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4a06      	ldr	r2, [pc, #24]	@ (8003c50 <vApplicationGetTimerTaskMemory+0x30>)
 8003c36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c3e:	601a      	str	r2, [r3, #0]
}
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	2000091c 	.word	0x2000091c
 8003c50:	200009c4 	.word	0x200009c4

08003c54 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003c5a:	2020      	movs	r0, #32
 8003c5c:	f002 fd9e 	bl	800679c <pvPortMalloc>
 8003c60:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 f808 	bl	8003c88 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8003c7e:	687b      	ldr	r3, [r7, #4]
	}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f103 0208 	add.w	r2, r3, #8
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ca0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f103 0208 	add.w	r2, r3, #8
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f103 0208 	add.w	r2, r3, #8
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	601a      	str	r2, [r3, #0]
}
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b085      	sub	sp, #20
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d40:	d103      	bne.n	8003d4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e00c      	b.n	8003d64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	e002      	b.n	8003d58 <vListInsert+0x2e>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d2f6      	bcs.n	8003d52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	601a      	str	r2, [r3, #0]
}
 8003d90:	bf00      	nop
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6892      	ldr	r2, [r2, #8]
 8003db2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6852      	ldr	r2, [r2, #4]
 8003dbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d103      	bne.n	8003dd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	1e5a      	subs	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10b      	bne.n	8003e1c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e16:	bf00      	nop
 8003e18:	bf00      	nop
 8003e1a:	e7fd      	b.n	8003e18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003e1c:	f002 fb9c 	bl	8006558 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e28:	68f9      	ldr	r1, [r7, #12]
 8003e2a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003e2c:	fb01 f303 	mul.w	r3, r1, r3
 8003e30:	441a      	add	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	68f9      	ldr	r1, [r7, #12]
 8003e50:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003e52:	fb01 f303 	mul.w	r3, r1, r3
 8003e56:	441a      	add	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	22ff      	movs	r2, #255	@ 0xff
 8003e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	22ff      	movs	r2, #255	@ 0xff
 8003e68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d114      	bne.n	8003e9c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01a      	beq.n	8003eb0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3310      	adds	r3, #16
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f001 fb36 	bl	80054f0 <xTaskRemoveFromEventList>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d012      	beq.n	8003eb0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec0 <xQueueGenericReset+0xd0>)
 8003e8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	e009      	b.n	8003eb0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3310      	adds	r3, #16
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff fef1 	bl	8003c88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3324      	adds	r3, #36	@ 0x24
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff feec 	bl	8003c88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003eb0:	f002 fb84 	bl	80065bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003eb4:	2301      	movs	r3, #1
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	e000ed04 	.word	0xe000ed04

08003ec4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08e      	sub	sp, #56	@ 0x38
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10b      	bne.n	8003ef0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003eea:	bf00      	nop
 8003eec:	bf00      	nop
 8003eee:	e7fd      	b.n	8003eec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10b      	bne.n	8003f0e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	e7fd      	b.n	8003f0a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <xQueueGenericCreateStatic+0x56>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <xQueueGenericCreateStatic+0x5a>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <xQueueGenericCreateStatic+0x5c>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10b      	bne.n	8003f3c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	623b      	str	r3, [r7, #32]
}
 8003f36:	bf00      	nop
 8003f38:	bf00      	nop
 8003f3a:	e7fd      	b.n	8003f38 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d102      	bne.n	8003f48 <xQueueGenericCreateStatic+0x84>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <xQueueGenericCreateStatic+0x88>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <xQueueGenericCreateStatic+0x8a>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10b      	bne.n	8003f6a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	61fb      	str	r3, [r7, #28]
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	e7fd      	b.n	8003f66 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f6a:	2350      	movs	r3, #80	@ 0x50
 8003f6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2b50      	cmp	r3, #80	@ 0x50
 8003f72:	d00b      	beq.n	8003f8c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	61bb      	str	r3, [r7, #24]
}
 8003f86:	bf00      	nop
 8003f88:	bf00      	nop
 8003f8a:	e7fd      	b.n	8003f88 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f8c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00d      	beq.n	8003fb4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fa0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f840 	bl	8004034 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3730      	adds	r7, #48	@ 0x30
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b08a      	sub	sp, #40	@ 0x28
 8003fc2:	af02      	add	r7, sp, #8
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10b      	bne.n	8003fea <xQueueGenericCreate+0x2c>
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	613b      	str	r3, [r7, #16]
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop
 8003fe8:	e7fd      	b.n	8003fe6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	3350      	adds	r3, #80	@ 0x50
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f002 fbcf 	bl	800679c <pvPortMalloc>
 8003ffe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d011      	beq.n	800402a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	3350      	adds	r3, #80	@ 0x50
 800400e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004018:	79fa      	ldrb	r2, [r7, #7]
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	4613      	mov	r3, r2
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f805 	bl	8004034 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800402a:	69bb      	ldr	r3, [r7, #24]
	}
 800402c:	4618      	mov	r0, r3
 800402e:	3720      	adds	r7, #32
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d103      	bne.n	8004050 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	e002      	b.n	8004056 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004062:	2101      	movs	r1, #1
 8004064:	69b8      	ldr	r0, [r7, #24]
 8004066:	f7ff fec3 	bl	8003df0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	78fa      	ldrb	r2, [r7, #3]
 800406e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08e      	sub	sp, #56	@ 0x38
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800408a:	2300      	movs	r3, #0
 800408c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10b      	bne.n	80040b0 <xQueueGenericSend+0x34>
	__asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80040aa:	bf00      	nop
 80040ac:	bf00      	nop
 80040ae:	e7fd      	b.n	80040ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d103      	bne.n	80040be <xQueueGenericSend+0x42>
 80040b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <xQueueGenericSend+0x46>
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <xQueueGenericSend+0x48>
 80040c2:	2300      	movs	r3, #0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10b      	bne.n	80040e0 <xQueueGenericSend+0x64>
	__asm volatile
 80040c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040cc:	f383 8811 	msr	BASEPRI, r3
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80040da:	bf00      	nop
 80040dc:	bf00      	nop
 80040de:	e7fd      	b.n	80040dc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d103      	bne.n	80040ee <xQueueGenericSend+0x72>
 80040e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <xQueueGenericSend+0x76>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <xQueueGenericSend+0x78>
 80040f2:	2300      	movs	r3, #0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10b      	bne.n	8004110 <xQueueGenericSend+0x94>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	623b      	str	r3, [r7, #32]
}
 800410a:	bf00      	nop
 800410c:	bf00      	nop
 800410e:	e7fd      	b.n	800410c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004110:	f001 fbb4 	bl	800587c <xTaskGetSchedulerState>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <xQueueGenericSend+0xa4>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <xQueueGenericSend+0xa8>
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <xQueueGenericSend+0xaa>
 8004124:	2300      	movs	r3, #0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10b      	bne.n	8004142 <xQueueGenericSend+0xc6>
	__asm volatile
 800412a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	61fb      	str	r3, [r7, #28]
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	e7fd      	b.n	800413e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004142:	f002 fa09 	bl	8006558 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004148:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800414a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414e:	429a      	cmp	r2, r3
 8004150:	d302      	bcc.n	8004158 <xQueueGenericSend+0xdc>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d129      	bne.n	80041ac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800415e:	f000 fbc7 	bl	80048f0 <prvCopyDataToQueue>
 8004162:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	2b00      	cmp	r3, #0
 800416a:	d010      	beq.n	800418e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800416c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416e:	3324      	adds	r3, #36	@ 0x24
 8004170:	4618      	mov	r0, r3
 8004172:	f001 f9bd 	bl	80054f0 <xTaskRemoveFromEventList>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d013      	beq.n	80041a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800417c:	4b3f      	ldr	r3, [pc, #252]	@ (800427c <xQueueGenericSend+0x200>)
 800417e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	e00a      	b.n	80041a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800418e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004190:	2b00      	cmp	r3, #0
 8004192:	d007      	beq.n	80041a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004194:	4b39      	ldr	r3, [pc, #228]	@ (800427c <xQueueGenericSend+0x200>)
 8004196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80041a4:	f002 fa0a 	bl	80065bc <vPortExitCritical>
				return pdPASS;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e063      	b.n	8004274 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d103      	bne.n	80041ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041b2:	f002 fa03 	bl	80065bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e05c      	b.n	8004274 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d106      	bne.n	80041ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041c0:	f107 0314 	add.w	r3, r7, #20
 80041c4:	4618      	mov	r0, r3
 80041c6:	f001 f9f7 	bl	80055b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041ca:	2301      	movs	r3, #1
 80041cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041ce:	f002 f9f5 	bl	80065bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041d2:	f000 ff5f 	bl	8005094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041d6:	f002 f9bf 	bl	8006558 <vPortEnterCritical>
 80041da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041e0:	b25b      	sxtb	r3, r3
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041e6:	d103      	bne.n	80041f0 <xQueueGenericSend+0x174>
 80041e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041f6:	b25b      	sxtb	r3, r3
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041fc:	d103      	bne.n	8004206 <xQueueGenericSend+0x18a>
 80041fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004206:	f002 f9d9 	bl	80065bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800420a:	1d3a      	adds	r2, r7, #4
 800420c:	f107 0314 	add.w	r3, r7, #20
 8004210:	4611      	mov	r1, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f001 f9e6 	bl	80055e4 <xTaskCheckForTimeOut>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d124      	bne.n	8004268 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800421e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004220:	f000 fc5e 	bl	8004ae0 <prvIsQueueFull>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d018      	beq.n	800425c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800422a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422c:	3310      	adds	r3, #16
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	4611      	mov	r1, r2
 8004232:	4618      	mov	r0, r3
 8004234:	f001 f90a 	bl	800544c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004238:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800423a:	f000 fbe9 	bl	8004a10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800423e:	f000 ff37 	bl	80050b0 <xTaskResumeAll>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	f47f af7c 	bne.w	8004142 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800424a:	4b0c      	ldr	r3, [pc, #48]	@ (800427c <xQueueGenericSend+0x200>)
 800424c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	e772      	b.n	8004142 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800425c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800425e:	f000 fbd7 	bl	8004a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004262:	f000 ff25 	bl	80050b0 <xTaskResumeAll>
 8004266:	e76c      	b.n	8004142 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004268:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800426a:	f000 fbd1 	bl	8004a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800426e:	f000 ff1f 	bl	80050b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004272:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004274:	4618      	mov	r0, r3
 8004276:	3738      	adds	r7, #56	@ 0x38
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	e000ed04 	.word	0xe000ed04

08004280 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b090      	sub	sp, #64	@ 0x40
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10b      	bne.n	80042b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80042aa:	bf00      	nop
 80042ac:	bf00      	nop
 80042ae:	e7fd      	b.n	80042ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d103      	bne.n	80042be <xQueueGenericSendFromISR+0x3e>
 80042b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <xQueueGenericSendFromISR+0x42>
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <xQueueGenericSendFromISR+0x44>
 80042c2:	2300      	movs	r3, #0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10b      	bne.n	80042e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80042da:	bf00      	nop
 80042dc:	bf00      	nop
 80042de:	e7fd      	b.n	80042dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d103      	bne.n	80042ee <xQueueGenericSendFromISR+0x6e>
 80042e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <xQueueGenericSendFromISR+0x72>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <xQueueGenericSendFromISR+0x74>
 80042f2:	2300      	movs	r3, #0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10b      	bne.n	8004310 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	623b      	str	r3, [r7, #32]
}
 800430a:	bf00      	nop
 800430c:	bf00      	nop
 800430e:	e7fd      	b.n	800430c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004310:	f002 fa02 	bl	8006718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004314:	f3ef 8211 	mrs	r2, BASEPRI
 8004318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	61fa      	str	r2, [r7, #28]
 800432a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800432c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800432e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004332:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004338:	429a      	cmp	r2, r3
 800433a:	d302      	bcc.n	8004342 <xQueueGenericSendFromISR+0xc2>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d12f      	bne.n	80043a2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004344:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004348:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800434c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800434e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004350:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004358:	f000 faca 	bl	80048f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800435c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004364:	d112      	bne.n	800438c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436a:	2b00      	cmp	r3, #0
 800436c:	d016      	beq.n	800439c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800436e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004370:	3324      	adds	r3, #36	@ 0x24
 8004372:	4618      	mov	r0, r3
 8004374:	f001 f8bc 	bl	80054f0 <xTaskRemoveFromEventList>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00e      	beq.n	800439c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00b      	beq.n	800439c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	e007      	b.n	800439c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800438c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004390:	3301      	adds	r3, #1
 8004392:	b2db      	uxtb	r3, r3
 8004394:	b25a      	sxtb	r2, r3
 8004396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800439c:	2301      	movs	r3, #1
 800439e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80043a0:	e001      	b.n	80043a6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80043b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3740      	adds	r7, #64	@ 0x40
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08e      	sub	sp, #56	@ 0x38
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80043ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10b      	bne.n	80043e8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	623b      	str	r3, [r7, #32]
}
 80043e2:	bf00      	nop
 80043e4:	bf00      	nop
 80043e6:	e7fd      	b.n	80043e4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80043e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00b      	beq.n	8004408 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	61fb      	str	r3, [r7, #28]
}
 8004402:	bf00      	nop
 8004404:	bf00      	nop
 8004406:	e7fd      	b.n	8004404 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d103      	bne.n	8004418 <xQueueGiveFromISR+0x5c>
 8004410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <xQueueGiveFromISR+0x60>
 8004418:	2301      	movs	r3, #1
 800441a:	e000      	b.n	800441e <xQueueGiveFromISR+0x62>
 800441c:	2300      	movs	r3, #0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10b      	bne.n	800443a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	61bb      	str	r3, [r7, #24]
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	e7fd      	b.n	8004436 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800443a:	f002 f96d 	bl	8006718 <vPortValidateInterruptPriority>
	__asm volatile
 800443e:	f3ef 8211 	mrs	r2, BASEPRI
 8004442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	617a      	str	r2, [r7, #20]
 8004454:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004456:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004458:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800445a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004464:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004466:	429a      	cmp	r2, r3
 8004468:	d22b      	bcs.n	80044c2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800446a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004470:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800447c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004484:	d112      	bne.n	80044ac <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448a:	2b00      	cmp	r3, #0
 800448c:	d016      	beq.n	80044bc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800448e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004490:	3324      	adds	r3, #36	@ 0x24
 8004492:	4618      	mov	r0, r3
 8004494:	f001 f82c 	bl	80054f0 <xTaskRemoveFromEventList>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00e      	beq.n	80044bc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00b      	beq.n	80044bc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2201      	movs	r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e007      	b.n	80044bc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044b0:	3301      	adds	r3, #1
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	b25a      	sxtb	r2, r3
 80044b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80044bc:	2301      	movs	r3, #1
 80044be:	637b      	str	r3, [r7, #52]	@ 0x34
 80044c0:	e001      	b.n	80044c6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80044c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f383 8811 	msr	BASEPRI, r3
}
 80044d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3738      	adds	r7, #56	@ 0x38
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08c      	sub	sp, #48	@ 0x30
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044e8:	2300      	movs	r3, #0
 80044ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10b      	bne.n	800450e <xQueueReceive+0x32>
	__asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	623b      	str	r3, [r7, #32]
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop
 800450c:	e7fd      	b.n	800450a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d103      	bne.n	800451c <xQueueReceive+0x40>
 8004514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <xQueueReceive+0x44>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <xQueueReceive+0x46>
 8004520:	2300      	movs	r3, #0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10b      	bne.n	800453e <xQueueReceive+0x62>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	61fb      	str	r3, [r7, #28]
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	e7fd      	b.n	800453a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800453e:	f001 f99d 	bl	800587c <xTaskGetSchedulerState>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d102      	bne.n	800454e <xQueueReceive+0x72>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <xQueueReceive+0x76>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <xQueueReceive+0x78>
 8004552:	2300      	movs	r3, #0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10b      	bne.n	8004570 <xQueueReceive+0x94>
	__asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	61bb      	str	r3, [r7, #24]
}
 800456a:	bf00      	nop
 800456c:	bf00      	nop
 800456e:	e7fd      	b.n	800456c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004570:	f001 fff2 	bl	8006558 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004578:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01f      	beq.n	80045c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004580:	68b9      	ldr	r1, [r7, #8]
 8004582:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004584:	f000 fa1e 	bl	80049c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458a:	1e5a      	subs	r2, r3, #1
 800458c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00f      	beq.n	80045b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459a:	3310      	adds	r3, #16
 800459c:	4618      	mov	r0, r3
 800459e:	f000 ffa7 	bl	80054f0 <xTaskRemoveFromEventList>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045a8:	4b3c      	ldr	r3, [pc, #240]	@ (800469c <xQueueReceive+0x1c0>)
 80045aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045b8:	f002 f800 	bl	80065bc <vPortExitCritical>
				return pdPASS;
 80045bc:	2301      	movs	r3, #1
 80045be:	e069      	b.n	8004694 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d103      	bne.n	80045ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045c6:	f001 fff9 	bl	80065bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045ca:	2300      	movs	r3, #0
 80045cc:	e062      	b.n	8004694 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d106      	bne.n	80045e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045d4:	f107 0310 	add.w	r3, r7, #16
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 ffed 	bl	80055b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045de:	2301      	movs	r3, #1
 80045e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045e2:	f001 ffeb 	bl	80065bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045e6:	f000 fd55 	bl	8005094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045ea:	f001 ffb5 	bl	8006558 <vPortEnterCritical>
 80045ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045f4:	b25b      	sxtb	r3, r3
 80045f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045fa:	d103      	bne.n	8004604 <xQueueReceive+0x128>
 80045fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004606:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800460a:	b25b      	sxtb	r3, r3
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004610:	d103      	bne.n	800461a <xQueueReceive+0x13e>
 8004612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800461a:	f001 ffcf 	bl	80065bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800461e:	1d3a      	adds	r2, r7, #4
 8004620:	f107 0310 	add.w	r3, r7, #16
 8004624:	4611      	mov	r1, r2
 8004626:	4618      	mov	r0, r3
 8004628:	f000 ffdc 	bl	80055e4 <xTaskCheckForTimeOut>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d123      	bne.n	800467a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004632:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004634:	f000 fa3e 	bl	8004ab4 <prvIsQueueEmpty>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d017      	beq.n	800466e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800463e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004640:	3324      	adds	r3, #36	@ 0x24
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	4611      	mov	r1, r2
 8004646:	4618      	mov	r0, r3
 8004648:	f000 ff00 	bl	800544c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800464c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800464e:	f000 f9df 	bl	8004a10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004652:	f000 fd2d 	bl	80050b0 <xTaskResumeAll>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d189      	bne.n	8004570 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800465c:	4b0f      	ldr	r3, [pc, #60]	@ (800469c <xQueueReceive+0x1c0>)
 800465e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	e780      	b.n	8004570 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800466e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004670:	f000 f9ce 	bl	8004a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004674:	f000 fd1c 	bl	80050b0 <xTaskResumeAll>
 8004678:	e77a      	b.n	8004570 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800467a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800467c:	f000 f9c8 	bl	8004a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004680:	f000 fd16 	bl	80050b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004684:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004686:	f000 fa15 	bl	8004ab4 <prvIsQueueEmpty>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	f43f af6f 	beq.w	8004570 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004692:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004694:	4618      	mov	r0, r3
 8004696:	3730      	adds	r7, #48	@ 0x30
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	e000ed04 	.word	0xe000ed04

080046a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08e      	sub	sp, #56	@ 0x38
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10b      	bne.n	80046d4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	623b      	str	r3, [r7, #32]
}
 80046ce:	bf00      	nop
 80046d0:	bf00      	nop
 80046d2:	e7fd      	b.n	80046d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	61fb      	str	r3, [r7, #28]
}
 80046ee:	bf00      	nop
 80046f0:	bf00      	nop
 80046f2:	e7fd      	b.n	80046f0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046f4:	f001 f8c2 	bl	800587c <xTaskGetSchedulerState>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d102      	bne.n	8004704 <xQueueSemaphoreTake+0x64>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <xQueueSemaphoreTake+0x68>
 8004704:	2301      	movs	r3, #1
 8004706:	e000      	b.n	800470a <xQueueSemaphoreTake+0x6a>
 8004708:	2300      	movs	r3, #0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10b      	bne.n	8004726 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	61bb      	str	r3, [r7, #24]
}
 8004720:	bf00      	nop
 8004722:	bf00      	nop
 8004724:	e7fd      	b.n	8004722 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004726:	f001 ff17 	bl	8006558 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800472a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800472c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004732:	2b00      	cmp	r3, #0
 8004734:	d024      	beq.n	8004780 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004738:	1e5a      	subs	r2, r3, #1
 800473a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800473e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d104      	bne.n	8004750 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004746:	f001 fa13 	bl	8005b70 <pvTaskIncrementMutexHeldCount>
 800474a:	4602      	mov	r2, r0
 800474c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800474e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00f      	beq.n	8004778 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800475a:	3310      	adds	r3, #16
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fec7 	bl	80054f0 <xTaskRemoveFromEventList>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004768:	4b54      	ldr	r3, [pc, #336]	@ (80048bc <xQueueSemaphoreTake+0x21c>)
 800476a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004778:	f001 ff20 	bl	80065bc <vPortExitCritical>
				return pdPASS;
 800477c:	2301      	movs	r3, #1
 800477e:	e098      	b.n	80048b2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d112      	bne.n	80047ac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00b      	beq.n	80047a4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	617b      	str	r3, [r7, #20]
}
 800479e:	bf00      	nop
 80047a0:	bf00      	nop
 80047a2:	e7fd      	b.n	80047a0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80047a4:	f001 ff0a 	bl	80065bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047a8:	2300      	movs	r3, #0
 80047aa:	e082      	b.n	80048b2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047b2:	f107 030c 	add.w	r3, r7, #12
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fefe 	bl	80055b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047bc:	2301      	movs	r3, #1
 80047be:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047c0:	f001 fefc 	bl	80065bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047c4:	f000 fc66 	bl	8005094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047c8:	f001 fec6 	bl	8006558 <vPortEnterCritical>
 80047cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047d2:	b25b      	sxtb	r3, r3
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047d8:	d103      	bne.n	80047e2 <xQueueSemaphoreTake+0x142>
 80047da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047e8:	b25b      	sxtb	r3, r3
 80047ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047ee:	d103      	bne.n	80047f8 <xQueueSemaphoreTake+0x158>
 80047f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047f8:	f001 fee0 	bl	80065bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047fc:	463a      	mov	r2, r7
 80047fe:	f107 030c 	add.w	r3, r7, #12
 8004802:	4611      	mov	r1, r2
 8004804:	4618      	mov	r0, r3
 8004806:	f000 feed 	bl	80055e4 <xTaskCheckForTimeOut>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d132      	bne.n	8004876 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004810:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004812:	f000 f94f 	bl	8004ab4 <prvIsQueueEmpty>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d026      	beq.n	800486a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800481c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d109      	bne.n	8004838 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004824:	f001 fe98 	bl	8006558 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	4618      	mov	r0, r3
 800482e:	f001 f843 	bl	80058b8 <xTaskPriorityInherit>
 8004832:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004834:	f001 fec2 	bl	80065bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483a:	3324      	adds	r3, #36	@ 0x24
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	4611      	mov	r1, r2
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fe03 	bl	800544c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004846:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004848:	f000 f8e2 	bl	8004a10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800484c:	f000 fc30 	bl	80050b0 <xTaskResumeAll>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	f47f af67 	bne.w	8004726 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004858:	4b18      	ldr	r3, [pc, #96]	@ (80048bc <xQueueSemaphoreTake+0x21c>)
 800485a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	e75d      	b.n	8004726 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800486a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800486c:	f000 f8d0 	bl	8004a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004870:	f000 fc1e 	bl	80050b0 <xTaskResumeAll>
 8004874:	e757      	b.n	8004726 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004876:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004878:	f000 f8ca 	bl	8004a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800487c:	f000 fc18 	bl	80050b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004880:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004882:	f000 f917 	bl	8004ab4 <prvIsQueueEmpty>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	f43f af4c 	beq.w	8004726 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800488e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00d      	beq.n	80048b0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004894:	f001 fe60 	bl	8006558 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004898:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800489a:	f000 f811 	bl	80048c0 <prvGetDisinheritPriorityAfterTimeout>
 800489e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80048a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048a6:	4618      	mov	r0, r3
 80048a8:	f001 f8de 	bl	8005a68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80048ac:	f001 fe86 	bl	80065bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3738      	adds	r7, #56	@ 0x38
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	e000ed04 	.word	0xe000ed04

080048c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d006      	beq.n	80048de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	e001      	b.n	80048e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80048e2:	68fb      	ldr	r3, [r7, #12]
	}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004904:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10d      	bne.n	800492a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d14d      	bne.n	80049b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	4618      	mov	r0, r3
 800491c:	f001 f834 	bl	8005988 <xTaskPriorityDisinherit>
 8004920:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	609a      	str	r2, [r3, #8]
 8004928:	e043      	b.n	80049b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d119      	bne.n	8004964 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6858      	ldr	r0, [r3, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004938:	461a      	mov	r2, r3
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	f004 f843 	bl	80089c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004948:	441a      	add	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	429a      	cmp	r2, r3
 8004958:	d32b      	bcc.n	80049b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	e026      	b.n	80049b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	68d8      	ldr	r0, [r3, #12]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496c:	461a      	mov	r2, r3
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	f004 f829 	bl	80089c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497c:	425b      	negs	r3, r3
 800497e:	441a      	add	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d207      	bcs.n	80049a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004998:	425b      	negs	r3, r3
 800499a:	441a      	add	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d105      	bne.n	80049b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80049ba:	697b      	ldr	r3, [r7, #20]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d018      	beq.n	8004a08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049de:	441a      	add	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d303      	bcc.n	80049f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68d9      	ldr	r1, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a00:	461a      	mov	r2, r3
 8004a02:	6838      	ldr	r0, [r7, #0]
 8004a04:	f003 ffdf 	bl	80089c6 <memcpy>
	}
}
 8004a08:	bf00      	nop
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a18:	f001 fd9e 	bl	8006558 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a24:	e011      	b.n	8004a4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d012      	beq.n	8004a54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3324      	adds	r3, #36	@ 0x24
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fd5c 	bl	80054f0 <xTaskRemoveFromEventList>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a3e:	f000 fe35 	bl	80056ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	dce9      	bgt.n	8004a26 <prvUnlockQueue+0x16>
 8004a52:	e000      	b.n	8004a56 <prvUnlockQueue+0x46>
					break;
 8004a54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	22ff      	movs	r2, #255	@ 0xff
 8004a5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004a5e:	f001 fdad 	bl	80065bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a62:	f001 fd79 	bl	8006558 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a6e:	e011      	b.n	8004a94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d012      	beq.n	8004a9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3310      	adds	r3, #16
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fd37 	bl	80054f0 <xTaskRemoveFromEventList>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a88:	f000 fe10 	bl	80056ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a8c:	7bbb      	ldrb	r3, [r7, #14]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	dce9      	bgt.n	8004a70 <prvUnlockQueue+0x60>
 8004a9c:	e000      	b.n	8004aa0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	22ff      	movs	r2, #255	@ 0xff
 8004aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004aa8:	f001 fd88 	bl	80065bc <vPortExitCritical>
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004abc:	f001 fd4c 	bl	8006558 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	e001      	b.n	8004ad2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ad2:	f001 fd73 	bl	80065bc <vPortExitCritical>

	return xReturn;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ae8:	f001 fd36 	bl	8006558 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d102      	bne.n	8004afe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004af8:	2301      	movs	r3, #1
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	e001      	b.n	8004b02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b02:	f001 fd5b 	bl	80065bc <vPortExitCritical>

	return xReturn;
 8004b06:	68fb      	ldr	r3, [r7, #12]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	e014      	b.n	8004b4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b20:	4a0f      	ldr	r2, [pc, #60]	@ (8004b60 <vQueueAddToRegistry+0x50>)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10b      	bne.n	8004b44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b2c:	490c      	ldr	r1, [pc, #48]	@ (8004b60 <vQueueAddToRegistry+0x50>)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b36:	4a0a      	ldr	r2, [pc, #40]	@ (8004b60 <vQueueAddToRegistry+0x50>)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b42:	e006      	b.n	8004b52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3301      	adds	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2b07      	cmp	r3, #7
 8004b4e:	d9e7      	bls.n	8004b20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20000dc4 	.word	0x20000dc4

08004b64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b74:	f001 fcf0 	bl	8006558 <vPortEnterCritical>
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b7e:	b25b      	sxtb	r3, r3
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b84:	d103      	bne.n	8004b8e <vQueueWaitForMessageRestricted+0x2a>
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b94:	b25b      	sxtb	r3, r3
 8004b96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b9a:	d103      	bne.n	8004ba4 <vQueueWaitForMessageRestricted+0x40>
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ba4:	f001 fd0a 	bl	80065bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d106      	bne.n	8004bbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	3324      	adds	r3, #36	@ 0x24
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fc6d 	bl	8005498 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004bbe:	6978      	ldr	r0, [r7, #20]
 8004bc0:	f7ff ff26 	bl	8004a10 <prvUnlockQueue>
	}
 8004bc4:	bf00      	nop
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08e      	sub	sp, #56	@ 0x38
 8004bd0:	af04      	add	r7, sp, #16
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10b      	bne.n	8004bf8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	623b      	str	r3, [r7, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	bf00      	nop
 8004bf6:	e7fd      	b.n	8004bf4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10b      	bne.n	8004c16 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	61fb      	str	r3, [r7, #28]
}
 8004c10:	bf00      	nop
 8004c12:	bf00      	nop
 8004c14:	e7fd      	b.n	8004c12 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c16:	23a8      	movs	r3, #168	@ 0xa8
 8004c18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2ba8      	cmp	r3, #168	@ 0xa8
 8004c1e:	d00b      	beq.n	8004c38 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	61bb      	str	r3, [r7, #24]
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c38:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01e      	beq.n	8004c7e <xTaskCreateStatic+0xb2>
 8004c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d01b      	beq.n	8004c7e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c48:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c4e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c58:	2300      	movs	r3, #0
 8004c5a:	9303      	str	r3, [sp, #12]
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5e:	9302      	str	r3, [sp, #8]
 8004c60:	f107 0314 	add.w	r3, r7, #20
 8004c64:	9301      	str	r3, [sp, #4]
 8004c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f851 	bl	8004d18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c78:	f000 f8f6 	bl	8004e68 <prvAddNewTaskToReadyList>
 8004c7c:	e001      	b.n	8004c82 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c82:	697b      	ldr	r3, [r7, #20]
	}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3728      	adds	r7, #40	@ 0x28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08c      	sub	sp, #48	@ 0x30
 8004c90:	af04      	add	r7, sp, #16
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c9c:	88fb      	ldrh	r3, [r7, #6]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f001 fd7b 	bl	800679c <pvPortMalloc>
 8004ca6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00e      	beq.n	8004ccc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004cae:	20a8      	movs	r0, #168	@ 0xa8
 8004cb0:	f001 fd74 	bl	800679c <pvPortMalloc>
 8004cb4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8004cc2:	e005      	b.n	8004cd0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cc4:	6978      	ldr	r0, [r7, #20]
 8004cc6:	f001 fe37 	bl	8006938 <vPortFree>
 8004cca:	e001      	b.n	8004cd0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d017      	beq.n	8004d06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cde:	88fa      	ldrh	r2, [r7, #6]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	9303      	str	r3, [sp, #12]
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	9302      	str	r3, [sp, #8]
 8004ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cea:	9301      	str	r3, [sp, #4]
 8004cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 f80f 	bl	8004d18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cfa:	69f8      	ldr	r0, [r7, #28]
 8004cfc:	f000 f8b4 	bl	8004e68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d00:	2301      	movs	r3, #1
 8004d02:	61bb      	str	r3, [r7, #24]
 8004d04:	e002      	b.n	8004d0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d0c:	69bb      	ldr	r3, [r7, #24]
	}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d28:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	461a      	mov	r2, r3
 8004d30:	21a5      	movs	r1, #165	@ 0xa5
 8004d32:	f003 fd38 	bl	80087a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d40:	3b01      	subs	r3, #1
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	f023 0307 	bic.w	r3, r3, #7
 8004d4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00b      	beq.n	8004d72 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	617b      	str	r3, [r7, #20]
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	e7fd      	b.n	8004d6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01f      	beq.n	8004db8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d78:	2300      	movs	r3, #0
 8004d7a:	61fb      	str	r3, [r7, #28]
 8004d7c:	e012      	b.n	8004da4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	4413      	add	r3, r2
 8004d84:	7819      	ldrb	r1, [r3, #0]
 8004d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	3334      	adds	r3, #52	@ 0x34
 8004d8e:	460a      	mov	r2, r1
 8004d90:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	4413      	add	r3, r2
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d006      	beq.n	8004dac <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	3301      	adds	r3, #1
 8004da2:	61fb      	str	r3, [r7, #28]
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2b0f      	cmp	r3, #15
 8004da8:	d9e9      	bls.n	8004d7e <prvInitialiseNewTask+0x66>
 8004daa:	e000      	b.n	8004dae <prvInitialiseNewTask+0x96>
			{
				break;
 8004dac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004db6:	e003      	b.n	8004dc0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc2:	2b37      	cmp	r3, #55	@ 0x37
 8004dc4:	d901      	bls.n	8004dca <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004dc6:	2337      	movs	r3, #55	@ 0x37
 8004dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dd4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd8:	2200      	movs	r2, #0
 8004dda:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dde:	3304      	adds	r3, #4
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fe ff71 	bl	8003cc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de8:	3318      	adds	r3, #24
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe ff6c 	bl	8003cc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e04:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e18:	3354      	adds	r3, #84	@ 0x54
 8004e1a:	224c      	movs	r2, #76	@ 0x4c
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f003 fcc1 	bl	80087a6 <memset>
 8004e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e26:	4a0d      	ldr	r2, [pc, #52]	@ (8004e5c <prvInitialiseNewTask+0x144>)
 8004e28:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2c:	4a0c      	ldr	r2, [pc, #48]	@ (8004e60 <prvInitialiseNewTask+0x148>)
 8004e2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e32:	4a0c      	ldr	r2, [pc, #48]	@ (8004e64 <prvInitialiseNewTask+0x14c>)
 8004e34:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	68f9      	ldr	r1, [r7, #12]
 8004e3a:	69b8      	ldr	r0, [r7, #24]
 8004e3c:	f001 fa5a 	bl	80062f4 <pxPortInitialiseStack>
 8004e40:	4602      	mov	r2, r0
 8004e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e52:	bf00      	nop
 8004e54:	3720      	adds	r7, #32
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20005058 	.word	0x20005058
 8004e60:	200050c0 	.word	0x200050c0
 8004e64:	20005128 	.word	0x20005128

08004e68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e70:	f001 fb72 	bl	8006558 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e74:	4b2d      	ldr	r3, [pc, #180]	@ (8004f2c <prvAddNewTaskToReadyList+0xc4>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8004f2c <prvAddNewTaskToReadyList+0xc4>)
 8004e7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8004f30 <prvAddNewTaskToReadyList+0xc8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e86:	4a2a      	ldr	r2, [pc, #168]	@ (8004f30 <prvAddNewTaskToReadyList+0xc8>)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e8c:	4b27      	ldr	r3, [pc, #156]	@ (8004f2c <prvAddNewTaskToReadyList+0xc4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d110      	bne.n	8004eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e94:	f000 fc2e 	bl	80056f4 <prvInitialiseTaskLists>
 8004e98:	e00d      	b.n	8004eb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e9a:	4b26      	ldr	r3, [pc, #152]	@ (8004f34 <prvAddNewTaskToReadyList+0xcc>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d109      	bne.n	8004eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ea2:	4b23      	ldr	r3, [pc, #140]	@ (8004f30 <prvAddNewTaskToReadyList+0xc8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d802      	bhi.n	8004eb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004eb0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f30 <prvAddNewTaskToReadyList+0xc8>)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004eb6:	4b20      	ldr	r3, [pc, #128]	@ (8004f38 <prvAddNewTaskToReadyList+0xd0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8004f38 <prvAddNewTaskToReadyList+0xd0>)
 8004ebe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f38 <prvAddNewTaskToReadyList+0xd0>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f3c <prvAddNewTaskToReadyList+0xd4>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d903      	bls.n	8004edc <prvAddNewTaskToReadyList+0x74>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed8:	4a18      	ldr	r2, [pc, #96]	@ (8004f3c <prvAddNewTaskToReadyList+0xd4>)
 8004eda:	6013      	str	r3, [r2, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4a15      	ldr	r2, [pc, #84]	@ (8004f40 <prvAddNewTaskToReadyList+0xd8>)
 8004eea:	441a      	add	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	f7fe fef5 	bl	8003ce2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ef8:	f001 fb60 	bl	80065bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004efc:	4b0d      	ldr	r3, [pc, #52]	@ (8004f34 <prvAddNewTaskToReadyList+0xcc>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00e      	beq.n	8004f22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f04:	4b0a      	ldr	r3, [pc, #40]	@ (8004f30 <prvAddNewTaskToReadyList+0xc8>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d207      	bcs.n	8004f22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f12:	4b0c      	ldr	r3, [pc, #48]	@ (8004f44 <prvAddNewTaskToReadyList+0xdc>)
 8004f14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f22:	bf00      	nop
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	200012d8 	.word	0x200012d8
 8004f30:	20000e04 	.word	0x20000e04
 8004f34:	200012e4 	.word	0x200012e4
 8004f38:	200012f4 	.word	0x200012f4
 8004f3c:	200012e0 	.word	0x200012e0
 8004f40:	20000e08 	.word	0x20000e08
 8004f44:	e000ed04 	.word	0xe000ed04

08004f48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d018      	beq.n	8004f8c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f5a:	4b14      	ldr	r3, [pc, #80]	@ (8004fac <vTaskDelay+0x64>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <vTaskDelay+0x32>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	60bb      	str	r3, [r7, #8]
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	e7fd      	b.n	8004f76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f7a:	f000 f88b 	bl	8005094 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f7e:	2100      	movs	r1, #0
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fe09 	bl	8005b98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f86:	f000 f893 	bl	80050b0 <xTaskResumeAll>
 8004f8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d107      	bne.n	8004fa2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004f92:	4b07      	ldr	r3, [pc, #28]	@ (8004fb0 <vTaskDelay+0x68>)
 8004f94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20001300 	.word	0x20001300
 8004fb0:	e000ed04 	.word	0xe000ed04

08004fb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08a      	sub	sp, #40	@ 0x28
 8004fb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004fc2:	463a      	mov	r2, r7
 8004fc4:	1d39      	adds	r1, r7, #4
 8004fc6:	f107 0308 	add.w	r3, r7, #8
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fe fe0e 	bl	8003bec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004fd0:	6839      	ldr	r1, [r7, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	9202      	str	r2, [sp, #8]
 8004fd8:	9301      	str	r3, [sp, #4]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	460a      	mov	r2, r1
 8004fe2:	4924      	ldr	r1, [pc, #144]	@ (8005074 <vTaskStartScheduler+0xc0>)
 8004fe4:	4824      	ldr	r0, [pc, #144]	@ (8005078 <vTaskStartScheduler+0xc4>)
 8004fe6:	f7ff fdf1 	bl	8004bcc <xTaskCreateStatic>
 8004fea:	4603      	mov	r3, r0
 8004fec:	4a23      	ldr	r2, [pc, #140]	@ (800507c <vTaskStartScheduler+0xc8>)
 8004fee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ff0:	4b22      	ldr	r3, [pc, #136]	@ (800507c <vTaskStartScheduler+0xc8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	e001      	b.n	8005002 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d102      	bne.n	800500e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005008:	f000 fe1a 	bl	8005c40 <xTimerCreateTimerTask>
 800500c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d11b      	bne.n	800504c <vTaskStartScheduler+0x98>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	613b      	str	r3, [r7, #16]
}
 8005026:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005028:	4b15      	ldr	r3, [pc, #84]	@ (8005080 <vTaskStartScheduler+0xcc>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3354      	adds	r3, #84	@ 0x54
 800502e:	4a15      	ldr	r2, [pc, #84]	@ (8005084 <vTaskStartScheduler+0xd0>)
 8005030:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005032:	4b15      	ldr	r3, [pc, #84]	@ (8005088 <vTaskStartScheduler+0xd4>)
 8005034:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005038:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800503a:	4b14      	ldr	r3, [pc, #80]	@ (800508c <vTaskStartScheduler+0xd8>)
 800503c:	2201      	movs	r2, #1
 800503e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005040:	4b13      	ldr	r3, [pc, #76]	@ (8005090 <vTaskStartScheduler+0xdc>)
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005046:	f001 f9e3 	bl	8006410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800504a:	e00f      	b.n	800506c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005052:	d10b      	bne.n	800506c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	60fb      	str	r3, [r7, #12]
}
 8005066:	bf00      	nop
 8005068:	bf00      	nop
 800506a:	e7fd      	b.n	8005068 <vTaskStartScheduler+0xb4>
}
 800506c:	bf00      	nop
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	0800b3dc 	.word	0x0800b3dc
 8005078:	080056c5 	.word	0x080056c5
 800507c:	200012fc 	.word	0x200012fc
 8005080:	20000e04 	.word	0x20000e04
 8005084:	20000184 	.word	0x20000184
 8005088:	200012f8 	.word	0x200012f8
 800508c:	200012e4 	.word	0x200012e4
 8005090:	200012dc 	.word	0x200012dc

08005094 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005098:	4b04      	ldr	r3, [pc, #16]	@ (80050ac <vTaskSuspendAll+0x18>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3301      	adds	r3, #1
 800509e:	4a03      	ldr	r2, [pc, #12]	@ (80050ac <vTaskSuspendAll+0x18>)
 80050a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80050a2:	bf00      	nop
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	20001300 	.word	0x20001300

080050b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80050be:	4b42      	ldr	r3, [pc, #264]	@ (80051c8 <xTaskResumeAll+0x118>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10b      	bne.n	80050de <xTaskResumeAll+0x2e>
	__asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	603b      	str	r3, [r7, #0]
}
 80050d8:	bf00      	nop
 80050da:	bf00      	nop
 80050dc:	e7fd      	b.n	80050da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050de:	f001 fa3b 	bl	8006558 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050e2:	4b39      	ldr	r3, [pc, #228]	@ (80051c8 <xTaskResumeAll+0x118>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	4a37      	ldr	r2, [pc, #220]	@ (80051c8 <xTaskResumeAll+0x118>)
 80050ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050ec:	4b36      	ldr	r3, [pc, #216]	@ (80051c8 <xTaskResumeAll+0x118>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d162      	bne.n	80051ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050f4:	4b35      	ldr	r3, [pc, #212]	@ (80051cc <xTaskResumeAll+0x11c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d05e      	beq.n	80051ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050fc:	e02f      	b.n	800515e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050fe:	4b34      	ldr	r3, [pc, #208]	@ (80051d0 <xTaskResumeAll+0x120>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3318      	adds	r3, #24
 800510a:	4618      	mov	r0, r3
 800510c:	f7fe fe46 	bl	8003d9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	3304      	adds	r3, #4
 8005114:	4618      	mov	r0, r3
 8005116:	f7fe fe41 	bl	8003d9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800511e:	4b2d      	ldr	r3, [pc, #180]	@ (80051d4 <xTaskResumeAll+0x124>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d903      	bls.n	800512e <xTaskResumeAll+0x7e>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512a:	4a2a      	ldr	r2, [pc, #168]	@ (80051d4 <xTaskResumeAll+0x124>)
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4a27      	ldr	r2, [pc, #156]	@ (80051d8 <xTaskResumeAll+0x128>)
 800513c:	441a      	add	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	3304      	adds	r3, #4
 8005142:	4619      	mov	r1, r3
 8005144:	4610      	mov	r0, r2
 8005146:	f7fe fdcc 	bl	8003ce2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800514e:	4b23      	ldr	r3, [pc, #140]	@ (80051dc <xTaskResumeAll+0x12c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005154:	429a      	cmp	r2, r3
 8005156:	d302      	bcc.n	800515e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005158:	4b21      	ldr	r3, [pc, #132]	@ (80051e0 <xTaskResumeAll+0x130>)
 800515a:	2201      	movs	r2, #1
 800515c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800515e:	4b1c      	ldr	r3, [pc, #112]	@ (80051d0 <xTaskResumeAll+0x120>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1cb      	bne.n	80050fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800516c:	f000 fb66 	bl	800583c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005170:	4b1c      	ldr	r3, [pc, #112]	@ (80051e4 <xTaskResumeAll+0x134>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d010      	beq.n	800519e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800517c:	f000 f846 	bl	800520c <xTaskIncrementTick>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005186:	4b16      	ldr	r3, [pc, #88]	@ (80051e0 <xTaskResumeAll+0x130>)
 8005188:	2201      	movs	r2, #1
 800518a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3b01      	subs	r3, #1
 8005190:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f1      	bne.n	800517c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005198:	4b12      	ldr	r3, [pc, #72]	@ (80051e4 <xTaskResumeAll+0x134>)
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800519e:	4b10      	ldr	r3, [pc, #64]	@ (80051e0 <xTaskResumeAll+0x130>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051a6:	2301      	movs	r3, #1
 80051a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051aa:	4b0f      	ldr	r3, [pc, #60]	@ (80051e8 <xTaskResumeAll+0x138>)
 80051ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051ba:	f001 f9ff 	bl	80065bc <vPortExitCritical>

	return xAlreadyYielded;
 80051be:	68bb      	ldr	r3, [r7, #8]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	20001300 	.word	0x20001300
 80051cc:	200012d8 	.word	0x200012d8
 80051d0:	20001298 	.word	0x20001298
 80051d4:	200012e0 	.word	0x200012e0
 80051d8:	20000e08 	.word	0x20000e08
 80051dc:	20000e04 	.word	0x20000e04
 80051e0:	200012ec 	.word	0x200012ec
 80051e4:	200012e8 	.word	0x200012e8
 80051e8:	e000ed04 	.word	0xe000ed04

080051ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80051f2:	4b05      	ldr	r3, [pc, #20]	@ (8005208 <xTaskGetTickCount+0x1c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80051f8:	687b      	ldr	r3, [r7, #4]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	200012dc 	.word	0x200012dc

0800520c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005212:	2300      	movs	r3, #0
 8005214:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005216:	4b4f      	ldr	r3, [pc, #316]	@ (8005354 <xTaskIncrementTick+0x148>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	f040 8090 	bne.w	8005340 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005220:	4b4d      	ldr	r3, [pc, #308]	@ (8005358 <xTaskIncrementTick+0x14c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3301      	adds	r3, #1
 8005226:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005228:	4a4b      	ldr	r2, [pc, #300]	@ (8005358 <xTaskIncrementTick+0x14c>)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d121      	bne.n	8005278 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005234:	4b49      	ldr	r3, [pc, #292]	@ (800535c <xTaskIncrementTick+0x150>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00b      	beq.n	8005256 <xTaskIncrementTick+0x4a>
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	603b      	str	r3, [r7, #0]
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop
 8005254:	e7fd      	b.n	8005252 <xTaskIncrementTick+0x46>
 8005256:	4b41      	ldr	r3, [pc, #260]	@ (800535c <xTaskIncrementTick+0x150>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	4b40      	ldr	r3, [pc, #256]	@ (8005360 <xTaskIncrementTick+0x154>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a3e      	ldr	r2, [pc, #248]	@ (800535c <xTaskIncrementTick+0x150>)
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	4a3e      	ldr	r2, [pc, #248]	@ (8005360 <xTaskIncrementTick+0x154>)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	4b3e      	ldr	r3, [pc, #248]	@ (8005364 <xTaskIncrementTick+0x158>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3301      	adds	r3, #1
 8005270:	4a3c      	ldr	r2, [pc, #240]	@ (8005364 <xTaskIncrementTick+0x158>)
 8005272:	6013      	str	r3, [r2, #0]
 8005274:	f000 fae2 	bl	800583c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005278:	4b3b      	ldr	r3, [pc, #236]	@ (8005368 <xTaskIncrementTick+0x15c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	429a      	cmp	r2, r3
 8005280:	d349      	bcc.n	8005316 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005282:	4b36      	ldr	r3, [pc, #216]	@ (800535c <xTaskIncrementTick+0x150>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800528c:	4b36      	ldr	r3, [pc, #216]	@ (8005368 <xTaskIncrementTick+0x15c>)
 800528e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005292:	601a      	str	r2, [r3, #0]
					break;
 8005294:	e03f      	b.n	8005316 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005296:	4b31      	ldr	r3, [pc, #196]	@ (800535c <xTaskIncrementTick+0x150>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d203      	bcs.n	80052b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005368 <xTaskIncrementTick+0x15c>)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80052b4:	e02f      	b.n	8005316 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	3304      	adds	r3, #4
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fe fd6e 	bl	8003d9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d004      	beq.n	80052d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	3318      	adds	r3, #24
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fe fd65 	bl	8003d9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052d6:	4b25      	ldr	r3, [pc, #148]	@ (800536c <xTaskIncrementTick+0x160>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d903      	bls.n	80052e6 <xTaskIncrementTick+0xda>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e2:	4a22      	ldr	r2, [pc, #136]	@ (800536c <xTaskIncrementTick+0x160>)
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005370 <xTaskIncrementTick+0x164>)
 80052f4:	441a      	add	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	3304      	adds	r3, #4
 80052fa:	4619      	mov	r1, r3
 80052fc:	4610      	mov	r0, r2
 80052fe:	f7fe fcf0 	bl	8003ce2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005306:	4b1b      	ldr	r3, [pc, #108]	@ (8005374 <xTaskIncrementTick+0x168>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530c:	429a      	cmp	r2, r3
 800530e:	d3b8      	bcc.n	8005282 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005310:	2301      	movs	r3, #1
 8005312:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005314:	e7b5      	b.n	8005282 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005316:	4b17      	ldr	r3, [pc, #92]	@ (8005374 <xTaskIncrementTick+0x168>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800531c:	4914      	ldr	r1, [pc, #80]	@ (8005370 <xTaskIncrementTick+0x164>)
 800531e:	4613      	mov	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	440b      	add	r3, r1
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d901      	bls.n	8005332 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800532e:	2301      	movs	r3, #1
 8005330:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005332:	4b11      	ldr	r3, [pc, #68]	@ (8005378 <xTaskIncrementTick+0x16c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d007      	beq.n	800534a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800533a:	2301      	movs	r3, #1
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	e004      	b.n	800534a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005340:	4b0e      	ldr	r3, [pc, #56]	@ (800537c <xTaskIncrementTick+0x170>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3301      	adds	r3, #1
 8005346:	4a0d      	ldr	r2, [pc, #52]	@ (800537c <xTaskIncrementTick+0x170>)
 8005348:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800534a:	697b      	ldr	r3, [r7, #20]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	20001300 	.word	0x20001300
 8005358:	200012dc 	.word	0x200012dc
 800535c:	20001290 	.word	0x20001290
 8005360:	20001294 	.word	0x20001294
 8005364:	200012f0 	.word	0x200012f0
 8005368:	200012f8 	.word	0x200012f8
 800536c:	200012e0 	.word	0x200012e0
 8005370:	20000e08 	.word	0x20000e08
 8005374:	20000e04 	.word	0x20000e04
 8005378:	200012ec 	.word	0x200012ec
 800537c:	200012e8 	.word	0x200012e8

08005380 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005386:	4b2b      	ldr	r3, [pc, #172]	@ (8005434 <vTaskSwitchContext+0xb4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800538e:	4b2a      	ldr	r3, [pc, #168]	@ (8005438 <vTaskSwitchContext+0xb8>)
 8005390:	2201      	movs	r2, #1
 8005392:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005394:	e047      	b.n	8005426 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005396:	4b28      	ldr	r3, [pc, #160]	@ (8005438 <vTaskSwitchContext+0xb8>)
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800539c:	4b27      	ldr	r3, [pc, #156]	@ (800543c <vTaskSwitchContext+0xbc>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	e011      	b.n	80053c8 <vTaskSwitchContext+0x48>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10b      	bne.n	80053c2 <vTaskSwitchContext+0x42>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	607b      	str	r3, [r7, #4]
}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	e7fd      	b.n	80053be <vTaskSwitchContext+0x3e>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	491d      	ldr	r1, [pc, #116]	@ (8005440 <vTaskSwitchContext+0xc0>)
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0e3      	beq.n	80053a4 <vTaskSwitchContext+0x24>
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4613      	mov	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4a16      	ldr	r2, [pc, #88]	@ (8005440 <vTaskSwitchContext+0xc0>)
 80053e8:	4413      	add	r3, r2
 80053ea:	60bb      	str	r3, [r7, #8]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	605a      	str	r2, [r3, #4]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	3308      	adds	r3, #8
 80053fe:	429a      	cmp	r2, r3
 8005400:	d104      	bne.n	800540c <vTaskSwitchContext+0x8c>
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	605a      	str	r2, [r3, #4]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	4a0c      	ldr	r2, [pc, #48]	@ (8005444 <vTaskSwitchContext+0xc4>)
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	4a09      	ldr	r2, [pc, #36]	@ (800543c <vTaskSwitchContext+0xbc>)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800541c:	4b09      	ldr	r3, [pc, #36]	@ (8005444 <vTaskSwitchContext+0xc4>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3354      	adds	r3, #84	@ 0x54
 8005422:	4a09      	ldr	r2, [pc, #36]	@ (8005448 <vTaskSwitchContext+0xc8>)
 8005424:	6013      	str	r3, [r2, #0]
}
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20001300 	.word	0x20001300
 8005438:	200012ec 	.word	0x200012ec
 800543c:	200012e0 	.word	0x200012e0
 8005440:	20000e08 	.word	0x20000e08
 8005444:	20000e04 	.word	0x20000e04
 8005448:	20000184 	.word	0x20000184

0800544c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10b      	bne.n	8005474 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	60fb      	str	r3, [r7, #12]
}
 800546e:	bf00      	nop
 8005470:	bf00      	nop
 8005472:	e7fd      	b.n	8005470 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005474:	4b07      	ldr	r3, [pc, #28]	@ (8005494 <vTaskPlaceOnEventList+0x48>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3318      	adds	r3, #24
 800547a:	4619      	mov	r1, r3
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7fe fc54 	bl	8003d2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005482:	2101      	movs	r1, #1
 8005484:	6838      	ldr	r0, [r7, #0]
 8005486:	f000 fb87 	bl	8005b98 <prvAddCurrentTaskToDelayedList>
}
 800548a:	bf00      	nop
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20000e04 	.word	0x20000e04

08005498 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10b      	bne.n	80054c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	617b      	str	r3, [r7, #20]
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	e7fd      	b.n	80054be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054c2:	4b0a      	ldr	r3, [pc, #40]	@ (80054ec <vTaskPlaceOnEventListRestricted+0x54>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3318      	adds	r3, #24
 80054c8:	4619      	mov	r1, r3
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f7fe fc09 	bl	8003ce2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80054d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80054da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	68b8      	ldr	r0, [r7, #8]
 80054e0:	f000 fb5a 	bl	8005b98 <prvAddCurrentTaskToDelayedList>
	}
 80054e4:	bf00      	nop
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20000e04 	.word	0x20000e04

080054f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10b      	bne.n	800551e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	60fb      	str	r3, [r7, #12]
}
 8005518:	bf00      	nop
 800551a:	bf00      	nop
 800551c:	e7fd      	b.n	800551a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	3318      	adds	r3, #24
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe fc3a 	bl	8003d9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005528:	4b1d      	ldr	r3, [pc, #116]	@ (80055a0 <xTaskRemoveFromEventList+0xb0>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d11d      	bne.n	800556c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	3304      	adds	r3, #4
 8005534:	4618      	mov	r0, r3
 8005536:	f7fe fc31 	bl	8003d9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800553e:	4b19      	ldr	r3, [pc, #100]	@ (80055a4 <xTaskRemoveFromEventList+0xb4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d903      	bls.n	800554e <xTaskRemoveFromEventList+0x5e>
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554a:	4a16      	ldr	r2, [pc, #88]	@ (80055a4 <xTaskRemoveFromEventList+0xb4>)
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005552:	4613      	mov	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4a13      	ldr	r2, [pc, #76]	@ (80055a8 <xTaskRemoveFromEventList+0xb8>)
 800555c:	441a      	add	r2, r3
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	3304      	adds	r3, #4
 8005562:	4619      	mov	r1, r3
 8005564:	4610      	mov	r0, r2
 8005566:	f7fe fbbc 	bl	8003ce2 <vListInsertEnd>
 800556a:	e005      	b.n	8005578 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	3318      	adds	r3, #24
 8005570:	4619      	mov	r1, r3
 8005572:	480e      	ldr	r0, [pc, #56]	@ (80055ac <xTaskRemoveFromEventList+0xbc>)
 8005574:	f7fe fbb5 	bl	8003ce2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800557c:	4b0c      	ldr	r3, [pc, #48]	@ (80055b0 <xTaskRemoveFromEventList+0xc0>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005582:	429a      	cmp	r2, r3
 8005584:	d905      	bls.n	8005592 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005586:	2301      	movs	r3, #1
 8005588:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800558a:	4b0a      	ldr	r3, [pc, #40]	@ (80055b4 <xTaskRemoveFromEventList+0xc4>)
 800558c:	2201      	movs	r2, #1
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	e001      	b.n	8005596 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005596:	697b      	ldr	r3, [r7, #20]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	20001300 	.word	0x20001300
 80055a4:	200012e0 	.word	0x200012e0
 80055a8:	20000e08 	.word	0x20000e08
 80055ac:	20001298 	.word	0x20001298
 80055b0:	20000e04 	.word	0x20000e04
 80055b4:	200012ec 	.word	0x200012ec

080055b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055c0:	4b06      	ldr	r3, [pc, #24]	@ (80055dc <vTaskInternalSetTimeOutState+0x24>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055c8:	4b05      	ldr	r3, [pc, #20]	@ (80055e0 <vTaskInternalSetTimeOutState+0x28>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	605a      	str	r2, [r3, #4]
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	200012f0 	.word	0x200012f0
 80055e0:	200012dc 	.word	0x200012dc

080055e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10b      	bne.n	800560c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	613b      	str	r3, [r7, #16]
}
 8005606:	bf00      	nop
 8005608:	bf00      	nop
 800560a:	e7fd      	b.n	8005608 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10b      	bne.n	800562a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	60fb      	str	r3, [r7, #12]
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop
 8005628:	e7fd      	b.n	8005626 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800562a:	f000 ff95 	bl	8006558 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800562e:	4b1d      	ldr	r3, [pc, #116]	@ (80056a4 <xTaskCheckForTimeOut+0xc0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005646:	d102      	bne.n	800564e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005648:	2300      	movs	r3, #0
 800564a:	61fb      	str	r3, [r7, #28]
 800564c:	e023      	b.n	8005696 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4b15      	ldr	r3, [pc, #84]	@ (80056a8 <xTaskCheckForTimeOut+0xc4>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d007      	beq.n	800566a <xTaskCheckForTimeOut+0x86>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	429a      	cmp	r2, r3
 8005662:	d302      	bcc.n	800566a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005664:	2301      	movs	r3, #1
 8005666:	61fb      	str	r3, [r7, #28]
 8005668:	e015      	b.n	8005696 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	429a      	cmp	r2, r3
 8005672:	d20b      	bcs.n	800568c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	1ad2      	subs	r2, r2, r3
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff ff99 	bl	80055b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005686:	2300      	movs	r3, #0
 8005688:	61fb      	str	r3, [r7, #28]
 800568a:	e004      	b.n	8005696 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005692:	2301      	movs	r3, #1
 8005694:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005696:	f000 ff91 	bl	80065bc <vPortExitCritical>

	return xReturn;
 800569a:	69fb      	ldr	r3, [r7, #28]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3720      	adds	r7, #32
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	200012dc 	.word	0x200012dc
 80056a8:	200012f0 	.word	0x200012f0

080056ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056b0:	4b03      	ldr	r3, [pc, #12]	@ (80056c0 <vTaskMissedYield+0x14>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	601a      	str	r2, [r3, #0]
}
 80056b6:	bf00      	nop
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	200012ec 	.word	0x200012ec

080056c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056cc:	f000 f852 	bl	8005774 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056d0:	4b06      	ldr	r3, [pc, #24]	@ (80056ec <prvIdleTask+0x28>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d9f9      	bls.n	80056cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80056d8:	4b05      	ldr	r3, [pc, #20]	@ (80056f0 <prvIdleTask+0x2c>)
 80056da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056e8:	e7f0      	b.n	80056cc <prvIdleTask+0x8>
 80056ea:	bf00      	nop
 80056ec:	20000e08 	.word	0x20000e08
 80056f0:	e000ed04 	.word	0xe000ed04

080056f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056fa:	2300      	movs	r3, #0
 80056fc:	607b      	str	r3, [r7, #4]
 80056fe:	e00c      	b.n	800571a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4a12      	ldr	r2, [pc, #72]	@ (8005754 <prvInitialiseTaskLists+0x60>)
 800570c:	4413      	add	r3, r2
 800570e:	4618      	mov	r0, r3
 8005710:	f7fe faba 	bl	8003c88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3301      	adds	r3, #1
 8005718:	607b      	str	r3, [r7, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b37      	cmp	r3, #55	@ 0x37
 800571e:	d9ef      	bls.n	8005700 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005720:	480d      	ldr	r0, [pc, #52]	@ (8005758 <prvInitialiseTaskLists+0x64>)
 8005722:	f7fe fab1 	bl	8003c88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005726:	480d      	ldr	r0, [pc, #52]	@ (800575c <prvInitialiseTaskLists+0x68>)
 8005728:	f7fe faae 	bl	8003c88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800572c:	480c      	ldr	r0, [pc, #48]	@ (8005760 <prvInitialiseTaskLists+0x6c>)
 800572e:	f7fe faab 	bl	8003c88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005732:	480c      	ldr	r0, [pc, #48]	@ (8005764 <prvInitialiseTaskLists+0x70>)
 8005734:	f7fe faa8 	bl	8003c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005738:	480b      	ldr	r0, [pc, #44]	@ (8005768 <prvInitialiseTaskLists+0x74>)
 800573a:	f7fe faa5 	bl	8003c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800573e:	4b0b      	ldr	r3, [pc, #44]	@ (800576c <prvInitialiseTaskLists+0x78>)
 8005740:	4a05      	ldr	r2, [pc, #20]	@ (8005758 <prvInitialiseTaskLists+0x64>)
 8005742:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005744:	4b0a      	ldr	r3, [pc, #40]	@ (8005770 <prvInitialiseTaskLists+0x7c>)
 8005746:	4a05      	ldr	r2, [pc, #20]	@ (800575c <prvInitialiseTaskLists+0x68>)
 8005748:	601a      	str	r2, [r3, #0]
}
 800574a:	bf00      	nop
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000e08 	.word	0x20000e08
 8005758:	20001268 	.word	0x20001268
 800575c:	2000127c 	.word	0x2000127c
 8005760:	20001298 	.word	0x20001298
 8005764:	200012ac 	.word	0x200012ac
 8005768:	200012c4 	.word	0x200012c4
 800576c:	20001290 	.word	0x20001290
 8005770:	20001294 	.word	0x20001294

08005774 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800577a:	e019      	b.n	80057b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800577c:	f000 feec 	bl	8006558 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005780:	4b10      	ldr	r3, [pc, #64]	@ (80057c4 <prvCheckTasksWaitingTermination+0x50>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3304      	adds	r3, #4
 800578c:	4618      	mov	r0, r3
 800578e:	f7fe fb05 	bl	8003d9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005792:	4b0d      	ldr	r3, [pc, #52]	@ (80057c8 <prvCheckTasksWaitingTermination+0x54>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3b01      	subs	r3, #1
 8005798:	4a0b      	ldr	r2, [pc, #44]	@ (80057c8 <prvCheckTasksWaitingTermination+0x54>)
 800579a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800579c:	4b0b      	ldr	r3, [pc, #44]	@ (80057cc <prvCheckTasksWaitingTermination+0x58>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	4a0a      	ldr	r2, [pc, #40]	@ (80057cc <prvCheckTasksWaitingTermination+0x58>)
 80057a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057a6:	f000 ff09 	bl	80065bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f810 	bl	80057d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057b0:	4b06      	ldr	r3, [pc, #24]	@ (80057cc <prvCheckTasksWaitingTermination+0x58>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e1      	bne.n	800577c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	200012ac 	.word	0x200012ac
 80057c8:	200012d8 	.word	0x200012d8
 80057cc:	200012c0 	.word	0x200012c0

080057d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3354      	adds	r3, #84	@ 0x54
 80057dc:	4618      	mov	r0, r3
 80057de:	f003 f839 	bl	8008854 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d108      	bne.n	80057fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 f8a1 	bl	8006938 <vPortFree>
				vPortFree( pxTCB );
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f001 f89e 	bl	8006938 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057fc:	e019      	b.n	8005832 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005804:	2b01      	cmp	r3, #1
 8005806:	d103      	bne.n	8005810 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f001 f895 	bl	8006938 <vPortFree>
	}
 800580e:	e010      	b.n	8005832 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005816:	2b02      	cmp	r3, #2
 8005818:	d00b      	beq.n	8005832 <prvDeleteTCB+0x62>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	60fb      	str	r3, [r7, #12]
}
 800582c:	bf00      	nop
 800582e:	bf00      	nop
 8005830:	e7fd      	b.n	800582e <prvDeleteTCB+0x5e>
	}
 8005832:	bf00      	nop
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005842:	4b0c      	ldr	r3, [pc, #48]	@ (8005874 <prvResetNextTaskUnblockTime+0x38>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d104      	bne.n	8005856 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800584c:	4b0a      	ldr	r3, [pc, #40]	@ (8005878 <prvResetNextTaskUnblockTime+0x3c>)
 800584e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005852:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005854:	e008      	b.n	8005868 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005856:	4b07      	ldr	r3, [pc, #28]	@ (8005874 <prvResetNextTaskUnblockTime+0x38>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	4a04      	ldr	r2, [pc, #16]	@ (8005878 <prvResetNextTaskUnblockTime+0x3c>)
 8005866:	6013      	str	r3, [r2, #0]
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	20001290 	.word	0x20001290
 8005878:	200012f8 	.word	0x200012f8

0800587c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005882:	4b0b      	ldr	r3, [pc, #44]	@ (80058b0 <xTaskGetSchedulerState+0x34>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d102      	bne.n	8005890 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800588a:	2301      	movs	r3, #1
 800588c:	607b      	str	r3, [r7, #4]
 800588e:	e008      	b.n	80058a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005890:	4b08      	ldr	r3, [pc, #32]	@ (80058b4 <xTaskGetSchedulerState+0x38>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d102      	bne.n	800589e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005898:	2302      	movs	r3, #2
 800589a:	607b      	str	r3, [r7, #4]
 800589c:	e001      	b.n	80058a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800589e:	2300      	movs	r3, #0
 80058a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058a2:	687b      	ldr	r3, [r7, #4]
	}
 80058a4:	4618      	mov	r0, r3
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	200012e4 	.word	0x200012e4
 80058b4:	20001300 	.word	0x20001300

080058b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80058c4:	2300      	movs	r3, #0
 80058c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d051      	beq.n	8005972 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d2:	4b2a      	ldr	r3, [pc, #168]	@ (800597c <xTaskPriorityInherit+0xc4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d8:	429a      	cmp	r2, r3
 80058da:	d241      	bcs.n	8005960 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	db06      	blt.n	80058f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058e4:	4b25      	ldr	r3, [pc, #148]	@ (800597c <xTaskPriorityInherit+0xc4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	6959      	ldr	r1, [r3, #20]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4a1f      	ldr	r2, [pc, #124]	@ (8005980 <xTaskPriorityInherit+0xc8>)
 8005904:	4413      	add	r3, r2
 8005906:	4299      	cmp	r1, r3
 8005908:	d122      	bne.n	8005950 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	3304      	adds	r3, #4
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe fa44 	bl	8003d9c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005914:	4b19      	ldr	r3, [pc, #100]	@ (800597c <xTaskPriorityInherit+0xc4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005922:	4b18      	ldr	r3, [pc, #96]	@ (8005984 <xTaskPriorityInherit+0xcc>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d903      	bls.n	8005932 <xTaskPriorityInherit+0x7a>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592e:	4a15      	ldr	r2, [pc, #84]	@ (8005984 <xTaskPriorityInherit+0xcc>)
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4a10      	ldr	r2, [pc, #64]	@ (8005980 <xTaskPriorityInherit+0xc8>)
 8005940:	441a      	add	r2, r3
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	3304      	adds	r3, #4
 8005946:	4619      	mov	r1, r3
 8005948:	4610      	mov	r0, r2
 800594a:	f7fe f9ca 	bl	8003ce2 <vListInsertEnd>
 800594e:	e004      	b.n	800595a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005950:	4b0a      	ldr	r3, [pc, #40]	@ (800597c <xTaskPriorityInherit+0xc4>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800595a:	2301      	movs	r3, #1
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	e008      	b.n	8005972 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005964:	4b05      	ldr	r3, [pc, #20]	@ (800597c <xTaskPriorityInherit+0xc4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	429a      	cmp	r2, r3
 800596c:	d201      	bcs.n	8005972 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800596e:	2301      	movs	r3, #1
 8005970:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005972:	68fb      	ldr	r3, [r7, #12]
	}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20000e04 	.word	0x20000e04
 8005980:	20000e08 	.word	0x20000e08
 8005984:	200012e0 	.word	0x200012e0

08005988 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005994:	2300      	movs	r3, #0
 8005996:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d058      	beq.n	8005a50 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800599e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a5c <xTaskPriorityDisinherit+0xd4>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d00b      	beq.n	80059c0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	60fb      	str	r3, [r7, #12]
}
 80059ba:	bf00      	nop
 80059bc:	bf00      	nop
 80059be:	e7fd      	b.n	80059bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10b      	bne.n	80059e0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	60bb      	str	r3, [r7, #8]
}
 80059da:	bf00      	nop
 80059dc:	bf00      	nop
 80059de:	e7fd      	b.n	80059dc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059e4:	1e5a      	subs	r2, r3, #1
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d02c      	beq.n	8005a50 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d128      	bne.n	8005a50 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	3304      	adds	r3, #4
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fe f9ca 	bl	8003d9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a20:	4b0f      	ldr	r3, [pc, #60]	@ (8005a60 <xTaskPriorityDisinherit+0xd8>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d903      	bls.n	8005a30 <xTaskPriorityDisinherit+0xa8>
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8005a60 <xTaskPriorityDisinherit+0xd8>)
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4a09      	ldr	r2, [pc, #36]	@ (8005a64 <xTaskPriorityDisinherit+0xdc>)
 8005a3e:	441a      	add	r2, r3
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4619      	mov	r1, r3
 8005a46:	4610      	mov	r0, r2
 8005a48:	f7fe f94b 	bl	8003ce2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a50:	697b      	ldr	r3, [r7, #20]
	}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000e04 	.word	0x20000e04
 8005a60:	200012e0 	.word	0x200012e0
 8005a64:	20000e08 	.word	0x20000e08

08005a68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005a76:	2301      	movs	r3, #1
 8005a78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d06c      	beq.n	8005b5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10b      	bne.n	8005aa0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	60fb      	str	r3, [r7, #12]
}
 8005a9a:	bf00      	nop
 8005a9c:	bf00      	nop
 8005a9e:	e7fd      	b.n	8005a9c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d902      	bls.n	8005ab0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	61fb      	str	r3, [r7, #28]
 8005aae:	e002      	b.n	8005ab6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ab4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aba:	69fa      	ldr	r2, [r7, #28]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d04c      	beq.n	8005b5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d147      	bne.n	8005b5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005aca:	4b26      	ldr	r3, [pc, #152]	@ (8005b64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d10b      	bne.n	8005aec <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	60bb      	str	r3, [r7, #8]
}
 8005ae6:	bf00      	nop
 8005ae8:	bf00      	nop
 8005aea:	e7fd      	b.n	8005ae8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	db04      	blt.n	8005b0a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	6959      	ldr	r1, [r3, #20]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4a13      	ldr	r2, [pc, #76]	@ (8005b68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005b1a:	4413      	add	r3, r2
 8005b1c:	4299      	cmp	r1, r3
 8005b1e:	d11c      	bne.n	8005b5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	3304      	adds	r3, #4
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fe f939 	bl	8003d9c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8005b6c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d903      	bls.n	8005b3e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8005b6c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b42:	4613      	mov	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4a07      	ldr	r2, [pc, #28]	@ (8005b68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005b4c:	441a      	add	r2, r3
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	3304      	adds	r3, #4
 8005b52:	4619      	mov	r1, r3
 8005b54:	4610      	mov	r0, r2
 8005b56:	f7fe f8c4 	bl	8003ce2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b5a:	bf00      	nop
 8005b5c:	3720      	adds	r7, #32
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	20000e04 	.word	0x20000e04
 8005b68:	20000e08 	.word	0x20000e08
 8005b6c:	200012e0 	.word	0x200012e0

08005b70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005b74:	4b07      	ldr	r3, [pc, #28]	@ (8005b94 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d004      	beq.n	8005b86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005b7c:	4b05      	ldr	r3, [pc, #20]	@ (8005b94 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b82:	3201      	adds	r2, #1
 8005b84:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005b86:	4b03      	ldr	r3, [pc, #12]	@ (8005b94 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b88:	681b      	ldr	r3, [r3, #0]
	}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	20000e04 	.word	0x20000e04

08005b98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ba2:	4b21      	ldr	r3, [pc, #132]	@ (8005c28 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ba8:	4b20      	ldr	r3, [pc, #128]	@ (8005c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3304      	adds	r3, #4
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe f8f4 	bl	8003d9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bba:	d10a      	bne.n	8005bd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d007      	beq.n	8005bd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8005c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4819      	ldr	r0, [pc, #100]	@ (8005c30 <prvAddCurrentTaskToDelayedList+0x98>)
 8005bcc:	f7fe f889 	bl	8003ce2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bd0:	e026      	b.n	8005c20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bda:	4b14      	ldr	r3, [pc, #80]	@ (8005c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d209      	bcs.n	8005bfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bea:	4b12      	ldr	r3, [pc, #72]	@ (8005c34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	4b0f      	ldr	r3, [pc, #60]	@ (8005c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	f7fe f897 	bl	8003d2a <vListInsert>
}
 8005bfc:	e010      	b.n	8005c20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8005c38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	4b0a      	ldr	r3, [pc, #40]	@ (8005c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	f7fe f88d 	bl	8003d2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c10:	4b0a      	ldr	r3, [pc, #40]	@ (8005c3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d202      	bcs.n	8005c20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c1a:	4a08      	ldr	r2, [pc, #32]	@ (8005c3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	6013      	str	r3, [r2, #0]
}
 8005c20:	bf00      	nop
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	200012dc 	.word	0x200012dc
 8005c2c:	20000e04 	.word	0x20000e04
 8005c30:	200012c4 	.word	0x200012c4
 8005c34:	20001294 	.word	0x20001294
 8005c38:	20001290 	.word	0x20001290
 8005c3c:	200012f8 	.word	0x200012f8

08005c40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08a      	sub	sp, #40	@ 0x28
 8005c44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c4a:	f000 fb13 	bl	8006274 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005cc4 <xTimerCreateTimerTask+0x84>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d021      	beq.n	8005c9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c5e:	1d3a      	adds	r2, r7, #4
 8005c60:	f107 0108 	add.w	r1, r7, #8
 8005c64:	f107 030c 	add.w	r3, r7, #12
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fd ffd9 	bl	8003c20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c6e:	6879      	ldr	r1, [r7, #4]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	9202      	str	r2, [sp, #8]
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	2302      	movs	r3, #2
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	460a      	mov	r2, r1
 8005c80:	4911      	ldr	r1, [pc, #68]	@ (8005cc8 <xTimerCreateTimerTask+0x88>)
 8005c82:	4812      	ldr	r0, [pc, #72]	@ (8005ccc <xTimerCreateTimerTask+0x8c>)
 8005c84:	f7fe ffa2 	bl	8004bcc <xTaskCreateStatic>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	4a11      	ldr	r2, [pc, #68]	@ (8005cd0 <xTimerCreateTimerTask+0x90>)
 8005c8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c8e:	4b10      	ldr	r3, [pc, #64]	@ (8005cd0 <xTimerCreateTimerTask+0x90>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c96:	2301      	movs	r3, #1
 8005c98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10b      	bne.n	8005cb8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	613b      	str	r3, [r7, #16]
}
 8005cb2:	bf00      	nop
 8005cb4:	bf00      	nop
 8005cb6:	e7fd      	b.n	8005cb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005cb8:	697b      	ldr	r3, [r7, #20]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20001334 	.word	0x20001334
 8005cc8:	0800b3e4 	.word	0x0800b3e4
 8005ccc:	08005e0d 	.word	0x08005e0d
 8005cd0:	20001338 	.word	0x20001338

08005cd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08a      	sub	sp, #40	@ 0x28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10b      	bne.n	8005d04 <xTimerGenericCommand+0x30>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	623b      	str	r3, [r7, #32]
}
 8005cfe:	bf00      	nop
 8005d00:	bf00      	nop
 8005d02:	e7fd      	b.n	8005d00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d04:	4b19      	ldr	r3, [pc, #100]	@ (8005d6c <xTimerGenericCommand+0x98>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d02a      	beq.n	8005d62 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b05      	cmp	r3, #5
 8005d1c:	dc18      	bgt.n	8005d50 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d1e:	f7ff fdad 	bl	800587c <xTaskGetSchedulerState>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d109      	bne.n	8005d3c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d28:	4b10      	ldr	r3, [pc, #64]	@ (8005d6c <xTimerGenericCommand+0x98>)
 8005d2a:	6818      	ldr	r0, [r3, #0]
 8005d2c:	f107 0110 	add.w	r1, r7, #16
 8005d30:	2300      	movs	r3, #0
 8005d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d34:	f7fe f9a2 	bl	800407c <xQueueGenericSend>
 8005d38:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d3a:	e012      	b.n	8005d62 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d6c <xTimerGenericCommand+0x98>)
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	f107 0110 	add.w	r1, r7, #16
 8005d44:	2300      	movs	r3, #0
 8005d46:	2200      	movs	r2, #0
 8005d48:	f7fe f998 	bl	800407c <xQueueGenericSend>
 8005d4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d4e:	e008      	b.n	8005d62 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d50:	4b06      	ldr	r3, [pc, #24]	@ (8005d6c <xTimerGenericCommand+0x98>)
 8005d52:	6818      	ldr	r0, [r3, #0]
 8005d54:	f107 0110 	add.w	r1, r7, #16
 8005d58:	2300      	movs	r3, #0
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	f7fe fa90 	bl	8004280 <xQueueGenericSendFromISR>
 8005d60:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3728      	adds	r7, #40	@ 0x28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	20001334 	.word	0x20001334

08005d70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b088      	sub	sp, #32
 8005d74:	af02      	add	r7, sp, #8
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d7a:	4b23      	ldr	r3, [pc, #140]	@ (8005e08 <prvProcessExpiredTimer+0x98>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	3304      	adds	r3, #4
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fe f807 	bl	8003d9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d023      	beq.n	8005de4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	699a      	ldr	r2, [r3, #24]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	18d1      	adds	r1, r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	6978      	ldr	r0, [r7, #20]
 8005daa:	f000 f8d5 	bl	8005f58 <prvInsertTimerInActiveList>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d020      	beq.n	8005df6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005db4:	2300      	movs	r3, #0
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	2300      	movs	r3, #0
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	6978      	ldr	r0, [r7, #20]
 8005dc0:	f7ff ff88 	bl	8005cd4 <xTimerGenericCommand>
 8005dc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d114      	bne.n	8005df6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	60fb      	str	r3, [r7, #12]
}
 8005dde:	bf00      	nop
 8005de0:	bf00      	nop
 8005de2:	e7fd      	b.n	8005de0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005dea:	f023 0301 	bic.w	r3, r3, #1
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	6978      	ldr	r0, [r7, #20]
 8005dfc:	4798      	blx	r3
}
 8005dfe:	bf00      	nop
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	2000132c 	.word	0x2000132c

08005e0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e14:	f107 0308 	add.w	r3, r7, #8
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 f859 	bl	8005ed0 <prvGetNextExpireTime>
 8005e1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4619      	mov	r1, r3
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f805 	bl	8005e34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e2a:	f000 f8d7 	bl	8005fdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e2e:	bf00      	nop
 8005e30:	e7f0      	b.n	8005e14 <prvTimerTask+0x8>
	...

08005e34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e3e:	f7ff f929 	bl	8005094 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e42:	f107 0308 	add.w	r3, r7, #8
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 f866 	bl	8005f18 <prvSampleTimeNow>
 8005e4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d130      	bne.n	8005eb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10a      	bne.n	8005e70 <prvProcessTimerOrBlockTask+0x3c>
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d806      	bhi.n	8005e70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e62:	f7ff f925 	bl	80050b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff ff81 	bl	8005d70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e6e:	e024      	b.n	8005eba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d008      	beq.n	8005e88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e76:	4b13      	ldr	r3, [pc, #76]	@ (8005ec4 <prvProcessTimerOrBlockTask+0x90>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <prvProcessTimerOrBlockTask+0x50>
 8005e80:	2301      	movs	r3, #1
 8005e82:	e000      	b.n	8005e86 <prvProcessTimerOrBlockTask+0x52>
 8005e84:	2300      	movs	r3, #0
 8005e86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e88:	4b0f      	ldr	r3, [pc, #60]	@ (8005ec8 <prvProcessTimerOrBlockTask+0x94>)
 8005e8a:	6818      	ldr	r0, [r3, #0]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	4619      	mov	r1, r3
 8005e96:	f7fe fe65 	bl	8004b64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e9a:	f7ff f909 	bl	80050b0 <xTaskResumeAll>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ea4:	4b09      	ldr	r3, [pc, #36]	@ (8005ecc <prvProcessTimerOrBlockTask+0x98>)
 8005ea6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	f3bf 8f6f 	isb	sy
}
 8005eb4:	e001      	b.n	8005eba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005eb6:	f7ff f8fb 	bl	80050b0 <xTaskResumeAll>
}
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20001330 	.word	0x20001330
 8005ec8:	20001334 	.word	0x20001334
 8005ecc:	e000ed04 	.word	0xe000ed04

08005ed0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8005f14 <prvGetNextExpireTime+0x44>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <prvGetNextExpireTime+0x16>
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	e000      	b.n	8005ee8 <prvGetNextExpireTime+0x18>
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d105      	bne.n	8005f00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ef4:	4b07      	ldr	r3, [pc, #28]	@ (8005f14 <prvGetNextExpireTime+0x44>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	60fb      	str	r3, [r7, #12]
 8005efe:	e001      	b.n	8005f04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f04:	68fb      	ldr	r3, [r7, #12]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	2000132c 	.word	0x2000132c

08005f18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f20:	f7ff f964 	bl	80051ec <xTaskGetTickCount>
 8005f24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f26:	4b0b      	ldr	r3, [pc, #44]	@ (8005f54 <prvSampleTimeNow+0x3c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d205      	bcs.n	8005f3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f30:	f000 f93a 	bl	80061a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	e002      	b.n	8005f42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f42:	4a04      	ldr	r2, [pc, #16]	@ (8005f54 <prvSampleTimeNow+0x3c>)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f48:	68fb      	ldr	r3, [r7, #12]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	2000133c 	.word	0x2000133c

08005f58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f66:	2300      	movs	r3, #0
 8005f68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d812      	bhi.n	8005fa4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	1ad2      	subs	r2, r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d302      	bcc.n	8005f92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	e01b      	b.n	8005fca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f92:	4b10      	ldr	r3, [pc, #64]	@ (8005fd4 <prvInsertTimerInActiveList+0x7c>)
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	f7fd fec4 	bl	8003d2a <vListInsert>
 8005fa2:	e012      	b.n	8005fca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d206      	bcs.n	8005fba <prvInsertTimerInActiveList+0x62>
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d302      	bcc.n	8005fba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	e007      	b.n	8005fca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fba:	4b07      	ldr	r3, [pc, #28]	@ (8005fd8 <prvInsertTimerInActiveList+0x80>)
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	f7fd feb0 	bl	8003d2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005fca:	697b      	ldr	r3, [r7, #20]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	20001330 	.word	0x20001330
 8005fd8:	2000132c 	.word	0x2000132c

08005fdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b08e      	sub	sp, #56	@ 0x38
 8005fe0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fe2:	e0ce      	b.n	8006182 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	da19      	bge.n	800601e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005fea:	1d3b      	adds	r3, r7, #4
 8005fec:	3304      	adds	r3, #4
 8005fee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10b      	bne.n	800600e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	61fb      	str	r3, [r7, #28]
}
 8006008:	bf00      	nop
 800600a:	bf00      	nop
 800600c:	e7fd      	b.n	800600a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800600e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006014:	6850      	ldr	r0, [r2, #4]
 8006016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006018:	6892      	ldr	r2, [r2, #8]
 800601a:	4611      	mov	r1, r2
 800601c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	f2c0 80ae 	blt.w	8006182 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800602a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d004      	beq.n	800603c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006034:	3304      	adds	r3, #4
 8006036:	4618      	mov	r0, r3
 8006038:	f7fd feb0 	bl	8003d9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800603c:	463b      	mov	r3, r7
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff ff6a 	bl	8005f18 <prvSampleTimeNow>
 8006044:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b09      	cmp	r3, #9
 800604a:	f200 8097 	bhi.w	800617c <prvProcessReceivedCommands+0x1a0>
 800604e:	a201      	add	r2, pc, #4	@ (adr r2, 8006054 <prvProcessReceivedCommands+0x78>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	0800607d 	.word	0x0800607d
 8006058:	0800607d 	.word	0x0800607d
 800605c:	0800607d 	.word	0x0800607d
 8006060:	080060f3 	.word	0x080060f3
 8006064:	08006107 	.word	0x08006107
 8006068:	08006153 	.word	0x08006153
 800606c:	0800607d 	.word	0x0800607d
 8006070:	0800607d 	.word	0x0800607d
 8006074:	080060f3 	.word	0x080060f3
 8006078:	08006107 	.word	0x08006107
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800607c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006082:	f043 0301 	orr.w	r3, r3, #1
 8006086:	b2da      	uxtb	r2, r3
 8006088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	18d1      	adds	r1, r2, r3
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800609a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800609c:	f7ff ff5c 	bl	8005f58 <prvInsertTimerInActiveList>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d06c      	beq.n	8006180 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d061      	beq.n	8006180 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	441a      	add	r2, r3
 80060c4:	2300      	movs	r3, #0
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	2300      	movs	r3, #0
 80060ca:	2100      	movs	r1, #0
 80060cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060ce:	f7ff fe01 	bl	8005cd4 <xTimerGenericCommand>
 80060d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d152      	bne.n	8006180 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	61bb      	str	r3, [r7, #24]
}
 80060ec:	bf00      	nop
 80060ee:	bf00      	nop
 80060f0:	e7fd      	b.n	80060ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060f8:	f023 0301 	bic.w	r3, r3, #1
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006100:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006104:	e03d      	b.n	8006182 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006108:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800610c:	f043 0301 	orr.w	r3, r3, #1
 8006110:	b2da      	uxtb	r2, r3
 8006112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006114:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10b      	bne.n	800613e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	617b      	str	r3, [r7, #20]
}
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	e7fd      	b.n	800613a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800613e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006144:	18d1      	adds	r1, r2, r3
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800614a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800614c:	f7ff ff04 	bl	8005f58 <prvInsertTimerInActiveList>
					break;
 8006150:	e017      	b.n	8006182 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006154:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d103      	bne.n	8006168 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006160:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006162:	f000 fbe9 	bl	8006938 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006166:	e00c      	b.n	8006182 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800616e:	f023 0301 	bic.w	r3, r3, #1
 8006172:	b2da      	uxtb	r2, r3
 8006174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006176:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800617a:	e002      	b.n	8006182 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800617c:	bf00      	nop
 800617e:	e000      	b.n	8006182 <prvProcessReceivedCommands+0x1a6>
					break;
 8006180:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006182:	4b08      	ldr	r3, [pc, #32]	@ (80061a4 <prvProcessReceivedCommands+0x1c8>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	1d39      	adds	r1, r7, #4
 8006188:	2200      	movs	r2, #0
 800618a:	4618      	mov	r0, r3
 800618c:	f7fe f9a6 	bl	80044dc <xQueueReceive>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	f47f af26 	bne.w	8005fe4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006198:	bf00      	nop
 800619a:	bf00      	nop
 800619c:	3730      	adds	r7, #48	@ 0x30
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	20001334 	.word	0x20001334

080061a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b088      	sub	sp, #32
 80061ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061ae:	e049      	b.n	8006244 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061b0:	4b2e      	ldr	r3, [pc, #184]	@ (800626c <prvSwitchTimerLists+0xc4>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ba:	4b2c      	ldr	r3, [pc, #176]	@ (800626c <prvSwitchTimerLists+0xc4>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3304      	adds	r3, #4
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fd fde7 	bl	8003d9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d02f      	beq.n	8006244 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4413      	add	r3, r2
 80061ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d90e      	bls.n	8006214 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006202:	4b1a      	ldr	r3, [pc, #104]	@ (800626c <prvSwitchTimerLists+0xc4>)
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3304      	adds	r3, #4
 800620a:	4619      	mov	r1, r3
 800620c:	4610      	mov	r0, r2
 800620e:	f7fd fd8c 	bl	8003d2a <vListInsert>
 8006212:	e017      	b.n	8006244 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006214:	2300      	movs	r3, #0
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	2300      	movs	r3, #0
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	2100      	movs	r1, #0
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f7ff fd58 	bl	8005cd4 <xTimerGenericCommand>
 8006224:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10b      	bne.n	8006244 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	603b      	str	r3, [r7, #0]
}
 800623e:	bf00      	nop
 8006240:	bf00      	nop
 8006242:	e7fd      	b.n	8006240 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006244:	4b09      	ldr	r3, [pc, #36]	@ (800626c <prvSwitchTimerLists+0xc4>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1b0      	bne.n	80061b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800624e:	4b07      	ldr	r3, [pc, #28]	@ (800626c <prvSwitchTimerLists+0xc4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006254:	4b06      	ldr	r3, [pc, #24]	@ (8006270 <prvSwitchTimerLists+0xc8>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a04      	ldr	r2, [pc, #16]	@ (800626c <prvSwitchTimerLists+0xc4>)
 800625a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800625c:	4a04      	ldr	r2, [pc, #16]	@ (8006270 <prvSwitchTimerLists+0xc8>)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	6013      	str	r3, [r2, #0]
}
 8006262:	bf00      	nop
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	2000132c 	.word	0x2000132c
 8006270:	20001330 	.word	0x20001330

08006274 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800627a:	f000 f96d 	bl	8006558 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800627e:	4b15      	ldr	r3, [pc, #84]	@ (80062d4 <prvCheckForValidListAndQueue+0x60>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d120      	bne.n	80062c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006286:	4814      	ldr	r0, [pc, #80]	@ (80062d8 <prvCheckForValidListAndQueue+0x64>)
 8006288:	f7fd fcfe 	bl	8003c88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800628c:	4813      	ldr	r0, [pc, #76]	@ (80062dc <prvCheckForValidListAndQueue+0x68>)
 800628e:	f7fd fcfb 	bl	8003c88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006292:	4b13      	ldr	r3, [pc, #76]	@ (80062e0 <prvCheckForValidListAndQueue+0x6c>)
 8006294:	4a10      	ldr	r2, [pc, #64]	@ (80062d8 <prvCheckForValidListAndQueue+0x64>)
 8006296:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006298:	4b12      	ldr	r3, [pc, #72]	@ (80062e4 <prvCheckForValidListAndQueue+0x70>)
 800629a:	4a10      	ldr	r2, [pc, #64]	@ (80062dc <prvCheckForValidListAndQueue+0x68>)
 800629c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800629e:	2300      	movs	r3, #0
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	4b11      	ldr	r3, [pc, #68]	@ (80062e8 <prvCheckForValidListAndQueue+0x74>)
 80062a4:	4a11      	ldr	r2, [pc, #68]	@ (80062ec <prvCheckForValidListAndQueue+0x78>)
 80062a6:	2110      	movs	r1, #16
 80062a8:	200a      	movs	r0, #10
 80062aa:	f7fd fe0b 	bl	8003ec4 <xQueueGenericCreateStatic>
 80062ae:	4603      	mov	r3, r0
 80062b0:	4a08      	ldr	r2, [pc, #32]	@ (80062d4 <prvCheckForValidListAndQueue+0x60>)
 80062b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062b4:	4b07      	ldr	r3, [pc, #28]	@ (80062d4 <prvCheckForValidListAndQueue+0x60>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d005      	beq.n	80062c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062bc:	4b05      	ldr	r3, [pc, #20]	@ (80062d4 <prvCheckForValidListAndQueue+0x60>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	490b      	ldr	r1, [pc, #44]	@ (80062f0 <prvCheckForValidListAndQueue+0x7c>)
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fe fc24 	bl	8004b10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062c8:	f000 f978 	bl	80065bc <vPortExitCritical>
}
 80062cc:	bf00      	nop
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20001334 	.word	0x20001334
 80062d8:	20001304 	.word	0x20001304
 80062dc:	20001318 	.word	0x20001318
 80062e0:	2000132c 	.word	0x2000132c
 80062e4:	20001330 	.word	0x20001330
 80062e8:	200013e0 	.word	0x200013e0
 80062ec:	20001340 	.word	0x20001340
 80062f0:	0800b3ec 	.word	0x0800b3ec

080062f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	3b04      	subs	r3, #4
 8006304:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800630c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3b04      	subs	r3, #4
 8006312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f023 0201 	bic.w	r2, r3, #1
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3b04      	subs	r3, #4
 8006322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006324:	4a0c      	ldr	r2, [pc, #48]	@ (8006358 <pxPortInitialiseStack+0x64>)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3b14      	subs	r3, #20
 800632e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3b04      	subs	r3, #4
 800633a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f06f 0202 	mvn.w	r2, #2
 8006342:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3b20      	subs	r3, #32
 8006348:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800634a:	68fb      	ldr	r3, [r7, #12]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	0800635d 	.word	0x0800635d

0800635c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006362:	2300      	movs	r3, #0
 8006364:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006366:	4b13      	ldr	r3, [pc, #76]	@ (80063b4 <prvTaskExitError+0x58>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800636e:	d00b      	beq.n	8006388 <prvTaskExitError+0x2c>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	60fb      	str	r3, [r7, #12]
}
 8006382:	bf00      	nop
 8006384:	bf00      	nop
 8006386:	e7fd      	b.n	8006384 <prvTaskExitError+0x28>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	60bb      	str	r3, [r7, #8]
}
 800639a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800639c:	bf00      	nop
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0fc      	beq.n	800639e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	20000008 	.word	0x20000008
	...

080063c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063c0:	4b07      	ldr	r3, [pc, #28]	@ (80063e0 <pxCurrentTCBConst2>)
 80063c2:	6819      	ldr	r1, [r3, #0]
 80063c4:	6808      	ldr	r0, [r1, #0]
 80063c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ca:	f380 8809 	msr	PSP, r0
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f04f 0000 	mov.w	r0, #0
 80063d6:	f380 8811 	msr	BASEPRI, r0
 80063da:	4770      	bx	lr
 80063dc:	f3af 8000 	nop.w

080063e0 <pxCurrentTCBConst2>:
 80063e0:	20000e04 	.word	0x20000e04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop

080063e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80063e8:	4808      	ldr	r0, [pc, #32]	@ (800640c <prvPortStartFirstTask+0x24>)
 80063ea:	6800      	ldr	r0, [r0, #0]
 80063ec:	6800      	ldr	r0, [r0, #0]
 80063ee:	f380 8808 	msr	MSP, r0
 80063f2:	f04f 0000 	mov.w	r0, #0
 80063f6:	f380 8814 	msr	CONTROL, r0
 80063fa:	b662      	cpsie	i
 80063fc:	b661      	cpsie	f
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	df00      	svc	0
 8006408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800640a:	bf00      	nop
 800640c:	e000ed08 	.word	0xe000ed08

08006410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006416:	4b47      	ldr	r3, [pc, #284]	@ (8006534 <xPortStartScheduler+0x124>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a47      	ldr	r2, [pc, #284]	@ (8006538 <xPortStartScheduler+0x128>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d10b      	bne.n	8006438 <xPortStartScheduler+0x28>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	613b      	str	r3, [r7, #16]
}
 8006432:	bf00      	nop
 8006434:	bf00      	nop
 8006436:	e7fd      	b.n	8006434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006438:	4b3e      	ldr	r3, [pc, #248]	@ (8006534 <xPortStartScheduler+0x124>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a3f      	ldr	r2, [pc, #252]	@ (800653c <xPortStartScheduler+0x12c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d10b      	bne.n	800645a <xPortStartScheduler+0x4a>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	60fb      	str	r3, [r7, #12]
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	e7fd      	b.n	8006456 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800645a:	4b39      	ldr	r3, [pc, #228]	@ (8006540 <xPortStartScheduler+0x130>)
 800645c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	b2db      	uxtb	r3, r3
 8006464:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	22ff      	movs	r2, #255	@ 0xff
 800646a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006474:	78fb      	ldrb	r3, [r7, #3]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800647c:	b2da      	uxtb	r2, r3
 800647e:	4b31      	ldr	r3, [pc, #196]	@ (8006544 <xPortStartScheduler+0x134>)
 8006480:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006482:	4b31      	ldr	r3, [pc, #196]	@ (8006548 <xPortStartScheduler+0x138>)
 8006484:	2207      	movs	r2, #7
 8006486:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006488:	e009      	b.n	800649e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800648a:	4b2f      	ldr	r3, [pc, #188]	@ (8006548 <xPortStartScheduler+0x138>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3b01      	subs	r3, #1
 8006490:	4a2d      	ldr	r2, [pc, #180]	@ (8006548 <xPortStartScheduler+0x138>)
 8006492:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006494:	78fb      	ldrb	r3, [r7, #3]
 8006496:	b2db      	uxtb	r3, r3
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	b2db      	uxtb	r3, r3
 800649c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800649e:	78fb      	ldrb	r3, [r7, #3]
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a6:	2b80      	cmp	r3, #128	@ 0x80
 80064a8:	d0ef      	beq.n	800648a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064aa:	4b27      	ldr	r3, [pc, #156]	@ (8006548 <xPortStartScheduler+0x138>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f1c3 0307 	rsb	r3, r3, #7
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d00b      	beq.n	80064ce <xPortStartScheduler+0xbe>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	60bb      	str	r3, [r7, #8]
}
 80064c8:	bf00      	nop
 80064ca:	bf00      	nop
 80064cc:	e7fd      	b.n	80064ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006548 <xPortStartScheduler+0x138>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	021b      	lsls	r3, r3, #8
 80064d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006548 <xPortStartScheduler+0x138>)
 80064d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006548 <xPortStartScheduler+0x138>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80064e0:	4a19      	ldr	r2, [pc, #100]	@ (8006548 <xPortStartScheduler+0x138>)
 80064e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064ec:	4b17      	ldr	r3, [pc, #92]	@ (800654c <xPortStartScheduler+0x13c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a16      	ldr	r2, [pc, #88]	@ (800654c <xPortStartScheduler+0x13c>)
 80064f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80064f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064f8:	4b14      	ldr	r3, [pc, #80]	@ (800654c <xPortStartScheduler+0x13c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a13      	ldr	r2, [pc, #76]	@ (800654c <xPortStartScheduler+0x13c>)
 80064fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006502:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006504:	f000 f8da 	bl	80066bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006508:	4b11      	ldr	r3, [pc, #68]	@ (8006550 <xPortStartScheduler+0x140>)
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800650e:	f000 f8f9 	bl	8006704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006512:	4b10      	ldr	r3, [pc, #64]	@ (8006554 <xPortStartScheduler+0x144>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a0f      	ldr	r2, [pc, #60]	@ (8006554 <xPortStartScheduler+0x144>)
 8006518:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800651c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800651e:	f7ff ff63 	bl	80063e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006522:	f7fe ff2d 	bl	8005380 <vTaskSwitchContext>
	prvTaskExitError();
 8006526:	f7ff ff19 	bl	800635c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	e000ed00 	.word	0xe000ed00
 8006538:	410fc271 	.word	0x410fc271
 800653c:	410fc270 	.word	0x410fc270
 8006540:	e000e400 	.word	0xe000e400
 8006544:	20001430 	.word	0x20001430
 8006548:	20001434 	.word	0x20001434
 800654c:	e000ed20 	.word	0xe000ed20
 8006550:	20000008 	.word	0x20000008
 8006554:	e000ef34 	.word	0xe000ef34

08006558 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	607b      	str	r3, [r7, #4]
}
 8006570:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006572:	4b10      	ldr	r3, [pc, #64]	@ (80065b4 <vPortEnterCritical+0x5c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3301      	adds	r3, #1
 8006578:	4a0e      	ldr	r2, [pc, #56]	@ (80065b4 <vPortEnterCritical+0x5c>)
 800657a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800657c:	4b0d      	ldr	r3, [pc, #52]	@ (80065b4 <vPortEnterCritical+0x5c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d110      	bne.n	80065a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006584:	4b0c      	ldr	r3, [pc, #48]	@ (80065b8 <vPortEnterCritical+0x60>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00b      	beq.n	80065a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	603b      	str	r3, [r7, #0]
}
 80065a0:	bf00      	nop
 80065a2:	bf00      	nop
 80065a4:	e7fd      	b.n	80065a2 <vPortEnterCritical+0x4a>
	}
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	20000008 	.word	0x20000008
 80065b8:	e000ed04 	.word	0xe000ed04

080065bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065c2:	4b12      	ldr	r3, [pc, #72]	@ (800660c <vPortExitCritical+0x50>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10b      	bne.n	80065e2 <vPortExitCritical+0x26>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	607b      	str	r3, [r7, #4]
}
 80065dc:	bf00      	nop
 80065de:	bf00      	nop
 80065e0:	e7fd      	b.n	80065de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80065e2:	4b0a      	ldr	r3, [pc, #40]	@ (800660c <vPortExitCritical+0x50>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	4a08      	ldr	r2, [pc, #32]	@ (800660c <vPortExitCritical+0x50>)
 80065ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065ec:	4b07      	ldr	r3, [pc, #28]	@ (800660c <vPortExitCritical+0x50>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <vPortExitCritical+0x44>
 80065f4:	2300      	movs	r3, #0
 80065f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	f383 8811 	msr	BASEPRI, r3
}
 80065fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	20000008 	.word	0x20000008

08006610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006610:	f3ef 8009 	mrs	r0, PSP
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	4b15      	ldr	r3, [pc, #84]	@ (8006670 <pxCurrentTCBConst>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	f01e 0f10 	tst.w	lr, #16
 8006620:	bf08      	it	eq
 8006622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662a:	6010      	str	r0, [r2, #0]
 800662c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006630:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006634:	f380 8811 	msr	BASEPRI, r0
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f7fe fe9e 	bl	8005380 <vTaskSwitchContext>
 8006644:	f04f 0000 	mov.w	r0, #0
 8006648:	f380 8811 	msr	BASEPRI, r0
 800664c:	bc09      	pop	{r0, r3}
 800664e:	6819      	ldr	r1, [r3, #0]
 8006650:	6808      	ldr	r0, [r1, #0]
 8006652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006656:	f01e 0f10 	tst.w	lr, #16
 800665a:	bf08      	it	eq
 800665c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006660:	f380 8809 	msr	PSP, r0
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	f3af 8000 	nop.w

08006670 <pxCurrentTCBConst>:
 8006670:	20000e04 	.word	0x20000e04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop

08006678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	607b      	str	r3, [r7, #4]
}
 8006690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006692:	f7fe fdbb 	bl	800520c <xTaskIncrementTick>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800669c:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <xPortSysTickHandler+0x40>)
 800669e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	2300      	movs	r3, #0
 80066a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	f383 8811 	msr	BASEPRI, r3
}
 80066ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066b0:	bf00      	nop
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	e000ed04 	.word	0xe000ed04

080066bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066bc:	b480      	push	{r7}
 80066be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066c0:	4b0b      	ldr	r3, [pc, #44]	@ (80066f0 <vPortSetupTimerInterrupt+0x34>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066c6:	4b0b      	ldr	r3, [pc, #44]	@ (80066f4 <vPortSetupTimerInterrupt+0x38>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066cc:	4b0a      	ldr	r3, [pc, #40]	@ (80066f8 <vPortSetupTimerInterrupt+0x3c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a0a      	ldr	r2, [pc, #40]	@ (80066fc <vPortSetupTimerInterrupt+0x40>)
 80066d2:	fba2 2303 	umull	r2, r3, r2, r3
 80066d6:	099b      	lsrs	r3, r3, #6
 80066d8:	4a09      	ldr	r2, [pc, #36]	@ (8006700 <vPortSetupTimerInterrupt+0x44>)
 80066da:	3b01      	subs	r3, #1
 80066dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066de:	4b04      	ldr	r3, [pc, #16]	@ (80066f0 <vPortSetupTimerInterrupt+0x34>)
 80066e0:	2207      	movs	r2, #7
 80066e2:	601a      	str	r2, [r3, #0]
}
 80066e4:	bf00      	nop
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	e000e010 	.word	0xe000e010
 80066f4:	e000e018 	.word	0xe000e018
 80066f8:	20000000 	.word	0x20000000
 80066fc:	10624dd3 	.word	0x10624dd3
 8006700:	e000e014 	.word	0xe000e014

08006704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006704:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006714 <vPortEnableVFP+0x10>
 8006708:	6801      	ldr	r1, [r0, #0]
 800670a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800670e:	6001      	str	r1, [r0, #0]
 8006710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006712:	bf00      	nop
 8006714:	e000ed88 	.word	0xe000ed88

08006718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800671e:	f3ef 8305 	mrs	r3, IPSR
 8006722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b0f      	cmp	r3, #15
 8006728:	d915      	bls.n	8006756 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800672a:	4a18      	ldr	r2, [pc, #96]	@ (800678c <vPortValidateInterruptPriority+0x74>)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006734:	4b16      	ldr	r3, [pc, #88]	@ (8006790 <vPortValidateInterruptPriority+0x78>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	7afa      	ldrb	r2, [r7, #11]
 800673a:	429a      	cmp	r2, r3
 800673c:	d20b      	bcs.n	8006756 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	607b      	str	r3, [r7, #4]
}
 8006750:	bf00      	nop
 8006752:	bf00      	nop
 8006754:	e7fd      	b.n	8006752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006756:	4b0f      	ldr	r3, [pc, #60]	@ (8006794 <vPortValidateInterruptPriority+0x7c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800675e:	4b0e      	ldr	r3, [pc, #56]	@ (8006798 <vPortValidateInterruptPriority+0x80>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d90b      	bls.n	800677e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	603b      	str	r3, [r7, #0]
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	e7fd      	b.n	800677a <vPortValidateInterruptPriority+0x62>
	}
 800677e:	bf00      	nop
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	e000e3f0 	.word	0xe000e3f0
 8006790:	20001430 	.word	0x20001430
 8006794:	e000ed0c 	.word	0xe000ed0c
 8006798:	20001434 	.word	0x20001434

0800679c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08a      	sub	sp, #40	@ 0x28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067a4:	2300      	movs	r3, #0
 80067a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067a8:	f7fe fc74 	bl	8005094 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067ac:	4b5c      	ldr	r3, [pc, #368]	@ (8006920 <pvPortMalloc+0x184>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067b4:	f000 f924 	bl	8006a00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067b8:	4b5a      	ldr	r3, [pc, #360]	@ (8006924 <pvPortMalloc+0x188>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4013      	ands	r3, r2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f040 8095 	bne.w	80068f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01e      	beq.n	800680a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80067cc:	2208      	movs	r2, #8
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4413      	add	r3, r2
 80067d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d015      	beq.n	800680a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f023 0307 	bic.w	r3, r3, #7
 80067e4:	3308      	adds	r3, #8
 80067e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00b      	beq.n	800680a <pvPortMalloc+0x6e>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	617b      	str	r3, [r7, #20]
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop
 8006808:	e7fd      	b.n	8006806 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d06f      	beq.n	80068f0 <pvPortMalloc+0x154>
 8006810:	4b45      	ldr	r3, [pc, #276]	@ (8006928 <pvPortMalloc+0x18c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	429a      	cmp	r2, r3
 8006818:	d86a      	bhi.n	80068f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800681a:	4b44      	ldr	r3, [pc, #272]	@ (800692c <pvPortMalloc+0x190>)
 800681c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800681e:	4b43      	ldr	r3, [pc, #268]	@ (800692c <pvPortMalloc+0x190>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006824:	e004      	b.n	8006830 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006828:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800682a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	429a      	cmp	r2, r3
 8006838:	d903      	bls.n	8006842 <pvPortMalloc+0xa6>
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1f1      	bne.n	8006826 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006842:	4b37      	ldr	r3, [pc, #220]	@ (8006920 <pvPortMalloc+0x184>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006848:	429a      	cmp	r2, r3
 800684a:	d051      	beq.n	80068f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2208      	movs	r2, #8
 8006852:	4413      	add	r3, r2
 8006854:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	1ad2      	subs	r2, r2, r3
 8006866:	2308      	movs	r3, #8
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	429a      	cmp	r2, r3
 800686c:	d920      	bls.n	80068b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800686e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4413      	add	r3, r2
 8006874:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00b      	beq.n	8006898 <pvPortMalloc+0xfc>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	613b      	str	r3, [r7, #16]
}
 8006892:	bf00      	nop
 8006894:	bf00      	nop
 8006896:	e7fd      	b.n	8006894 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	1ad2      	subs	r2, r2, r3
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068aa:	69b8      	ldr	r0, [r7, #24]
 80068ac:	f000 f90a 	bl	8006ac4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006928 <pvPortMalloc+0x18c>)
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006928 <pvPortMalloc+0x18c>)
 80068bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068be:	4b1a      	ldr	r3, [pc, #104]	@ (8006928 <pvPortMalloc+0x18c>)
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006930 <pvPortMalloc+0x194>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d203      	bcs.n	80068d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068ca:	4b17      	ldr	r3, [pc, #92]	@ (8006928 <pvPortMalloc+0x18c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a18      	ldr	r2, [pc, #96]	@ (8006930 <pvPortMalloc+0x194>)
 80068d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	4b13      	ldr	r3, [pc, #76]	@ (8006924 <pvPortMalloc+0x188>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	431a      	orrs	r2, r3
 80068dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80068e6:	4b13      	ldr	r3, [pc, #76]	@ (8006934 <pvPortMalloc+0x198>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3301      	adds	r3, #1
 80068ec:	4a11      	ldr	r2, [pc, #68]	@ (8006934 <pvPortMalloc+0x198>)
 80068ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068f0:	f7fe fbde 	bl	80050b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00b      	beq.n	8006916 <pvPortMalloc+0x17a>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	60fb      	str	r3, [r7, #12]
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	e7fd      	b.n	8006912 <pvPortMalloc+0x176>
	return pvReturn;
 8006916:	69fb      	ldr	r3, [r7, #28]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3728      	adds	r7, #40	@ 0x28
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	20005040 	.word	0x20005040
 8006924:	20005054 	.word	0x20005054
 8006928:	20005044 	.word	0x20005044
 800692c:	20005038 	.word	0x20005038
 8006930:	20005048 	.word	0x20005048
 8006934:	2000504c 	.word	0x2000504c

08006938 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d04f      	beq.n	80069ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800694a:	2308      	movs	r3, #8
 800694c:	425b      	negs	r3, r3
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	4413      	add	r3, r2
 8006952:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	4b25      	ldr	r3, [pc, #148]	@ (80069f4 <vPortFree+0xbc>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4013      	ands	r3, r2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10b      	bne.n	800697e <vPortFree+0x46>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	60fb      	str	r3, [r7, #12]
}
 8006978:	bf00      	nop
 800697a:	bf00      	nop
 800697c:	e7fd      	b.n	800697a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00b      	beq.n	800699e <vPortFree+0x66>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	60bb      	str	r3, [r7, #8]
}
 8006998:	bf00      	nop
 800699a:	bf00      	nop
 800699c:	e7fd      	b.n	800699a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	4b14      	ldr	r3, [pc, #80]	@ (80069f4 <vPortFree+0xbc>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4013      	ands	r3, r2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d01e      	beq.n	80069ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d11a      	bne.n	80069ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	4b0e      	ldr	r3, [pc, #56]	@ (80069f4 <vPortFree+0xbc>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	43db      	mvns	r3, r3
 80069be:	401a      	ands	r2, r3
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069c4:	f7fe fb66 	bl	8005094 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	4b0a      	ldr	r3, [pc, #40]	@ (80069f8 <vPortFree+0xc0>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4413      	add	r3, r2
 80069d2:	4a09      	ldr	r2, [pc, #36]	@ (80069f8 <vPortFree+0xc0>)
 80069d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069d6:	6938      	ldr	r0, [r7, #16]
 80069d8:	f000 f874 	bl	8006ac4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80069dc:	4b07      	ldr	r3, [pc, #28]	@ (80069fc <vPortFree+0xc4>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3301      	adds	r3, #1
 80069e2:	4a06      	ldr	r2, [pc, #24]	@ (80069fc <vPortFree+0xc4>)
 80069e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80069e6:	f7fe fb63 	bl	80050b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069ea:	bf00      	nop
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20005054 	.word	0x20005054
 80069f8:	20005044 	.word	0x20005044
 80069fc:	20005050 	.word	0x20005050

08006a00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006a0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a0c:	4b27      	ldr	r3, [pc, #156]	@ (8006aac <prvHeapInit+0xac>)
 8006a0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00c      	beq.n	8006a34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3307      	adds	r3, #7
 8006a1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f023 0307 	bic.w	r3, r3, #7
 8006a26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8006aac <prvHeapInit+0xac>)
 8006a30:	4413      	add	r3, r2
 8006a32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a38:	4a1d      	ldr	r2, [pc, #116]	@ (8006ab0 <prvHeapInit+0xb0>)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ab0 <prvHeapInit+0xb0>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	4413      	add	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	1a9b      	subs	r3, r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 0307 	bic.w	r3, r3, #7
 8006a5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4a15      	ldr	r2, [pc, #84]	@ (8006ab4 <prvHeapInit+0xb4>)
 8006a60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a62:	4b14      	ldr	r3, [pc, #80]	@ (8006ab4 <prvHeapInit+0xb4>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2200      	movs	r2, #0
 8006a68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a6a:	4b12      	ldr	r3, [pc, #72]	@ (8006ab4 <prvHeapInit+0xb4>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	1ad2      	subs	r2, r2, r3
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a80:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab4 <prvHeapInit+0xb4>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8006ab8 <prvHeapInit+0xb8>)
 8006a8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	4a09      	ldr	r2, [pc, #36]	@ (8006abc <prvHeapInit+0xbc>)
 8006a96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a98:	4b09      	ldr	r3, [pc, #36]	@ (8006ac0 <prvHeapInit+0xc0>)
 8006a9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006a9e:	601a      	str	r2, [r3, #0]
}
 8006aa0:	bf00      	nop
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	20001438 	.word	0x20001438
 8006ab0:	20005038 	.word	0x20005038
 8006ab4:	20005040 	.word	0x20005040
 8006ab8:	20005048 	.word	0x20005048
 8006abc:	20005044 	.word	0x20005044
 8006ac0:	20005054 	.word	0x20005054

08006ac4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006acc:	4b28      	ldr	r3, [pc, #160]	@ (8006b70 <prvInsertBlockIntoFreeList+0xac>)
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	e002      	b.n	8006ad8 <prvInsertBlockIntoFreeList+0x14>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d8f7      	bhi.n	8006ad2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	4413      	add	r3, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d108      	bne.n	8006b06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	441a      	add	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	441a      	add	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d118      	bne.n	8006b4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	4b15      	ldr	r3, [pc, #84]	@ (8006b74 <prvInsertBlockIntoFreeList+0xb0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d00d      	beq.n	8006b42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	441a      	add	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	e008      	b.n	8006b54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b42:	4b0c      	ldr	r3, [pc, #48]	@ (8006b74 <prvInsertBlockIntoFreeList+0xb0>)
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	e003      	b.n	8006b54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d002      	beq.n	8006b62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b62:	bf00      	nop
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	20005038 	.word	0x20005038
 8006b74:	20005040 	.word	0x20005040

08006b78 <sulp>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	460d      	mov	r5, r1
 8006b7e:	ec45 4b10 	vmov	d0, r4, r5
 8006b82:	4616      	mov	r6, r2
 8006b84:	f003 fd68 	bl	800a658 <__ulp>
 8006b88:	ec51 0b10 	vmov	r0, r1, d0
 8006b8c:	b17e      	cbz	r6, 8006bae <sulp+0x36>
 8006b8e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006b92:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	dd09      	ble.n	8006bae <sulp+0x36>
 8006b9a:	051b      	lsls	r3, r3, #20
 8006b9c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006ba0:	2400      	movs	r4, #0
 8006ba2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006ba6:	4622      	mov	r2, r4
 8006ba8:	462b      	mov	r3, r5
 8006baa:	f7f9 fd35 	bl	8000618 <__aeabi_dmul>
 8006bae:	ec41 0b10 	vmov	d0, r0, r1
 8006bb2:	bd70      	pop	{r4, r5, r6, pc}
 8006bb4:	0000      	movs	r0, r0
	...

08006bb8 <_strtod_l>:
 8006bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	b09f      	sub	sp, #124	@ 0x7c
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	921a      	str	r2, [sp, #104]	@ 0x68
 8006bc6:	9005      	str	r0, [sp, #20]
 8006bc8:	f04f 0a00 	mov.w	sl, #0
 8006bcc:	f04f 0b00 	mov.w	fp, #0
 8006bd0:	460a      	mov	r2, r1
 8006bd2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006bd4:	7811      	ldrb	r1, [r2, #0]
 8006bd6:	292b      	cmp	r1, #43	@ 0x2b
 8006bd8:	d04a      	beq.n	8006c70 <_strtod_l+0xb8>
 8006bda:	d838      	bhi.n	8006c4e <_strtod_l+0x96>
 8006bdc:	290d      	cmp	r1, #13
 8006bde:	d832      	bhi.n	8006c46 <_strtod_l+0x8e>
 8006be0:	2908      	cmp	r1, #8
 8006be2:	d832      	bhi.n	8006c4a <_strtod_l+0x92>
 8006be4:	2900      	cmp	r1, #0
 8006be6:	d03b      	beq.n	8006c60 <_strtod_l+0xa8>
 8006be8:	2200      	movs	r2, #0
 8006bea:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006bec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006bee:	782a      	ldrb	r2, [r5, #0]
 8006bf0:	2a30      	cmp	r2, #48	@ 0x30
 8006bf2:	f040 80b3 	bne.w	8006d5c <_strtod_l+0x1a4>
 8006bf6:	786a      	ldrb	r2, [r5, #1]
 8006bf8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006bfc:	2a58      	cmp	r2, #88	@ 0x58
 8006bfe:	d16e      	bne.n	8006cde <_strtod_l+0x126>
 8006c00:	9302      	str	r3, [sp, #8]
 8006c02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c04:	9301      	str	r3, [sp, #4]
 8006c06:	ab1a      	add	r3, sp, #104	@ 0x68
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	4a8e      	ldr	r2, [pc, #568]	@ (8006e44 <_strtod_l+0x28c>)
 8006c0c:	9805      	ldr	r0, [sp, #20]
 8006c0e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006c10:	a919      	add	r1, sp, #100	@ 0x64
 8006c12:	f002 fe13 	bl	800983c <__gethex>
 8006c16:	f010 060f 	ands.w	r6, r0, #15
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	d005      	beq.n	8006c2a <_strtod_l+0x72>
 8006c1e:	2e06      	cmp	r6, #6
 8006c20:	d128      	bne.n	8006c74 <_strtod_l+0xbc>
 8006c22:	3501      	adds	r5, #1
 8006c24:	2300      	movs	r3, #0
 8006c26:	9519      	str	r5, [sp, #100]	@ 0x64
 8006c28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f040 858e 	bne.w	800774e <_strtod_l+0xb96>
 8006c32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c34:	b1cb      	cbz	r3, 8006c6a <_strtod_l+0xb2>
 8006c36:	4652      	mov	r2, sl
 8006c38:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006c3c:	ec43 2b10 	vmov	d0, r2, r3
 8006c40:	b01f      	add	sp, #124	@ 0x7c
 8006c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c46:	2920      	cmp	r1, #32
 8006c48:	d1ce      	bne.n	8006be8 <_strtod_l+0x30>
 8006c4a:	3201      	adds	r2, #1
 8006c4c:	e7c1      	b.n	8006bd2 <_strtod_l+0x1a>
 8006c4e:	292d      	cmp	r1, #45	@ 0x2d
 8006c50:	d1ca      	bne.n	8006be8 <_strtod_l+0x30>
 8006c52:	2101      	movs	r1, #1
 8006c54:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006c56:	1c51      	adds	r1, r2, #1
 8006c58:	9119      	str	r1, [sp, #100]	@ 0x64
 8006c5a:	7852      	ldrb	r2, [r2, #1]
 8006c5c:	2a00      	cmp	r2, #0
 8006c5e:	d1c5      	bne.n	8006bec <_strtod_l+0x34>
 8006c60:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006c62:	9419      	str	r4, [sp, #100]	@ 0x64
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f040 8570 	bne.w	800774a <_strtod_l+0xb92>
 8006c6a:	4652      	mov	r2, sl
 8006c6c:	465b      	mov	r3, fp
 8006c6e:	e7e5      	b.n	8006c3c <_strtod_l+0x84>
 8006c70:	2100      	movs	r1, #0
 8006c72:	e7ef      	b.n	8006c54 <_strtod_l+0x9c>
 8006c74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006c76:	b13a      	cbz	r2, 8006c88 <_strtod_l+0xd0>
 8006c78:	2135      	movs	r1, #53	@ 0x35
 8006c7a:	a81c      	add	r0, sp, #112	@ 0x70
 8006c7c:	f003 fde6 	bl	800a84c <__copybits>
 8006c80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c82:	9805      	ldr	r0, [sp, #20]
 8006c84:	f003 f9b4 	bl	8009ff0 <_Bfree>
 8006c88:	3e01      	subs	r6, #1
 8006c8a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006c8c:	2e04      	cmp	r6, #4
 8006c8e:	d806      	bhi.n	8006c9e <_strtod_l+0xe6>
 8006c90:	e8df f006 	tbb	[pc, r6]
 8006c94:	201d0314 	.word	0x201d0314
 8006c98:	14          	.byte	0x14
 8006c99:	00          	.byte	0x00
 8006c9a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006c9e:	05e1      	lsls	r1, r4, #23
 8006ca0:	bf48      	it	mi
 8006ca2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006ca6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006caa:	0d1b      	lsrs	r3, r3, #20
 8006cac:	051b      	lsls	r3, r3, #20
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1bb      	bne.n	8006c2a <_strtod_l+0x72>
 8006cb2:	f001 fe5b 	bl	800896c <__errno>
 8006cb6:	2322      	movs	r3, #34	@ 0x22
 8006cb8:	6003      	str	r3, [r0, #0]
 8006cba:	e7b6      	b.n	8006c2a <_strtod_l+0x72>
 8006cbc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006cc0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006cc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006cc8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006ccc:	e7e7      	b.n	8006c9e <_strtod_l+0xe6>
 8006cce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006e4c <_strtod_l+0x294>
 8006cd2:	e7e4      	b.n	8006c9e <_strtod_l+0xe6>
 8006cd4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006cd8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006cdc:	e7df      	b.n	8006c9e <_strtod_l+0xe6>
 8006cde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ce4:	785b      	ldrb	r3, [r3, #1]
 8006ce6:	2b30      	cmp	r3, #48	@ 0x30
 8006ce8:	d0f9      	beq.n	8006cde <_strtod_l+0x126>
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d09d      	beq.n	8006c2a <_strtod_l+0x72>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cf2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cf4:	930c      	str	r3, [sp, #48]	@ 0x30
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	9308      	str	r3, [sp, #32]
 8006cfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cfc:	461f      	mov	r7, r3
 8006cfe:	220a      	movs	r2, #10
 8006d00:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006d02:	7805      	ldrb	r5, [r0, #0]
 8006d04:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006d08:	b2d9      	uxtb	r1, r3
 8006d0a:	2909      	cmp	r1, #9
 8006d0c:	d928      	bls.n	8006d60 <_strtod_l+0x1a8>
 8006d0e:	494e      	ldr	r1, [pc, #312]	@ (8006e48 <_strtod_l+0x290>)
 8006d10:	2201      	movs	r2, #1
 8006d12:	f001 fd63 	bl	80087dc <strncmp>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d032      	beq.n	8006d80 <_strtod_l+0x1c8>
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	462a      	mov	r2, r5
 8006d1e:	4681      	mov	r9, r0
 8006d20:	463d      	mov	r5, r7
 8006d22:	4603      	mov	r3, r0
 8006d24:	2a65      	cmp	r2, #101	@ 0x65
 8006d26:	d001      	beq.n	8006d2c <_strtod_l+0x174>
 8006d28:	2a45      	cmp	r2, #69	@ 0x45
 8006d2a:	d114      	bne.n	8006d56 <_strtod_l+0x19e>
 8006d2c:	b91d      	cbnz	r5, 8006d36 <_strtod_l+0x17e>
 8006d2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d30:	4302      	orrs	r2, r0
 8006d32:	d095      	beq.n	8006c60 <_strtod_l+0xa8>
 8006d34:	2500      	movs	r5, #0
 8006d36:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006d38:	1c62      	adds	r2, r4, #1
 8006d3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d3c:	7862      	ldrb	r2, [r4, #1]
 8006d3e:	2a2b      	cmp	r2, #43	@ 0x2b
 8006d40:	d077      	beq.n	8006e32 <_strtod_l+0x27a>
 8006d42:	2a2d      	cmp	r2, #45	@ 0x2d
 8006d44:	d07b      	beq.n	8006e3e <_strtod_l+0x286>
 8006d46:	f04f 0c00 	mov.w	ip, #0
 8006d4a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006d4e:	2909      	cmp	r1, #9
 8006d50:	f240 8082 	bls.w	8006e58 <_strtod_l+0x2a0>
 8006d54:	9419      	str	r4, [sp, #100]	@ 0x64
 8006d56:	f04f 0800 	mov.w	r8, #0
 8006d5a:	e0a2      	b.n	8006ea2 <_strtod_l+0x2ea>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	e7c7      	b.n	8006cf0 <_strtod_l+0x138>
 8006d60:	2f08      	cmp	r7, #8
 8006d62:	bfd5      	itete	le
 8006d64:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006d66:	9908      	ldrgt	r1, [sp, #32]
 8006d68:	fb02 3301 	mlale	r3, r2, r1, r3
 8006d6c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006d70:	f100 0001 	add.w	r0, r0, #1
 8006d74:	bfd4      	ite	le
 8006d76:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006d78:	9308      	strgt	r3, [sp, #32]
 8006d7a:	3701      	adds	r7, #1
 8006d7c:	9019      	str	r0, [sp, #100]	@ 0x64
 8006d7e:	e7bf      	b.n	8006d00 <_strtod_l+0x148>
 8006d80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d86:	785a      	ldrb	r2, [r3, #1]
 8006d88:	b37f      	cbz	r7, 8006dea <_strtod_l+0x232>
 8006d8a:	4681      	mov	r9, r0
 8006d8c:	463d      	mov	r5, r7
 8006d8e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006d92:	2b09      	cmp	r3, #9
 8006d94:	d912      	bls.n	8006dbc <_strtod_l+0x204>
 8006d96:	2301      	movs	r3, #1
 8006d98:	e7c4      	b.n	8006d24 <_strtod_l+0x16c>
 8006d9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006da0:	785a      	ldrb	r2, [r3, #1]
 8006da2:	3001      	adds	r0, #1
 8006da4:	2a30      	cmp	r2, #48	@ 0x30
 8006da6:	d0f8      	beq.n	8006d9a <_strtod_l+0x1e2>
 8006da8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006dac:	2b08      	cmp	r3, #8
 8006dae:	f200 84d3 	bhi.w	8007758 <_strtod_l+0xba0>
 8006db2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006db4:	930c      	str	r3, [sp, #48]	@ 0x30
 8006db6:	4681      	mov	r9, r0
 8006db8:	2000      	movs	r0, #0
 8006dba:	4605      	mov	r5, r0
 8006dbc:	3a30      	subs	r2, #48	@ 0x30
 8006dbe:	f100 0301 	add.w	r3, r0, #1
 8006dc2:	d02a      	beq.n	8006e1a <_strtod_l+0x262>
 8006dc4:	4499      	add	r9, r3
 8006dc6:	eb00 0c05 	add.w	ip, r0, r5
 8006dca:	462b      	mov	r3, r5
 8006dcc:	210a      	movs	r1, #10
 8006dce:	4563      	cmp	r3, ip
 8006dd0:	d10d      	bne.n	8006dee <_strtod_l+0x236>
 8006dd2:	1c69      	adds	r1, r5, #1
 8006dd4:	4401      	add	r1, r0
 8006dd6:	4428      	add	r0, r5
 8006dd8:	2808      	cmp	r0, #8
 8006dda:	dc16      	bgt.n	8006e0a <_strtod_l+0x252>
 8006ddc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006dde:	230a      	movs	r3, #10
 8006de0:	fb03 2300 	mla	r3, r3, r0, r2
 8006de4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006de6:	2300      	movs	r3, #0
 8006de8:	e018      	b.n	8006e1c <_strtod_l+0x264>
 8006dea:	4638      	mov	r0, r7
 8006dec:	e7da      	b.n	8006da4 <_strtod_l+0x1ec>
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	f103 0301 	add.w	r3, r3, #1
 8006df4:	dc03      	bgt.n	8006dfe <_strtod_l+0x246>
 8006df6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006df8:	434e      	muls	r6, r1
 8006dfa:	960a      	str	r6, [sp, #40]	@ 0x28
 8006dfc:	e7e7      	b.n	8006dce <_strtod_l+0x216>
 8006dfe:	2b10      	cmp	r3, #16
 8006e00:	bfde      	ittt	le
 8006e02:	9e08      	ldrle	r6, [sp, #32]
 8006e04:	434e      	mulle	r6, r1
 8006e06:	9608      	strle	r6, [sp, #32]
 8006e08:	e7e1      	b.n	8006dce <_strtod_l+0x216>
 8006e0a:	280f      	cmp	r0, #15
 8006e0c:	dceb      	bgt.n	8006de6 <_strtod_l+0x22e>
 8006e0e:	9808      	ldr	r0, [sp, #32]
 8006e10:	230a      	movs	r3, #10
 8006e12:	fb03 2300 	mla	r3, r3, r0, r2
 8006e16:	9308      	str	r3, [sp, #32]
 8006e18:	e7e5      	b.n	8006de6 <_strtod_l+0x22e>
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e1e:	1c50      	adds	r0, r2, #1
 8006e20:	9019      	str	r0, [sp, #100]	@ 0x64
 8006e22:	7852      	ldrb	r2, [r2, #1]
 8006e24:	4618      	mov	r0, r3
 8006e26:	460d      	mov	r5, r1
 8006e28:	e7b1      	b.n	8006d8e <_strtod_l+0x1d6>
 8006e2a:	f04f 0900 	mov.w	r9, #0
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e77d      	b.n	8006d2e <_strtod_l+0x176>
 8006e32:	f04f 0c00 	mov.w	ip, #0
 8006e36:	1ca2      	adds	r2, r4, #2
 8006e38:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e3a:	78a2      	ldrb	r2, [r4, #2]
 8006e3c:	e785      	b.n	8006d4a <_strtod_l+0x192>
 8006e3e:	f04f 0c01 	mov.w	ip, #1
 8006e42:	e7f8      	b.n	8006e36 <_strtod_l+0x27e>
 8006e44:	0800b424 	.word	0x0800b424
 8006e48:	0800b40c 	.word	0x0800b40c
 8006e4c:	7ff00000 	.word	0x7ff00000
 8006e50:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e52:	1c51      	adds	r1, r2, #1
 8006e54:	9119      	str	r1, [sp, #100]	@ 0x64
 8006e56:	7852      	ldrb	r2, [r2, #1]
 8006e58:	2a30      	cmp	r2, #48	@ 0x30
 8006e5a:	d0f9      	beq.n	8006e50 <_strtod_l+0x298>
 8006e5c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006e60:	2908      	cmp	r1, #8
 8006e62:	f63f af78 	bhi.w	8006d56 <_strtod_l+0x19e>
 8006e66:	3a30      	subs	r2, #48	@ 0x30
 8006e68:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e6c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006e6e:	f04f 080a 	mov.w	r8, #10
 8006e72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e74:	1c56      	adds	r6, r2, #1
 8006e76:	9619      	str	r6, [sp, #100]	@ 0x64
 8006e78:	7852      	ldrb	r2, [r2, #1]
 8006e7a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006e7e:	f1be 0f09 	cmp.w	lr, #9
 8006e82:	d939      	bls.n	8006ef8 <_strtod_l+0x340>
 8006e84:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006e86:	1a76      	subs	r6, r6, r1
 8006e88:	2e08      	cmp	r6, #8
 8006e8a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006e8e:	dc03      	bgt.n	8006e98 <_strtod_l+0x2e0>
 8006e90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006e92:	4588      	cmp	r8, r1
 8006e94:	bfa8      	it	ge
 8006e96:	4688      	movge	r8, r1
 8006e98:	f1bc 0f00 	cmp.w	ip, #0
 8006e9c:	d001      	beq.n	8006ea2 <_strtod_l+0x2ea>
 8006e9e:	f1c8 0800 	rsb	r8, r8, #0
 8006ea2:	2d00      	cmp	r5, #0
 8006ea4:	d14e      	bne.n	8006f44 <_strtod_l+0x38c>
 8006ea6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ea8:	4308      	orrs	r0, r1
 8006eaa:	f47f aebe 	bne.w	8006c2a <_strtod_l+0x72>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f47f aed6 	bne.w	8006c60 <_strtod_l+0xa8>
 8006eb4:	2a69      	cmp	r2, #105	@ 0x69
 8006eb6:	d028      	beq.n	8006f0a <_strtod_l+0x352>
 8006eb8:	dc25      	bgt.n	8006f06 <_strtod_l+0x34e>
 8006eba:	2a49      	cmp	r2, #73	@ 0x49
 8006ebc:	d025      	beq.n	8006f0a <_strtod_l+0x352>
 8006ebe:	2a4e      	cmp	r2, #78	@ 0x4e
 8006ec0:	f47f aece 	bne.w	8006c60 <_strtod_l+0xa8>
 8006ec4:	499b      	ldr	r1, [pc, #620]	@ (8007134 <_strtod_l+0x57c>)
 8006ec6:	a819      	add	r0, sp, #100	@ 0x64
 8006ec8:	f002 feda 	bl	8009c80 <__match>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	f43f aec7 	beq.w	8006c60 <_strtod_l+0xa8>
 8006ed2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	2b28      	cmp	r3, #40	@ 0x28
 8006ed8:	d12e      	bne.n	8006f38 <_strtod_l+0x380>
 8006eda:	4997      	ldr	r1, [pc, #604]	@ (8007138 <_strtod_l+0x580>)
 8006edc:	aa1c      	add	r2, sp, #112	@ 0x70
 8006ede:	a819      	add	r0, sp, #100	@ 0x64
 8006ee0:	f002 fee2 	bl	8009ca8 <__hexnan>
 8006ee4:	2805      	cmp	r0, #5
 8006ee6:	d127      	bne.n	8006f38 <_strtod_l+0x380>
 8006ee8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006eea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006eee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006ef2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006ef6:	e698      	b.n	8006c2a <_strtod_l+0x72>
 8006ef8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006efa:	fb08 2101 	mla	r1, r8, r1, r2
 8006efe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006f02:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f04:	e7b5      	b.n	8006e72 <_strtod_l+0x2ba>
 8006f06:	2a6e      	cmp	r2, #110	@ 0x6e
 8006f08:	e7da      	b.n	8006ec0 <_strtod_l+0x308>
 8006f0a:	498c      	ldr	r1, [pc, #560]	@ (800713c <_strtod_l+0x584>)
 8006f0c:	a819      	add	r0, sp, #100	@ 0x64
 8006f0e:	f002 feb7 	bl	8009c80 <__match>
 8006f12:	2800      	cmp	r0, #0
 8006f14:	f43f aea4 	beq.w	8006c60 <_strtod_l+0xa8>
 8006f18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f1a:	4989      	ldr	r1, [pc, #548]	@ (8007140 <_strtod_l+0x588>)
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	a819      	add	r0, sp, #100	@ 0x64
 8006f20:	9319      	str	r3, [sp, #100]	@ 0x64
 8006f22:	f002 fead 	bl	8009c80 <__match>
 8006f26:	b910      	cbnz	r0, 8006f2e <_strtod_l+0x376>
 8006f28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006f2e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007150 <_strtod_l+0x598>
 8006f32:	f04f 0a00 	mov.w	sl, #0
 8006f36:	e678      	b.n	8006c2a <_strtod_l+0x72>
 8006f38:	4882      	ldr	r0, [pc, #520]	@ (8007144 <_strtod_l+0x58c>)
 8006f3a:	f001 fd55 	bl	80089e8 <nan>
 8006f3e:	ec5b ab10 	vmov	sl, fp, d0
 8006f42:	e672      	b.n	8006c2a <_strtod_l+0x72>
 8006f44:	eba8 0309 	sub.w	r3, r8, r9
 8006f48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f4c:	2f00      	cmp	r7, #0
 8006f4e:	bf08      	it	eq
 8006f50:	462f      	moveq	r7, r5
 8006f52:	2d10      	cmp	r5, #16
 8006f54:	462c      	mov	r4, r5
 8006f56:	bfa8      	it	ge
 8006f58:	2410      	movge	r4, #16
 8006f5a:	f7f9 fae3 	bl	8000524 <__aeabi_ui2d>
 8006f5e:	2d09      	cmp	r5, #9
 8006f60:	4682      	mov	sl, r0
 8006f62:	468b      	mov	fp, r1
 8006f64:	dc13      	bgt.n	8006f8e <_strtod_l+0x3d6>
 8006f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f43f ae5e 	beq.w	8006c2a <_strtod_l+0x72>
 8006f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f70:	dd78      	ble.n	8007064 <_strtod_l+0x4ac>
 8006f72:	2b16      	cmp	r3, #22
 8006f74:	dc5f      	bgt.n	8007036 <_strtod_l+0x47e>
 8006f76:	4974      	ldr	r1, [pc, #464]	@ (8007148 <_strtod_l+0x590>)
 8006f78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f80:	4652      	mov	r2, sl
 8006f82:	465b      	mov	r3, fp
 8006f84:	f7f9 fb48 	bl	8000618 <__aeabi_dmul>
 8006f88:	4682      	mov	sl, r0
 8006f8a:	468b      	mov	fp, r1
 8006f8c:	e64d      	b.n	8006c2a <_strtod_l+0x72>
 8006f8e:	4b6e      	ldr	r3, [pc, #440]	@ (8007148 <_strtod_l+0x590>)
 8006f90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006f98:	f7f9 fb3e 	bl	8000618 <__aeabi_dmul>
 8006f9c:	4682      	mov	sl, r0
 8006f9e:	9808      	ldr	r0, [sp, #32]
 8006fa0:	468b      	mov	fp, r1
 8006fa2:	f7f9 fabf 	bl	8000524 <__aeabi_ui2d>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4650      	mov	r0, sl
 8006fac:	4659      	mov	r1, fp
 8006fae:	f7f9 f97d 	bl	80002ac <__adddf3>
 8006fb2:	2d0f      	cmp	r5, #15
 8006fb4:	4682      	mov	sl, r0
 8006fb6:	468b      	mov	fp, r1
 8006fb8:	ddd5      	ble.n	8006f66 <_strtod_l+0x3ae>
 8006fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fbc:	1b2c      	subs	r4, r5, r4
 8006fbe:	441c      	add	r4, r3
 8006fc0:	2c00      	cmp	r4, #0
 8006fc2:	f340 8096 	ble.w	80070f2 <_strtod_l+0x53a>
 8006fc6:	f014 030f 	ands.w	r3, r4, #15
 8006fca:	d00a      	beq.n	8006fe2 <_strtod_l+0x42a>
 8006fcc:	495e      	ldr	r1, [pc, #376]	@ (8007148 <_strtod_l+0x590>)
 8006fce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006fd2:	4652      	mov	r2, sl
 8006fd4:	465b      	mov	r3, fp
 8006fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fda:	f7f9 fb1d 	bl	8000618 <__aeabi_dmul>
 8006fde:	4682      	mov	sl, r0
 8006fe0:	468b      	mov	fp, r1
 8006fe2:	f034 040f 	bics.w	r4, r4, #15
 8006fe6:	d073      	beq.n	80070d0 <_strtod_l+0x518>
 8006fe8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006fec:	dd48      	ble.n	8007080 <_strtod_l+0x4c8>
 8006fee:	2400      	movs	r4, #0
 8006ff0:	46a0      	mov	r8, r4
 8006ff2:	940a      	str	r4, [sp, #40]	@ 0x28
 8006ff4:	46a1      	mov	r9, r4
 8006ff6:	9a05      	ldr	r2, [sp, #20]
 8006ff8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007150 <_strtod_l+0x598>
 8006ffc:	2322      	movs	r3, #34	@ 0x22
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	f04f 0a00 	mov.w	sl, #0
 8007004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007006:	2b00      	cmp	r3, #0
 8007008:	f43f ae0f 	beq.w	8006c2a <_strtod_l+0x72>
 800700c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800700e:	9805      	ldr	r0, [sp, #20]
 8007010:	f002 ffee 	bl	8009ff0 <_Bfree>
 8007014:	9805      	ldr	r0, [sp, #20]
 8007016:	4649      	mov	r1, r9
 8007018:	f002 ffea 	bl	8009ff0 <_Bfree>
 800701c:	9805      	ldr	r0, [sp, #20]
 800701e:	4641      	mov	r1, r8
 8007020:	f002 ffe6 	bl	8009ff0 <_Bfree>
 8007024:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007026:	9805      	ldr	r0, [sp, #20]
 8007028:	f002 ffe2 	bl	8009ff0 <_Bfree>
 800702c:	9805      	ldr	r0, [sp, #20]
 800702e:	4621      	mov	r1, r4
 8007030:	f002 ffde 	bl	8009ff0 <_Bfree>
 8007034:	e5f9      	b.n	8006c2a <_strtod_l+0x72>
 8007036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007038:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800703c:	4293      	cmp	r3, r2
 800703e:	dbbc      	blt.n	8006fba <_strtod_l+0x402>
 8007040:	4c41      	ldr	r4, [pc, #260]	@ (8007148 <_strtod_l+0x590>)
 8007042:	f1c5 050f 	rsb	r5, r5, #15
 8007046:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800704a:	4652      	mov	r2, sl
 800704c:	465b      	mov	r3, fp
 800704e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007052:	f7f9 fae1 	bl	8000618 <__aeabi_dmul>
 8007056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007058:	1b5d      	subs	r5, r3, r5
 800705a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800705e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007062:	e78f      	b.n	8006f84 <_strtod_l+0x3cc>
 8007064:	3316      	adds	r3, #22
 8007066:	dba8      	blt.n	8006fba <_strtod_l+0x402>
 8007068:	4b37      	ldr	r3, [pc, #220]	@ (8007148 <_strtod_l+0x590>)
 800706a:	eba9 0808 	sub.w	r8, r9, r8
 800706e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007072:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007076:	4650      	mov	r0, sl
 8007078:	4659      	mov	r1, fp
 800707a:	f7f9 fbf7 	bl	800086c <__aeabi_ddiv>
 800707e:	e783      	b.n	8006f88 <_strtod_l+0x3d0>
 8007080:	4b32      	ldr	r3, [pc, #200]	@ (800714c <_strtod_l+0x594>)
 8007082:	9308      	str	r3, [sp, #32]
 8007084:	2300      	movs	r3, #0
 8007086:	1124      	asrs	r4, r4, #4
 8007088:	4650      	mov	r0, sl
 800708a:	4659      	mov	r1, fp
 800708c:	461e      	mov	r6, r3
 800708e:	2c01      	cmp	r4, #1
 8007090:	dc21      	bgt.n	80070d6 <_strtod_l+0x51e>
 8007092:	b10b      	cbz	r3, 8007098 <_strtod_l+0x4e0>
 8007094:	4682      	mov	sl, r0
 8007096:	468b      	mov	fp, r1
 8007098:	492c      	ldr	r1, [pc, #176]	@ (800714c <_strtod_l+0x594>)
 800709a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800709e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80070a2:	4652      	mov	r2, sl
 80070a4:	465b      	mov	r3, fp
 80070a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070aa:	f7f9 fab5 	bl	8000618 <__aeabi_dmul>
 80070ae:	4b28      	ldr	r3, [pc, #160]	@ (8007150 <_strtod_l+0x598>)
 80070b0:	460a      	mov	r2, r1
 80070b2:	400b      	ands	r3, r1
 80070b4:	4927      	ldr	r1, [pc, #156]	@ (8007154 <_strtod_l+0x59c>)
 80070b6:	428b      	cmp	r3, r1
 80070b8:	4682      	mov	sl, r0
 80070ba:	d898      	bhi.n	8006fee <_strtod_l+0x436>
 80070bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80070c0:	428b      	cmp	r3, r1
 80070c2:	bf86      	itte	hi
 80070c4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007158 <_strtod_l+0x5a0>
 80070c8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80070cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80070d0:	2300      	movs	r3, #0
 80070d2:	9308      	str	r3, [sp, #32]
 80070d4:	e07a      	b.n	80071cc <_strtod_l+0x614>
 80070d6:	07e2      	lsls	r2, r4, #31
 80070d8:	d505      	bpl.n	80070e6 <_strtod_l+0x52e>
 80070da:	9b08      	ldr	r3, [sp, #32]
 80070dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e0:	f7f9 fa9a 	bl	8000618 <__aeabi_dmul>
 80070e4:	2301      	movs	r3, #1
 80070e6:	9a08      	ldr	r2, [sp, #32]
 80070e8:	3208      	adds	r2, #8
 80070ea:	3601      	adds	r6, #1
 80070ec:	1064      	asrs	r4, r4, #1
 80070ee:	9208      	str	r2, [sp, #32]
 80070f0:	e7cd      	b.n	800708e <_strtod_l+0x4d6>
 80070f2:	d0ed      	beq.n	80070d0 <_strtod_l+0x518>
 80070f4:	4264      	negs	r4, r4
 80070f6:	f014 020f 	ands.w	r2, r4, #15
 80070fa:	d00a      	beq.n	8007112 <_strtod_l+0x55a>
 80070fc:	4b12      	ldr	r3, [pc, #72]	@ (8007148 <_strtod_l+0x590>)
 80070fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007102:	4650      	mov	r0, sl
 8007104:	4659      	mov	r1, fp
 8007106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710a:	f7f9 fbaf 	bl	800086c <__aeabi_ddiv>
 800710e:	4682      	mov	sl, r0
 8007110:	468b      	mov	fp, r1
 8007112:	1124      	asrs	r4, r4, #4
 8007114:	d0dc      	beq.n	80070d0 <_strtod_l+0x518>
 8007116:	2c1f      	cmp	r4, #31
 8007118:	dd20      	ble.n	800715c <_strtod_l+0x5a4>
 800711a:	2400      	movs	r4, #0
 800711c:	46a0      	mov	r8, r4
 800711e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007120:	46a1      	mov	r9, r4
 8007122:	9a05      	ldr	r2, [sp, #20]
 8007124:	2322      	movs	r3, #34	@ 0x22
 8007126:	f04f 0a00 	mov.w	sl, #0
 800712a:	f04f 0b00 	mov.w	fp, #0
 800712e:	6013      	str	r3, [r2, #0]
 8007130:	e768      	b.n	8007004 <_strtod_l+0x44c>
 8007132:	bf00      	nop
 8007134:	0800b56e 	.word	0x0800b56e
 8007138:	0800b410 	.word	0x0800b410
 800713c:	0800b566 	.word	0x0800b566
 8007140:	0800b5e1 	.word	0x0800b5e1
 8007144:	0800b5dd 	.word	0x0800b5dd
 8007148:	0800b758 	.word	0x0800b758
 800714c:	0800b730 	.word	0x0800b730
 8007150:	7ff00000 	.word	0x7ff00000
 8007154:	7ca00000 	.word	0x7ca00000
 8007158:	7fefffff 	.word	0x7fefffff
 800715c:	f014 0310 	ands.w	r3, r4, #16
 8007160:	bf18      	it	ne
 8007162:	236a      	movne	r3, #106	@ 0x6a
 8007164:	4ea9      	ldr	r6, [pc, #676]	@ (800740c <_strtod_l+0x854>)
 8007166:	9308      	str	r3, [sp, #32]
 8007168:	4650      	mov	r0, sl
 800716a:	4659      	mov	r1, fp
 800716c:	2300      	movs	r3, #0
 800716e:	07e2      	lsls	r2, r4, #31
 8007170:	d504      	bpl.n	800717c <_strtod_l+0x5c4>
 8007172:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007176:	f7f9 fa4f 	bl	8000618 <__aeabi_dmul>
 800717a:	2301      	movs	r3, #1
 800717c:	1064      	asrs	r4, r4, #1
 800717e:	f106 0608 	add.w	r6, r6, #8
 8007182:	d1f4      	bne.n	800716e <_strtod_l+0x5b6>
 8007184:	b10b      	cbz	r3, 800718a <_strtod_l+0x5d2>
 8007186:	4682      	mov	sl, r0
 8007188:	468b      	mov	fp, r1
 800718a:	9b08      	ldr	r3, [sp, #32]
 800718c:	b1b3      	cbz	r3, 80071bc <_strtod_l+0x604>
 800718e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007192:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007196:	2b00      	cmp	r3, #0
 8007198:	4659      	mov	r1, fp
 800719a:	dd0f      	ble.n	80071bc <_strtod_l+0x604>
 800719c:	2b1f      	cmp	r3, #31
 800719e:	dd55      	ble.n	800724c <_strtod_l+0x694>
 80071a0:	2b34      	cmp	r3, #52	@ 0x34
 80071a2:	bfde      	ittt	le
 80071a4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80071a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80071ac:	4093      	lslle	r3, r2
 80071ae:	f04f 0a00 	mov.w	sl, #0
 80071b2:	bfcc      	ite	gt
 80071b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80071b8:	ea03 0b01 	andle.w	fp, r3, r1
 80071bc:	2200      	movs	r2, #0
 80071be:	2300      	movs	r3, #0
 80071c0:	4650      	mov	r0, sl
 80071c2:	4659      	mov	r1, fp
 80071c4:	f7f9 fc90 	bl	8000ae8 <__aeabi_dcmpeq>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d1a6      	bne.n	800711a <_strtod_l+0x562>
 80071cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80071d2:	9805      	ldr	r0, [sp, #20]
 80071d4:	462b      	mov	r3, r5
 80071d6:	463a      	mov	r2, r7
 80071d8:	f002 ff72 	bl	800a0c0 <__s2b>
 80071dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80071de:	2800      	cmp	r0, #0
 80071e0:	f43f af05 	beq.w	8006fee <_strtod_l+0x436>
 80071e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071e6:	2a00      	cmp	r2, #0
 80071e8:	eba9 0308 	sub.w	r3, r9, r8
 80071ec:	bfa8      	it	ge
 80071ee:	2300      	movge	r3, #0
 80071f0:	9312      	str	r3, [sp, #72]	@ 0x48
 80071f2:	2400      	movs	r4, #0
 80071f4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80071f8:	9316      	str	r3, [sp, #88]	@ 0x58
 80071fa:	46a0      	mov	r8, r4
 80071fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071fe:	9805      	ldr	r0, [sp, #20]
 8007200:	6859      	ldr	r1, [r3, #4]
 8007202:	f002 feb5 	bl	8009f70 <_Balloc>
 8007206:	4681      	mov	r9, r0
 8007208:	2800      	cmp	r0, #0
 800720a:	f43f aef4 	beq.w	8006ff6 <_strtod_l+0x43e>
 800720e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007210:	691a      	ldr	r2, [r3, #16]
 8007212:	3202      	adds	r2, #2
 8007214:	f103 010c 	add.w	r1, r3, #12
 8007218:	0092      	lsls	r2, r2, #2
 800721a:	300c      	adds	r0, #12
 800721c:	f001 fbd3 	bl	80089c6 <memcpy>
 8007220:	ec4b ab10 	vmov	d0, sl, fp
 8007224:	9805      	ldr	r0, [sp, #20]
 8007226:	aa1c      	add	r2, sp, #112	@ 0x70
 8007228:	a91b      	add	r1, sp, #108	@ 0x6c
 800722a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800722e:	f003 fa83 	bl	800a738 <__d2b>
 8007232:	901a      	str	r0, [sp, #104]	@ 0x68
 8007234:	2800      	cmp	r0, #0
 8007236:	f43f aede 	beq.w	8006ff6 <_strtod_l+0x43e>
 800723a:	9805      	ldr	r0, [sp, #20]
 800723c:	2101      	movs	r1, #1
 800723e:	f002 ffd5 	bl	800a1ec <__i2b>
 8007242:	4680      	mov	r8, r0
 8007244:	b948      	cbnz	r0, 800725a <_strtod_l+0x6a2>
 8007246:	f04f 0800 	mov.w	r8, #0
 800724a:	e6d4      	b.n	8006ff6 <_strtod_l+0x43e>
 800724c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007250:	fa02 f303 	lsl.w	r3, r2, r3
 8007254:	ea03 0a0a 	and.w	sl, r3, sl
 8007258:	e7b0      	b.n	80071bc <_strtod_l+0x604>
 800725a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800725c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800725e:	2d00      	cmp	r5, #0
 8007260:	bfab      	itete	ge
 8007262:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007264:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007266:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007268:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800726a:	bfac      	ite	ge
 800726c:	18ef      	addge	r7, r5, r3
 800726e:	1b5e      	sublt	r6, r3, r5
 8007270:	9b08      	ldr	r3, [sp, #32]
 8007272:	1aed      	subs	r5, r5, r3
 8007274:	4415      	add	r5, r2
 8007276:	4b66      	ldr	r3, [pc, #408]	@ (8007410 <_strtod_l+0x858>)
 8007278:	3d01      	subs	r5, #1
 800727a:	429d      	cmp	r5, r3
 800727c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007280:	da50      	bge.n	8007324 <_strtod_l+0x76c>
 8007282:	1b5b      	subs	r3, r3, r5
 8007284:	2b1f      	cmp	r3, #31
 8007286:	eba2 0203 	sub.w	r2, r2, r3
 800728a:	f04f 0101 	mov.w	r1, #1
 800728e:	dc3d      	bgt.n	800730c <_strtod_l+0x754>
 8007290:	fa01 f303 	lsl.w	r3, r1, r3
 8007294:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007296:	2300      	movs	r3, #0
 8007298:	9310      	str	r3, [sp, #64]	@ 0x40
 800729a:	18bd      	adds	r5, r7, r2
 800729c:	9b08      	ldr	r3, [sp, #32]
 800729e:	42af      	cmp	r7, r5
 80072a0:	4416      	add	r6, r2
 80072a2:	441e      	add	r6, r3
 80072a4:	463b      	mov	r3, r7
 80072a6:	bfa8      	it	ge
 80072a8:	462b      	movge	r3, r5
 80072aa:	42b3      	cmp	r3, r6
 80072ac:	bfa8      	it	ge
 80072ae:	4633      	movge	r3, r6
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	bfc2      	ittt	gt
 80072b4:	1aed      	subgt	r5, r5, r3
 80072b6:	1af6      	subgt	r6, r6, r3
 80072b8:	1aff      	subgt	r7, r7, r3
 80072ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dd16      	ble.n	80072ee <_strtod_l+0x736>
 80072c0:	4641      	mov	r1, r8
 80072c2:	9805      	ldr	r0, [sp, #20]
 80072c4:	461a      	mov	r2, r3
 80072c6:	f003 f851 	bl	800a36c <__pow5mult>
 80072ca:	4680      	mov	r8, r0
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d0ba      	beq.n	8007246 <_strtod_l+0x68e>
 80072d0:	4601      	mov	r1, r0
 80072d2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80072d4:	9805      	ldr	r0, [sp, #20]
 80072d6:	f002 ff9f 	bl	800a218 <__multiply>
 80072da:	900e      	str	r0, [sp, #56]	@ 0x38
 80072dc:	2800      	cmp	r0, #0
 80072de:	f43f ae8a 	beq.w	8006ff6 <_strtod_l+0x43e>
 80072e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072e4:	9805      	ldr	r0, [sp, #20]
 80072e6:	f002 fe83 	bl	8009ff0 <_Bfree>
 80072ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80072ee:	2d00      	cmp	r5, #0
 80072f0:	dc1d      	bgt.n	800732e <_strtod_l+0x776>
 80072f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	dd23      	ble.n	8007340 <_strtod_l+0x788>
 80072f8:	4649      	mov	r1, r9
 80072fa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80072fc:	9805      	ldr	r0, [sp, #20]
 80072fe:	f003 f835 	bl	800a36c <__pow5mult>
 8007302:	4681      	mov	r9, r0
 8007304:	b9e0      	cbnz	r0, 8007340 <_strtod_l+0x788>
 8007306:	f04f 0900 	mov.w	r9, #0
 800730a:	e674      	b.n	8006ff6 <_strtod_l+0x43e>
 800730c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007310:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007314:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007318:	35e2      	adds	r5, #226	@ 0xe2
 800731a:	fa01 f305 	lsl.w	r3, r1, r5
 800731e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007320:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007322:	e7ba      	b.n	800729a <_strtod_l+0x6e2>
 8007324:	2300      	movs	r3, #0
 8007326:	9310      	str	r3, [sp, #64]	@ 0x40
 8007328:	2301      	movs	r3, #1
 800732a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800732c:	e7b5      	b.n	800729a <_strtod_l+0x6e2>
 800732e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007330:	9805      	ldr	r0, [sp, #20]
 8007332:	462a      	mov	r2, r5
 8007334:	f003 f874 	bl	800a420 <__lshift>
 8007338:	901a      	str	r0, [sp, #104]	@ 0x68
 800733a:	2800      	cmp	r0, #0
 800733c:	d1d9      	bne.n	80072f2 <_strtod_l+0x73a>
 800733e:	e65a      	b.n	8006ff6 <_strtod_l+0x43e>
 8007340:	2e00      	cmp	r6, #0
 8007342:	dd07      	ble.n	8007354 <_strtod_l+0x79c>
 8007344:	4649      	mov	r1, r9
 8007346:	9805      	ldr	r0, [sp, #20]
 8007348:	4632      	mov	r2, r6
 800734a:	f003 f869 	bl	800a420 <__lshift>
 800734e:	4681      	mov	r9, r0
 8007350:	2800      	cmp	r0, #0
 8007352:	d0d8      	beq.n	8007306 <_strtod_l+0x74e>
 8007354:	2f00      	cmp	r7, #0
 8007356:	dd08      	ble.n	800736a <_strtod_l+0x7b2>
 8007358:	4641      	mov	r1, r8
 800735a:	9805      	ldr	r0, [sp, #20]
 800735c:	463a      	mov	r2, r7
 800735e:	f003 f85f 	bl	800a420 <__lshift>
 8007362:	4680      	mov	r8, r0
 8007364:	2800      	cmp	r0, #0
 8007366:	f43f ae46 	beq.w	8006ff6 <_strtod_l+0x43e>
 800736a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800736c:	9805      	ldr	r0, [sp, #20]
 800736e:	464a      	mov	r2, r9
 8007370:	f003 f8de 	bl	800a530 <__mdiff>
 8007374:	4604      	mov	r4, r0
 8007376:	2800      	cmp	r0, #0
 8007378:	f43f ae3d 	beq.w	8006ff6 <_strtod_l+0x43e>
 800737c:	68c3      	ldr	r3, [r0, #12]
 800737e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007380:	2300      	movs	r3, #0
 8007382:	60c3      	str	r3, [r0, #12]
 8007384:	4641      	mov	r1, r8
 8007386:	f003 f8b7 	bl	800a4f8 <__mcmp>
 800738a:	2800      	cmp	r0, #0
 800738c:	da46      	bge.n	800741c <_strtod_l+0x864>
 800738e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007390:	ea53 030a 	orrs.w	r3, r3, sl
 8007394:	d16c      	bne.n	8007470 <_strtod_l+0x8b8>
 8007396:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800739a:	2b00      	cmp	r3, #0
 800739c:	d168      	bne.n	8007470 <_strtod_l+0x8b8>
 800739e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80073a2:	0d1b      	lsrs	r3, r3, #20
 80073a4:	051b      	lsls	r3, r3, #20
 80073a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80073aa:	d961      	bls.n	8007470 <_strtod_l+0x8b8>
 80073ac:	6963      	ldr	r3, [r4, #20]
 80073ae:	b913      	cbnz	r3, 80073b6 <_strtod_l+0x7fe>
 80073b0:	6923      	ldr	r3, [r4, #16]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	dd5c      	ble.n	8007470 <_strtod_l+0x8b8>
 80073b6:	4621      	mov	r1, r4
 80073b8:	2201      	movs	r2, #1
 80073ba:	9805      	ldr	r0, [sp, #20]
 80073bc:	f003 f830 	bl	800a420 <__lshift>
 80073c0:	4641      	mov	r1, r8
 80073c2:	4604      	mov	r4, r0
 80073c4:	f003 f898 	bl	800a4f8 <__mcmp>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	dd51      	ble.n	8007470 <_strtod_l+0x8b8>
 80073cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80073d0:	9a08      	ldr	r2, [sp, #32]
 80073d2:	0d1b      	lsrs	r3, r3, #20
 80073d4:	051b      	lsls	r3, r3, #20
 80073d6:	2a00      	cmp	r2, #0
 80073d8:	d06b      	beq.n	80074b2 <_strtod_l+0x8fa>
 80073da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80073de:	d868      	bhi.n	80074b2 <_strtod_l+0x8fa>
 80073e0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80073e4:	f67f ae9d 	bls.w	8007122 <_strtod_l+0x56a>
 80073e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007414 <_strtod_l+0x85c>)
 80073ea:	4650      	mov	r0, sl
 80073ec:	4659      	mov	r1, fp
 80073ee:	2200      	movs	r2, #0
 80073f0:	f7f9 f912 	bl	8000618 <__aeabi_dmul>
 80073f4:	4b08      	ldr	r3, [pc, #32]	@ (8007418 <_strtod_l+0x860>)
 80073f6:	400b      	ands	r3, r1
 80073f8:	4682      	mov	sl, r0
 80073fa:	468b      	mov	fp, r1
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f47f ae05 	bne.w	800700c <_strtod_l+0x454>
 8007402:	9a05      	ldr	r2, [sp, #20]
 8007404:	2322      	movs	r3, #34	@ 0x22
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	e600      	b.n	800700c <_strtod_l+0x454>
 800740a:	bf00      	nop
 800740c:	0800b438 	.word	0x0800b438
 8007410:	fffffc02 	.word	0xfffffc02
 8007414:	39500000 	.word	0x39500000
 8007418:	7ff00000 	.word	0x7ff00000
 800741c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007420:	d165      	bne.n	80074ee <_strtod_l+0x936>
 8007422:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007424:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007428:	b35a      	cbz	r2, 8007482 <_strtod_l+0x8ca>
 800742a:	4a9f      	ldr	r2, [pc, #636]	@ (80076a8 <_strtod_l+0xaf0>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d12b      	bne.n	8007488 <_strtod_l+0x8d0>
 8007430:	9b08      	ldr	r3, [sp, #32]
 8007432:	4651      	mov	r1, sl
 8007434:	b303      	cbz	r3, 8007478 <_strtod_l+0x8c0>
 8007436:	4b9d      	ldr	r3, [pc, #628]	@ (80076ac <_strtod_l+0xaf4>)
 8007438:	465a      	mov	r2, fp
 800743a:	4013      	ands	r3, r2
 800743c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007440:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007444:	d81b      	bhi.n	800747e <_strtod_l+0x8c6>
 8007446:	0d1b      	lsrs	r3, r3, #20
 8007448:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800744c:	fa02 f303 	lsl.w	r3, r2, r3
 8007450:	4299      	cmp	r1, r3
 8007452:	d119      	bne.n	8007488 <_strtod_l+0x8d0>
 8007454:	4b96      	ldr	r3, [pc, #600]	@ (80076b0 <_strtod_l+0xaf8>)
 8007456:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007458:	429a      	cmp	r2, r3
 800745a:	d102      	bne.n	8007462 <_strtod_l+0x8aa>
 800745c:	3101      	adds	r1, #1
 800745e:	f43f adca 	beq.w	8006ff6 <_strtod_l+0x43e>
 8007462:	4b92      	ldr	r3, [pc, #584]	@ (80076ac <_strtod_l+0xaf4>)
 8007464:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007466:	401a      	ands	r2, r3
 8007468:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800746c:	f04f 0a00 	mov.w	sl, #0
 8007470:	9b08      	ldr	r3, [sp, #32]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1b8      	bne.n	80073e8 <_strtod_l+0x830>
 8007476:	e5c9      	b.n	800700c <_strtod_l+0x454>
 8007478:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800747c:	e7e8      	b.n	8007450 <_strtod_l+0x898>
 800747e:	4613      	mov	r3, r2
 8007480:	e7e6      	b.n	8007450 <_strtod_l+0x898>
 8007482:	ea53 030a 	orrs.w	r3, r3, sl
 8007486:	d0a1      	beq.n	80073cc <_strtod_l+0x814>
 8007488:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800748a:	b1db      	cbz	r3, 80074c4 <_strtod_l+0x90c>
 800748c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800748e:	4213      	tst	r3, r2
 8007490:	d0ee      	beq.n	8007470 <_strtod_l+0x8b8>
 8007492:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007494:	9a08      	ldr	r2, [sp, #32]
 8007496:	4650      	mov	r0, sl
 8007498:	4659      	mov	r1, fp
 800749a:	b1bb      	cbz	r3, 80074cc <_strtod_l+0x914>
 800749c:	f7ff fb6c 	bl	8006b78 <sulp>
 80074a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074a4:	ec53 2b10 	vmov	r2, r3, d0
 80074a8:	f7f8 ff00 	bl	80002ac <__adddf3>
 80074ac:	4682      	mov	sl, r0
 80074ae:	468b      	mov	fp, r1
 80074b0:	e7de      	b.n	8007470 <_strtod_l+0x8b8>
 80074b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80074b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80074ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80074be:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80074c2:	e7d5      	b.n	8007470 <_strtod_l+0x8b8>
 80074c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80074c6:	ea13 0f0a 	tst.w	r3, sl
 80074ca:	e7e1      	b.n	8007490 <_strtod_l+0x8d8>
 80074cc:	f7ff fb54 	bl	8006b78 <sulp>
 80074d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074d4:	ec53 2b10 	vmov	r2, r3, d0
 80074d8:	f7f8 fee6 	bl	80002a8 <__aeabi_dsub>
 80074dc:	2200      	movs	r2, #0
 80074de:	2300      	movs	r3, #0
 80074e0:	4682      	mov	sl, r0
 80074e2:	468b      	mov	fp, r1
 80074e4:	f7f9 fb00 	bl	8000ae8 <__aeabi_dcmpeq>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d0c1      	beq.n	8007470 <_strtod_l+0x8b8>
 80074ec:	e619      	b.n	8007122 <_strtod_l+0x56a>
 80074ee:	4641      	mov	r1, r8
 80074f0:	4620      	mov	r0, r4
 80074f2:	f003 f979 	bl	800a7e8 <__ratio>
 80074f6:	ec57 6b10 	vmov	r6, r7, d0
 80074fa:	2200      	movs	r2, #0
 80074fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007500:	4630      	mov	r0, r6
 8007502:	4639      	mov	r1, r7
 8007504:	f7f9 fb04 	bl	8000b10 <__aeabi_dcmple>
 8007508:	2800      	cmp	r0, #0
 800750a:	d06f      	beq.n	80075ec <_strtod_l+0xa34>
 800750c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800750e:	2b00      	cmp	r3, #0
 8007510:	d17a      	bne.n	8007608 <_strtod_l+0xa50>
 8007512:	f1ba 0f00 	cmp.w	sl, #0
 8007516:	d158      	bne.n	80075ca <_strtod_l+0xa12>
 8007518:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800751a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800751e:	2b00      	cmp	r3, #0
 8007520:	d15a      	bne.n	80075d8 <_strtod_l+0xa20>
 8007522:	4b64      	ldr	r3, [pc, #400]	@ (80076b4 <_strtod_l+0xafc>)
 8007524:	2200      	movs	r2, #0
 8007526:	4630      	mov	r0, r6
 8007528:	4639      	mov	r1, r7
 800752a:	f7f9 fae7 	bl	8000afc <__aeabi_dcmplt>
 800752e:	2800      	cmp	r0, #0
 8007530:	d159      	bne.n	80075e6 <_strtod_l+0xa2e>
 8007532:	4630      	mov	r0, r6
 8007534:	4639      	mov	r1, r7
 8007536:	4b60      	ldr	r3, [pc, #384]	@ (80076b8 <_strtod_l+0xb00>)
 8007538:	2200      	movs	r2, #0
 800753a:	f7f9 f86d 	bl	8000618 <__aeabi_dmul>
 800753e:	4606      	mov	r6, r0
 8007540:	460f      	mov	r7, r1
 8007542:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007546:	9606      	str	r6, [sp, #24]
 8007548:	9307      	str	r3, [sp, #28]
 800754a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800754e:	4d57      	ldr	r5, [pc, #348]	@ (80076ac <_strtod_l+0xaf4>)
 8007550:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007554:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007556:	401d      	ands	r5, r3
 8007558:	4b58      	ldr	r3, [pc, #352]	@ (80076bc <_strtod_l+0xb04>)
 800755a:	429d      	cmp	r5, r3
 800755c:	f040 80b2 	bne.w	80076c4 <_strtod_l+0xb0c>
 8007560:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007562:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007566:	ec4b ab10 	vmov	d0, sl, fp
 800756a:	f003 f875 	bl	800a658 <__ulp>
 800756e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007572:	ec51 0b10 	vmov	r0, r1, d0
 8007576:	f7f9 f84f 	bl	8000618 <__aeabi_dmul>
 800757a:	4652      	mov	r2, sl
 800757c:	465b      	mov	r3, fp
 800757e:	f7f8 fe95 	bl	80002ac <__adddf3>
 8007582:	460b      	mov	r3, r1
 8007584:	4949      	ldr	r1, [pc, #292]	@ (80076ac <_strtod_l+0xaf4>)
 8007586:	4a4e      	ldr	r2, [pc, #312]	@ (80076c0 <_strtod_l+0xb08>)
 8007588:	4019      	ands	r1, r3
 800758a:	4291      	cmp	r1, r2
 800758c:	4682      	mov	sl, r0
 800758e:	d942      	bls.n	8007616 <_strtod_l+0xa5e>
 8007590:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007592:	4b47      	ldr	r3, [pc, #284]	@ (80076b0 <_strtod_l+0xaf8>)
 8007594:	429a      	cmp	r2, r3
 8007596:	d103      	bne.n	80075a0 <_strtod_l+0x9e8>
 8007598:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800759a:	3301      	adds	r3, #1
 800759c:	f43f ad2b 	beq.w	8006ff6 <_strtod_l+0x43e>
 80075a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80076b0 <_strtod_l+0xaf8>
 80075a4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80075a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075aa:	9805      	ldr	r0, [sp, #20]
 80075ac:	f002 fd20 	bl	8009ff0 <_Bfree>
 80075b0:	9805      	ldr	r0, [sp, #20]
 80075b2:	4649      	mov	r1, r9
 80075b4:	f002 fd1c 	bl	8009ff0 <_Bfree>
 80075b8:	9805      	ldr	r0, [sp, #20]
 80075ba:	4641      	mov	r1, r8
 80075bc:	f002 fd18 	bl	8009ff0 <_Bfree>
 80075c0:	9805      	ldr	r0, [sp, #20]
 80075c2:	4621      	mov	r1, r4
 80075c4:	f002 fd14 	bl	8009ff0 <_Bfree>
 80075c8:	e618      	b.n	80071fc <_strtod_l+0x644>
 80075ca:	f1ba 0f01 	cmp.w	sl, #1
 80075ce:	d103      	bne.n	80075d8 <_strtod_l+0xa20>
 80075d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f43f ada5 	beq.w	8007122 <_strtod_l+0x56a>
 80075d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007688 <_strtod_l+0xad0>
 80075dc:	4f35      	ldr	r7, [pc, #212]	@ (80076b4 <_strtod_l+0xafc>)
 80075de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80075e2:	2600      	movs	r6, #0
 80075e4:	e7b1      	b.n	800754a <_strtod_l+0x992>
 80075e6:	4f34      	ldr	r7, [pc, #208]	@ (80076b8 <_strtod_l+0xb00>)
 80075e8:	2600      	movs	r6, #0
 80075ea:	e7aa      	b.n	8007542 <_strtod_l+0x98a>
 80075ec:	4b32      	ldr	r3, [pc, #200]	@ (80076b8 <_strtod_l+0xb00>)
 80075ee:	4630      	mov	r0, r6
 80075f0:	4639      	mov	r1, r7
 80075f2:	2200      	movs	r2, #0
 80075f4:	f7f9 f810 	bl	8000618 <__aeabi_dmul>
 80075f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075fa:	4606      	mov	r6, r0
 80075fc:	460f      	mov	r7, r1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d09f      	beq.n	8007542 <_strtod_l+0x98a>
 8007602:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007606:	e7a0      	b.n	800754a <_strtod_l+0x992>
 8007608:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007690 <_strtod_l+0xad8>
 800760c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007610:	ec57 6b17 	vmov	r6, r7, d7
 8007614:	e799      	b.n	800754a <_strtod_l+0x992>
 8007616:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800761a:	9b08      	ldr	r3, [sp, #32]
 800761c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1c1      	bne.n	80075a8 <_strtod_l+0x9f0>
 8007624:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007628:	0d1b      	lsrs	r3, r3, #20
 800762a:	051b      	lsls	r3, r3, #20
 800762c:	429d      	cmp	r5, r3
 800762e:	d1bb      	bne.n	80075a8 <_strtod_l+0x9f0>
 8007630:	4630      	mov	r0, r6
 8007632:	4639      	mov	r1, r7
 8007634:	f7f9 fb50 	bl	8000cd8 <__aeabi_d2lz>
 8007638:	f7f8 ffc0 	bl	80005bc <__aeabi_l2d>
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	4630      	mov	r0, r6
 8007642:	4639      	mov	r1, r7
 8007644:	f7f8 fe30 	bl	80002a8 <__aeabi_dsub>
 8007648:	460b      	mov	r3, r1
 800764a:	4602      	mov	r2, r0
 800764c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007650:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007656:	ea46 060a 	orr.w	r6, r6, sl
 800765a:	431e      	orrs	r6, r3
 800765c:	d06f      	beq.n	800773e <_strtod_l+0xb86>
 800765e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007698 <_strtod_l+0xae0>)
 8007660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007664:	f7f9 fa4a 	bl	8000afc <__aeabi_dcmplt>
 8007668:	2800      	cmp	r0, #0
 800766a:	f47f accf 	bne.w	800700c <_strtod_l+0x454>
 800766e:	a30c      	add	r3, pc, #48	@ (adr r3, 80076a0 <_strtod_l+0xae8>)
 8007670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007674:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007678:	f7f9 fa5e 	bl	8000b38 <__aeabi_dcmpgt>
 800767c:	2800      	cmp	r0, #0
 800767e:	d093      	beq.n	80075a8 <_strtod_l+0x9f0>
 8007680:	e4c4      	b.n	800700c <_strtod_l+0x454>
 8007682:	bf00      	nop
 8007684:	f3af 8000 	nop.w
 8007688:	00000000 	.word	0x00000000
 800768c:	bff00000 	.word	0xbff00000
 8007690:	00000000 	.word	0x00000000
 8007694:	3ff00000 	.word	0x3ff00000
 8007698:	94a03595 	.word	0x94a03595
 800769c:	3fdfffff 	.word	0x3fdfffff
 80076a0:	35afe535 	.word	0x35afe535
 80076a4:	3fe00000 	.word	0x3fe00000
 80076a8:	000fffff 	.word	0x000fffff
 80076ac:	7ff00000 	.word	0x7ff00000
 80076b0:	7fefffff 	.word	0x7fefffff
 80076b4:	3ff00000 	.word	0x3ff00000
 80076b8:	3fe00000 	.word	0x3fe00000
 80076bc:	7fe00000 	.word	0x7fe00000
 80076c0:	7c9fffff 	.word	0x7c9fffff
 80076c4:	9b08      	ldr	r3, [sp, #32]
 80076c6:	b323      	cbz	r3, 8007712 <_strtod_l+0xb5a>
 80076c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80076cc:	d821      	bhi.n	8007712 <_strtod_l+0xb5a>
 80076ce:	a328      	add	r3, pc, #160	@ (adr r3, 8007770 <_strtod_l+0xbb8>)
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	4630      	mov	r0, r6
 80076d6:	4639      	mov	r1, r7
 80076d8:	f7f9 fa1a 	bl	8000b10 <__aeabi_dcmple>
 80076dc:	b1a0      	cbz	r0, 8007708 <_strtod_l+0xb50>
 80076de:	4639      	mov	r1, r7
 80076e0:	4630      	mov	r0, r6
 80076e2:	f7f9 fa71 	bl	8000bc8 <__aeabi_d2uiz>
 80076e6:	2801      	cmp	r0, #1
 80076e8:	bf38      	it	cc
 80076ea:	2001      	movcc	r0, #1
 80076ec:	f7f8 ff1a 	bl	8000524 <__aeabi_ui2d>
 80076f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076f2:	4606      	mov	r6, r0
 80076f4:	460f      	mov	r7, r1
 80076f6:	b9fb      	cbnz	r3, 8007738 <_strtod_l+0xb80>
 80076f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80076fc:	9014      	str	r0, [sp, #80]	@ 0x50
 80076fe:	9315      	str	r3, [sp, #84]	@ 0x54
 8007700:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007704:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007708:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800770a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800770e:	1b5b      	subs	r3, r3, r5
 8007710:	9311      	str	r3, [sp, #68]	@ 0x44
 8007712:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007716:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800771a:	f002 ff9d 	bl	800a658 <__ulp>
 800771e:	4650      	mov	r0, sl
 8007720:	ec53 2b10 	vmov	r2, r3, d0
 8007724:	4659      	mov	r1, fp
 8007726:	f7f8 ff77 	bl	8000618 <__aeabi_dmul>
 800772a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800772e:	f7f8 fdbd 	bl	80002ac <__adddf3>
 8007732:	4682      	mov	sl, r0
 8007734:	468b      	mov	fp, r1
 8007736:	e770      	b.n	800761a <_strtod_l+0xa62>
 8007738:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800773c:	e7e0      	b.n	8007700 <_strtod_l+0xb48>
 800773e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007778 <_strtod_l+0xbc0>)
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	f7f9 f9da 	bl	8000afc <__aeabi_dcmplt>
 8007748:	e798      	b.n	800767c <_strtod_l+0xac4>
 800774a:	2300      	movs	r3, #0
 800774c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800774e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007750:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007752:	6013      	str	r3, [r2, #0]
 8007754:	f7ff ba6d 	b.w	8006c32 <_strtod_l+0x7a>
 8007758:	2a65      	cmp	r2, #101	@ 0x65
 800775a:	f43f ab66 	beq.w	8006e2a <_strtod_l+0x272>
 800775e:	2a45      	cmp	r2, #69	@ 0x45
 8007760:	f43f ab63 	beq.w	8006e2a <_strtod_l+0x272>
 8007764:	2301      	movs	r3, #1
 8007766:	f7ff bb9e 	b.w	8006ea6 <_strtod_l+0x2ee>
 800776a:	bf00      	nop
 800776c:	f3af 8000 	nop.w
 8007770:	ffc00000 	.word	0xffc00000
 8007774:	41dfffff 	.word	0x41dfffff
 8007778:	94a03595 	.word	0x94a03595
 800777c:	3fcfffff 	.word	0x3fcfffff

08007780 <_strtod_r>:
 8007780:	4b01      	ldr	r3, [pc, #4]	@ (8007788 <_strtod_r+0x8>)
 8007782:	f7ff ba19 	b.w	8006bb8 <_strtod_l>
 8007786:	bf00      	nop
 8007788:	20000018 	.word	0x20000018

0800778c <_strtol_l.constprop.0>:
 800778c:	2b24      	cmp	r3, #36	@ 0x24
 800778e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007792:	4686      	mov	lr, r0
 8007794:	4690      	mov	r8, r2
 8007796:	d801      	bhi.n	800779c <_strtol_l.constprop.0+0x10>
 8007798:	2b01      	cmp	r3, #1
 800779a:	d106      	bne.n	80077aa <_strtol_l.constprop.0+0x1e>
 800779c:	f001 f8e6 	bl	800896c <__errno>
 80077a0:	2316      	movs	r3, #22
 80077a2:	6003      	str	r3, [r0, #0]
 80077a4:	2000      	movs	r0, #0
 80077a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077aa:	4834      	ldr	r0, [pc, #208]	@ (800787c <_strtol_l.constprop.0+0xf0>)
 80077ac:	460d      	mov	r5, r1
 80077ae:	462a      	mov	r2, r5
 80077b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077b4:	5d06      	ldrb	r6, [r0, r4]
 80077b6:	f016 0608 	ands.w	r6, r6, #8
 80077ba:	d1f8      	bne.n	80077ae <_strtol_l.constprop.0+0x22>
 80077bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80077be:	d12d      	bne.n	800781c <_strtol_l.constprop.0+0x90>
 80077c0:	782c      	ldrb	r4, [r5, #0]
 80077c2:	2601      	movs	r6, #1
 80077c4:	1c95      	adds	r5, r2, #2
 80077c6:	f033 0210 	bics.w	r2, r3, #16
 80077ca:	d109      	bne.n	80077e0 <_strtol_l.constprop.0+0x54>
 80077cc:	2c30      	cmp	r4, #48	@ 0x30
 80077ce:	d12a      	bne.n	8007826 <_strtol_l.constprop.0+0x9a>
 80077d0:	782a      	ldrb	r2, [r5, #0]
 80077d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80077d6:	2a58      	cmp	r2, #88	@ 0x58
 80077d8:	d125      	bne.n	8007826 <_strtol_l.constprop.0+0x9a>
 80077da:	786c      	ldrb	r4, [r5, #1]
 80077dc:	2310      	movs	r3, #16
 80077de:	3502      	adds	r5, #2
 80077e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80077e4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80077e8:	2200      	movs	r2, #0
 80077ea:	fbbc f9f3 	udiv	r9, ip, r3
 80077ee:	4610      	mov	r0, r2
 80077f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80077f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80077f8:	2f09      	cmp	r7, #9
 80077fa:	d81b      	bhi.n	8007834 <_strtol_l.constprop.0+0xa8>
 80077fc:	463c      	mov	r4, r7
 80077fe:	42a3      	cmp	r3, r4
 8007800:	dd27      	ble.n	8007852 <_strtol_l.constprop.0+0xc6>
 8007802:	1c57      	adds	r7, r2, #1
 8007804:	d007      	beq.n	8007816 <_strtol_l.constprop.0+0x8a>
 8007806:	4581      	cmp	r9, r0
 8007808:	d320      	bcc.n	800784c <_strtol_l.constprop.0+0xc0>
 800780a:	d101      	bne.n	8007810 <_strtol_l.constprop.0+0x84>
 800780c:	45a2      	cmp	sl, r4
 800780e:	db1d      	blt.n	800784c <_strtol_l.constprop.0+0xc0>
 8007810:	fb00 4003 	mla	r0, r0, r3, r4
 8007814:	2201      	movs	r2, #1
 8007816:	f815 4b01 	ldrb.w	r4, [r5], #1
 800781a:	e7eb      	b.n	80077f4 <_strtol_l.constprop.0+0x68>
 800781c:	2c2b      	cmp	r4, #43	@ 0x2b
 800781e:	bf04      	itt	eq
 8007820:	782c      	ldrbeq	r4, [r5, #0]
 8007822:	1c95      	addeq	r5, r2, #2
 8007824:	e7cf      	b.n	80077c6 <_strtol_l.constprop.0+0x3a>
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1da      	bne.n	80077e0 <_strtol_l.constprop.0+0x54>
 800782a:	2c30      	cmp	r4, #48	@ 0x30
 800782c:	bf0c      	ite	eq
 800782e:	2308      	moveq	r3, #8
 8007830:	230a      	movne	r3, #10
 8007832:	e7d5      	b.n	80077e0 <_strtol_l.constprop.0+0x54>
 8007834:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007838:	2f19      	cmp	r7, #25
 800783a:	d801      	bhi.n	8007840 <_strtol_l.constprop.0+0xb4>
 800783c:	3c37      	subs	r4, #55	@ 0x37
 800783e:	e7de      	b.n	80077fe <_strtol_l.constprop.0+0x72>
 8007840:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007844:	2f19      	cmp	r7, #25
 8007846:	d804      	bhi.n	8007852 <_strtol_l.constprop.0+0xc6>
 8007848:	3c57      	subs	r4, #87	@ 0x57
 800784a:	e7d8      	b.n	80077fe <_strtol_l.constprop.0+0x72>
 800784c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007850:	e7e1      	b.n	8007816 <_strtol_l.constprop.0+0x8a>
 8007852:	1c53      	adds	r3, r2, #1
 8007854:	d108      	bne.n	8007868 <_strtol_l.constprop.0+0xdc>
 8007856:	2322      	movs	r3, #34	@ 0x22
 8007858:	f8ce 3000 	str.w	r3, [lr]
 800785c:	4660      	mov	r0, ip
 800785e:	f1b8 0f00 	cmp.w	r8, #0
 8007862:	d0a0      	beq.n	80077a6 <_strtol_l.constprop.0+0x1a>
 8007864:	1e69      	subs	r1, r5, #1
 8007866:	e006      	b.n	8007876 <_strtol_l.constprop.0+0xea>
 8007868:	b106      	cbz	r6, 800786c <_strtol_l.constprop.0+0xe0>
 800786a:	4240      	negs	r0, r0
 800786c:	f1b8 0f00 	cmp.w	r8, #0
 8007870:	d099      	beq.n	80077a6 <_strtol_l.constprop.0+0x1a>
 8007872:	2a00      	cmp	r2, #0
 8007874:	d1f6      	bne.n	8007864 <_strtol_l.constprop.0+0xd8>
 8007876:	f8c8 1000 	str.w	r1, [r8]
 800787a:	e794      	b.n	80077a6 <_strtol_l.constprop.0+0x1a>
 800787c:	0800b461 	.word	0x0800b461

08007880 <_strtol_r>:
 8007880:	f7ff bf84 	b.w	800778c <_strtol_l.constprop.0>

08007884 <__cvt>:
 8007884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007888:	ec57 6b10 	vmov	r6, r7, d0
 800788c:	2f00      	cmp	r7, #0
 800788e:	460c      	mov	r4, r1
 8007890:	4619      	mov	r1, r3
 8007892:	463b      	mov	r3, r7
 8007894:	bfbb      	ittet	lt
 8007896:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800789a:	461f      	movlt	r7, r3
 800789c:	2300      	movge	r3, #0
 800789e:	232d      	movlt	r3, #45	@ 0x2d
 80078a0:	700b      	strb	r3, [r1, #0]
 80078a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80078a8:	4691      	mov	r9, r2
 80078aa:	f023 0820 	bic.w	r8, r3, #32
 80078ae:	bfbc      	itt	lt
 80078b0:	4632      	movlt	r2, r6
 80078b2:	4616      	movlt	r6, r2
 80078b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80078b8:	d005      	beq.n	80078c6 <__cvt+0x42>
 80078ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80078be:	d100      	bne.n	80078c2 <__cvt+0x3e>
 80078c0:	3401      	adds	r4, #1
 80078c2:	2102      	movs	r1, #2
 80078c4:	e000      	b.n	80078c8 <__cvt+0x44>
 80078c6:	2103      	movs	r1, #3
 80078c8:	ab03      	add	r3, sp, #12
 80078ca:	9301      	str	r3, [sp, #4]
 80078cc:	ab02      	add	r3, sp, #8
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	ec47 6b10 	vmov	d0, r6, r7
 80078d4:	4653      	mov	r3, sl
 80078d6:	4622      	mov	r2, r4
 80078d8:	f001 f93a 	bl	8008b50 <_dtoa_r>
 80078dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80078e0:	4605      	mov	r5, r0
 80078e2:	d119      	bne.n	8007918 <__cvt+0x94>
 80078e4:	f019 0f01 	tst.w	r9, #1
 80078e8:	d00e      	beq.n	8007908 <__cvt+0x84>
 80078ea:	eb00 0904 	add.w	r9, r0, r4
 80078ee:	2200      	movs	r2, #0
 80078f0:	2300      	movs	r3, #0
 80078f2:	4630      	mov	r0, r6
 80078f4:	4639      	mov	r1, r7
 80078f6:	f7f9 f8f7 	bl	8000ae8 <__aeabi_dcmpeq>
 80078fa:	b108      	cbz	r0, 8007900 <__cvt+0x7c>
 80078fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007900:	2230      	movs	r2, #48	@ 0x30
 8007902:	9b03      	ldr	r3, [sp, #12]
 8007904:	454b      	cmp	r3, r9
 8007906:	d31e      	bcc.n	8007946 <__cvt+0xc2>
 8007908:	9b03      	ldr	r3, [sp, #12]
 800790a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800790c:	1b5b      	subs	r3, r3, r5
 800790e:	4628      	mov	r0, r5
 8007910:	6013      	str	r3, [r2, #0]
 8007912:	b004      	add	sp, #16
 8007914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007918:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800791c:	eb00 0904 	add.w	r9, r0, r4
 8007920:	d1e5      	bne.n	80078ee <__cvt+0x6a>
 8007922:	7803      	ldrb	r3, [r0, #0]
 8007924:	2b30      	cmp	r3, #48	@ 0x30
 8007926:	d10a      	bne.n	800793e <__cvt+0xba>
 8007928:	2200      	movs	r2, #0
 800792a:	2300      	movs	r3, #0
 800792c:	4630      	mov	r0, r6
 800792e:	4639      	mov	r1, r7
 8007930:	f7f9 f8da 	bl	8000ae8 <__aeabi_dcmpeq>
 8007934:	b918      	cbnz	r0, 800793e <__cvt+0xba>
 8007936:	f1c4 0401 	rsb	r4, r4, #1
 800793a:	f8ca 4000 	str.w	r4, [sl]
 800793e:	f8da 3000 	ldr.w	r3, [sl]
 8007942:	4499      	add	r9, r3
 8007944:	e7d3      	b.n	80078ee <__cvt+0x6a>
 8007946:	1c59      	adds	r1, r3, #1
 8007948:	9103      	str	r1, [sp, #12]
 800794a:	701a      	strb	r2, [r3, #0]
 800794c:	e7d9      	b.n	8007902 <__cvt+0x7e>

0800794e <__exponent>:
 800794e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007950:	2900      	cmp	r1, #0
 8007952:	bfba      	itte	lt
 8007954:	4249      	neglt	r1, r1
 8007956:	232d      	movlt	r3, #45	@ 0x2d
 8007958:	232b      	movge	r3, #43	@ 0x2b
 800795a:	2909      	cmp	r1, #9
 800795c:	7002      	strb	r2, [r0, #0]
 800795e:	7043      	strb	r3, [r0, #1]
 8007960:	dd29      	ble.n	80079b6 <__exponent+0x68>
 8007962:	f10d 0307 	add.w	r3, sp, #7
 8007966:	461d      	mov	r5, r3
 8007968:	270a      	movs	r7, #10
 800796a:	461a      	mov	r2, r3
 800796c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007970:	fb07 1416 	mls	r4, r7, r6, r1
 8007974:	3430      	adds	r4, #48	@ 0x30
 8007976:	f802 4c01 	strb.w	r4, [r2, #-1]
 800797a:	460c      	mov	r4, r1
 800797c:	2c63      	cmp	r4, #99	@ 0x63
 800797e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007982:	4631      	mov	r1, r6
 8007984:	dcf1      	bgt.n	800796a <__exponent+0x1c>
 8007986:	3130      	adds	r1, #48	@ 0x30
 8007988:	1e94      	subs	r4, r2, #2
 800798a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800798e:	1c41      	adds	r1, r0, #1
 8007990:	4623      	mov	r3, r4
 8007992:	42ab      	cmp	r3, r5
 8007994:	d30a      	bcc.n	80079ac <__exponent+0x5e>
 8007996:	f10d 0309 	add.w	r3, sp, #9
 800799a:	1a9b      	subs	r3, r3, r2
 800799c:	42ac      	cmp	r4, r5
 800799e:	bf88      	it	hi
 80079a0:	2300      	movhi	r3, #0
 80079a2:	3302      	adds	r3, #2
 80079a4:	4403      	add	r3, r0
 80079a6:	1a18      	subs	r0, r3, r0
 80079a8:	b003      	add	sp, #12
 80079aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 80079b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80079b4:	e7ed      	b.n	8007992 <__exponent+0x44>
 80079b6:	2330      	movs	r3, #48	@ 0x30
 80079b8:	3130      	adds	r1, #48	@ 0x30
 80079ba:	7083      	strb	r3, [r0, #2]
 80079bc:	70c1      	strb	r1, [r0, #3]
 80079be:	1d03      	adds	r3, r0, #4
 80079c0:	e7f1      	b.n	80079a6 <__exponent+0x58>
	...

080079c4 <_printf_float>:
 80079c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c8:	b08d      	sub	sp, #52	@ 0x34
 80079ca:	460c      	mov	r4, r1
 80079cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80079d0:	4616      	mov	r6, r2
 80079d2:	461f      	mov	r7, r3
 80079d4:	4605      	mov	r5, r0
 80079d6:	f000 ff29 	bl	800882c <_localeconv_r>
 80079da:	6803      	ldr	r3, [r0, #0]
 80079dc:	9304      	str	r3, [sp, #16]
 80079de:	4618      	mov	r0, r3
 80079e0:	f7f8 fc56 	bl	8000290 <strlen>
 80079e4:	2300      	movs	r3, #0
 80079e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80079e8:	f8d8 3000 	ldr.w	r3, [r8]
 80079ec:	9005      	str	r0, [sp, #20]
 80079ee:	3307      	adds	r3, #7
 80079f0:	f023 0307 	bic.w	r3, r3, #7
 80079f4:	f103 0208 	add.w	r2, r3, #8
 80079f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80079fc:	f8d4 b000 	ldr.w	fp, [r4]
 8007a00:	f8c8 2000 	str.w	r2, [r8]
 8007a04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007a0c:	9307      	str	r3, [sp, #28]
 8007a0e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a12:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007a16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a1a:	4b9c      	ldr	r3, [pc, #624]	@ (8007c8c <_printf_float+0x2c8>)
 8007a1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a20:	f7f9 f894 	bl	8000b4c <__aeabi_dcmpun>
 8007a24:	bb70      	cbnz	r0, 8007a84 <_printf_float+0xc0>
 8007a26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a2a:	4b98      	ldr	r3, [pc, #608]	@ (8007c8c <_printf_float+0x2c8>)
 8007a2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a30:	f7f9 f86e 	bl	8000b10 <__aeabi_dcmple>
 8007a34:	bb30      	cbnz	r0, 8007a84 <_printf_float+0xc0>
 8007a36:	2200      	movs	r2, #0
 8007a38:	2300      	movs	r3, #0
 8007a3a:	4640      	mov	r0, r8
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	f7f9 f85d 	bl	8000afc <__aeabi_dcmplt>
 8007a42:	b110      	cbz	r0, 8007a4a <_printf_float+0x86>
 8007a44:	232d      	movs	r3, #45	@ 0x2d
 8007a46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a4a:	4a91      	ldr	r2, [pc, #580]	@ (8007c90 <_printf_float+0x2cc>)
 8007a4c:	4b91      	ldr	r3, [pc, #580]	@ (8007c94 <_printf_float+0x2d0>)
 8007a4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007a52:	bf94      	ite	ls
 8007a54:	4690      	movls	r8, r2
 8007a56:	4698      	movhi	r8, r3
 8007a58:	2303      	movs	r3, #3
 8007a5a:	6123      	str	r3, [r4, #16]
 8007a5c:	f02b 0304 	bic.w	r3, fp, #4
 8007a60:	6023      	str	r3, [r4, #0]
 8007a62:	f04f 0900 	mov.w	r9, #0
 8007a66:	9700      	str	r7, [sp, #0]
 8007a68:	4633      	mov	r3, r6
 8007a6a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	4628      	mov	r0, r5
 8007a70:	f000 f9d2 	bl	8007e18 <_printf_common>
 8007a74:	3001      	adds	r0, #1
 8007a76:	f040 808d 	bne.w	8007b94 <_printf_float+0x1d0>
 8007a7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a7e:	b00d      	add	sp, #52	@ 0x34
 8007a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a84:	4642      	mov	r2, r8
 8007a86:	464b      	mov	r3, r9
 8007a88:	4640      	mov	r0, r8
 8007a8a:	4649      	mov	r1, r9
 8007a8c:	f7f9 f85e 	bl	8000b4c <__aeabi_dcmpun>
 8007a90:	b140      	cbz	r0, 8007aa4 <_printf_float+0xe0>
 8007a92:	464b      	mov	r3, r9
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	bfbc      	itt	lt
 8007a98:	232d      	movlt	r3, #45	@ 0x2d
 8007a9a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007a9e:	4a7e      	ldr	r2, [pc, #504]	@ (8007c98 <_printf_float+0x2d4>)
 8007aa0:	4b7e      	ldr	r3, [pc, #504]	@ (8007c9c <_printf_float+0x2d8>)
 8007aa2:	e7d4      	b.n	8007a4e <_printf_float+0x8a>
 8007aa4:	6863      	ldr	r3, [r4, #4]
 8007aa6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007aaa:	9206      	str	r2, [sp, #24]
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	d13b      	bne.n	8007b28 <_printf_float+0x164>
 8007ab0:	2306      	movs	r3, #6
 8007ab2:	6063      	str	r3, [r4, #4]
 8007ab4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007ab8:	2300      	movs	r3, #0
 8007aba:	6022      	str	r2, [r4, #0]
 8007abc:	9303      	str	r3, [sp, #12]
 8007abe:	ab0a      	add	r3, sp, #40	@ 0x28
 8007ac0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007ac4:	ab09      	add	r3, sp, #36	@ 0x24
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	6861      	ldr	r1, [r4, #4]
 8007aca:	ec49 8b10 	vmov	d0, r8, r9
 8007ace:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f7ff fed6 	bl	8007884 <__cvt>
 8007ad8:	9b06      	ldr	r3, [sp, #24]
 8007ada:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007adc:	2b47      	cmp	r3, #71	@ 0x47
 8007ade:	4680      	mov	r8, r0
 8007ae0:	d129      	bne.n	8007b36 <_printf_float+0x172>
 8007ae2:	1cc8      	adds	r0, r1, #3
 8007ae4:	db02      	blt.n	8007aec <_printf_float+0x128>
 8007ae6:	6863      	ldr	r3, [r4, #4]
 8007ae8:	4299      	cmp	r1, r3
 8007aea:	dd41      	ble.n	8007b70 <_printf_float+0x1ac>
 8007aec:	f1aa 0a02 	sub.w	sl, sl, #2
 8007af0:	fa5f fa8a 	uxtb.w	sl, sl
 8007af4:	3901      	subs	r1, #1
 8007af6:	4652      	mov	r2, sl
 8007af8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007afc:	9109      	str	r1, [sp, #36]	@ 0x24
 8007afe:	f7ff ff26 	bl	800794e <__exponent>
 8007b02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b04:	1813      	adds	r3, r2, r0
 8007b06:	2a01      	cmp	r2, #1
 8007b08:	4681      	mov	r9, r0
 8007b0a:	6123      	str	r3, [r4, #16]
 8007b0c:	dc02      	bgt.n	8007b14 <_printf_float+0x150>
 8007b0e:	6822      	ldr	r2, [r4, #0]
 8007b10:	07d2      	lsls	r2, r2, #31
 8007b12:	d501      	bpl.n	8007b18 <_printf_float+0x154>
 8007b14:	3301      	adds	r3, #1
 8007b16:	6123      	str	r3, [r4, #16]
 8007b18:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0a2      	beq.n	8007a66 <_printf_float+0xa2>
 8007b20:	232d      	movs	r3, #45	@ 0x2d
 8007b22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b26:	e79e      	b.n	8007a66 <_printf_float+0xa2>
 8007b28:	9a06      	ldr	r2, [sp, #24]
 8007b2a:	2a47      	cmp	r2, #71	@ 0x47
 8007b2c:	d1c2      	bne.n	8007ab4 <_printf_float+0xf0>
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1c0      	bne.n	8007ab4 <_printf_float+0xf0>
 8007b32:	2301      	movs	r3, #1
 8007b34:	e7bd      	b.n	8007ab2 <_printf_float+0xee>
 8007b36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b3a:	d9db      	bls.n	8007af4 <_printf_float+0x130>
 8007b3c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007b40:	d118      	bne.n	8007b74 <_printf_float+0x1b0>
 8007b42:	2900      	cmp	r1, #0
 8007b44:	6863      	ldr	r3, [r4, #4]
 8007b46:	dd0b      	ble.n	8007b60 <_printf_float+0x19c>
 8007b48:	6121      	str	r1, [r4, #16]
 8007b4a:	b913      	cbnz	r3, 8007b52 <_printf_float+0x18e>
 8007b4c:	6822      	ldr	r2, [r4, #0]
 8007b4e:	07d0      	lsls	r0, r2, #31
 8007b50:	d502      	bpl.n	8007b58 <_printf_float+0x194>
 8007b52:	3301      	adds	r3, #1
 8007b54:	440b      	add	r3, r1
 8007b56:	6123      	str	r3, [r4, #16]
 8007b58:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007b5a:	f04f 0900 	mov.w	r9, #0
 8007b5e:	e7db      	b.n	8007b18 <_printf_float+0x154>
 8007b60:	b913      	cbnz	r3, 8007b68 <_printf_float+0x1a4>
 8007b62:	6822      	ldr	r2, [r4, #0]
 8007b64:	07d2      	lsls	r2, r2, #31
 8007b66:	d501      	bpl.n	8007b6c <_printf_float+0x1a8>
 8007b68:	3302      	adds	r3, #2
 8007b6a:	e7f4      	b.n	8007b56 <_printf_float+0x192>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e7f2      	b.n	8007b56 <_printf_float+0x192>
 8007b70:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007b74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b76:	4299      	cmp	r1, r3
 8007b78:	db05      	blt.n	8007b86 <_printf_float+0x1c2>
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	6121      	str	r1, [r4, #16]
 8007b7e:	07d8      	lsls	r0, r3, #31
 8007b80:	d5ea      	bpl.n	8007b58 <_printf_float+0x194>
 8007b82:	1c4b      	adds	r3, r1, #1
 8007b84:	e7e7      	b.n	8007b56 <_printf_float+0x192>
 8007b86:	2900      	cmp	r1, #0
 8007b88:	bfd4      	ite	le
 8007b8a:	f1c1 0202 	rsble	r2, r1, #2
 8007b8e:	2201      	movgt	r2, #1
 8007b90:	4413      	add	r3, r2
 8007b92:	e7e0      	b.n	8007b56 <_printf_float+0x192>
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	055a      	lsls	r2, r3, #21
 8007b98:	d407      	bmi.n	8007baa <_printf_float+0x1e6>
 8007b9a:	6923      	ldr	r3, [r4, #16]
 8007b9c:	4642      	mov	r2, r8
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	47b8      	blx	r7
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	d12b      	bne.n	8007c00 <_printf_float+0x23c>
 8007ba8:	e767      	b.n	8007a7a <_printf_float+0xb6>
 8007baa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007bae:	f240 80dd 	bls.w	8007d6c <_printf_float+0x3a8>
 8007bb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f7f8 ff95 	bl	8000ae8 <__aeabi_dcmpeq>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d033      	beq.n	8007c2a <_printf_float+0x266>
 8007bc2:	4a37      	ldr	r2, [pc, #220]	@ (8007ca0 <_printf_float+0x2dc>)
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	4631      	mov	r1, r6
 8007bc8:	4628      	mov	r0, r5
 8007bca:	47b8      	blx	r7
 8007bcc:	3001      	adds	r0, #1
 8007bce:	f43f af54 	beq.w	8007a7a <_printf_float+0xb6>
 8007bd2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007bd6:	4543      	cmp	r3, r8
 8007bd8:	db02      	blt.n	8007be0 <_printf_float+0x21c>
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	07d8      	lsls	r0, r3, #31
 8007bde:	d50f      	bpl.n	8007c00 <_printf_float+0x23c>
 8007be0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007be4:	4631      	mov	r1, r6
 8007be6:	4628      	mov	r0, r5
 8007be8:	47b8      	blx	r7
 8007bea:	3001      	adds	r0, #1
 8007bec:	f43f af45 	beq.w	8007a7a <_printf_float+0xb6>
 8007bf0:	f04f 0900 	mov.w	r9, #0
 8007bf4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007bf8:	f104 0a1a 	add.w	sl, r4, #26
 8007bfc:	45c8      	cmp	r8, r9
 8007bfe:	dc09      	bgt.n	8007c14 <_printf_float+0x250>
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	079b      	lsls	r3, r3, #30
 8007c04:	f100 8103 	bmi.w	8007e0e <_printf_float+0x44a>
 8007c08:	68e0      	ldr	r0, [r4, #12]
 8007c0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c0c:	4298      	cmp	r0, r3
 8007c0e:	bfb8      	it	lt
 8007c10:	4618      	movlt	r0, r3
 8007c12:	e734      	b.n	8007a7e <_printf_float+0xba>
 8007c14:	2301      	movs	r3, #1
 8007c16:	4652      	mov	r2, sl
 8007c18:	4631      	mov	r1, r6
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	47b8      	blx	r7
 8007c1e:	3001      	adds	r0, #1
 8007c20:	f43f af2b 	beq.w	8007a7a <_printf_float+0xb6>
 8007c24:	f109 0901 	add.w	r9, r9, #1
 8007c28:	e7e8      	b.n	8007bfc <_printf_float+0x238>
 8007c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	dc39      	bgt.n	8007ca4 <_printf_float+0x2e0>
 8007c30:	4a1b      	ldr	r2, [pc, #108]	@ (8007ca0 <_printf_float+0x2dc>)
 8007c32:	2301      	movs	r3, #1
 8007c34:	4631      	mov	r1, r6
 8007c36:	4628      	mov	r0, r5
 8007c38:	47b8      	blx	r7
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	f43f af1d 	beq.w	8007a7a <_printf_float+0xb6>
 8007c40:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007c44:	ea59 0303 	orrs.w	r3, r9, r3
 8007c48:	d102      	bne.n	8007c50 <_printf_float+0x28c>
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	07d9      	lsls	r1, r3, #31
 8007c4e:	d5d7      	bpl.n	8007c00 <_printf_float+0x23c>
 8007c50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c54:	4631      	mov	r1, r6
 8007c56:	4628      	mov	r0, r5
 8007c58:	47b8      	blx	r7
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	f43f af0d 	beq.w	8007a7a <_printf_float+0xb6>
 8007c60:	f04f 0a00 	mov.w	sl, #0
 8007c64:	f104 0b1a 	add.w	fp, r4, #26
 8007c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c6a:	425b      	negs	r3, r3
 8007c6c:	4553      	cmp	r3, sl
 8007c6e:	dc01      	bgt.n	8007c74 <_printf_float+0x2b0>
 8007c70:	464b      	mov	r3, r9
 8007c72:	e793      	b.n	8007b9c <_printf_float+0x1d8>
 8007c74:	2301      	movs	r3, #1
 8007c76:	465a      	mov	r2, fp
 8007c78:	4631      	mov	r1, r6
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	47b8      	blx	r7
 8007c7e:	3001      	adds	r0, #1
 8007c80:	f43f aefb 	beq.w	8007a7a <_printf_float+0xb6>
 8007c84:	f10a 0a01 	add.w	sl, sl, #1
 8007c88:	e7ee      	b.n	8007c68 <_printf_float+0x2a4>
 8007c8a:	bf00      	nop
 8007c8c:	7fefffff 	.word	0x7fefffff
 8007c90:	0800b561 	.word	0x0800b561
 8007c94:	0800b565 	.word	0x0800b565
 8007c98:	0800b569 	.word	0x0800b569
 8007c9c:	0800b56d 	.word	0x0800b56d
 8007ca0:	0800b571 	.word	0x0800b571
 8007ca4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ca6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007caa:	4553      	cmp	r3, sl
 8007cac:	bfa8      	it	ge
 8007cae:	4653      	movge	r3, sl
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	4699      	mov	r9, r3
 8007cb4:	dc36      	bgt.n	8007d24 <_printf_float+0x360>
 8007cb6:	f04f 0b00 	mov.w	fp, #0
 8007cba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cbe:	f104 021a 	add.w	r2, r4, #26
 8007cc2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007cc4:	9306      	str	r3, [sp, #24]
 8007cc6:	eba3 0309 	sub.w	r3, r3, r9
 8007cca:	455b      	cmp	r3, fp
 8007ccc:	dc31      	bgt.n	8007d32 <_printf_float+0x36e>
 8007cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cd0:	459a      	cmp	sl, r3
 8007cd2:	dc3a      	bgt.n	8007d4a <_printf_float+0x386>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	07da      	lsls	r2, r3, #31
 8007cd8:	d437      	bmi.n	8007d4a <_printf_float+0x386>
 8007cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cdc:	ebaa 0903 	sub.w	r9, sl, r3
 8007ce0:	9b06      	ldr	r3, [sp, #24]
 8007ce2:	ebaa 0303 	sub.w	r3, sl, r3
 8007ce6:	4599      	cmp	r9, r3
 8007ce8:	bfa8      	it	ge
 8007cea:	4699      	movge	r9, r3
 8007cec:	f1b9 0f00 	cmp.w	r9, #0
 8007cf0:	dc33      	bgt.n	8007d5a <_printf_float+0x396>
 8007cf2:	f04f 0800 	mov.w	r8, #0
 8007cf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cfa:	f104 0b1a 	add.w	fp, r4, #26
 8007cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d00:	ebaa 0303 	sub.w	r3, sl, r3
 8007d04:	eba3 0309 	sub.w	r3, r3, r9
 8007d08:	4543      	cmp	r3, r8
 8007d0a:	f77f af79 	ble.w	8007c00 <_printf_float+0x23c>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	465a      	mov	r2, fp
 8007d12:	4631      	mov	r1, r6
 8007d14:	4628      	mov	r0, r5
 8007d16:	47b8      	blx	r7
 8007d18:	3001      	adds	r0, #1
 8007d1a:	f43f aeae 	beq.w	8007a7a <_printf_float+0xb6>
 8007d1e:	f108 0801 	add.w	r8, r8, #1
 8007d22:	e7ec      	b.n	8007cfe <_printf_float+0x33a>
 8007d24:	4642      	mov	r2, r8
 8007d26:	4631      	mov	r1, r6
 8007d28:	4628      	mov	r0, r5
 8007d2a:	47b8      	blx	r7
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	d1c2      	bne.n	8007cb6 <_printf_float+0x2f2>
 8007d30:	e6a3      	b.n	8007a7a <_printf_float+0xb6>
 8007d32:	2301      	movs	r3, #1
 8007d34:	4631      	mov	r1, r6
 8007d36:	4628      	mov	r0, r5
 8007d38:	9206      	str	r2, [sp, #24]
 8007d3a:	47b8      	blx	r7
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	f43f ae9c 	beq.w	8007a7a <_printf_float+0xb6>
 8007d42:	9a06      	ldr	r2, [sp, #24]
 8007d44:	f10b 0b01 	add.w	fp, fp, #1
 8007d48:	e7bb      	b.n	8007cc2 <_printf_float+0x2fe>
 8007d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d4e:	4631      	mov	r1, r6
 8007d50:	4628      	mov	r0, r5
 8007d52:	47b8      	blx	r7
 8007d54:	3001      	adds	r0, #1
 8007d56:	d1c0      	bne.n	8007cda <_printf_float+0x316>
 8007d58:	e68f      	b.n	8007a7a <_printf_float+0xb6>
 8007d5a:	9a06      	ldr	r2, [sp, #24]
 8007d5c:	464b      	mov	r3, r9
 8007d5e:	4442      	add	r2, r8
 8007d60:	4631      	mov	r1, r6
 8007d62:	4628      	mov	r0, r5
 8007d64:	47b8      	blx	r7
 8007d66:	3001      	adds	r0, #1
 8007d68:	d1c3      	bne.n	8007cf2 <_printf_float+0x32e>
 8007d6a:	e686      	b.n	8007a7a <_printf_float+0xb6>
 8007d6c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d70:	f1ba 0f01 	cmp.w	sl, #1
 8007d74:	dc01      	bgt.n	8007d7a <_printf_float+0x3b6>
 8007d76:	07db      	lsls	r3, r3, #31
 8007d78:	d536      	bpl.n	8007de8 <_printf_float+0x424>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	4642      	mov	r2, r8
 8007d7e:	4631      	mov	r1, r6
 8007d80:	4628      	mov	r0, r5
 8007d82:	47b8      	blx	r7
 8007d84:	3001      	adds	r0, #1
 8007d86:	f43f ae78 	beq.w	8007a7a <_printf_float+0xb6>
 8007d8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d8e:	4631      	mov	r1, r6
 8007d90:	4628      	mov	r0, r5
 8007d92:	47b8      	blx	r7
 8007d94:	3001      	adds	r0, #1
 8007d96:	f43f ae70 	beq.w	8007a7a <_printf_float+0xb6>
 8007d9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d9e:	2200      	movs	r2, #0
 8007da0:	2300      	movs	r3, #0
 8007da2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007da6:	f7f8 fe9f 	bl	8000ae8 <__aeabi_dcmpeq>
 8007daa:	b9c0      	cbnz	r0, 8007dde <_printf_float+0x41a>
 8007dac:	4653      	mov	r3, sl
 8007dae:	f108 0201 	add.w	r2, r8, #1
 8007db2:	4631      	mov	r1, r6
 8007db4:	4628      	mov	r0, r5
 8007db6:	47b8      	blx	r7
 8007db8:	3001      	adds	r0, #1
 8007dba:	d10c      	bne.n	8007dd6 <_printf_float+0x412>
 8007dbc:	e65d      	b.n	8007a7a <_printf_float+0xb6>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	465a      	mov	r2, fp
 8007dc2:	4631      	mov	r1, r6
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	47b8      	blx	r7
 8007dc8:	3001      	adds	r0, #1
 8007dca:	f43f ae56 	beq.w	8007a7a <_printf_float+0xb6>
 8007dce:	f108 0801 	add.w	r8, r8, #1
 8007dd2:	45d0      	cmp	r8, sl
 8007dd4:	dbf3      	blt.n	8007dbe <_printf_float+0x3fa>
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007ddc:	e6df      	b.n	8007b9e <_printf_float+0x1da>
 8007dde:	f04f 0800 	mov.w	r8, #0
 8007de2:	f104 0b1a 	add.w	fp, r4, #26
 8007de6:	e7f4      	b.n	8007dd2 <_printf_float+0x40e>
 8007de8:	2301      	movs	r3, #1
 8007dea:	4642      	mov	r2, r8
 8007dec:	e7e1      	b.n	8007db2 <_printf_float+0x3ee>
 8007dee:	2301      	movs	r3, #1
 8007df0:	464a      	mov	r2, r9
 8007df2:	4631      	mov	r1, r6
 8007df4:	4628      	mov	r0, r5
 8007df6:	47b8      	blx	r7
 8007df8:	3001      	adds	r0, #1
 8007dfa:	f43f ae3e 	beq.w	8007a7a <_printf_float+0xb6>
 8007dfe:	f108 0801 	add.w	r8, r8, #1
 8007e02:	68e3      	ldr	r3, [r4, #12]
 8007e04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e06:	1a5b      	subs	r3, r3, r1
 8007e08:	4543      	cmp	r3, r8
 8007e0a:	dcf0      	bgt.n	8007dee <_printf_float+0x42a>
 8007e0c:	e6fc      	b.n	8007c08 <_printf_float+0x244>
 8007e0e:	f04f 0800 	mov.w	r8, #0
 8007e12:	f104 0919 	add.w	r9, r4, #25
 8007e16:	e7f4      	b.n	8007e02 <_printf_float+0x43e>

08007e18 <_printf_common>:
 8007e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e1c:	4616      	mov	r6, r2
 8007e1e:	4698      	mov	r8, r3
 8007e20:	688a      	ldr	r2, [r1, #8]
 8007e22:	690b      	ldr	r3, [r1, #16]
 8007e24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	bfb8      	it	lt
 8007e2c:	4613      	movlt	r3, r2
 8007e2e:	6033      	str	r3, [r6, #0]
 8007e30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e34:	4607      	mov	r7, r0
 8007e36:	460c      	mov	r4, r1
 8007e38:	b10a      	cbz	r2, 8007e3e <_printf_common+0x26>
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	6033      	str	r3, [r6, #0]
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	0699      	lsls	r1, r3, #26
 8007e42:	bf42      	ittt	mi
 8007e44:	6833      	ldrmi	r3, [r6, #0]
 8007e46:	3302      	addmi	r3, #2
 8007e48:	6033      	strmi	r3, [r6, #0]
 8007e4a:	6825      	ldr	r5, [r4, #0]
 8007e4c:	f015 0506 	ands.w	r5, r5, #6
 8007e50:	d106      	bne.n	8007e60 <_printf_common+0x48>
 8007e52:	f104 0a19 	add.w	sl, r4, #25
 8007e56:	68e3      	ldr	r3, [r4, #12]
 8007e58:	6832      	ldr	r2, [r6, #0]
 8007e5a:	1a9b      	subs	r3, r3, r2
 8007e5c:	42ab      	cmp	r3, r5
 8007e5e:	dc26      	bgt.n	8007eae <_printf_common+0x96>
 8007e60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e64:	6822      	ldr	r2, [r4, #0]
 8007e66:	3b00      	subs	r3, #0
 8007e68:	bf18      	it	ne
 8007e6a:	2301      	movne	r3, #1
 8007e6c:	0692      	lsls	r2, r2, #26
 8007e6e:	d42b      	bmi.n	8007ec8 <_printf_common+0xb0>
 8007e70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e74:	4641      	mov	r1, r8
 8007e76:	4638      	mov	r0, r7
 8007e78:	47c8      	blx	r9
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	d01e      	beq.n	8007ebc <_printf_common+0xa4>
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	6922      	ldr	r2, [r4, #16]
 8007e82:	f003 0306 	and.w	r3, r3, #6
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	bf02      	ittt	eq
 8007e8a:	68e5      	ldreq	r5, [r4, #12]
 8007e8c:	6833      	ldreq	r3, [r6, #0]
 8007e8e:	1aed      	subeq	r5, r5, r3
 8007e90:	68a3      	ldr	r3, [r4, #8]
 8007e92:	bf0c      	ite	eq
 8007e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e98:	2500      	movne	r5, #0
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	bfc4      	itt	gt
 8007e9e:	1a9b      	subgt	r3, r3, r2
 8007ea0:	18ed      	addgt	r5, r5, r3
 8007ea2:	2600      	movs	r6, #0
 8007ea4:	341a      	adds	r4, #26
 8007ea6:	42b5      	cmp	r5, r6
 8007ea8:	d11a      	bne.n	8007ee0 <_printf_common+0xc8>
 8007eaa:	2000      	movs	r0, #0
 8007eac:	e008      	b.n	8007ec0 <_printf_common+0xa8>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	4652      	mov	r2, sl
 8007eb2:	4641      	mov	r1, r8
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	47c8      	blx	r9
 8007eb8:	3001      	adds	r0, #1
 8007eba:	d103      	bne.n	8007ec4 <_printf_common+0xac>
 8007ebc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	e7c6      	b.n	8007e56 <_printf_common+0x3e>
 8007ec8:	18e1      	adds	r1, r4, r3
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	2030      	movs	r0, #48	@ 0x30
 8007ece:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ed2:	4422      	add	r2, r4
 8007ed4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ed8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007edc:	3302      	adds	r3, #2
 8007ede:	e7c7      	b.n	8007e70 <_printf_common+0x58>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	4622      	mov	r2, r4
 8007ee4:	4641      	mov	r1, r8
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	47c8      	blx	r9
 8007eea:	3001      	adds	r0, #1
 8007eec:	d0e6      	beq.n	8007ebc <_printf_common+0xa4>
 8007eee:	3601      	adds	r6, #1
 8007ef0:	e7d9      	b.n	8007ea6 <_printf_common+0x8e>
	...

08007ef4 <_printf_i>:
 8007ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef8:	7e0f      	ldrb	r7, [r1, #24]
 8007efa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007efc:	2f78      	cmp	r7, #120	@ 0x78
 8007efe:	4691      	mov	r9, r2
 8007f00:	4680      	mov	r8, r0
 8007f02:	460c      	mov	r4, r1
 8007f04:	469a      	mov	sl, r3
 8007f06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f0a:	d807      	bhi.n	8007f1c <_printf_i+0x28>
 8007f0c:	2f62      	cmp	r7, #98	@ 0x62
 8007f0e:	d80a      	bhi.n	8007f26 <_printf_i+0x32>
 8007f10:	2f00      	cmp	r7, #0
 8007f12:	f000 80d2 	beq.w	80080ba <_printf_i+0x1c6>
 8007f16:	2f58      	cmp	r7, #88	@ 0x58
 8007f18:	f000 80b9 	beq.w	800808e <_printf_i+0x19a>
 8007f1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f24:	e03a      	b.n	8007f9c <_printf_i+0xa8>
 8007f26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f2a:	2b15      	cmp	r3, #21
 8007f2c:	d8f6      	bhi.n	8007f1c <_printf_i+0x28>
 8007f2e:	a101      	add	r1, pc, #4	@ (adr r1, 8007f34 <_printf_i+0x40>)
 8007f30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f34:	08007f8d 	.word	0x08007f8d
 8007f38:	08007fa1 	.word	0x08007fa1
 8007f3c:	08007f1d 	.word	0x08007f1d
 8007f40:	08007f1d 	.word	0x08007f1d
 8007f44:	08007f1d 	.word	0x08007f1d
 8007f48:	08007f1d 	.word	0x08007f1d
 8007f4c:	08007fa1 	.word	0x08007fa1
 8007f50:	08007f1d 	.word	0x08007f1d
 8007f54:	08007f1d 	.word	0x08007f1d
 8007f58:	08007f1d 	.word	0x08007f1d
 8007f5c:	08007f1d 	.word	0x08007f1d
 8007f60:	080080a1 	.word	0x080080a1
 8007f64:	08007fcb 	.word	0x08007fcb
 8007f68:	0800805b 	.word	0x0800805b
 8007f6c:	08007f1d 	.word	0x08007f1d
 8007f70:	08007f1d 	.word	0x08007f1d
 8007f74:	080080c3 	.word	0x080080c3
 8007f78:	08007f1d 	.word	0x08007f1d
 8007f7c:	08007fcb 	.word	0x08007fcb
 8007f80:	08007f1d 	.word	0x08007f1d
 8007f84:	08007f1d 	.word	0x08007f1d
 8007f88:	08008063 	.word	0x08008063
 8007f8c:	6833      	ldr	r3, [r6, #0]
 8007f8e:	1d1a      	adds	r2, r3, #4
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	6032      	str	r2, [r6, #0]
 8007f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e09d      	b.n	80080dc <_printf_i+0x1e8>
 8007fa0:	6833      	ldr	r3, [r6, #0]
 8007fa2:	6820      	ldr	r0, [r4, #0]
 8007fa4:	1d19      	adds	r1, r3, #4
 8007fa6:	6031      	str	r1, [r6, #0]
 8007fa8:	0606      	lsls	r6, r0, #24
 8007faa:	d501      	bpl.n	8007fb0 <_printf_i+0xbc>
 8007fac:	681d      	ldr	r5, [r3, #0]
 8007fae:	e003      	b.n	8007fb8 <_printf_i+0xc4>
 8007fb0:	0645      	lsls	r5, r0, #25
 8007fb2:	d5fb      	bpl.n	8007fac <_printf_i+0xb8>
 8007fb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007fb8:	2d00      	cmp	r5, #0
 8007fba:	da03      	bge.n	8007fc4 <_printf_i+0xd0>
 8007fbc:	232d      	movs	r3, #45	@ 0x2d
 8007fbe:	426d      	negs	r5, r5
 8007fc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fc4:	4859      	ldr	r0, [pc, #356]	@ (800812c <_printf_i+0x238>)
 8007fc6:	230a      	movs	r3, #10
 8007fc8:	e011      	b.n	8007fee <_printf_i+0xfa>
 8007fca:	6821      	ldr	r1, [r4, #0]
 8007fcc:	6833      	ldr	r3, [r6, #0]
 8007fce:	0608      	lsls	r0, r1, #24
 8007fd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007fd4:	d402      	bmi.n	8007fdc <_printf_i+0xe8>
 8007fd6:	0649      	lsls	r1, r1, #25
 8007fd8:	bf48      	it	mi
 8007fda:	b2ad      	uxthmi	r5, r5
 8007fdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8007fde:	4853      	ldr	r0, [pc, #332]	@ (800812c <_printf_i+0x238>)
 8007fe0:	6033      	str	r3, [r6, #0]
 8007fe2:	bf14      	ite	ne
 8007fe4:	230a      	movne	r3, #10
 8007fe6:	2308      	moveq	r3, #8
 8007fe8:	2100      	movs	r1, #0
 8007fea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fee:	6866      	ldr	r6, [r4, #4]
 8007ff0:	60a6      	str	r6, [r4, #8]
 8007ff2:	2e00      	cmp	r6, #0
 8007ff4:	bfa2      	ittt	ge
 8007ff6:	6821      	ldrge	r1, [r4, #0]
 8007ff8:	f021 0104 	bicge.w	r1, r1, #4
 8007ffc:	6021      	strge	r1, [r4, #0]
 8007ffe:	b90d      	cbnz	r5, 8008004 <_printf_i+0x110>
 8008000:	2e00      	cmp	r6, #0
 8008002:	d04b      	beq.n	800809c <_printf_i+0x1a8>
 8008004:	4616      	mov	r6, r2
 8008006:	fbb5 f1f3 	udiv	r1, r5, r3
 800800a:	fb03 5711 	mls	r7, r3, r1, r5
 800800e:	5dc7      	ldrb	r7, [r0, r7]
 8008010:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008014:	462f      	mov	r7, r5
 8008016:	42bb      	cmp	r3, r7
 8008018:	460d      	mov	r5, r1
 800801a:	d9f4      	bls.n	8008006 <_printf_i+0x112>
 800801c:	2b08      	cmp	r3, #8
 800801e:	d10b      	bne.n	8008038 <_printf_i+0x144>
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	07df      	lsls	r7, r3, #31
 8008024:	d508      	bpl.n	8008038 <_printf_i+0x144>
 8008026:	6923      	ldr	r3, [r4, #16]
 8008028:	6861      	ldr	r1, [r4, #4]
 800802a:	4299      	cmp	r1, r3
 800802c:	bfde      	ittt	le
 800802e:	2330      	movle	r3, #48	@ 0x30
 8008030:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008034:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008038:	1b92      	subs	r2, r2, r6
 800803a:	6122      	str	r2, [r4, #16]
 800803c:	f8cd a000 	str.w	sl, [sp]
 8008040:	464b      	mov	r3, r9
 8008042:	aa03      	add	r2, sp, #12
 8008044:	4621      	mov	r1, r4
 8008046:	4640      	mov	r0, r8
 8008048:	f7ff fee6 	bl	8007e18 <_printf_common>
 800804c:	3001      	adds	r0, #1
 800804e:	d14a      	bne.n	80080e6 <_printf_i+0x1f2>
 8008050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008054:	b004      	add	sp, #16
 8008056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	f043 0320 	orr.w	r3, r3, #32
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	4833      	ldr	r0, [pc, #204]	@ (8008130 <_printf_i+0x23c>)
 8008064:	2778      	movs	r7, #120	@ 0x78
 8008066:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	6831      	ldr	r1, [r6, #0]
 800806e:	061f      	lsls	r7, r3, #24
 8008070:	f851 5b04 	ldr.w	r5, [r1], #4
 8008074:	d402      	bmi.n	800807c <_printf_i+0x188>
 8008076:	065f      	lsls	r7, r3, #25
 8008078:	bf48      	it	mi
 800807a:	b2ad      	uxthmi	r5, r5
 800807c:	6031      	str	r1, [r6, #0]
 800807e:	07d9      	lsls	r1, r3, #31
 8008080:	bf44      	itt	mi
 8008082:	f043 0320 	orrmi.w	r3, r3, #32
 8008086:	6023      	strmi	r3, [r4, #0]
 8008088:	b11d      	cbz	r5, 8008092 <_printf_i+0x19e>
 800808a:	2310      	movs	r3, #16
 800808c:	e7ac      	b.n	8007fe8 <_printf_i+0xf4>
 800808e:	4827      	ldr	r0, [pc, #156]	@ (800812c <_printf_i+0x238>)
 8008090:	e7e9      	b.n	8008066 <_printf_i+0x172>
 8008092:	6823      	ldr	r3, [r4, #0]
 8008094:	f023 0320 	bic.w	r3, r3, #32
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	e7f6      	b.n	800808a <_printf_i+0x196>
 800809c:	4616      	mov	r6, r2
 800809e:	e7bd      	b.n	800801c <_printf_i+0x128>
 80080a0:	6833      	ldr	r3, [r6, #0]
 80080a2:	6825      	ldr	r5, [r4, #0]
 80080a4:	6961      	ldr	r1, [r4, #20]
 80080a6:	1d18      	adds	r0, r3, #4
 80080a8:	6030      	str	r0, [r6, #0]
 80080aa:	062e      	lsls	r6, r5, #24
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	d501      	bpl.n	80080b4 <_printf_i+0x1c0>
 80080b0:	6019      	str	r1, [r3, #0]
 80080b2:	e002      	b.n	80080ba <_printf_i+0x1c6>
 80080b4:	0668      	lsls	r0, r5, #25
 80080b6:	d5fb      	bpl.n	80080b0 <_printf_i+0x1bc>
 80080b8:	8019      	strh	r1, [r3, #0]
 80080ba:	2300      	movs	r3, #0
 80080bc:	6123      	str	r3, [r4, #16]
 80080be:	4616      	mov	r6, r2
 80080c0:	e7bc      	b.n	800803c <_printf_i+0x148>
 80080c2:	6833      	ldr	r3, [r6, #0]
 80080c4:	1d1a      	adds	r2, r3, #4
 80080c6:	6032      	str	r2, [r6, #0]
 80080c8:	681e      	ldr	r6, [r3, #0]
 80080ca:	6862      	ldr	r2, [r4, #4]
 80080cc:	2100      	movs	r1, #0
 80080ce:	4630      	mov	r0, r6
 80080d0:	f7f8 f88e 	bl	80001f0 <memchr>
 80080d4:	b108      	cbz	r0, 80080da <_printf_i+0x1e6>
 80080d6:	1b80      	subs	r0, r0, r6
 80080d8:	6060      	str	r0, [r4, #4]
 80080da:	6863      	ldr	r3, [r4, #4]
 80080dc:	6123      	str	r3, [r4, #16]
 80080de:	2300      	movs	r3, #0
 80080e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080e4:	e7aa      	b.n	800803c <_printf_i+0x148>
 80080e6:	6923      	ldr	r3, [r4, #16]
 80080e8:	4632      	mov	r2, r6
 80080ea:	4649      	mov	r1, r9
 80080ec:	4640      	mov	r0, r8
 80080ee:	47d0      	blx	sl
 80080f0:	3001      	adds	r0, #1
 80080f2:	d0ad      	beq.n	8008050 <_printf_i+0x15c>
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	079b      	lsls	r3, r3, #30
 80080f8:	d413      	bmi.n	8008122 <_printf_i+0x22e>
 80080fa:	68e0      	ldr	r0, [r4, #12]
 80080fc:	9b03      	ldr	r3, [sp, #12]
 80080fe:	4298      	cmp	r0, r3
 8008100:	bfb8      	it	lt
 8008102:	4618      	movlt	r0, r3
 8008104:	e7a6      	b.n	8008054 <_printf_i+0x160>
 8008106:	2301      	movs	r3, #1
 8008108:	4632      	mov	r2, r6
 800810a:	4649      	mov	r1, r9
 800810c:	4640      	mov	r0, r8
 800810e:	47d0      	blx	sl
 8008110:	3001      	adds	r0, #1
 8008112:	d09d      	beq.n	8008050 <_printf_i+0x15c>
 8008114:	3501      	adds	r5, #1
 8008116:	68e3      	ldr	r3, [r4, #12]
 8008118:	9903      	ldr	r1, [sp, #12]
 800811a:	1a5b      	subs	r3, r3, r1
 800811c:	42ab      	cmp	r3, r5
 800811e:	dcf2      	bgt.n	8008106 <_printf_i+0x212>
 8008120:	e7eb      	b.n	80080fa <_printf_i+0x206>
 8008122:	2500      	movs	r5, #0
 8008124:	f104 0619 	add.w	r6, r4, #25
 8008128:	e7f5      	b.n	8008116 <_printf_i+0x222>
 800812a:	bf00      	nop
 800812c:	0800b573 	.word	0x0800b573
 8008130:	0800b584 	.word	0x0800b584

08008134 <_scanf_float>:
 8008134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008138:	b087      	sub	sp, #28
 800813a:	4617      	mov	r7, r2
 800813c:	9303      	str	r3, [sp, #12]
 800813e:	688b      	ldr	r3, [r1, #8]
 8008140:	1e5a      	subs	r2, r3, #1
 8008142:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008146:	bf81      	itttt	hi
 8008148:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800814c:	eb03 0b05 	addhi.w	fp, r3, r5
 8008150:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008154:	608b      	strhi	r3, [r1, #8]
 8008156:	680b      	ldr	r3, [r1, #0]
 8008158:	460a      	mov	r2, r1
 800815a:	f04f 0500 	mov.w	r5, #0
 800815e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008162:	f842 3b1c 	str.w	r3, [r2], #28
 8008166:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800816a:	4680      	mov	r8, r0
 800816c:	460c      	mov	r4, r1
 800816e:	bf98      	it	ls
 8008170:	f04f 0b00 	movls.w	fp, #0
 8008174:	9201      	str	r2, [sp, #4]
 8008176:	4616      	mov	r6, r2
 8008178:	46aa      	mov	sl, r5
 800817a:	46a9      	mov	r9, r5
 800817c:	9502      	str	r5, [sp, #8]
 800817e:	68a2      	ldr	r2, [r4, #8]
 8008180:	b152      	cbz	r2, 8008198 <_scanf_float+0x64>
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	2b4e      	cmp	r3, #78	@ 0x4e
 8008188:	d864      	bhi.n	8008254 <_scanf_float+0x120>
 800818a:	2b40      	cmp	r3, #64	@ 0x40
 800818c:	d83c      	bhi.n	8008208 <_scanf_float+0xd4>
 800818e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008192:	b2c8      	uxtb	r0, r1
 8008194:	280e      	cmp	r0, #14
 8008196:	d93a      	bls.n	800820e <_scanf_float+0xda>
 8008198:	f1b9 0f00 	cmp.w	r9, #0
 800819c:	d003      	beq.n	80081a6 <_scanf_float+0x72>
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80081aa:	f1ba 0f01 	cmp.w	sl, #1
 80081ae:	f200 8117 	bhi.w	80083e0 <_scanf_float+0x2ac>
 80081b2:	9b01      	ldr	r3, [sp, #4]
 80081b4:	429e      	cmp	r6, r3
 80081b6:	f200 8108 	bhi.w	80083ca <_scanf_float+0x296>
 80081ba:	2001      	movs	r0, #1
 80081bc:	b007      	add	sp, #28
 80081be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80081c6:	2a0d      	cmp	r2, #13
 80081c8:	d8e6      	bhi.n	8008198 <_scanf_float+0x64>
 80081ca:	a101      	add	r1, pc, #4	@ (adr r1, 80081d0 <_scanf_float+0x9c>)
 80081cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80081d0:	08008317 	.word	0x08008317
 80081d4:	08008199 	.word	0x08008199
 80081d8:	08008199 	.word	0x08008199
 80081dc:	08008199 	.word	0x08008199
 80081e0:	08008377 	.word	0x08008377
 80081e4:	0800834f 	.word	0x0800834f
 80081e8:	08008199 	.word	0x08008199
 80081ec:	08008199 	.word	0x08008199
 80081f0:	08008325 	.word	0x08008325
 80081f4:	08008199 	.word	0x08008199
 80081f8:	08008199 	.word	0x08008199
 80081fc:	08008199 	.word	0x08008199
 8008200:	08008199 	.word	0x08008199
 8008204:	080082dd 	.word	0x080082dd
 8008208:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800820c:	e7db      	b.n	80081c6 <_scanf_float+0x92>
 800820e:	290e      	cmp	r1, #14
 8008210:	d8c2      	bhi.n	8008198 <_scanf_float+0x64>
 8008212:	a001      	add	r0, pc, #4	@ (adr r0, 8008218 <_scanf_float+0xe4>)
 8008214:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008218:	080082cd 	.word	0x080082cd
 800821c:	08008199 	.word	0x08008199
 8008220:	080082cd 	.word	0x080082cd
 8008224:	08008363 	.word	0x08008363
 8008228:	08008199 	.word	0x08008199
 800822c:	08008275 	.word	0x08008275
 8008230:	080082b3 	.word	0x080082b3
 8008234:	080082b3 	.word	0x080082b3
 8008238:	080082b3 	.word	0x080082b3
 800823c:	080082b3 	.word	0x080082b3
 8008240:	080082b3 	.word	0x080082b3
 8008244:	080082b3 	.word	0x080082b3
 8008248:	080082b3 	.word	0x080082b3
 800824c:	080082b3 	.word	0x080082b3
 8008250:	080082b3 	.word	0x080082b3
 8008254:	2b6e      	cmp	r3, #110	@ 0x6e
 8008256:	d809      	bhi.n	800826c <_scanf_float+0x138>
 8008258:	2b60      	cmp	r3, #96	@ 0x60
 800825a:	d8b2      	bhi.n	80081c2 <_scanf_float+0x8e>
 800825c:	2b54      	cmp	r3, #84	@ 0x54
 800825e:	d07b      	beq.n	8008358 <_scanf_float+0x224>
 8008260:	2b59      	cmp	r3, #89	@ 0x59
 8008262:	d199      	bne.n	8008198 <_scanf_float+0x64>
 8008264:	2d07      	cmp	r5, #7
 8008266:	d197      	bne.n	8008198 <_scanf_float+0x64>
 8008268:	2508      	movs	r5, #8
 800826a:	e02c      	b.n	80082c6 <_scanf_float+0x192>
 800826c:	2b74      	cmp	r3, #116	@ 0x74
 800826e:	d073      	beq.n	8008358 <_scanf_float+0x224>
 8008270:	2b79      	cmp	r3, #121	@ 0x79
 8008272:	e7f6      	b.n	8008262 <_scanf_float+0x12e>
 8008274:	6821      	ldr	r1, [r4, #0]
 8008276:	05c8      	lsls	r0, r1, #23
 8008278:	d51b      	bpl.n	80082b2 <_scanf_float+0x17e>
 800827a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800827e:	6021      	str	r1, [r4, #0]
 8008280:	f109 0901 	add.w	r9, r9, #1
 8008284:	f1bb 0f00 	cmp.w	fp, #0
 8008288:	d003      	beq.n	8008292 <_scanf_float+0x15e>
 800828a:	3201      	adds	r2, #1
 800828c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8008290:	60a2      	str	r2, [r4, #8]
 8008292:	68a3      	ldr	r3, [r4, #8]
 8008294:	3b01      	subs	r3, #1
 8008296:	60a3      	str	r3, [r4, #8]
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	3301      	adds	r3, #1
 800829c:	6123      	str	r3, [r4, #16]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	607b      	str	r3, [r7, #4]
 80082a6:	f340 8087 	ble.w	80083b8 <_scanf_float+0x284>
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	3301      	adds	r3, #1
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	e765      	b.n	800817e <_scanf_float+0x4a>
 80082b2:	eb1a 0105 	adds.w	r1, sl, r5
 80082b6:	f47f af6f 	bne.w	8008198 <_scanf_float+0x64>
 80082ba:	6822      	ldr	r2, [r4, #0]
 80082bc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80082c0:	6022      	str	r2, [r4, #0]
 80082c2:	460d      	mov	r5, r1
 80082c4:	468a      	mov	sl, r1
 80082c6:	f806 3b01 	strb.w	r3, [r6], #1
 80082ca:	e7e2      	b.n	8008292 <_scanf_float+0x15e>
 80082cc:	6822      	ldr	r2, [r4, #0]
 80082ce:	0610      	lsls	r0, r2, #24
 80082d0:	f57f af62 	bpl.w	8008198 <_scanf_float+0x64>
 80082d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80082d8:	6022      	str	r2, [r4, #0]
 80082da:	e7f4      	b.n	80082c6 <_scanf_float+0x192>
 80082dc:	f1ba 0f00 	cmp.w	sl, #0
 80082e0:	d10e      	bne.n	8008300 <_scanf_float+0x1cc>
 80082e2:	f1b9 0f00 	cmp.w	r9, #0
 80082e6:	d10e      	bne.n	8008306 <_scanf_float+0x1d2>
 80082e8:	6822      	ldr	r2, [r4, #0]
 80082ea:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80082ee:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80082f2:	d108      	bne.n	8008306 <_scanf_float+0x1d2>
 80082f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80082f8:	6022      	str	r2, [r4, #0]
 80082fa:	f04f 0a01 	mov.w	sl, #1
 80082fe:	e7e2      	b.n	80082c6 <_scanf_float+0x192>
 8008300:	f1ba 0f02 	cmp.w	sl, #2
 8008304:	d055      	beq.n	80083b2 <_scanf_float+0x27e>
 8008306:	2d01      	cmp	r5, #1
 8008308:	d002      	beq.n	8008310 <_scanf_float+0x1dc>
 800830a:	2d04      	cmp	r5, #4
 800830c:	f47f af44 	bne.w	8008198 <_scanf_float+0x64>
 8008310:	3501      	adds	r5, #1
 8008312:	b2ed      	uxtb	r5, r5
 8008314:	e7d7      	b.n	80082c6 <_scanf_float+0x192>
 8008316:	f1ba 0f01 	cmp.w	sl, #1
 800831a:	f47f af3d 	bne.w	8008198 <_scanf_float+0x64>
 800831e:	f04f 0a02 	mov.w	sl, #2
 8008322:	e7d0      	b.n	80082c6 <_scanf_float+0x192>
 8008324:	b97d      	cbnz	r5, 8008346 <_scanf_float+0x212>
 8008326:	f1b9 0f00 	cmp.w	r9, #0
 800832a:	f47f af38 	bne.w	800819e <_scanf_float+0x6a>
 800832e:	6822      	ldr	r2, [r4, #0]
 8008330:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008334:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008338:	f040 8108 	bne.w	800854c <_scanf_float+0x418>
 800833c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008340:	6022      	str	r2, [r4, #0]
 8008342:	2501      	movs	r5, #1
 8008344:	e7bf      	b.n	80082c6 <_scanf_float+0x192>
 8008346:	2d03      	cmp	r5, #3
 8008348:	d0e2      	beq.n	8008310 <_scanf_float+0x1dc>
 800834a:	2d05      	cmp	r5, #5
 800834c:	e7de      	b.n	800830c <_scanf_float+0x1d8>
 800834e:	2d02      	cmp	r5, #2
 8008350:	f47f af22 	bne.w	8008198 <_scanf_float+0x64>
 8008354:	2503      	movs	r5, #3
 8008356:	e7b6      	b.n	80082c6 <_scanf_float+0x192>
 8008358:	2d06      	cmp	r5, #6
 800835a:	f47f af1d 	bne.w	8008198 <_scanf_float+0x64>
 800835e:	2507      	movs	r5, #7
 8008360:	e7b1      	b.n	80082c6 <_scanf_float+0x192>
 8008362:	6822      	ldr	r2, [r4, #0]
 8008364:	0591      	lsls	r1, r2, #22
 8008366:	f57f af17 	bpl.w	8008198 <_scanf_float+0x64>
 800836a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800836e:	6022      	str	r2, [r4, #0]
 8008370:	f8cd 9008 	str.w	r9, [sp, #8]
 8008374:	e7a7      	b.n	80082c6 <_scanf_float+0x192>
 8008376:	6822      	ldr	r2, [r4, #0]
 8008378:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800837c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008380:	d006      	beq.n	8008390 <_scanf_float+0x25c>
 8008382:	0550      	lsls	r0, r2, #21
 8008384:	f57f af08 	bpl.w	8008198 <_scanf_float+0x64>
 8008388:	f1b9 0f00 	cmp.w	r9, #0
 800838c:	f000 80de 	beq.w	800854c <_scanf_float+0x418>
 8008390:	0591      	lsls	r1, r2, #22
 8008392:	bf58      	it	pl
 8008394:	9902      	ldrpl	r1, [sp, #8]
 8008396:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800839a:	bf58      	it	pl
 800839c:	eba9 0101 	subpl.w	r1, r9, r1
 80083a0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80083a4:	bf58      	it	pl
 80083a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80083aa:	6022      	str	r2, [r4, #0]
 80083ac:	f04f 0900 	mov.w	r9, #0
 80083b0:	e789      	b.n	80082c6 <_scanf_float+0x192>
 80083b2:	f04f 0a03 	mov.w	sl, #3
 80083b6:	e786      	b.n	80082c6 <_scanf_float+0x192>
 80083b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80083bc:	4639      	mov	r1, r7
 80083be:	4640      	mov	r0, r8
 80083c0:	4798      	blx	r3
 80083c2:	2800      	cmp	r0, #0
 80083c4:	f43f aedb 	beq.w	800817e <_scanf_float+0x4a>
 80083c8:	e6e6      	b.n	8008198 <_scanf_float+0x64>
 80083ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083d2:	463a      	mov	r2, r7
 80083d4:	4640      	mov	r0, r8
 80083d6:	4798      	blx	r3
 80083d8:	6923      	ldr	r3, [r4, #16]
 80083da:	3b01      	subs	r3, #1
 80083dc:	6123      	str	r3, [r4, #16]
 80083de:	e6e8      	b.n	80081b2 <_scanf_float+0x7e>
 80083e0:	1e6b      	subs	r3, r5, #1
 80083e2:	2b06      	cmp	r3, #6
 80083e4:	d824      	bhi.n	8008430 <_scanf_float+0x2fc>
 80083e6:	2d02      	cmp	r5, #2
 80083e8:	d836      	bhi.n	8008458 <_scanf_float+0x324>
 80083ea:	9b01      	ldr	r3, [sp, #4]
 80083ec:	429e      	cmp	r6, r3
 80083ee:	f67f aee4 	bls.w	80081ba <_scanf_float+0x86>
 80083f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083fa:	463a      	mov	r2, r7
 80083fc:	4640      	mov	r0, r8
 80083fe:	4798      	blx	r3
 8008400:	6923      	ldr	r3, [r4, #16]
 8008402:	3b01      	subs	r3, #1
 8008404:	6123      	str	r3, [r4, #16]
 8008406:	e7f0      	b.n	80083ea <_scanf_float+0x2b6>
 8008408:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800840c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008410:	463a      	mov	r2, r7
 8008412:	4640      	mov	r0, r8
 8008414:	4798      	blx	r3
 8008416:	6923      	ldr	r3, [r4, #16]
 8008418:	3b01      	subs	r3, #1
 800841a:	6123      	str	r3, [r4, #16]
 800841c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008420:	fa5f fa8a 	uxtb.w	sl, sl
 8008424:	f1ba 0f02 	cmp.w	sl, #2
 8008428:	d1ee      	bne.n	8008408 <_scanf_float+0x2d4>
 800842a:	3d03      	subs	r5, #3
 800842c:	b2ed      	uxtb	r5, r5
 800842e:	1b76      	subs	r6, r6, r5
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	05da      	lsls	r2, r3, #23
 8008434:	d530      	bpl.n	8008498 <_scanf_float+0x364>
 8008436:	055b      	lsls	r3, r3, #21
 8008438:	d511      	bpl.n	800845e <_scanf_float+0x32a>
 800843a:	9b01      	ldr	r3, [sp, #4]
 800843c:	429e      	cmp	r6, r3
 800843e:	f67f aebc 	bls.w	80081ba <_scanf_float+0x86>
 8008442:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008446:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800844a:	463a      	mov	r2, r7
 800844c:	4640      	mov	r0, r8
 800844e:	4798      	blx	r3
 8008450:	6923      	ldr	r3, [r4, #16]
 8008452:	3b01      	subs	r3, #1
 8008454:	6123      	str	r3, [r4, #16]
 8008456:	e7f0      	b.n	800843a <_scanf_float+0x306>
 8008458:	46aa      	mov	sl, r5
 800845a:	46b3      	mov	fp, r6
 800845c:	e7de      	b.n	800841c <_scanf_float+0x2e8>
 800845e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008462:	6923      	ldr	r3, [r4, #16]
 8008464:	2965      	cmp	r1, #101	@ 0x65
 8008466:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800846a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800846e:	6123      	str	r3, [r4, #16]
 8008470:	d00c      	beq.n	800848c <_scanf_float+0x358>
 8008472:	2945      	cmp	r1, #69	@ 0x45
 8008474:	d00a      	beq.n	800848c <_scanf_float+0x358>
 8008476:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800847a:	463a      	mov	r2, r7
 800847c:	4640      	mov	r0, r8
 800847e:	4798      	blx	r3
 8008480:	6923      	ldr	r3, [r4, #16]
 8008482:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008486:	3b01      	subs	r3, #1
 8008488:	1eb5      	subs	r5, r6, #2
 800848a:	6123      	str	r3, [r4, #16]
 800848c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008490:	463a      	mov	r2, r7
 8008492:	4640      	mov	r0, r8
 8008494:	4798      	blx	r3
 8008496:	462e      	mov	r6, r5
 8008498:	6822      	ldr	r2, [r4, #0]
 800849a:	f012 0210 	ands.w	r2, r2, #16
 800849e:	d001      	beq.n	80084a4 <_scanf_float+0x370>
 80084a0:	2000      	movs	r0, #0
 80084a2:	e68b      	b.n	80081bc <_scanf_float+0x88>
 80084a4:	7032      	strb	r2, [r6, #0]
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80084ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084b0:	d11c      	bne.n	80084ec <_scanf_float+0x3b8>
 80084b2:	9b02      	ldr	r3, [sp, #8]
 80084b4:	454b      	cmp	r3, r9
 80084b6:	eba3 0209 	sub.w	r2, r3, r9
 80084ba:	d123      	bne.n	8008504 <_scanf_float+0x3d0>
 80084bc:	9901      	ldr	r1, [sp, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	4640      	mov	r0, r8
 80084c2:	f7ff f95d 	bl	8007780 <_strtod_r>
 80084c6:	9b03      	ldr	r3, [sp, #12]
 80084c8:	6821      	ldr	r1, [r4, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f011 0f02 	tst.w	r1, #2
 80084d0:	ec57 6b10 	vmov	r6, r7, d0
 80084d4:	f103 0204 	add.w	r2, r3, #4
 80084d8:	d01f      	beq.n	800851a <_scanf_float+0x3e6>
 80084da:	9903      	ldr	r1, [sp, #12]
 80084dc:	600a      	str	r2, [r1, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	e9c3 6700 	strd	r6, r7, [r3]
 80084e4:	68e3      	ldr	r3, [r4, #12]
 80084e6:	3301      	adds	r3, #1
 80084e8:	60e3      	str	r3, [r4, #12]
 80084ea:	e7d9      	b.n	80084a0 <_scanf_float+0x36c>
 80084ec:	9b04      	ldr	r3, [sp, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0e4      	beq.n	80084bc <_scanf_float+0x388>
 80084f2:	9905      	ldr	r1, [sp, #20]
 80084f4:	230a      	movs	r3, #10
 80084f6:	3101      	adds	r1, #1
 80084f8:	4640      	mov	r0, r8
 80084fa:	f7ff f9c1 	bl	8007880 <_strtol_r>
 80084fe:	9b04      	ldr	r3, [sp, #16]
 8008500:	9e05      	ldr	r6, [sp, #20]
 8008502:	1ac2      	subs	r2, r0, r3
 8008504:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008508:	429e      	cmp	r6, r3
 800850a:	bf28      	it	cs
 800850c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008510:	4910      	ldr	r1, [pc, #64]	@ (8008554 <_scanf_float+0x420>)
 8008512:	4630      	mov	r0, r6
 8008514:	f000 f8e4 	bl	80086e0 <siprintf>
 8008518:	e7d0      	b.n	80084bc <_scanf_float+0x388>
 800851a:	f011 0f04 	tst.w	r1, #4
 800851e:	9903      	ldr	r1, [sp, #12]
 8008520:	600a      	str	r2, [r1, #0]
 8008522:	d1dc      	bne.n	80084de <_scanf_float+0x3aa>
 8008524:	681d      	ldr	r5, [r3, #0]
 8008526:	4632      	mov	r2, r6
 8008528:	463b      	mov	r3, r7
 800852a:	4630      	mov	r0, r6
 800852c:	4639      	mov	r1, r7
 800852e:	f7f8 fb0d 	bl	8000b4c <__aeabi_dcmpun>
 8008532:	b128      	cbz	r0, 8008540 <_scanf_float+0x40c>
 8008534:	4808      	ldr	r0, [pc, #32]	@ (8008558 <_scanf_float+0x424>)
 8008536:	f000 fa5f 	bl	80089f8 <nanf>
 800853a:	ed85 0a00 	vstr	s0, [r5]
 800853e:	e7d1      	b.n	80084e4 <_scanf_float+0x3b0>
 8008540:	4630      	mov	r0, r6
 8008542:	4639      	mov	r1, r7
 8008544:	f7f8 fb60 	bl	8000c08 <__aeabi_d2f>
 8008548:	6028      	str	r0, [r5, #0]
 800854a:	e7cb      	b.n	80084e4 <_scanf_float+0x3b0>
 800854c:	f04f 0900 	mov.w	r9, #0
 8008550:	e629      	b.n	80081a6 <_scanf_float+0x72>
 8008552:	bf00      	nop
 8008554:	0800b595 	.word	0x0800b595
 8008558:	0800b5dd 	.word	0x0800b5dd

0800855c <std>:
 800855c:	2300      	movs	r3, #0
 800855e:	b510      	push	{r4, lr}
 8008560:	4604      	mov	r4, r0
 8008562:	e9c0 3300 	strd	r3, r3, [r0]
 8008566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800856a:	6083      	str	r3, [r0, #8]
 800856c:	8181      	strh	r1, [r0, #12]
 800856e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008570:	81c2      	strh	r2, [r0, #14]
 8008572:	6183      	str	r3, [r0, #24]
 8008574:	4619      	mov	r1, r3
 8008576:	2208      	movs	r2, #8
 8008578:	305c      	adds	r0, #92	@ 0x5c
 800857a:	f000 f914 	bl	80087a6 <memset>
 800857e:	4b0d      	ldr	r3, [pc, #52]	@ (80085b4 <std+0x58>)
 8008580:	6263      	str	r3, [r4, #36]	@ 0x24
 8008582:	4b0d      	ldr	r3, [pc, #52]	@ (80085b8 <std+0x5c>)
 8008584:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008586:	4b0d      	ldr	r3, [pc, #52]	@ (80085bc <std+0x60>)
 8008588:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800858a:	4b0d      	ldr	r3, [pc, #52]	@ (80085c0 <std+0x64>)
 800858c:	6323      	str	r3, [r4, #48]	@ 0x30
 800858e:	4b0d      	ldr	r3, [pc, #52]	@ (80085c4 <std+0x68>)
 8008590:	6224      	str	r4, [r4, #32]
 8008592:	429c      	cmp	r4, r3
 8008594:	d006      	beq.n	80085a4 <std+0x48>
 8008596:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800859a:	4294      	cmp	r4, r2
 800859c:	d002      	beq.n	80085a4 <std+0x48>
 800859e:	33d0      	adds	r3, #208	@ 0xd0
 80085a0:	429c      	cmp	r4, r3
 80085a2:	d105      	bne.n	80085b0 <std+0x54>
 80085a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80085a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ac:	f000 ba08 	b.w	80089c0 <__retarget_lock_init_recursive>
 80085b0:	bd10      	pop	{r4, pc}
 80085b2:	bf00      	nop
 80085b4:	08008721 	.word	0x08008721
 80085b8:	08008743 	.word	0x08008743
 80085bc:	0800877b 	.word	0x0800877b
 80085c0:	0800879f 	.word	0x0800879f
 80085c4:	20005058 	.word	0x20005058

080085c8 <stdio_exit_handler>:
 80085c8:	4a02      	ldr	r2, [pc, #8]	@ (80085d4 <stdio_exit_handler+0xc>)
 80085ca:	4903      	ldr	r1, [pc, #12]	@ (80085d8 <stdio_exit_handler+0x10>)
 80085cc:	4803      	ldr	r0, [pc, #12]	@ (80085dc <stdio_exit_handler+0x14>)
 80085ce:	f000 b869 	b.w	80086a4 <_fwalk_sglue>
 80085d2:	bf00      	nop
 80085d4:	2000000c 	.word	0x2000000c
 80085d8:	0800aca5 	.word	0x0800aca5
 80085dc:	20000188 	.word	0x20000188

080085e0 <cleanup_stdio>:
 80085e0:	6841      	ldr	r1, [r0, #4]
 80085e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008614 <cleanup_stdio+0x34>)
 80085e4:	4299      	cmp	r1, r3
 80085e6:	b510      	push	{r4, lr}
 80085e8:	4604      	mov	r4, r0
 80085ea:	d001      	beq.n	80085f0 <cleanup_stdio+0x10>
 80085ec:	f002 fb5a 	bl	800aca4 <_fflush_r>
 80085f0:	68a1      	ldr	r1, [r4, #8]
 80085f2:	4b09      	ldr	r3, [pc, #36]	@ (8008618 <cleanup_stdio+0x38>)
 80085f4:	4299      	cmp	r1, r3
 80085f6:	d002      	beq.n	80085fe <cleanup_stdio+0x1e>
 80085f8:	4620      	mov	r0, r4
 80085fa:	f002 fb53 	bl	800aca4 <_fflush_r>
 80085fe:	68e1      	ldr	r1, [r4, #12]
 8008600:	4b06      	ldr	r3, [pc, #24]	@ (800861c <cleanup_stdio+0x3c>)
 8008602:	4299      	cmp	r1, r3
 8008604:	d004      	beq.n	8008610 <cleanup_stdio+0x30>
 8008606:	4620      	mov	r0, r4
 8008608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800860c:	f002 bb4a 	b.w	800aca4 <_fflush_r>
 8008610:	bd10      	pop	{r4, pc}
 8008612:	bf00      	nop
 8008614:	20005058 	.word	0x20005058
 8008618:	200050c0 	.word	0x200050c0
 800861c:	20005128 	.word	0x20005128

08008620 <global_stdio_init.part.0>:
 8008620:	b510      	push	{r4, lr}
 8008622:	4b0b      	ldr	r3, [pc, #44]	@ (8008650 <global_stdio_init.part.0+0x30>)
 8008624:	4c0b      	ldr	r4, [pc, #44]	@ (8008654 <global_stdio_init.part.0+0x34>)
 8008626:	4a0c      	ldr	r2, [pc, #48]	@ (8008658 <global_stdio_init.part.0+0x38>)
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	4620      	mov	r0, r4
 800862c:	2200      	movs	r2, #0
 800862e:	2104      	movs	r1, #4
 8008630:	f7ff ff94 	bl	800855c <std>
 8008634:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008638:	2201      	movs	r2, #1
 800863a:	2109      	movs	r1, #9
 800863c:	f7ff ff8e 	bl	800855c <std>
 8008640:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008644:	2202      	movs	r2, #2
 8008646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800864a:	2112      	movs	r1, #18
 800864c:	f7ff bf86 	b.w	800855c <std>
 8008650:	20005190 	.word	0x20005190
 8008654:	20005058 	.word	0x20005058
 8008658:	080085c9 	.word	0x080085c9

0800865c <__sfp_lock_acquire>:
 800865c:	4801      	ldr	r0, [pc, #4]	@ (8008664 <__sfp_lock_acquire+0x8>)
 800865e:	f000 b9b0 	b.w	80089c2 <__retarget_lock_acquire_recursive>
 8008662:	bf00      	nop
 8008664:	20005199 	.word	0x20005199

08008668 <__sfp_lock_release>:
 8008668:	4801      	ldr	r0, [pc, #4]	@ (8008670 <__sfp_lock_release+0x8>)
 800866a:	f000 b9ab 	b.w	80089c4 <__retarget_lock_release_recursive>
 800866e:	bf00      	nop
 8008670:	20005199 	.word	0x20005199

08008674 <__sinit>:
 8008674:	b510      	push	{r4, lr}
 8008676:	4604      	mov	r4, r0
 8008678:	f7ff fff0 	bl	800865c <__sfp_lock_acquire>
 800867c:	6a23      	ldr	r3, [r4, #32]
 800867e:	b11b      	cbz	r3, 8008688 <__sinit+0x14>
 8008680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008684:	f7ff bff0 	b.w	8008668 <__sfp_lock_release>
 8008688:	4b04      	ldr	r3, [pc, #16]	@ (800869c <__sinit+0x28>)
 800868a:	6223      	str	r3, [r4, #32]
 800868c:	4b04      	ldr	r3, [pc, #16]	@ (80086a0 <__sinit+0x2c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1f5      	bne.n	8008680 <__sinit+0xc>
 8008694:	f7ff ffc4 	bl	8008620 <global_stdio_init.part.0>
 8008698:	e7f2      	b.n	8008680 <__sinit+0xc>
 800869a:	bf00      	nop
 800869c:	080085e1 	.word	0x080085e1
 80086a0:	20005190 	.word	0x20005190

080086a4 <_fwalk_sglue>:
 80086a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086a8:	4607      	mov	r7, r0
 80086aa:	4688      	mov	r8, r1
 80086ac:	4614      	mov	r4, r2
 80086ae:	2600      	movs	r6, #0
 80086b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086b4:	f1b9 0901 	subs.w	r9, r9, #1
 80086b8:	d505      	bpl.n	80086c6 <_fwalk_sglue+0x22>
 80086ba:	6824      	ldr	r4, [r4, #0]
 80086bc:	2c00      	cmp	r4, #0
 80086be:	d1f7      	bne.n	80086b0 <_fwalk_sglue+0xc>
 80086c0:	4630      	mov	r0, r6
 80086c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086c6:	89ab      	ldrh	r3, [r5, #12]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d907      	bls.n	80086dc <_fwalk_sglue+0x38>
 80086cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086d0:	3301      	adds	r3, #1
 80086d2:	d003      	beq.n	80086dc <_fwalk_sglue+0x38>
 80086d4:	4629      	mov	r1, r5
 80086d6:	4638      	mov	r0, r7
 80086d8:	47c0      	blx	r8
 80086da:	4306      	orrs	r6, r0
 80086dc:	3568      	adds	r5, #104	@ 0x68
 80086de:	e7e9      	b.n	80086b4 <_fwalk_sglue+0x10>

080086e0 <siprintf>:
 80086e0:	b40e      	push	{r1, r2, r3}
 80086e2:	b500      	push	{lr}
 80086e4:	b09c      	sub	sp, #112	@ 0x70
 80086e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80086e8:	9002      	str	r0, [sp, #8]
 80086ea:	9006      	str	r0, [sp, #24]
 80086ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80086f0:	4809      	ldr	r0, [pc, #36]	@ (8008718 <siprintf+0x38>)
 80086f2:	9107      	str	r1, [sp, #28]
 80086f4:	9104      	str	r1, [sp, #16]
 80086f6:	4909      	ldr	r1, [pc, #36]	@ (800871c <siprintf+0x3c>)
 80086f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086fc:	9105      	str	r1, [sp, #20]
 80086fe:	6800      	ldr	r0, [r0, #0]
 8008700:	9301      	str	r3, [sp, #4]
 8008702:	a902      	add	r1, sp, #8
 8008704:	f002 f94e 	bl	800a9a4 <_svfiprintf_r>
 8008708:	9b02      	ldr	r3, [sp, #8]
 800870a:	2200      	movs	r2, #0
 800870c:	701a      	strb	r2, [r3, #0]
 800870e:	b01c      	add	sp, #112	@ 0x70
 8008710:	f85d eb04 	ldr.w	lr, [sp], #4
 8008714:	b003      	add	sp, #12
 8008716:	4770      	bx	lr
 8008718:	20000184 	.word	0x20000184
 800871c:	ffff0208 	.word	0xffff0208

08008720 <__sread>:
 8008720:	b510      	push	{r4, lr}
 8008722:	460c      	mov	r4, r1
 8008724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008728:	f000 f8fc 	bl	8008924 <_read_r>
 800872c:	2800      	cmp	r0, #0
 800872e:	bfab      	itete	ge
 8008730:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008732:	89a3      	ldrhlt	r3, [r4, #12]
 8008734:	181b      	addge	r3, r3, r0
 8008736:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800873a:	bfac      	ite	ge
 800873c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800873e:	81a3      	strhlt	r3, [r4, #12]
 8008740:	bd10      	pop	{r4, pc}

08008742 <__swrite>:
 8008742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008746:	461f      	mov	r7, r3
 8008748:	898b      	ldrh	r3, [r1, #12]
 800874a:	05db      	lsls	r3, r3, #23
 800874c:	4605      	mov	r5, r0
 800874e:	460c      	mov	r4, r1
 8008750:	4616      	mov	r6, r2
 8008752:	d505      	bpl.n	8008760 <__swrite+0x1e>
 8008754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008758:	2302      	movs	r3, #2
 800875a:	2200      	movs	r2, #0
 800875c:	f000 f8d0 	bl	8008900 <_lseek_r>
 8008760:	89a3      	ldrh	r3, [r4, #12]
 8008762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008766:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800876a:	81a3      	strh	r3, [r4, #12]
 800876c:	4632      	mov	r2, r6
 800876e:	463b      	mov	r3, r7
 8008770:	4628      	mov	r0, r5
 8008772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008776:	f000 b8e7 	b.w	8008948 <_write_r>

0800877a <__sseek>:
 800877a:	b510      	push	{r4, lr}
 800877c:	460c      	mov	r4, r1
 800877e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008782:	f000 f8bd 	bl	8008900 <_lseek_r>
 8008786:	1c43      	adds	r3, r0, #1
 8008788:	89a3      	ldrh	r3, [r4, #12]
 800878a:	bf15      	itete	ne
 800878c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800878e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008792:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008796:	81a3      	strheq	r3, [r4, #12]
 8008798:	bf18      	it	ne
 800879a:	81a3      	strhne	r3, [r4, #12]
 800879c:	bd10      	pop	{r4, pc}

0800879e <__sclose>:
 800879e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a2:	f000 b847 	b.w	8008834 <_close_r>

080087a6 <memset>:
 80087a6:	4402      	add	r2, r0
 80087a8:	4603      	mov	r3, r0
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d100      	bne.n	80087b0 <memset+0xa>
 80087ae:	4770      	bx	lr
 80087b0:	f803 1b01 	strb.w	r1, [r3], #1
 80087b4:	e7f9      	b.n	80087aa <memset+0x4>

080087b6 <strncat>:
 80087b6:	b530      	push	{r4, r5, lr}
 80087b8:	4604      	mov	r4, r0
 80087ba:	7825      	ldrb	r5, [r4, #0]
 80087bc:	4623      	mov	r3, r4
 80087be:	3401      	adds	r4, #1
 80087c0:	2d00      	cmp	r5, #0
 80087c2:	d1fa      	bne.n	80087ba <strncat+0x4>
 80087c4:	3a01      	subs	r2, #1
 80087c6:	d304      	bcc.n	80087d2 <strncat+0x1c>
 80087c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087cc:	f803 4b01 	strb.w	r4, [r3], #1
 80087d0:	b904      	cbnz	r4, 80087d4 <strncat+0x1e>
 80087d2:	bd30      	pop	{r4, r5, pc}
 80087d4:	2a00      	cmp	r2, #0
 80087d6:	d1f5      	bne.n	80087c4 <strncat+0xe>
 80087d8:	701a      	strb	r2, [r3, #0]
 80087da:	e7f3      	b.n	80087c4 <strncat+0xe>

080087dc <strncmp>:
 80087dc:	b510      	push	{r4, lr}
 80087de:	b16a      	cbz	r2, 80087fc <strncmp+0x20>
 80087e0:	3901      	subs	r1, #1
 80087e2:	1884      	adds	r4, r0, r2
 80087e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d103      	bne.n	80087f8 <strncmp+0x1c>
 80087f0:	42a0      	cmp	r0, r4
 80087f2:	d001      	beq.n	80087f8 <strncmp+0x1c>
 80087f4:	2a00      	cmp	r2, #0
 80087f6:	d1f5      	bne.n	80087e4 <strncmp+0x8>
 80087f8:	1ad0      	subs	r0, r2, r3
 80087fa:	bd10      	pop	{r4, pc}
 80087fc:	4610      	mov	r0, r2
 80087fe:	e7fc      	b.n	80087fa <strncmp+0x1e>

08008800 <strstr>:
 8008800:	780a      	ldrb	r2, [r1, #0]
 8008802:	b570      	push	{r4, r5, r6, lr}
 8008804:	b96a      	cbnz	r2, 8008822 <strstr+0x22>
 8008806:	bd70      	pop	{r4, r5, r6, pc}
 8008808:	429a      	cmp	r2, r3
 800880a:	d109      	bne.n	8008820 <strstr+0x20>
 800880c:	460c      	mov	r4, r1
 800880e:	4605      	mov	r5, r0
 8008810:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008814:	2b00      	cmp	r3, #0
 8008816:	d0f6      	beq.n	8008806 <strstr+0x6>
 8008818:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800881c:	429e      	cmp	r6, r3
 800881e:	d0f7      	beq.n	8008810 <strstr+0x10>
 8008820:	3001      	adds	r0, #1
 8008822:	7803      	ldrb	r3, [r0, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1ef      	bne.n	8008808 <strstr+0x8>
 8008828:	4618      	mov	r0, r3
 800882a:	e7ec      	b.n	8008806 <strstr+0x6>

0800882c <_localeconv_r>:
 800882c:	4800      	ldr	r0, [pc, #0]	@ (8008830 <_localeconv_r+0x4>)
 800882e:	4770      	bx	lr
 8008830:	20000108 	.word	0x20000108

08008834 <_close_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4d06      	ldr	r5, [pc, #24]	@ (8008850 <_close_r+0x1c>)
 8008838:	2300      	movs	r3, #0
 800883a:	4604      	mov	r4, r0
 800883c:	4608      	mov	r0, r1
 800883e:	602b      	str	r3, [r5, #0]
 8008840:	f7fa f8ac 	bl	800299c <_close>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d102      	bne.n	800884e <_close_r+0x1a>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	b103      	cbz	r3, 800884e <_close_r+0x1a>
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	20005194 	.word	0x20005194

08008854 <_reclaim_reent>:
 8008854:	4b29      	ldr	r3, [pc, #164]	@ (80088fc <_reclaim_reent+0xa8>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4283      	cmp	r3, r0
 800885a:	b570      	push	{r4, r5, r6, lr}
 800885c:	4604      	mov	r4, r0
 800885e:	d04b      	beq.n	80088f8 <_reclaim_reent+0xa4>
 8008860:	69c3      	ldr	r3, [r0, #28]
 8008862:	b1ab      	cbz	r3, 8008890 <_reclaim_reent+0x3c>
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	b16b      	cbz	r3, 8008884 <_reclaim_reent+0x30>
 8008868:	2500      	movs	r5, #0
 800886a:	69e3      	ldr	r3, [r4, #28]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	5959      	ldr	r1, [r3, r5]
 8008870:	2900      	cmp	r1, #0
 8008872:	d13b      	bne.n	80088ec <_reclaim_reent+0x98>
 8008874:	3504      	adds	r5, #4
 8008876:	2d80      	cmp	r5, #128	@ 0x80
 8008878:	d1f7      	bne.n	800886a <_reclaim_reent+0x16>
 800887a:	69e3      	ldr	r3, [r4, #28]
 800887c:	4620      	mov	r0, r4
 800887e:	68d9      	ldr	r1, [r3, #12]
 8008880:	f000 ff2a 	bl	80096d8 <_free_r>
 8008884:	69e3      	ldr	r3, [r4, #28]
 8008886:	6819      	ldr	r1, [r3, #0]
 8008888:	b111      	cbz	r1, 8008890 <_reclaim_reent+0x3c>
 800888a:	4620      	mov	r0, r4
 800888c:	f000 ff24 	bl	80096d8 <_free_r>
 8008890:	6961      	ldr	r1, [r4, #20]
 8008892:	b111      	cbz	r1, 800889a <_reclaim_reent+0x46>
 8008894:	4620      	mov	r0, r4
 8008896:	f000 ff1f 	bl	80096d8 <_free_r>
 800889a:	69e1      	ldr	r1, [r4, #28]
 800889c:	b111      	cbz	r1, 80088a4 <_reclaim_reent+0x50>
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 ff1a 	bl	80096d8 <_free_r>
 80088a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80088a6:	b111      	cbz	r1, 80088ae <_reclaim_reent+0x5a>
 80088a8:	4620      	mov	r0, r4
 80088aa:	f000 ff15 	bl	80096d8 <_free_r>
 80088ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088b0:	b111      	cbz	r1, 80088b8 <_reclaim_reent+0x64>
 80088b2:	4620      	mov	r0, r4
 80088b4:	f000 ff10 	bl	80096d8 <_free_r>
 80088b8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80088ba:	b111      	cbz	r1, 80088c2 <_reclaim_reent+0x6e>
 80088bc:	4620      	mov	r0, r4
 80088be:	f000 ff0b 	bl	80096d8 <_free_r>
 80088c2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80088c4:	b111      	cbz	r1, 80088cc <_reclaim_reent+0x78>
 80088c6:	4620      	mov	r0, r4
 80088c8:	f000 ff06 	bl	80096d8 <_free_r>
 80088cc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80088ce:	b111      	cbz	r1, 80088d6 <_reclaim_reent+0x82>
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 ff01 	bl	80096d8 <_free_r>
 80088d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80088d8:	b111      	cbz	r1, 80088e0 <_reclaim_reent+0x8c>
 80088da:	4620      	mov	r0, r4
 80088dc:	f000 fefc 	bl	80096d8 <_free_r>
 80088e0:	6a23      	ldr	r3, [r4, #32]
 80088e2:	b14b      	cbz	r3, 80088f8 <_reclaim_reent+0xa4>
 80088e4:	4620      	mov	r0, r4
 80088e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80088ea:	4718      	bx	r3
 80088ec:	680e      	ldr	r6, [r1, #0]
 80088ee:	4620      	mov	r0, r4
 80088f0:	f000 fef2 	bl	80096d8 <_free_r>
 80088f4:	4631      	mov	r1, r6
 80088f6:	e7bb      	b.n	8008870 <_reclaim_reent+0x1c>
 80088f8:	bd70      	pop	{r4, r5, r6, pc}
 80088fa:	bf00      	nop
 80088fc:	20000184 	.word	0x20000184

08008900 <_lseek_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	4d07      	ldr	r5, [pc, #28]	@ (8008920 <_lseek_r+0x20>)
 8008904:	4604      	mov	r4, r0
 8008906:	4608      	mov	r0, r1
 8008908:	4611      	mov	r1, r2
 800890a:	2200      	movs	r2, #0
 800890c:	602a      	str	r2, [r5, #0]
 800890e:	461a      	mov	r2, r3
 8008910:	f7fa f86b 	bl	80029ea <_lseek>
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	d102      	bne.n	800891e <_lseek_r+0x1e>
 8008918:	682b      	ldr	r3, [r5, #0]
 800891a:	b103      	cbz	r3, 800891e <_lseek_r+0x1e>
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	bd38      	pop	{r3, r4, r5, pc}
 8008920:	20005194 	.word	0x20005194

08008924 <_read_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	4d07      	ldr	r5, [pc, #28]	@ (8008944 <_read_r+0x20>)
 8008928:	4604      	mov	r4, r0
 800892a:	4608      	mov	r0, r1
 800892c:	4611      	mov	r1, r2
 800892e:	2200      	movs	r2, #0
 8008930:	602a      	str	r2, [r5, #0]
 8008932:	461a      	mov	r2, r3
 8008934:	f7f9 fff9 	bl	800292a <_read>
 8008938:	1c43      	adds	r3, r0, #1
 800893a:	d102      	bne.n	8008942 <_read_r+0x1e>
 800893c:	682b      	ldr	r3, [r5, #0]
 800893e:	b103      	cbz	r3, 8008942 <_read_r+0x1e>
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	bd38      	pop	{r3, r4, r5, pc}
 8008944:	20005194 	.word	0x20005194

08008948 <_write_r>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4d07      	ldr	r5, [pc, #28]	@ (8008968 <_write_r+0x20>)
 800894c:	4604      	mov	r4, r0
 800894e:	4608      	mov	r0, r1
 8008950:	4611      	mov	r1, r2
 8008952:	2200      	movs	r2, #0
 8008954:	602a      	str	r2, [r5, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	f7fa f804 	bl	8002964 <_write>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d102      	bne.n	8008966 <_write_r+0x1e>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	b103      	cbz	r3, 8008966 <_write_r+0x1e>
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	20005194 	.word	0x20005194

0800896c <__errno>:
 800896c:	4b01      	ldr	r3, [pc, #4]	@ (8008974 <__errno+0x8>)
 800896e:	6818      	ldr	r0, [r3, #0]
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	20000184 	.word	0x20000184

08008978 <__libc_init_array>:
 8008978:	b570      	push	{r4, r5, r6, lr}
 800897a:	4d0d      	ldr	r5, [pc, #52]	@ (80089b0 <__libc_init_array+0x38>)
 800897c:	4c0d      	ldr	r4, [pc, #52]	@ (80089b4 <__libc_init_array+0x3c>)
 800897e:	1b64      	subs	r4, r4, r5
 8008980:	10a4      	asrs	r4, r4, #2
 8008982:	2600      	movs	r6, #0
 8008984:	42a6      	cmp	r6, r4
 8008986:	d109      	bne.n	800899c <__libc_init_array+0x24>
 8008988:	4d0b      	ldr	r5, [pc, #44]	@ (80089b8 <__libc_init_array+0x40>)
 800898a:	4c0c      	ldr	r4, [pc, #48]	@ (80089bc <__libc_init_array+0x44>)
 800898c:	f002 fcdc 	bl	800b348 <_init>
 8008990:	1b64      	subs	r4, r4, r5
 8008992:	10a4      	asrs	r4, r4, #2
 8008994:	2600      	movs	r6, #0
 8008996:	42a6      	cmp	r6, r4
 8008998:	d105      	bne.n	80089a6 <__libc_init_array+0x2e>
 800899a:	bd70      	pop	{r4, r5, r6, pc}
 800899c:	f855 3b04 	ldr.w	r3, [r5], #4
 80089a0:	4798      	blx	r3
 80089a2:	3601      	adds	r6, #1
 80089a4:	e7ee      	b.n	8008984 <__libc_init_array+0xc>
 80089a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089aa:	4798      	blx	r3
 80089ac:	3601      	adds	r6, #1
 80089ae:	e7f2      	b.n	8008996 <__libc_init_array+0x1e>
 80089b0:	0800b83c 	.word	0x0800b83c
 80089b4:	0800b83c 	.word	0x0800b83c
 80089b8:	0800b83c 	.word	0x0800b83c
 80089bc:	0800b840 	.word	0x0800b840

080089c0 <__retarget_lock_init_recursive>:
 80089c0:	4770      	bx	lr

080089c2 <__retarget_lock_acquire_recursive>:
 80089c2:	4770      	bx	lr

080089c4 <__retarget_lock_release_recursive>:
 80089c4:	4770      	bx	lr

080089c6 <memcpy>:
 80089c6:	440a      	add	r2, r1
 80089c8:	4291      	cmp	r1, r2
 80089ca:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80089ce:	d100      	bne.n	80089d2 <memcpy+0xc>
 80089d0:	4770      	bx	lr
 80089d2:	b510      	push	{r4, lr}
 80089d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089dc:	4291      	cmp	r1, r2
 80089de:	d1f9      	bne.n	80089d4 <memcpy+0xe>
 80089e0:	bd10      	pop	{r4, pc}
 80089e2:	0000      	movs	r0, r0
 80089e4:	0000      	movs	r0, r0
	...

080089e8 <nan>:
 80089e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80089f0 <nan+0x8>
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	00000000 	.word	0x00000000
 80089f4:	7ff80000 	.word	0x7ff80000

080089f8 <nanf>:
 80089f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008a00 <nanf+0x8>
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	7fc00000 	.word	0x7fc00000

08008a04 <__assert_func>:
 8008a04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a06:	4614      	mov	r4, r2
 8008a08:	461a      	mov	r2, r3
 8008a0a:	4b09      	ldr	r3, [pc, #36]	@ (8008a30 <__assert_func+0x2c>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4605      	mov	r5, r0
 8008a10:	68d8      	ldr	r0, [r3, #12]
 8008a12:	b954      	cbnz	r4, 8008a2a <__assert_func+0x26>
 8008a14:	4b07      	ldr	r3, [pc, #28]	@ (8008a34 <__assert_func+0x30>)
 8008a16:	461c      	mov	r4, r3
 8008a18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a1c:	9100      	str	r1, [sp, #0]
 8008a1e:	462b      	mov	r3, r5
 8008a20:	4905      	ldr	r1, [pc, #20]	@ (8008a38 <__assert_func+0x34>)
 8008a22:	f002 f967 	bl	800acf4 <fiprintf>
 8008a26:	f002 f9a1 	bl	800ad6c <abort>
 8008a2a:	4b04      	ldr	r3, [pc, #16]	@ (8008a3c <__assert_func+0x38>)
 8008a2c:	e7f4      	b.n	8008a18 <__assert_func+0x14>
 8008a2e:	bf00      	nop
 8008a30:	20000184 	.word	0x20000184
 8008a34:	0800b5dd 	.word	0x0800b5dd
 8008a38:	0800b5af 	.word	0x0800b5af
 8008a3c:	0800b5a2 	.word	0x0800b5a2

08008a40 <quorem>:
 8008a40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a44:	6903      	ldr	r3, [r0, #16]
 8008a46:	690c      	ldr	r4, [r1, #16]
 8008a48:	42a3      	cmp	r3, r4
 8008a4a:	4607      	mov	r7, r0
 8008a4c:	db7e      	blt.n	8008b4c <quorem+0x10c>
 8008a4e:	3c01      	subs	r4, #1
 8008a50:	f101 0814 	add.w	r8, r1, #20
 8008a54:	00a3      	lsls	r3, r4, #2
 8008a56:	f100 0514 	add.w	r5, r0, #20
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a72:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a76:	d32e      	bcc.n	8008ad6 <quorem+0x96>
 8008a78:	f04f 0a00 	mov.w	sl, #0
 8008a7c:	46c4      	mov	ip, r8
 8008a7e:	46ae      	mov	lr, r5
 8008a80:	46d3      	mov	fp, sl
 8008a82:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a86:	b298      	uxth	r0, r3
 8008a88:	fb06 a000 	mla	r0, r6, r0, sl
 8008a8c:	0c02      	lsrs	r2, r0, #16
 8008a8e:	0c1b      	lsrs	r3, r3, #16
 8008a90:	fb06 2303 	mla	r3, r6, r3, r2
 8008a94:	f8de 2000 	ldr.w	r2, [lr]
 8008a98:	b280      	uxth	r0, r0
 8008a9a:	b292      	uxth	r2, r2
 8008a9c:	1a12      	subs	r2, r2, r0
 8008a9e:	445a      	add	r2, fp
 8008aa0:	f8de 0000 	ldr.w	r0, [lr]
 8008aa4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008aae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008ab2:	b292      	uxth	r2, r2
 8008ab4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008ab8:	45e1      	cmp	r9, ip
 8008aba:	f84e 2b04 	str.w	r2, [lr], #4
 8008abe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008ac2:	d2de      	bcs.n	8008a82 <quorem+0x42>
 8008ac4:	9b00      	ldr	r3, [sp, #0]
 8008ac6:	58eb      	ldr	r3, [r5, r3]
 8008ac8:	b92b      	cbnz	r3, 8008ad6 <quorem+0x96>
 8008aca:	9b01      	ldr	r3, [sp, #4]
 8008acc:	3b04      	subs	r3, #4
 8008ace:	429d      	cmp	r5, r3
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	d32f      	bcc.n	8008b34 <quorem+0xf4>
 8008ad4:	613c      	str	r4, [r7, #16]
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	f001 fd0e 	bl	800a4f8 <__mcmp>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	db25      	blt.n	8008b2c <quorem+0xec>
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ae8:	f8d1 c000 	ldr.w	ip, [r1]
 8008aec:	fa1f fe82 	uxth.w	lr, r2
 8008af0:	fa1f f38c 	uxth.w	r3, ip
 8008af4:	eba3 030e 	sub.w	r3, r3, lr
 8008af8:	4403      	add	r3, r0
 8008afa:	0c12      	lsrs	r2, r2, #16
 8008afc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008b00:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b0a:	45c1      	cmp	r9, r8
 8008b0c:	f841 3b04 	str.w	r3, [r1], #4
 8008b10:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b14:	d2e6      	bcs.n	8008ae4 <quorem+0xa4>
 8008b16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b1e:	b922      	cbnz	r2, 8008b2a <quorem+0xea>
 8008b20:	3b04      	subs	r3, #4
 8008b22:	429d      	cmp	r5, r3
 8008b24:	461a      	mov	r2, r3
 8008b26:	d30b      	bcc.n	8008b40 <quorem+0x100>
 8008b28:	613c      	str	r4, [r7, #16]
 8008b2a:	3601      	adds	r6, #1
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	b003      	add	sp, #12
 8008b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b34:	6812      	ldr	r2, [r2, #0]
 8008b36:	3b04      	subs	r3, #4
 8008b38:	2a00      	cmp	r2, #0
 8008b3a:	d1cb      	bne.n	8008ad4 <quorem+0x94>
 8008b3c:	3c01      	subs	r4, #1
 8008b3e:	e7c6      	b.n	8008ace <quorem+0x8e>
 8008b40:	6812      	ldr	r2, [r2, #0]
 8008b42:	3b04      	subs	r3, #4
 8008b44:	2a00      	cmp	r2, #0
 8008b46:	d1ef      	bne.n	8008b28 <quorem+0xe8>
 8008b48:	3c01      	subs	r4, #1
 8008b4a:	e7ea      	b.n	8008b22 <quorem+0xe2>
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	e7ee      	b.n	8008b2e <quorem+0xee>

08008b50 <_dtoa_r>:
 8008b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	69c7      	ldr	r7, [r0, #28]
 8008b56:	b099      	sub	sp, #100	@ 0x64
 8008b58:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008b5c:	ec55 4b10 	vmov	r4, r5, d0
 8008b60:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008b62:	9109      	str	r1, [sp, #36]	@ 0x24
 8008b64:	4683      	mov	fp, r0
 8008b66:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b6a:	b97f      	cbnz	r7, 8008b8c <_dtoa_r+0x3c>
 8008b6c:	2010      	movs	r0, #16
 8008b6e:	f001 f937 	bl	8009de0 <malloc>
 8008b72:	4602      	mov	r2, r0
 8008b74:	f8cb 001c 	str.w	r0, [fp, #28]
 8008b78:	b920      	cbnz	r0, 8008b84 <_dtoa_r+0x34>
 8008b7a:	4ba7      	ldr	r3, [pc, #668]	@ (8008e18 <_dtoa_r+0x2c8>)
 8008b7c:	21ef      	movs	r1, #239	@ 0xef
 8008b7e:	48a7      	ldr	r0, [pc, #668]	@ (8008e1c <_dtoa_r+0x2cc>)
 8008b80:	f7ff ff40 	bl	8008a04 <__assert_func>
 8008b84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008b88:	6007      	str	r7, [r0, #0]
 8008b8a:	60c7      	str	r7, [r0, #12]
 8008b8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b90:	6819      	ldr	r1, [r3, #0]
 8008b92:	b159      	cbz	r1, 8008bac <_dtoa_r+0x5c>
 8008b94:	685a      	ldr	r2, [r3, #4]
 8008b96:	604a      	str	r2, [r1, #4]
 8008b98:	2301      	movs	r3, #1
 8008b9a:	4093      	lsls	r3, r2
 8008b9c:	608b      	str	r3, [r1, #8]
 8008b9e:	4658      	mov	r0, fp
 8008ba0:	f001 fa26 	bl	8009ff0 <_Bfree>
 8008ba4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	1e2b      	subs	r3, r5, #0
 8008bae:	bfb9      	ittee	lt
 8008bb0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008bb4:	9303      	strlt	r3, [sp, #12]
 8008bb6:	2300      	movge	r3, #0
 8008bb8:	6033      	strge	r3, [r6, #0]
 8008bba:	9f03      	ldr	r7, [sp, #12]
 8008bbc:	4b98      	ldr	r3, [pc, #608]	@ (8008e20 <_dtoa_r+0x2d0>)
 8008bbe:	bfbc      	itt	lt
 8008bc0:	2201      	movlt	r2, #1
 8008bc2:	6032      	strlt	r2, [r6, #0]
 8008bc4:	43bb      	bics	r3, r7
 8008bc6:	d112      	bne.n	8008bee <_dtoa_r+0x9e>
 8008bc8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008bca:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008bce:	6013      	str	r3, [r2, #0]
 8008bd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bd4:	4323      	orrs	r3, r4
 8008bd6:	f000 854d 	beq.w	8009674 <_dtoa_r+0xb24>
 8008bda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008bdc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008e34 <_dtoa_r+0x2e4>
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 854f 	beq.w	8009684 <_dtoa_r+0xb34>
 8008be6:	f10a 0303 	add.w	r3, sl, #3
 8008bea:	f000 bd49 	b.w	8009680 <_dtoa_r+0xb30>
 8008bee:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	ec51 0b17 	vmov	r0, r1, d7
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008bfe:	f7f7 ff73 	bl	8000ae8 <__aeabi_dcmpeq>
 8008c02:	4680      	mov	r8, r0
 8008c04:	b158      	cbz	r0, 8008c1e <_dtoa_r+0xce>
 8008c06:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008c08:	2301      	movs	r3, #1
 8008c0a:	6013      	str	r3, [r2, #0]
 8008c0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008c0e:	b113      	cbz	r3, 8008c16 <_dtoa_r+0xc6>
 8008c10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008c12:	4b84      	ldr	r3, [pc, #528]	@ (8008e24 <_dtoa_r+0x2d4>)
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008e38 <_dtoa_r+0x2e8>
 8008c1a:	f000 bd33 	b.w	8009684 <_dtoa_r+0xb34>
 8008c1e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008c22:	aa16      	add	r2, sp, #88	@ 0x58
 8008c24:	a917      	add	r1, sp, #92	@ 0x5c
 8008c26:	4658      	mov	r0, fp
 8008c28:	f001 fd86 	bl	800a738 <__d2b>
 8008c2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008c30:	4681      	mov	r9, r0
 8008c32:	2e00      	cmp	r6, #0
 8008c34:	d077      	beq.n	8008d26 <_dtoa_r+0x1d6>
 8008c36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c38:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008c48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008c4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008c50:	4619      	mov	r1, r3
 8008c52:	2200      	movs	r2, #0
 8008c54:	4b74      	ldr	r3, [pc, #464]	@ (8008e28 <_dtoa_r+0x2d8>)
 8008c56:	f7f7 fb27 	bl	80002a8 <__aeabi_dsub>
 8008c5a:	a369      	add	r3, pc, #420	@ (adr r3, 8008e00 <_dtoa_r+0x2b0>)
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	f7f7 fcda 	bl	8000618 <__aeabi_dmul>
 8008c64:	a368      	add	r3, pc, #416	@ (adr r3, 8008e08 <_dtoa_r+0x2b8>)
 8008c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6a:	f7f7 fb1f 	bl	80002ac <__adddf3>
 8008c6e:	4604      	mov	r4, r0
 8008c70:	4630      	mov	r0, r6
 8008c72:	460d      	mov	r5, r1
 8008c74:	f7f7 fc66 	bl	8000544 <__aeabi_i2d>
 8008c78:	a365      	add	r3, pc, #404	@ (adr r3, 8008e10 <_dtoa_r+0x2c0>)
 8008c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7e:	f7f7 fccb 	bl	8000618 <__aeabi_dmul>
 8008c82:	4602      	mov	r2, r0
 8008c84:	460b      	mov	r3, r1
 8008c86:	4620      	mov	r0, r4
 8008c88:	4629      	mov	r1, r5
 8008c8a:	f7f7 fb0f 	bl	80002ac <__adddf3>
 8008c8e:	4604      	mov	r4, r0
 8008c90:	460d      	mov	r5, r1
 8008c92:	f7f7 ff71 	bl	8000b78 <__aeabi_d2iz>
 8008c96:	2200      	movs	r2, #0
 8008c98:	4607      	mov	r7, r0
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	4629      	mov	r1, r5
 8008ca0:	f7f7 ff2c 	bl	8000afc <__aeabi_dcmplt>
 8008ca4:	b140      	cbz	r0, 8008cb8 <_dtoa_r+0x168>
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	f7f7 fc4c 	bl	8000544 <__aeabi_i2d>
 8008cac:	4622      	mov	r2, r4
 8008cae:	462b      	mov	r3, r5
 8008cb0:	f7f7 ff1a 	bl	8000ae8 <__aeabi_dcmpeq>
 8008cb4:	b900      	cbnz	r0, 8008cb8 <_dtoa_r+0x168>
 8008cb6:	3f01      	subs	r7, #1
 8008cb8:	2f16      	cmp	r7, #22
 8008cba:	d851      	bhi.n	8008d60 <_dtoa_r+0x210>
 8008cbc:	4b5b      	ldr	r3, [pc, #364]	@ (8008e2c <_dtoa_r+0x2dc>)
 8008cbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cca:	f7f7 ff17 	bl	8000afc <__aeabi_dcmplt>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d048      	beq.n	8008d64 <_dtoa_r+0x214>
 8008cd2:	3f01      	subs	r7, #1
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	9312      	str	r3, [sp, #72]	@ 0x48
 8008cd8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008cda:	1b9b      	subs	r3, r3, r6
 8008cdc:	1e5a      	subs	r2, r3, #1
 8008cde:	bf44      	itt	mi
 8008ce0:	f1c3 0801 	rsbmi	r8, r3, #1
 8008ce4:	2300      	movmi	r3, #0
 8008ce6:	9208      	str	r2, [sp, #32]
 8008ce8:	bf54      	ite	pl
 8008cea:	f04f 0800 	movpl.w	r8, #0
 8008cee:	9308      	strmi	r3, [sp, #32]
 8008cf0:	2f00      	cmp	r7, #0
 8008cf2:	db39      	blt.n	8008d68 <_dtoa_r+0x218>
 8008cf4:	9b08      	ldr	r3, [sp, #32]
 8008cf6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008cf8:	443b      	add	r3, r7
 8008cfa:	9308      	str	r3, [sp, #32]
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d02:	2b09      	cmp	r3, #9
 8008d04:	d864      	bhi.n	8008dd0 <_dtoa_r+0x280>
 8008d06:	2b05      	cmp	r3, #5
 8008d08:	bfc4      	itt	gt
 8008d0a:	3b04      	subgt	r3, #4
 8008d0c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d10:	f1a3 0302 	sub.w	r3, r3, #2
 8008d14:	bfcc      	ite	gt
 8008d16:	2400      	movgt	r4, #0
 8008d18:	2401      	movle	r4, #1
 8008d1a:	2b03      	cmp	r3, #3
 8008d1c:	d863      	bhi.n	8008de6 <_dtoa_r+0x296>
 8008d1e:	e8df f003 	tbb	[pc, r3]
 8008d22:	372a      	.short	0x372a
 8008d24:	5535      	.short	0x5535
 8008d26:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008d2a:	441e      	add	r6, r3
 8008d2c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008d30:	2b20      	cmp	r3, #32
 8008d32:	bfc1      	itttt	gt
 8008d34:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008d38:	409f      	lslgt	r7, r3
 8008d3a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008d3e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008d42:	bfd6      	itet	le
 8008d44:	f1c3 0320 	rsble	r3, r3, #32
 8008d48:	ea47 0003 	orrgt.w	r0, r7, r3
 8008d4c:	fa04 f003 	lslle.w	r0, r4, r3
 8008d50:	f7f7 fbe8 	bl	8000524 <__aeabi_ui2d>
 8008d54:	2201      	movs	r2, #1
 8008d56:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008d5a:	3e01      	subs	r6, #1
 8008d5c:	9214      	str	r2, [sp, #80]	@ 0x50
 8008d5e:	e777      	b.n	8008c50 <_dtoa_r+0x100>
 8008d60:	2301      	movs	r3, #1
 8008d62:	e7b8      	b.n	8008cd6 <_dtoa_r+0x186>
 8008d64:	9012      	str	r0, [sp, #72]	@ 0x48
 8008d66:	e7b7      	b.n	8008cd8 <_dtoa_r+0x188>
 8008d68:	427b      	negs	r3, r7
 8008d6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	eba8 0807 	sub.w	r8, r8, r7
 8008d72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d74:	e7c4      	b.n	8008d00 <_dtoa_r+0x1b0>
 8008d76:	2300      	movs	r3, #0
 8008d78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	dc35      	bgt.n	8008dec <_dtoa_r+0x29c>
 8008d80:	2301      	movs	r3, #1
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	9307      	str	r3, [sp, #28]
 8008d86:	461a      	mov	r2, r3
 8008d88:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d8a:	e00b      	b.n	8008da4 <_dtoa_r+0x254>
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e7f3      	b.n	8008d78 <_dtoa_r+0x228>
 8008d90:	2300      	movs	r3, #0
 8008d92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d96:	18fb      	adds	r3, r7, r3
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	9307      	str	r3, [sp, #28]
 8008da0:	bfb8      	it	lt
 8008da2:	2301      	movlt	r3, #1
 8008da4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008da8:	2100      	movs	r1, #0
 8008daa:	2204      	movs	r2, #4
 8008dac:	f102 0514 	add.w	r5, r2, #20
 8008db0:	429d      	cmp	r5, r3
 8008db2:	d91f      	bls.n	8008df4 <_dtoa_r+0x2a4>
 8008db4:	6041      	str	r1, [r0, #4]
 8008db6:	4658      	mov	r0, fp
 8008db8:	f001 f8da 	bl	8009f70 <_Balloc>
 8008dbc:	4682      	mov	sl, r0
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	d13c      	bne.n	8008e3c <_dtoa_r+0x2ec>
 8008dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8008e30 <_dtoa_r+0x2e0>)
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	f240 11af 	movw	r1, #431	@ 0x1af
 8008dca:	e6d8      	b.n	8008b7e <_dtoa_r+0x2e>
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e7e0      	b.n	8008d92 <_dtoa_r+0x242>
 8008dd0:	2401      	movs	r4, #1
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dd6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008dd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	9307      	str	r3, [sp, #28]
 8008de0:	2200      	movs	r2, #0
 8008de2:	2312      	movs	r3, #18
 8008de4:	e7d0      	b.n	8008d88 <_dtoa_r+0x238>
 8008de6:	2301      	movs	r3, #1
 8008de8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dea:	e7f5      	b.n	8008dd8 <_dtoa_r+0x288>
 8008dec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dee:	9300      	str	r3, [sp, #0]
 8008df0:	9307      	str	r3, [sp, #28]
 8008df2:	e7d7      	b.n	8008da4 <_dtoa_r+0x254>
 8008df4:	3101      	adds	r1, #1
 8008df6:	0052      	lsls	r2, r2, #1
 8008df8:	e7d8      	b.n	8008dac <_dtoa_r+0x25c>
 8008dfa:	bf00      	nop
 8008dfc:	f3af 8000 	nop.w
 8008e00:	636f4361 	.word	0x636f4361
 8008e04:	3fd287a7 	.word	0x3fd287a7
 8008e08:	8b60c8b3 	.word	0x8b60c8b3
 8008e0c:	3fc68a28 	.word	0x3fc68a28
 8008e10:	509f79fb 	.word	0x509f79fb
 8008e14:	3fd34413 	.word	0x3fd34413
 8008e18:	0800b5eb 	.word	0x0800b5eb
 8008e1c:	0800b602 	.word	0x0800b602
 8008e20:	7ff00000 	.word	0x7ff00000
 8008e24:	0800b572 	.word	0x0800b572
 8008e28:	3ff80000 	.word	0x3ff80000
 8008e2c:	0800b758 	.word	0x0800b758
 8008e30:	0800b65a 	.word	0x0800b65a
 8008e34:	0800b5e7 	.word	0x0800b5e7
 8008e38:	0800b571 	.word	0x0800b571
 8008e3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e40:	6018      	str	r0, [r3, #0]
 8008e42:	9b07      	ldr	r3, [sp, #28]
 8008e44:	2b0e      	cmp	r3, #14
 8008e46:	f200 80a4 	bhi.w	8008f92 <_dtoa_r+0x442>
 8008e4a:	2c00      	cmp	r4, #0
 8008e4c:	f000 80a1 	beq.w	8008f92 <_dtoa_r+0x442>
 8008e50:	2f00      	cmp	r7, #0
 8008e52:	dd33      	ble.n	8008ebc <_dtoa_r+0x36c>
 8008e54:	4bad      	ldr	r3, [pc, #692]	@ (800910c <_dtoa_r+0x5bc>)
 8008e56:	f007 020f 	and.w	r2, r7, #15
 8008e5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e5e:	ed93 7b00 	vldr	d7, [r3]
 8008e62:	05f8      	lsls	r0, r7, #23
 8008e64:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008e68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008e6c:	d516      	bpl.n	8008e9c <_dtoa_r+0x34c>
 8008e6e:	4ba8      	ldr	r3, [pc, #672]	@ (8009110 <_dtoa_r+0x5c0>)
 8008e70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e78:	f7f7 fcf8 	bl	800086c <__aeabi_ddiv>
 8008e7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e80:	f004 040f 	and.w	r4, r4, #15
 8008e84:	2603      	movs	r6, #3
 8008e86:	4da2      	ldr	r5, [pc, #648]	@ (8009110 <_dtoa_r+0x5c0>)
 8008e88:	b954      	cbnz	r4, 8008ea0 <_dtoa_r+0x350>
 8008e8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e92:	f7f7 fceb 	bl	800086c <__aeabi_ddiv>
 8008e96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e9a:	e028      	b.n	8008eee <_dtoa_r+0x39e>
 8008e9c:	2602      	movs	r6, #2
 8008e9e:	e7f2      	b.n	8008e86 <_dtoa_r+0x336>
 8008ea0:	07e1      	lsls	r1, r4, #31
 8008ea2:	d508      	bpl.n	8008eb6 <_dtoa_r+0x366>
 8008ea4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ea8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008eac:	f7f7 fbb4 	bl	8000618 <__aeabi_dmul>
 8008eb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008eb4:	3601      	adds	r6, #1
 8008eb6:	1064      	asrs	r4, r4, #1
 8008eb8:	3508      	adds	r5, #8
 8008eba:	e7e5      	b.n	8008e88 <_dtoa_r+0x338>
 8008ebc:	f000 80d2 	beq.w	8009064 <_dtoa_r+0x514>
 8008ec0:	427c      	negs	r4, r7
 8008ec2:	4b92      	ldr	r3, [pc, #584]	@ (800910c <_dtoa_r+0x5bc>)
 8008ec4:	4d92      	ldr	r5, [pc, #584]	@ (8009110 <_dtoa_r+0x5c0>)
 8008ec6:	f004 020f 	and.w	r2, r4, #15
 8008eca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ed6:	f7f7 fb9f 	bl	8000618 <__aeabi_dmul>
 8008eda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ede:	1124      	asrs	r4, r4, #4
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	2602      	movs	r6, #2
 8008ee4:	2c00      	cmp	r4, #0
 8008ee6:	f040 80b2 	bne.w	800904e <_dtoa_r+0x4fe>
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1d3      	bne.n	8008e96 <_dtoa_r+0x346>
 8008eee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ef0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f000 80b7 	beq.w	8009068 <_dtoa_r+0x518>
 8008efa:	4b86      	ldr	r3, [pc, #536]	@ (8009114 <_dtoa_r+0x5c4>)
 8008efc:	2200      	movs	r2, #0
 8008efe:	4620      	mov	r0, r4
 8008f00:	4629      	mov	r1, r5
 8008f02:	f7f7 fdfb 	bl	8000afc <__aeabi_dcmplt>
 8008f06:	2800      	cmp	r0, #0
 8008f08:	f000 80ae 	beq.w	8009068 <_dtoa_r+0x518>
 8008f0c:	9b07      	ldr	r3, [sp, #28]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 80aa 	beq.w	8009068 <_dtoa_r+0x518>
 8008f14:	9b00      	ldr	r3, [sp, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	dd37      	ble.n	8008f8a <_dtoa_r+0x43a>
 8008f1a:	1e7b      	subs	r3, r7, #1
 8008f1c:	9304      	str	r3, [sp, #16]
 8008f1e:	4620      	mov	r0, r4
 8008f20:	4b7d      	ldr	r3, [pc, #500]	@ (8009118 <_dtoa_r+0x5c8>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	4629      	mov	r1, r5
 8008f26:	f7f7 fb77 	bl	8000618 <__aeabi_dmul>
 8008f2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f2e:	9c00      	ldr	r4, [sp, #0]
 8008f30:	3601      	adds	r6, #1
 8008f32:	4630      	mov	r0, r6
 8008f34:	f7f7 fb06 	bl	8000544 <__aeabi_i2d>
 8008f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f3c:	f7f7 fb6c 	bl	8000618 <__aeabi_dmul>
 8008f40:	4b76      	ldr	r3, [pc, #472]	@ (800911c <_dtoa_r+0x5cc>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	f7f7 f9b2 	bl	80002ac <__adddf3>
 8008f48:	4605      	mov	r5, r0
 8008f4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008f4e:	2c00      	cmp	r4, #0
 8008f50:	f040 808d 	bne.w	800906e <_dtoa_r+0x51e>
 8008f54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f58:	4b71      	ldr	r3, [pc, #452]	@ (8009120 <_dtoa_r+0x5d0>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f7f7 f9a4 	bl	80002a8 <__aeabi_dsub>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f68:	462a      	mov	r2, r5
 8008f6a:	4633      	mov	r3, r6
 8008f6c:	f7f7 fde4 	bl	8000b38 <__aeabi_dcmpgt>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	f040 828b 	bne.w	800948c <_dtoa_r+0x93c>
 8008f76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f7a:	462a      	mov	r2, r5
 8008f7c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008f80:	f7f7 fdbc 	bl	8000afc <__aeabi_dcmplt>
 8008f84:	2800      	cmp	r0, #0
 8008f86:	f040 8128 	bne.w	80091da <_dtoa_r+0x68a>
 8008f8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008f8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008f92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f2c0 815a 	blt.w	800924e <_dtoa_r+0x6fe>
 8008f9a:	2f0e      	cmp	r7, #14
 8008f9c:	f300 8157 	bgt.w	800924e <_dtoa_r+0x6fe>
 8008fa0:	4b5a      	ldr	r3, [pc, #360]	@ (800910c <_dtoa_r+0x5bc>)
 8008fa2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008fa6:	ed93 7b00 	vldr	d7, [r3]
 8008faa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	ed8d 7b00 	vstr	d7, [sp]
 8008fb2:	da03      	bge.n	8008fbc <_dtoa_r+0x46c>
 8008fb4:	9b07      	ldr	r3, [sp, #28]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f340 8101 	ble.w	80091be <_dtoa_r+0x66e>
 8008fbc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008fc0:	4656      	mov	r6, sl
 8008fc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	4629      	mov	r1, r5
 8008fca:	f7f7 fc4f 	bl	800086c <__aeabi_ddiv>
 8008fce:	f7f7 fdd3 	bl	8000b78 <__aeabi_d2iz>
 8008fd2:	4680      	mov	r8, r0
 8008fd4:	f7f7 fab6 	bl	8000544 <__aeabi_i2d>
 8008fd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fdc:	f7f7 fb1c 	bl	8000618 <__aeabi_dmul>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008fec:	f7f7 f95c 	bl	80002a8 <__aeabi_dsub>
 8008ff0:	f806 4b01 	strb.w	r4, [r6], #1
 8008ff4:	9d07      	ldr	r5, [sp, #28]
 8008ff6:	eba6 040a 	sub.w	r4, r6, sl
 8008ffa:	42a5      	cmp	r5, r4
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	460b      	mov	r3, r1
 8009000:	f040 8117 	bne.w	8009232 <_dtoa_r+0x6e2>
 8009004:	f7f7 f952 	bl	80002ac <__adddf3>
 8009008:	e9dd 2300 	ldrd	r2, r3, [sp]
 800900c:	4604      	mov	r4, r0
 800900e:	460d      	mov	r5, r1
 8009010:	f7f7 fd92 	bl	8000b38 <__aeabi_dcmpgt>
 8009014:	2800      	cmp	r0, #0
 8009016:	f040 80f9 	bne.w	800920c <_dtoa_r+0x6bc>
 800901a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800901e:	4620      	mov	r0, r4
 8009020:	4629      	mov	r1, r5
 8009022:	f7f7 fd61 	bl	8000ae8 <__aeabi_dcmpeq>
 8009026:	b118      	cbz	r0, 8009030 <_dtoa_r+0x4e0>
 8009028:	f018 0f01 	tst.w	r8, #1
 800902c:	f040 80ee 	bne.w	800920c <_dtoa_r+0x6bc>
 8009030:	4649      	mov	r1, r9
 8009032:	4658      	mov	r0, fp
 8009034:	f000 ffdc 	bl	8009ff0 <_Bfree>
 8009038:	2300      	movs	r3, #0
 800903a:	7033      	strb	r3, [r6, #0]
 800903c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800903e:	3701      	adds	r7, #1
 8009040:	601f      	str	r7, [r3, #0]
 8009042:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009044:	2b00      	cmp	r3, #0
 8009046:	f000 831d 	beq.w	8009684 <_dtoa_r+0xb34>
 800904a:	601e      	str	r6, [r3, #0]
 800904c:	e31a      	b.n	8009684 <_dtoa_r+0xb34>
 800904e:	07e2      	lsls	r2, r4, #31
 8009050:	d505      	bpl.n	800905e <_dtoa_r+0x50e>
 8009052:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009056:	f7f7 fadf 	bl	8000618 <__aeabi_dmul>
 800905a:	3601      	adds	r6, #1
 800905c:	2301      	movs	r3, #1
 800905e:	1064      	asrs	r4, r4, #1
 8009060:	3508      	adds	r5, #8
 8009062:	e73f      	b.n	8008ee4 <_dtoa_r+0x394>
 8009064:	2602      	movs	r6, #2
 8009066:	e742      	b.n	8008eee <_dtoa_r+0x39e>
 8009068:	9c07      	ldr	r4, [sp, #28]
 800906a:	9704      	str	r7, [sp, #16]
 800906c:	e761      	b.n	8008f32 <_dtoa_r+0x3e2>
 800906e:	4b27      	ldr	r3, [pc, #156]	@ (800910c <_dtoa_r+0x5bc>)
 8009070:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009072:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009076:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800907a:	4454      	add	r4, sl
 800907c:	2900      	cmp	r1, #0
 800907e:	d053      	beq.n	8009128 <_dtoa_r+0x5d8>
 8009080:	4928      	ldr	r1, [pc, #160]	@ (8009124 <_dtoa_r+0x5d4>)
 8009082:	2000      	movs	r0, #0
 8009084:	f7f7 fbf2 	bl	800086c <__aeabi_ddiv>
 8009088:	4633      	mov	r3, r6
 800908a:	462a      	mov	r2, r5
 800908c:	f7f7 f90c 	bl	80002a8 <__aeabi_dsub>
 8009090:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009094:	4656      	mov	r6, sl
 8009096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800909a:	f7f7 fd6d 	bl	8000b78 <__aeabi_d2iz>
 800909e:	4605      	mov	r5, r0
 80090a0:	f7f7 fa50 	bl	8000544 <__aeabi_i2d>
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090ac:	f7f7 f8fc 	bl	80002a8 <__aeabi_dsub>
 80090b0:	3530      	adds	r5, #48	@ 0x30
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090ba:	f806 5b01 	strb.w	r5, [r6], #1
 80090be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80090c2:	f7f7 fd1b 	bl	8000afc <__aeabi_dcmplt>
 80090c6:	2800      	cmp	r0, #0
 80090c8:	d171      	bne.n	80091ae <_dtoa_r+0x65e>
 80090ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090ce:	4911      	ldr	r1, [pc, #68]	@ (8009114 <_dtoa_r+0x5c4>)
 80090d0:	2000      	movs	r0, #0
 80090d2:	f7f7 f8e9 	bl	80002a8 <__aeabi_dsub>
 80090d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80090da:	f7f7 fd0f 	bl	8000afc <__aeabi_dcmplt>
 80090de:	2800      	cmp	r0, #0
 80090e0:	f040 8095 	bne.w	800920e <_dtoa_r+0x6be>
 80090e4:	42a6      	cmp	r6, r4
 80090e6:	f43f af50 	beq.w	8008f8a <_dtoa_r+0x43a>
 80090ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80090ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009118 <_dtoa_r+0x5c8>)
 80090f0:	2200      	movs	r2, #0
 80090f2:	f7f7 fa91 	bl	8000618 <__aeabi_dmul>
 80090f6:	4b08      	ldr	r3, [pc, #32]	@ (8009118 <_dtoa_r+0x5c8>)
 80090f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80090fc:	2200      	movs	r2, #0
 80090fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009102:	f7f7 fa89 	bl	8000618 <__aeabi_dmul>
 8009106:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800910a:	e7c4      	b.n	8009096 <_dtoa_r+0x546>
 800910c:	0800b758 	.word	0x0800b758
 8009110:	0800b730 	.word	0x0800b730
 8009114:	3ff00000 	.word	0x3ff00000
 8009118:	40240000 	.word	0x40240000
 800911c:	401c0000 	.word	0x401c0000
 8009120:	40140000 	.word	0x40140000
 8009124:	3fe00000 	.word	0x3fe00000
 8009128:	4631      	mov	r1, r6
 800912a:	4628      	mov	r0, r5
 800912c:	f7f7 fa74 	bl	8000618 <__aeabi_dmul>
 8009130:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009134:	9415      	str	r4, [sp, #84]	@ 0x54
 8009136:	4656      	mov	r6, sl
 8009138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800913c:	f7f7 fd1c 	bl	8000b78 <__aeabi_d2iz>
 8009140:	4605      	mov	r5, r0
 8009142:	f7f7 f9ff 	bl	8000544 <__aeabi_i2d>
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800914e:	f7f7 f8ab 	bl	80002a8 <__aeabi_dsub>
 8009152:	3530      	adds	r5, #48	@ 0x30
 8009154:	f806 5b01 	strb.w	r5, [r6], #1
 8009158:	4602      	mov	r2, r0
 800915a:	460b      	mov	r3, r1
 800915c:	42a6      	cmp	r6, r4
 800915e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009162:	f04f 0200 	mov.w	r2, #0
 8009166:	d124      	bne.n	80091b2 <_dtoa_r+0x662>
 8009168:	4bac      	ldr	r3, [pc, #688]	@ (800941c <_dtoa_r+0x8cc>)
 800916a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800916e:	f7f7 f89d 	bl	80002ac <__adddf3>
 8009172:	4602      	mov	r2, r0
 8009174:	460b      	mov	r3, r1
 8009176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800917a:	f7f7 fcdd 	bl	8000b38 <__aeabi_dcmpgt>
 800917e:	2800      	cmp	r0, #0
 8009180:	d145      	bne.n	800920e <_dtoa_r+0x6be>
 8009182:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009186:	49a5      	ldr	r1, [pc, #660]	@ (800941c <_dtoa_r+0x8cc>)
 8009188:	2000      	movs	r0, #0
 800918a:	f7f7 f88d 	bl	80002a8 <__aeabi_dsub>
 800918e:	4602      	mov	r2, r0
 8009190:	460b      	mov	r3, r1
 8009192:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009196:	f7f7 fcb1 	bl	8000afc <__aeabi_dcmplt>
 800919a:	2800      	cmp	r0, #0
 800919c:	f43f aef5 	beq.w	8008f8a <_dtoa_r+0x43a>
 80091a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80091a2:	1e73      	subs	r3, r6, #1
 80091a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80091a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80091aa:	2b30      	cmp	r3, #48	@ 0x30
 80091ac:	d0f8      	beq.n	80091a0 <_dtoa_r+0x650>
 80091ae:	9f04      	ldr	r7, [sp, #16]
 80091b0:	e73e      	b.n	8009030 <_dtoa_r+0x4e0>
 80091b2:	4b9b      	ldr	r3, [pc, #620]	@ (8009420 <_dtoa_r+0x8d0>)
 80091b4:	f7f7 fa30 	bl	8000618 <__aeabi_dmul>
 80091b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091bc:	e7bc      	b.n	8009138 <_dtoa_r+0x5e8>
 80091be:	d10c      	bne.n	80091da <_dtoa_r+0x68a>
 80091c0:	4b98      	ldr	r3, [pc, #608]	@ (8009424 <_dtoa_r+0x8d4>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091c8:	f7f7 fa26 	bl	8000618 <__aeabi_dmul>
 80091cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091d0:	f7f7 fca8 	bl	8000b24 <__aeabi_dcmpge>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	f000 8157 	beq.w	8009488 <_dtoa_r+0x938>
 80091da:	2400      	movs	r4, #0
 80091dc:	4625      	mov	r5, r4
 80091de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091e0:	43db      	mvns	r3, r3
 80091e2:	9304      	str	r3, [sp, #16]
 80091e4:	4656      	mov	r6, sl
 80091e6:	2700      	movs	r7, #0
 80091e8:	4621      	mov	r1, r4
 80091ea:	4658      	mov	r0, fp
 80091ec:	f000 ff00 	bl	8009ff0 <_Bfree>
 80091f0:	2d00      	cmp	r5, #0
 80091f2:	d0dc      	beq.n	80091ae <_dtoa_r+0x65e>
 80091f4:	b12f      	cbz	r7, 8009202 <_dtoa_r+0x6b2>
 80091f6:	42af      	cmp	r7, r5
 80091f8:	d003      	beq.n	8009202 <_dtoa_r+0x6b2>
 80091fa:	4639      	mov	r1, r7
 80091fc:	4658      	mov	r0, fp
 80091fe:	f000 fef7 	bl	8009ff0 <_Bfree>
 8009202:	4629      	mov	r1, r5
 8009204:	4658      	mov	r0, fp
 8009206:	f000 fef3 	bl	8009ff0 <_Bfree>
 800920a:	e7d0      	b.n	80091ae <_dtoa_r+0x65e>
 800920c:	9704      	str	r7, [sp, #16]
 800920e:	4633      	mov	r3, r6
 8009210:	461e      	mov	r6, r3
 8009212:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009216:	2a39      	cmp	r2, #57	@ 0x39
 8009218:	d107      	bne.n	800922a <_dtoa_r+0x6da>
 800921a:	459a      	cmp	sl, r3
 800921c:	d1f8      	bne.n	8009210 <_dtoa_r+0x6c0>
 800921e:	9a04      	ldr	r2, [sp, #16]
 8009220:	3201      	adds	r2, #1
 8009222:	9204      	str	r2, [sp, #16]
 8009224:	2230      	movs	r2, #48	@ 0x30
 8009226:	f88a 2000 	strb.w	r2, [sl]
 800922a:	781a      	ldrb	r2, [r3, #0]
 800922c:	3201      	adds	r2, #1
 800922e:	701a      	strb	r2, [r3, #0]
 8009230:	e7bd      	b.n	80091ae <_dtoa_r+0x65e>
 8009232:	4b7b      	ldr	r3, [pc, #492]	@ (8009420 <_dtoa_r+0x8d0>)
 8009234:	2200      	movs	r2, #0
 8009236:	f7f7 f9ef 	bl	8000618 <__aeabi_dmul>
 800923a:	2200      	movs	r2, #0
 800923c:	2300      	movs	r3, #0
 800923e:	4604      	mov	r4, r0
 8009240:	460d      	mov	r5, r1
 8009242:	f7f7 fc51 	bl	8000ae8 <__aeabi_dcmpeq>
 8009246:	2800      	cmp	r0, #0
 8009248:	f43f aebb 	beq.w	8008fc2 <_dtoa_r+0x472>
 800924c:	e6f0      	b.n	8009030 <_dtoa_r+0x4e0>
 800924e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009250:	2a00      	cmp	r2, #0
 8009252:	f000 80db 	beq.w	800940c <_dtoa_r+0x8bc>
 8009256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009258:	2a01      	cmp	r2, #1
 800925a:	f300 80bf 	bgt.w	80093dc <_dtoa_r+0x88c>
 800925e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009260:	2a00      	cmp	r2, #0
 8009262:	f000 80b7 	beq.w	80093d4 <_dtoa_r+0x884>
 8009266:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800926a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800926c:	4646      	mov	r6, r8
 800926e:	9a08      	ldr	r2, [sp, #32]
 8009270:	2101      	movs	r1, #1
 8009272:	441a      	add	r2, r3
 8009274:	4658      	mov	r0, fp
 8009276:	4498      	add	r8, r3
 8009278:	9208      	str	r2, [sp, #32]
 800927a:	f000 ffb7 	bl	800a1ec <__i2b>
 800927e:	4605      	mov	r5, r0
 8009280:	b15e      	cbz	r6, 800929a <_dtoa_r+0x74a>
 8009282:	9b08      	ldr	r3, [sp, #32]
 8009284:	2b00      	cmp	r3, #0
 8009286:	dd08      	ble.n	800929a <_dtoa_r+0x74a>
 8009288:	42b3      	cmp	r3, r6
 800928a:	9a08      	ldr	r2, [sp, #32]
 800928c:	bfa8      	it	ge
 800928e:	4633      	movge	r3, r6
 8009290:	eba8 0803 	sub.w	r8, r8, r3
 8009294:	1af6      	subs	r6, r6, r3
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	9308      	str	r3, [sp, #32]
 800929a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800929c:	b1f3      	cbz	r3, 80092dc <_dtoa_r+0x78c>
 800929e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 80b7 	beq.w	8009414 <_dtoa_r+0x8c4>
 80092a6:	b18c      	cbz	r4, 80092cc <_dtoa_r+0x77c>
 80092a8:	4629      	mov	r1, r5
 80092aa:	4622      	mov	r2, r4
 80092ac:	4658      	mov	r0, fp
 80092ae:	f001 f85d 	bl	800a36c <__pow5mult>
 80092b2:	464a      	mov	r2, r9
 80092b4:	4601      	mov	r1, r0
 80092b6:	4605      	mov	r5, r0
 80092b8:	4658      	mov	r0, fp
 80092ba:	f000 ffad 	bl	800a218 <__multiply>
 80092be:	4649      	mov	r1, r9
 80092c0:	9004      	str	r0, [sp, #16]
 80092c2:	4658      	mov	r0, fp
 80092c4:	f000 fe94 	bl	8009ff0 <_Bfree>
 80092c8:	9b04      	ldr	r3, [sp, #16]
 80092ca:	4699      	mov	r9, r3
 80092cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092ce:	1b1a      	subs	r2, r3, r4
 80092d0:	d004      	beq.n	80092dc <_dtoa_r+0x78c>
 80092d2:	4649      	mov	r1, r9
 80092d4:	4658      	mov	r0, fp
 80092d6:	f001 f849 	bl	800a36c <__pow5mult>
 80092da:	4681      	mov	r9, r0
 80092dc:	2101      	movs	r1, #1
 80092de:	4658      	mov	r0, fp
 80092e0:	f000 ff84 	bl	800a1ec <__i2b>
 80092e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092e6:	4604      	mov	r4, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 81cf 	beq.w	800968c <_dtoa_r+0xb3c>
 80092ee:	461a      	mov	r2, r3
 80092f0:	4601      	mov	r1, r0
 80092f2:	4658      	mov	r0, fp
 80092f4:	f001 f83a 	bl	800a36c <__pow5mult>
 80092f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	4604      	mov	r4, r0
 80092fe:	f300 8095 	bgt.w	800942c <_dtoa_r+0x8dc>
 8009302:	9b02      	ldr	r3, [sp, #8]
 8009304:	2b00      	cmp	r3, #0
 8009306:	f040 8087 	bne.w	8009418 <_dtoa_r+0x8c8>
 800930a:	9b03      	ldr	r3, [sp, #12]
 800930c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009310:	2b00      	cmp	r3, #0
 8009312:	f040 8089 	bne.w	8009428 <_dtoa_r+0x8d8>
 8009316:	9b03      	ldr	r3, [sp, #12]
 8009318:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800931c:	0d1b      	lsrs	r3, r3, #20
 800931e:	051b      	lsls	r3, r3, #20
 8009320:	b12b      	cbz	r3, 800932e <_dtoa_r+0x7de>
 8009322:	9b08      	ldr	r3, [sp, #32]
 8009324:	3301      	adds	r3, #1
 8009326:	9308      	str	r3, [sp, #32]
 8009328:	f108 0801 	add.w	r8, r8, #1
 800932c:	2301      	movs	r3, #1
 800932e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009330:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009332:	2b00      	cmp	r3, #0
 8009334:	f000 81b0 	beq.w	8009698 <_dtoa_r+0xb48>
 8009338:	6923      	ldr	r3, [r4, #16]
 800933a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800933e:	6918      	ldr	r0, [r3, #16]
 8009340:	f000 ff08 	bl	800a154 <__hi0bits>
 8009344:	f1c0 0020 	rsb	r0, r0, #32
 8009348:	9b08      	ldr	r3, [sp, #32]
 800934a:	4418      	add	r0, r3
 800934c:	f010 001f 	ands.w	r0, r0, #31
 8009350:	d077      	beq.n	8009442 <_dtoa_r+0x8f2>
 8009352:	f1c0 0320 	rsb	r3, r0, #32
 8009356:	2b04      	cmp	r3, #4
 8009358:	dd6b      	ble.n	8009432 <_dtoa_r+0x8e2>
 800935a:	9b08      	ldr	r3, [sp, #32]
 800935c:	f1c0 001c 	rsb	r0, r0, #28
 8009360:	4403      	add	r3, r0
 8009362:	4480      	add	r8, r0
 8009364:	4406      	add	r6, r0
 8009366:	9308      	str	r3, [sp, #32]
 8009368:	f1b8 0f00 	cmp.w	r8, #0
 800936c:	dd05      	ble.n	800937a <_dtoa_r+0x82a>
 800936e:	4649      	mov	r1, r9
 8009370:	4642      	mov	r2, r8
 8009372:	4658      	mov	r0, fp
 8009374:	f001 f854 	bl	800a420 <__lshift>
 8009378:	4681      	mov	r9, r0
 800937a:	9b08      	ldr	r3, [sp, #32]
 800937c:	2b00      	cmp	r3, #0
 800937e:	dd05      	ble.n	800938c <_dtoa_r+0x83c>
 8009380:	4621      	mov	r1, r4
 8009382:	461a      	mov	r2, r3
 8009384:	4658      	mov	r0, fp
 8009386:	f001 f84b 	bl	800a420 <__lshift>
 800938a:	4604      	mov	r4, r0
 800938c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800938e:	2b00      	cmp	r3, #0
 8009390:	d059      	beq.n	8009446 <_dtoa_r+0x8f6>
 8009392:	4621      	mov	r1, r4
 8009394:	4648      	mov	r0, r9
 8009396:	f001 f8af 	bl	800a4f8 <__mcmp>
 800939a:	2800      	cmp	r0, #0
 800939c:	da53      	bge.n	8009446 <_dtoa_r+0x8f6>
 800939e:	1e7b      	subs	r3, r7, #1
 80093a0:	9304      	str	r3, [sp, #16]
 80093a2:	4649      	mov	r1, r9
 80093a4:	2300      	movs	r3, #0
 80093a6:	220a      	movs	r2, #10
 80093a8:	4658      	mov	r0, fp
 80093aa:	f000 fe43 	bl	800a034 <__multadd>
 80093ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093b0:	4681      	mov	r9, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f000 8172 	beq.w	800969c <_dtoa_r+0xb4c>
 80093b8:	2300      	movs	r3, #0
 80093ba:	4629      	mov	r1, r5
 80093bc:	220a      	movs	r2, #10
 80093be:	4658      	mov	r0, fp
 80093c0:	f000 fe38 	bl	800a034 <__multadd>
 80093c4:	9b00      	ldr	r3, [sp, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	4605      	mov	r5, r0
 80093ca:	dc67      	bgt.n	800949c <_dtoa_r+0x94c>
 80093cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	dc41      	bgt.n	8009456 <_dtoa_r+0x906>
 80093d2:	e063      	b.n	800949c <_dtoa_r+0x94c>
 80093d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80093d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80093da:	e746      	b.n	800926a <_dtoa_r+0x71a>
 80093dc:	9b07      	ldr	r3, [sp, #28]
 80093de:	1e5c      	subs	r4, r3, #1
 80093e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093e2:	42a3      	cmp	r3, r4
 80093e4:	bfbf      	itttt	lt
 80093e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80093e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80093ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80093ec:	1ae3      	sublt	r3, r4, r3
 80093ee:	bfb4      	ite	lt
 80093f0:	18d2      	addlt	r2, r2, r3
 80093f2:	1b1c      	subge	r4, r3, r4
 80093f4:	9b07      	ldr	r3, [sp, #28]
 80093f6:	bfbc      	itt	lt
 80093f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80093fa:	2400      	movlt	r4, #0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	bfb5      	itete	lt
 8009400:	eba8 0603 	sublt.w	r6, r8, r3
 8009404:	9b07      	ldrge	r3, [sp, #28]
 8009406:	2300      	movlt	r3, #0
 8009408:	4646      	movge	r6, r8
 800940a:	e730      	b.n	800926e <_dtoa_r+0x71e>
 800940c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800940e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009410:	4646      	mov	r6, r8
 8009412:	e735      	b.n	8009280 <_dtoa_r+0x730>
 8009414:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009416:	e75c      	b.n	80092d2 <_dtoa_r+0x782>
 8009418:	2300      	movs	r3, #0
 800941a:	e788      	b.n	800932e <_dtoa_r+0x7de>
 800941c:	3fe00000 	.word	0x3fe00000
 8009420:	40240000 	.word	0x40240000
 8009424:	40140000 	.word	0x40140000
 8009428:	9b02      	ldr	r3, [sp, #8]
 800942a:	e780      	b.n	800932e <_dtoa_r+0x7de>
 800942c:	2300      	movs	r3, #0
 800942e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009430:	e782      	b.n	8009338 <_dtoa_r+0x7e8>
 8009432:	d099      	beq.n	8009368 <_dtoa_r+0x818>
 8009434:	9a08      	ldr	r2, [sp, #32]
 8009436:	331c      	adds	r3, #28
 8009438:	441a      	add	r2, r3
 800943a:	4498      	add	r8, r3
 800943c:	441e      	add	r6, r3
 800943e:	9208      	str	r2, [sp, #32]
 8009440:	e792      	b.n	8009368 <_dtoa_r+0x818>
 8009442:	4603      	mov	r3, r0
 8009444:	e7f6      	b.n	8009434 <_dtoa_r+0x8e4>
 8009446:	9b07      	ldr	r3, [sp, #28]
 8009448:	9704      	str	r7, [sp, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	dc20      	bgt.n	8009490 <_dtoa_r+0x940>
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009452:	2b02      	cmp	r3, #2
 8009454:	dd1e      	ble.n	8009494 <_dtoa_r+0x944>
 8009456:	9b00      	ldr	r3, [sp, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	f47f aec0 	bne.w	80091de <_dtoa_r+0x68e>
 800945e:	4621      	mov	r1, r4
 8009460:	2205      	movs	r2, #5
 8009462:	4658      	mov	r0, fp
 8009464:	f000 fde6 	bl	800a034 <__multadd>
 8009468:	4601      	mov	r1, r0
 800946a:	4604      	mov	r4, r0
 800946c:	4648      	mov	r0, r9
 800946e:	f001 f843 	bl	800a4f8 <__mcmp>
 8009472:	2800      	cmp	r0, #0
 8009474:	f77f aeb3 	ble.w	80091de <_dtoa_r+0x68e>
 8009478:	4656      	mov	r6, sl
 800947a:	2331      	movs	r3, #49	@ 0x31
 800947c:	f806 3b01 	strb.w	r3, [r6], #1
 8009480:	9b04      	ldr	r3, [sp, #16]
 8009482:	3301      	adds	r3, #1
 8009484:	9304      	str	r3, [sp, #16]
 8009486:	e6ae      	b.n	80091e6 <_dtoa_r+0x696>
 8009488:	9c07      	ldr	r4, [sp, #28]
 800948a:	9704      	str	r7, [sp, #16]
 800948c:	4625      	mov	r5, r4
 800948e:	e7f3      	b.n	8009478 <_dtoa_r+0x928>
 8009490:	9b07      	ldr	r3, [sp, #28]
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009496:	2b00      	cmp	r3, #0
 8009498:	f000 8104 	beq.w	80096a4 <_dtoa_r+0xb54>
 800949c:	2e00      	cmp	r6, #0
 800949e:	dd05      	ble.n	80094ac <_dtoa_r+0x95c>
 80094a0:	4629      	mov	r1, r5
 80094a2:	4632      	mov	r2, r6
 80094a4:	4658      	mov	r0, fp
 80094a6:	f000 ffbb 	bl	800a420 <__lshift>
 80094aa:	4605      	mov	r5, r0
 80094ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d05a      	beq.n	8009568 <_dtoa_r+0xa18>
 80094b2:	6869      	ldr	r1, [r5, #4]
 80094b4:	4658      	mov	r0, fp
 80094b6:	f000 fd5b 	bl	8009f70 <_Balloc>
 80094ba:	4606      	mov	r6, r0
 80094bc:	b928      	cbnz	r0, 80094ca <_dtoa_r+0x97a>
 80094be:	4b84      	ldr	r3, [pc, #528]	@ (80096d0 <_dtoa_r+0xb80>)
 80094c0:	4602      	mov	r2, r0
 80094c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80094c6:	f7ff bb5a 	b.w	8008b7e <_dtoa_r+0x2e>
 80094ca:	692a      	ldr	r2, [r5, #16]
 80094cc:	3202      	adds	r2, #2
 80094ce:	0092      	lsls	r2, r2, #2
 80094d0:	f105 010c 	add.w	r1, r5, #12
 80094d4:	300c      	adds	r0, #12
 80094d6:	f7ff fa76 	bl	80089c6 <memcpy>
 80094da:	2201      	movs	r2, #1
 80094dc:	4631      	mov	r1, r6
 80094de:	4658      	mov	r0, fp
 80094e0:	f000 ff9e 	bl	800a420 <__lshift>
 80094e4:	f10a 0301 	add.w	r3, sl, #1
 80094e8:	9307      	str	r3, [sp, #28]
 80094ea:	9b00      	ldr	r3, [sp, #0]
 80094ec:	4453      	add	r3, sl
 80094ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094f0:	9b02      	ldr	r3, [sp, #8]
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	462f      	mov	r7, r5
 80094f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80094fa:	4605      	mov	r5, r0
 80094fc:	9b07      	ldr	r3, [sp, #28]
 80094fe:	4621      	mov	r1, r4
 8009500:	3b01      	subs	r3, #1
 8009502:	4648      	mov	r0, r9
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	f7ff fa9b 	bl	8008a40 <quorem>
 800950a:	4639      	mov	r1, r7
 800950c:	9002      	str	r0, [sp, #8]
 800950e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009512:	4648      	mov	r0, r9
 8009514:	f000 fff0 	bl	800a4f8 <__mcmp>
 8009518:	462a      	mov	r2, r5
 800951a:	9008      	str	r0, [sp, #32]
 800951c:	4621      	mov	r1, r4
 800951e:	4658      	mov	r0, fp
 8009520:	f001 f806 	bl	800a530 <__mdiff>
 8009524:	68c2      	ldr	r2, [r0, #12]
 8009526:	4606      	mov	r6, r0
 8009528:	bb02      	cbnz	r2, 800956c <_dtoa_r+0xa1c>
 800952a:	4601      	mov	r1, r0
 800952c:	4648      	mov	r0, r9
 800952e:	f000 ffe3 	bl	800a4f8 <__mcmp>
 8009532:	4602      	mov	r2, r0
 8009534:	4631      	mov	r1, r6
 8009536:	4658      	mov	r0, fp
 8009538:	920e      	str	r2, [sp, #56]	@ 0x38
 800953a:	f000 fd59 	bl	8009ff0 <_Bfree>
 800953e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009540:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009542:	9e07      	ldr	r6, [sp, #28]
 8009544:	ea43 0102 	orr.w	r1, r3, r2
 8009548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800954a:	4319      	orrs	r1, r3
 800954c:	d110      	bne.n	8009570 <_dtoa_r+0xa20>
 800954e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009552:	d029      	beq.n	80095a8 <_dtoa_r+0xa58>
 8009554:	9b08      	ldr	r3, [sp, #32]
 8009556:	2b00      	cmp	r3, #0
 8009558:	dd02      	ble.n	8009560 <_dtoa_r+0xa10>
 800955a:	9b02      	ldr	r3, [sp, #8]
 800955c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009560:	9b00      	ldr	r3, [sp, #0]
 8009562:	f883 8000 	strb.w	r8, [r3]
 8009566:	e63f      	b.n	80091e8 <_dtoa_r+0x698>
 8009568:	4628      	mov	r0, r5
 800956a:	e7bb      	b.n	80094e4 <_dtoa_r+0x994>
 800956c:	2201      	movs	r2, #1
 800956e:	e7e1      	b.n	8009534 <_dtoa_r+0x9e4>
 8009570:	9b08      	ldr	r3, [sp, #32]
 8009572:	2b00      	cmp	r3, #0
 8009574:	db04      	blt.n	8009580 <_dtoa_r+0xa30>
 8009576:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009578:	430b      	orrs	r3, r1
 800957a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800957c:	430b      	orrs	r3, r1
 800957e:	d120      	bne.n	80095c2 <_dtoa_r+0xa72>
 8009580:	2a00      	cmp	r2, #0
 8009582:	dded      	ble.n	8009560 <_dtoa_r+0xa10>
 8009584:	4649      	mov	r1, r9
 8009586:	2201      	movs	r2, #1
 8009588:	4658      	mov	r0, fp
 800958a:	f000 ff49 	bl	800a420 <__lshift>
 800958e:	4621      	mov	r1, r4
 8009590:	4681      	mov	r9, r0
 8009592:	f000 ffb1 	bl	800a4f8 <__mcmp>
 8009596:	2800      	cmp	r0, #0
 8009598:	dc03      	bgt.n	80095a2 <_dtoa_r+0xa52>
 800959a:	d1e1      	bne.n	8009560 <_dtoa_r+0xa10>
 800959c:	f018 0f01 	tst.w	r8, #1
 80095a0:	d0de      	beq.n	8009560 <_dtoa_r+0xa10>
 80095a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80095a6:	d1d8      	bne.n	800955a <_dtoa_r+0xa0a>
 80095a8:	9a00      	ldr	r2, [sp, #0]
 80095aa:	2339      	movs	r3, #57	@ 0x39
 80095ac:	7013      	strb	r3, [r2, #0]
 80095ae:	4633      	mov	r3, r6
 80095b0:	461e      	mov	r6, r3
 80095b2:	3b01      	subs	r3, #1
 80095b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80095b8:	2a39      	cmp	r2, #57	@ 0x39
 80095ba:	d052      	beq.n	8009662 <_dtoa_r+0xb12>
 80095bc:	3201      	adds	r2, #1
 80095be:	701a      	strb	r2, [r3, #0]
 80095c0:	e612      	b.n	80091e8 <_dtoa_r+0x698>
 80095c2:	2a00      	cmp	r2, #0
 80095c4:	dd07      	ble.n	80095d6 <_dtoa_r+0xa86>
 80095c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80095ca:	d0ed      	beq.n	80095a8 <_dtoa_r+0xa58>
 80095cc:	9a00      	ldr	r2, [sp, #0]
 80095ce:	f108 0301 	add.w	r3, r8, #1
 80095d2:	7013      	strb	r3, [r2, #0]
 80095d4:	e608      	b.n	80091e8 <_dtoa_r+0x698>
 80095d6:	9b07      	ldr	r3, [sp, #28]
 80095d8:	9a07      	ldr	r2, [sp, #28]
 80095da:	f803 8c01 	strb.w	r8, [r3, #-1]
 80095de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d028      	beq.n	8009636 <_dtoa_r+0xae6>
 80095e4:	4649      	mov	r1, r9
 80095e6:	2300      	movs	r3, #0
 80095e8:	220a      	movs	r2, #10
 80095ea:	4658      	mov	r0, fp
 80095ec:	f000 fd22 	bl	800a034 <__multadd>
 80095f0:	42af      	cmp	r7, r5
 80095f2:	4681      	mov	r9, r0
 80095f4:	f04f 0300 	mov.w	r3, #0
 80095f8:	f04f 020a 	mov.w	r2, #10
 80095fc:	4639      	mov	r1, r7
 80095fe:	4658      	mov	r0, fp
 8009600:	d107      	bne.n	8009612 <_dtoa_r+0xac2>
 8009602:	f000 fd17 	bl	800a034 <__multadd>
 8009606:	4607      	mov	r7, r0
 8009608:	4605      	mov	r5, r0
 800960a:	9b07      	ldr	r3, [sp, #28]
 800960c:	3301      	adds	r3, #1
 800960e:	9307      	str	r3, [sp, #28]
 8009610:	e774      	b.n	80094fc <_dtoa_r+0x9ac>
 8009612:	f000 fd0f 	bl	800a034 <__multadd>
 8009616:	4629      	mov	r1, r5
 8009618:	4607      	mov	r7, r0
 800961a:	2300      	movs	r3, #0
 800961c:	220a      	movs	r2, #10
 800961e:	4658      	mov	r0, fp
 8009620:	f000 fd08 	bl	800a034 <__multadd>
 8009624:	4605      	mov	r5, r0
 8009626:	e7f0      	b.n	800960a <_dtoa_r+0xaba>
 8009628:	9b00      	ldr	r3, [sp, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	bfcc      	ite	gt
 800962e:	461e      	movgt	r6, r3
 8009630:	2601      	movle	r6, #1
 8009632:	4456      	add	r6, sl
 8009634:	2700      	movs	r7, #0
 8009636:	4649      	mov	r1, r9
 8009638:	2201      	movs	r2, #1
 800963a:	4658      	mov	r0, fp
 800963c:	f000 fef0 	bl	800a420 <__lshift>
 8009640:	4621      	mov	r1, r4
 8009642:	4681      	mov	r9, r0
 8009644:	f000 ff58 	bl	800a4f8 <__mcmp>
 8009648:	2800      	cmp	r0, #0
 800964a:	dcb0      	bgt.n	80095ae <_dtoa_r+0xa5e>
 800964c:	d102      	bne.n	8009654 <_dtoa_r+0xb04>
 800964e:	f018 0f01 	tst.w	r8, #1
 8009652:	d1ac      	bne.n	80095ae <_dtoa_r+0xa5e>
 8009654:	4633      	mov	r3, r6
 8009656:	461e      	mov	r6, r3
 8009658:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800965c:	2a30      	cmp	r2, #48	@ 0x30
 800965e:	d0fa      	beq.n	8009656 <_dtoa_r+0xb06>
 8009660:	e5c2      	b.n	80091e8 <_dtoa_r+0x698>
 8009662:	459a      	cmp	sl, r3
 8009664:	d1a4      	bne.n	80095b0 <_dtoa_r+0xa60>
 8009666:	9b04      	ldr	r3, [sp, #16]
 8009668:	3301      	adds	r3, #1
 800966a:	9304      	str	r3, [sp, #16]
 800966c:	2331      	movs	r3, #49	@ 0x31
 800966e:	f88a 3000 	strb.w	r3, [sl]
 8009672:	e5b9      	b.n	80091e8 <_dtoa_r+0x698>
 8009674:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009676:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80096d4 <_dtoa_r+0xb84>
 800967a:	b11b      	cbz	r3, 8009684 <_dtoa_r+0xb34>
 800967c:	f10a 0308 	add.w	r3, sl, #8
 8009680:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009682:	6013      	str	r3, [r2, #0]
 8009684:	4650      	mov	r0, sl
 8009686:	b019      	add	sp, #100	@ 0x64
 8009688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800968c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800968e:	2b01      	cmp	r3, #1
 8009690:	f77f ae37 	ble.w	8009302 <_dtoa_r+0x7b2>
 8009694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009696:	930a      	str	r3, [sp, #40]	@ 0x28
 8009698:	2001      	movs	r0, #1
 800969a:	e655      	b.n	8009348 <_dtoa_r+0x7f8>
 800969c:	9b00      	ldr	r3, [sp, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f77f aed6 	ble.w	8009450 <_dtoa_r+0x900>
 80096a4:	4656      	mov	r6, sl
 80096a6:	4621      	mov	r1, r4
 80096a8:	4648      	mov	r0, r9
 80096aa:	f7ff f9c9 	bl	8008a40 <quorem>
 80096ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80096b2:	f806 8b01 	strb.w	r8, [r6], #1
 80096b6:	9b00      	ldr	r3, [sp, #0]
 80096b8:	eba6 020a 	sub.w	r2, r6, sl
 80096bc:	4293      	cmp	r3, r2
 80096be:	ddb3      	ble.n	8009628 <_dtoa_r+0xad8>
 80096c0:	4649      	mov	r1, r9
 80096c2:	2300      	movs	r3, #0
 80096c4:	220a      	movs	r2, #10
 80096c6:	4658      	mov	r0, fp
 80096c8:	f000 fcb4 	bl	800a034 <__multadd>
 80096cc:	4681      	mov	r9, r0
 80096ce:	e7ea      	b.n	80096a6 <_dtoa_r+0xb56>
 80096d0:	0800b65a 	.word	0x0800b65a
 80096d4:	0800b5de 	.word	0x0800b5de

080096d8 <_free_r>:
 80096d8:	b538      	push	{r3, r4, r5, lr}
 80096da:	4605      	mov	r5, r0
 80096dc:	2900      	cmp	r1, #0
 80096de:	d041      	beq.n	8009764 <_free_r+0x8c>
 80096e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e4:	1f0c      	subs	r4, r1, #4
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	bfb8      	it	lt
 80096ea:	18e4      	addlt	r4, r4, r3
 80096ec:	f000 fc34 	bl	8009f58 <__malloc_lock>
 80096f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009768 <_free_r+0x90>)
 80096f2:	6813      	ldr	r3, [r2, #0]
 80096f4:	b933      	cbnz	r3, 8009704 <_free_r+0x2c>
 80096f6:	6063      	str	r3, [r4, #4]
 80096f8:	6014      	str	r4, [r2, #0]
 80096fa:	4628      	mov	r0, r5
 80096fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009700:	f000 bc30 	b.w	8009f64 <__malloc_unlock>
 8009704:	42a3      	cmp	r3, r4
 8009706:	d908      	bls.n	800971a <_free_r+0x42>
 8009708:	6820      	ldr	r0, [r4, #0]
 800970a:	1821      	adds	r1, r4, r0
 800970c:	428b      	cmp	r3, r1
 800970e:	bf01      	itttt	eq
 8009710:	6819      	ldreq	r1, [r3, #0]
 8009712:	685b      	ldreq	r3, [r3, #4]
 8009714:	1809      	addeq	r1, r1, r0
 8009716:	6021      	streq	r1, [r4, #0]
 8009718:	e7ed      	b.n	80096f6 <_free_r+0x1e>
 800971a:	461a      	mov	r2, r3
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	b10b      	cbz	r3, 8009724 <_free_r+0x4c>
 8009720:	42a3      	cmp	r3, r4
 8009722:	d9fa      	bls.n	800971a <_free_r+0x42>
 8009724:	6811      	ldr	r1, [r2, #0]
 8009726:	1850      	adds	r0, r2, r1
 8009728:	42a0      	cmp	r0, r4
 800972a:	d10b      	bne.n	8009744 <_free_r+0x6c>
 800972c:	6820      	ldr	r0, [r4, #0]
 800972e:	4401      	add	r1, r0
 8009730:	1850      	adds	r0, r2, r1
 8009732:	4283      	cmp	r3, r0
 8009734:	6011      	str	r1, [r2, #0]
 8009736:	d1e0      	bne.n	80096fa <_free_r+0x22>
 8009738:	6818      	ldr	r0, [r3, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	6053      	str	r3, [r2, #4]
 800973e:	4408      	add	r0, r1
 8009740:	6010      	str	r0, [r2, #0]
 8009742:	e7da      	b.n	80096fa <_free_r+0x22>
 8009744:	d902      	bls.n	800974c <_free_r+0x74>
 8009746:	230c      	movs	r3, #12
 8009748:	602b      	str	r3, [r5, #0]
 800974a:	e7d6      	b.n	80096fa <_free_r+0x22>
 800974c:	6820      	ldr	r0, [r4, #0]
 800974e:	1821      	adds	r1, r4, r0
 8009750:	428b      	cmp	r3, r1
 8009752:	bf04      	itt	eq
 8009754:	6819      	ldreq	r1, [r3, #0]
 8009756:	685b      	ldreq	r3, [r3, #4]
 8009758:	6063      	str	r3, [r4, #4]
 800975a:	bf04      	itt	eq
 800975c:	1809      	addeq	r1, r1, r0
 800975e:	6021      	streq	r1, [r4, #0]
 8009760:	6054      	str	r4, [r2, #4]
 8009762:	e7ca      	b.n	80096fa <_free_r+0x22>
 8009764:	bd38      	pop	{r3, r4, r5, pc}
 8009766:	bf00      	nop
 8009768:	200051a0 	.word	0x200051a0

0800976c <rshift>:
 800976c:	6903      	ldr	r3, [r0, #16]
 800976e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009772:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009776:	ea4f 1261 	mov.w	r2, r1, asr #5
 800977a:	f100 0414 	add.w	r4, r0, #20
 800977e:	dd45      	ble.n	800980c <rshift+0xa0>
 8009780:	f011 011f 	ands.w	r1, r1, #31
 8009784:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009788:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800978c:	d10c      	bne.n	80097a8 <rshift+0x3c>
 800978e:	f100 0710 	add.w	r7, r0, #16
 8009792:	4629      	mov	r1, r5
 8009794:	42b1      	cmp	r1, r6
 8009796:	d334      	bcc.n	8009802 <rshift+0x96>
 8009798:	1a9b      	subs	r3, r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	1eea      	subs	r2, r5, #3
 800979e:	4296      	cmp	r6, r2
 80097a0:	bf38      	it	cc
 80097a2:	2300      	movcc	r3, #0
 80097a4:	4423      	add	r3, r4
 80097a6:	e015      	b.n	80097d4 <rshift+0x68>
 80097a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80097ac:	f1c1 0820 	rsb	r8, r1, #32
 80097b0:	40cf      	lsrs	r7, r1
 80097b2:	f105 0e04 	add.w	lr, r5, #4
 80097b6:	46a1      	mov	r9, r4
 80097b8:	4576      	cmp	r6, lr
 80097ba:	46f4      	mov	ip, lr
 80097bc:	d815      	bhi.n	80097ea <rshift+0x7e>
 80097be:	1a9a      	subs	r2, r3, r2
 80097c0:	0092      	lsls	r2, r2, #2
 80097c2:	3a04      	subs	r2, #4
 80097c4:	3501      	adds	r5, #1
 80097c6:	42ae      	cmp	r6, r5
 80097c8:	bf38      	it	cc
 80097ca:	2200      	movcc	r2, #0
 80097cc:	18a3      	adds	r3, r4, r2
 80097ce:	50a7      	str	r7, [r4, r2]
 80097d0:	b107      	cbz	r7, 80097d4 <rshift+0x68>
 80097d2:	3304      	adds	r3, #4
 80097d4:	1b1a      	subs	r2, r3, r4
 80097d6:	42a3      	cmp	r3, r4
 80097d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80097dc:	bf08      	it	eq
 80097de:	2300      	moveq	r3, #0
 80097e0:	6102      	str	r2, [r0, #16]
 80097e2:	bf08      	it	eq
 80097e4:	6143      	streq	r3, [r0, #20]
 80097e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097ea:	f8dc c000 	ldr.w	ip, [ip]
 80097ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80097f2:	ea4c 0707 	orr.w	r7, ip, r7
 80097f6:	f849 7b04 	str.w	r7, [r9], #4
 80097fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80097fe:	40cf      	lsrs	r7, r1
 8009800:	e7da      	b.n	80097b8 <rshift+0x4c>
 8009802:	f851 cb04 	ldr.w	ip, [r1], #4
 8009806:	f847 cf04 	str.w	ip, [r7, #4]!
 800980a:	e7c3      	b.n	8009794 <rshift+0x28>
 800980c:	4623      	mov	r3, r4
 800980e:	e7e1      	b.n	80097d4 <rshift+0x68>

08009810 <__hexdig_fun>:
 8009810:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009814:	2b09      	cmp	r3, #9
 8009816:	d802      	bhi.n	800981e <__hexdig_fun+0xe>
 8009818:	3820      	subs	r0, #32
 800981a:	b2c0      	uxtb	r0, r0
 800981c:	4770      	bx	lr
 800981e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009822:	2b05      	cmp	r3, #5
 8009824:	d801      	bhi.n	800982a <__hexdig_fun+0x1a>
 8009826:	3847      	subs	r0, #71	@ 0x47
 8009828:	e7f7      	b.n	800981a <__hexdig_fun+0xa>
 800982a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800982e:	2b05      	cmp	r3, #5
 8009830:	d801      	bhi.n	8009836 <__hexdig_fun+0x26>
 8009832:	3827      	subs	r0, #39	@ 0x27
 8009834:	e7f1      	b.n	800981a <__hexdig_fun+0xa>
 8009836:	2000      	movs	r0, #0
 8009838:	4770      	bx	lr
	...

0800983c <__gethex>:
 800983c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009840:	b085      	sub	sp, #20
 8009842:	468a      	mov	sl, r1
 8009844:	9302      	str	r3, [sp, #8]
 8009846:	680b      	ldr	r3, [r1, #0]
 8009848:	9001      	str	r0, [sp, #4]
 800984a:	4690      	mov	r8, r2
 800984c:	1c9c      	adds	r4, r3, #2
 800984e:	46a1      	mov	r9, r4
 8009850:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009854:	2830      	cmp	r0, #48	@ 0x30
 8009856:	d0fa      	beq.n	800984e <__gethex+0x12>
 8009858:	eba9 0303 	sub.w	r3, r9, r3
 800985c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009860:	f7ff ffd6 	bl	8009810 <__hexdig_fun>
 8009864:	4605      	mov	r5, r0
 8009866:	2800      	cmp	r0, #0
 8009868:	d168      	bne.n	800993c <__gethex+0x100>
 800986a:	49a0      	ldr	r1, [pc, #640]	@ (8009aec <__gethex+0x2b0>)
 800986c:	2201      	movs	r2, #1
 800986e:	4648      	mov	r0, r9
 8009870:	f7fe ffb4 	bl	80087dc <strncmp>
 8009874:	4607      	mov	r7, r0
 8009876:	2800      	cmp	r0, #0
 8009878:	d167      	bne.n	800994a <__gethex+0x10e>
 800987a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800987e:	4626      	mov	r6, r4
 8009880:	f7ff ffc6 	bl	8009810 <__hexdig_fun>
 8009884:	2800      	cmp	r0, #0
 8009886:	d062      	beq.n	800994e <__gethex+0x112>
 8009888:	4623      	mov	r3, r4
 800988a:	7818      	ldrb	r0, [r3, #0]
 800988c:	2830      	cmp	r0, #48	@ 0x30
 800988e:	4699      	mov	r9, r3
 8009890:	f103 0301 	add.w	r3, r3, #1
 8009894:	d0f9      	beq.n	800988a <__gethex+0x4e>
 8009896:	f7ff ffbb 	bl	8009810 <__hexdig_fun>
 800989a:	fab0 f580 	clz	r5, r0
 800989e:	096d      	lsrs	r5, r5, #5
 80098a0:	f04f 0b01 	mov.w	fp, #1
 80098a4:	464a      	mov	r2, r9
 80098a6:	4616      	mov	r6, r2
 80098a8:	3201      	adds	r2, #1
 80098aa:	7830      	ldrb	r0, [r6, #0]
 80098ac:	f7ff ffb0 	bl	8009810 <__hexdig_fun>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d1f8      	bne.n	80098a6 <__gethex+0x6a>
 80098b4:	498d      	ldr	r1, [pc, #564]	@ (8009aec <__gethex+0x2b0>)
 80098b6:	2201      	movs	r2, #1
 80098b8:	4630      	mov	r0, r6
 80098ba:	f7fe ff8f 	bl	80087dc <strncmp>
 80098be:	2800      	cmp	r0, #0
 80098c0:	d13f      	bne.n	8009942 <__gethex+0x106>
 80098c2:	b944      	cbnz	r4, 80098d6 <__gethex+0x9a>
 80098c4:	1c74      	adds	r4, r6, #1
 80098c6:	4622      	mov	r2, r4
 80098c8:	4616      	mov	r6, r2
 80098ca:	3201      	adds	r2, #1
 80098cc:	7830      	ldrb	r0, [r6, #0]
 80098ce:	f7ff ff9f 	bl	8009810 <__hexdig_fun>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	d1f8      	bne.n	80098c8 <__gethex+0x8c>
 80098d6:	1ba4      	subs	r4, r4, r6
 80098d8:	00a7      	lsls	r7, r4, #2
 80098da:	7833      	ldrb	r3, [r6, #0]
 80098dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80098e0:	2b50      	cmp	r3, #80	@ 0x50
 80098e2:	d13e      	bne.n	8009962 <__gethex+0x126>
 80098e4:	7873      	ldrb	r3, [r6, #1]
 80098e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80098e8:	d033      	beq.n	8009952 <__gethex+0x116>
 80098ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80098ec:	d034      	beq.n	8009958 <__gethex+0x11c>
 80098ee:	1c71      	adds	r1, r6, #1
 80098f0:	2400      	movs	r4, #0
 80098f2:	7808      	ldrb	r0, [r1, #0]
 80098f4:	f7ff ff8c 	bl	8009810 <__hexdig_fun>
 80098f8:	1e43      	subs	r3, r0, #1
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b18      	cmp	r3, #24
 80098fe:	d830      	bhi.n	8009962 <__gethex+0x126>
 8009900:	f1a0 0210 	sub.w	r2, r0, #16
 8009904:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009908:	f7ff ff82 	bl	8009810 <__hexdig_fun>
 800990c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009910:	fa5f fc8c 	uxtb.w	ip, ip
 8009914:	f1bc 0f18 	cmp.w	ip, #24
 8009918:	f04f 030a 	mov.w	r3, #10
 800991c:	d91e      	bls.n	800995c <__gethex+0x120>
 800991e:	b104      	cbz	r4, 8009922 <__gethex+0xe6>
 8009920:	4252      	negs	r2, r2
 8009922:	4417      	add	r7, r2
 8009924:	f8ca 1000 	str.w	r1, [sl]
 8009928:	b1ed      	cbz	r5, 8009966 <__gethex+0x12a>
 800992a:	f1bb 0f00 	cmp.w	fp, #0
 800992e:	bf0c      	ite	eq
 8009930:	2506      	moveq	r5, #6
 8009932:	2500      	movne	r5, #0
 8009934:	4628      	mov	r0, r5
 8009936:	b005      	add	sp, #20
 8009938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993c:	2500      	movs	r5, #0
 800993e:	462c      	mov	r4, r5
 8009940:	e7b0      	b.n	80098a4 <__gethex+0x68>
 8009942:	2c00      	cmp	r4, #0
 8009944:	d1c7      	bne.n	80098d6 <__gethex+0x9a>
 8009946:	4627      	mov	r7, r4
 8009948:	e7c7      	b.n	80098da <__gethex+0x9e>
 800994a:	464e      	mov	r6, r9
 800994c:	462f      	mov	r7, r5
 800994e:	2501      	movs	r5, #1
 8009950:	e7c3      	b.n	80098da <__gethex+0x9e>
 8009952:	2400      	movs	r4, #0
 8009954:	1cb1      	adds	r1, r6, #2
 8009956:	e7cc      	b.n	80098f2 <__gethex+0xb6>
 8009958:	2401      	movs	r4, #1
 800995a:	e7fb      	b.n	8009954 <__gethex+0x118>
 800995c:	fb03 0002 	mla	r0, r3, r2, r0
 8009960:	e7ce      	b.n	8009900 <__gethex+0xc4>
 8009962:	4631      	mov	r1, r6
 8009964:	e7de      	b.n	8009924 <__gethex+0xe8>
 8009966:	eba6 0309 	sub.w	r3, r6, r9
 800996a:	3b01      	subs	r3, #1
 800996c:	4629      	mov	r1, r5
 800996e:	2b07      	cmp	r3, #7
 8009970:	dc0a      	bgt.n	8009988 <__gethex+0x14c>
 8009972:	9801      	ldr	r0, [sp, #4]
 8009974:	f000 fafc 	bl	8009f70 <_Balloc>
 8009978:	4604      	mov	r4, r0
 800997a:	b940      	cbnz	r0, 800998e <__gethex+0x152>
 800997c:	4b5c      	ldr	r3, [pc, #368]	@ (8009af0 <__gethex+0x2b4>)
 800997e:	4602      	mov	r2, r0
 8009980:	21e4      	movs	r1, #228	@ 0xe4
 8009982:	485c      	ldr	r0, [pc, #368]	@ (8009af4 <__gethex+0x2b8>)
 8009984:	f7ff f83e 	bl	8008a04 <__assert_func>
 8009988:	3101      	adds	r1, #1
 800998a:	105b      	asrs	r3, r3, #1
 800998c:	e7ef      	b.n	800996e <__gethex+0x132>
 800998e:	f100 0a14 	add.w	sl, r0, #20
 8009992:	2300      	movs	r3, #0
 8009994:	4655      	mov	r5, sl
 8009996:	469b      	mov	fp, r3
 8009998:	45b1      	cmp	r9, r6
 800999a:	d337      	bcc.n	8009a0c <__gethex+0x1d0>
 800999c:	f845 bb04 	str.w	fp, [r5], #4
 80099a0:	eba5 050a 	sub.w	r5, r5, sl
 80099a4:	10ad      	asrs	r5, r5, #2
 80099a6:	6125      	str	r5, [r4, #16]
 80099a8:	4658      	mov	r0, fp
 80099aa:	f000 fbd3 	bl	800a154 <__hi0bits>
 80099ae:	016d      	lsls	r5, r5, #5
 80099b0:	f8d8 6000 	ldr.w	r6, [r8]
 80099b4:	1a2d      	subs	r5, r5, r0
 80099b6:	42b5      	cmp	r5, r6
 80099b8:	dd54      	ble.n	8009a64 <__gethex+0x228>
 80099ba:	1bad      	subs	r5, r5, r6
 80099bc:	4629      	mov	r1, r5
 80099be:	4620      	mov	r0, r4
 80099c0:	f000 ff67 	bl	800a892 <__any_on>
 80099c4:	4681      	mov	r9, r0
 80099c6:	b178      	cbz	r0, 80099e8 <__gethex+0x1ac>
 80099c8:	1e6b      	subs	r3, r5, #1
 80099ca:	1159      	asrs	r1, r3, #5
 80099cc:	f003 021f 	and.w	r2, r3, #31
 80099d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80099d4:	f04f 0901 	mov.w	r9, #1
 80099d8:	fa09 f202 	lsl.w	r2, r9, r2
 80099dc:	420a      	tst	r2, r1
 80099de:	d003      	beq.n	80099e8 <__gethex+0x1ac>
 80099e0:	454b      	cmp	r3, r9
 80099e2:	dc36      	bgt.n	8009a52 <__gethex+0x216>
 80099e4:	f04f 0902 	mov.w	r9, #2
 80099e8:	4629      	mov	r1, r5
 80099ea:	4620      	mov	r0, r4
 80099ec:	f7ff febe 	bl	800976c <rshift>
 80099f0:	442f      	add	r7, r5
 80099f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099f6:	42bb      	cmp	r3, r7
 80099f8:	da42      	bge.n	8009a80 <__gethex+0x244>
 80099fa:	9801      	ldr	r0, [sp, #4]
 80099fc:	4621      	mov	r1, r4
 80099fe:	f000 faf7 	bl	8009ff0 <_Bfree>
 8009a02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a04:	2300      	movs	r3, #0
 8009a06:	6013      	str	r3, [r2, #0]
 8009a08:	25a3      	movs	r5, #163	@ 0xa3
 8009a0a:	e793      	b.n	8009934 <__gethex+0xf8>
 8009a0c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009a10:	2a2e      	cmp	r2, #46	@ 0x2e
 8009a12:	d012      	beq.n	8009a3a <__gethex+0x1fe>
 8009a14:	2b20      	cmp	r3, #32
 8009a16:	d104      	bne.n	8009a22 <__gethex+0x1e6>
 8009a18:	f845 bb04 	str.w	fp, [r5], #4
 8009a1c:	f04f 0b00 	mov.w	fp, #0
 8009a20:	465b      	mov	r3, fp
 8009a22:	7830      	ldrb	r0, [r6, #0]
 8009a24:	9303      	str	r3, [sp, #12]
 8009a26:	f7ff fef3 	bl	8009810 <__hexdig_fun>
 8009a2a:	9b03      	ldr	r3, [sp, #12]
 8009a2c:	f000 000f 	and.w	r0, r0, #15
 8009a30:	4098      	lsls	r0, r3
 8009a32:	ea4b 0b00 	orr.w	fp, fp, r0
 8009a36:	3304      	adds	r3, #4
 8009a38:	e7ae      	b.n	8009998 <__gethex+0x15c>
 8009a3a:	45b1      	cmp	r9, r6
 8009a3c:	d8ea      	bhi.n	8009a14 <__gethex+0x1d8>
 8009a3e:	492b      	ldr	r1, [pc, #172]	@ (8009aec <__gethex+0x2b0>)
 8009a40:	9303      	str	r3, [sp, #12]
 8009a42:	2201      	movs	r2, #1
 8009a44:	4630      	mov	r0, r6
 8009a46:	f7fe fec9 	bl	80087dc <strncmp>
 8009a4a:	9b03      	ldr	r3, [sp, #12]
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	d1e1      	bne.n	8009a14 <__gethex+0x1d8>
 8009a50:	e7a2      	b.n	8009998 <__gethex+0x15c>
 8009a52:	1ea9      	subs	r1, r5, #2
 8009a54:	4620      	mov	r0, r4
 8009a56:	f000 ff1c 	bl	800a892 <__any_on>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d0c2      	beq.n	80099e4 <__gethex+0x1a8>
 8009a5e:	f04f 0903 	mov.w	r9, #3
 8009a62:	e7c1      	b.n	80099e8 <__gethex+0x1ac>
 8009a64:	da09      	bge.n	8009a7a <__gethex+0x23e>
 8009a66:	1b75      	subs	r5, r6, r5
 8009a68:	4621      	mov	r1, r4
 8009a6a:	9801      	ldr	r0, [sp, #4]
 8009a6c:	462a      	mov	r2, r5
 8009a6e:	f000 fcd7 	bl	800a420 <__lshift>
 8009a72:	1b7f      	subs	r7, r7, r5
 8009a74:	4604      	mov	r4, r0
 8009a76:	f100 0a14 	add.w	sl, r0, #20
 8009a7a:	f04f 0900 	mov.w	r9, #0
 8009a7e:	e7b8      	b.n	80099f2 <__gethex+0x1b6>
 8009a80:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009a84:	42bd      	cmp	r5, r7
 8009a86:	dd6f      	ble.n	8009b68 <__gethex+0x32c>
 8009a88:	1bed      	subs	r5, r5, r7
 8009a8a:	42ae      	cmp	r6, r5
 8009a8c:	dc34      	bgt.n	8009af8 <__gethex+0x2bc>
 8009a8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	d022      	beq.n	8009adc <__gethex+0x2a0>
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	d024      	beq.n	8009ae4 <__gethex+0x2a8>
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d115      	bne.n	8009aca <__gethex+0x28e>
 8009a9e:	42ae      	cmp	r6, r5
 8009aa0:	d113      	bne.n	8009aca <__gethex+0x28e>
 8009aa2:	2e01      	cmp	r6, #1
 8009aa4:	d10b      	bne.n	8009abe <__gethex+0x282>
 8009aa6:	9a02      	ldr	r2, [sp, #8]
 8009aa8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009aac:	6013      	str	r3, [r2, #0]
 8009aae:	2301      	movs	r3, #1
 8009ab0:	6123      	str	r3, [r4, #16]
 8009ab2:	f8ca 3000 	str.w	r3, [sl]
 8009ab6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ab8:	2562      	movs	r5, #98	@ 0x62
 8009aba:	601c      	str	r4, [r3, #0]
 8009abc:	e73a      	b.n	8009934 <__gethex+0xf8>
 8009abe:	1e71      	subs	r1, r6, #1
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f000 fee6 	bl	800a892 <__any_on>
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d1ed      	bne.n	8009aa6 <__gethex+0x26a>
 8009aca:	9801      	ldr	r0, [sp, #4]
 8009acc:	4621      	mov	r1, r4
 8009ace:	f000 fa8f 	bl	8009ff0 <_Bfree>
 8009ad2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	6013      	str	r3, [r2, #0]
 8009ad8:	2550      	movs	r5, #80	@ 0x50
 8009ada:	e72b      	b.n	8009934 <__gethex+0xf8>
 8009adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1f3      	bne.n	8009aca <__gethex+0x28e>
 8009ae2:	e7e0      	b.n	8009aa6 <__gethex+0x26a>
 8009ae4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1dd      	bne.n	8009aa6 <__gethex+0x26a>
 8009aea:	e7ee      	b.n	8009aca <__gethex+0x28e>
 8009aec:	0800b40c 	.word	0x0800b40c
 8009af0:	0800b65a 	.word	0x0800b65a
 8009af4:	0800b66b 	.word	0x0800b66b
 8009af8:	1e6f      	subs	r7, r5, #1
 8009afa:	f1b9 0f00 	cmp.w	r9, #0
 8009afe:	d130      	bne.n	8009b62 <__gethex+0x326>
 8009b00:	b127      	cbz	r7, 8009b0c <__gethex+0x2d0>
 8009b02:	4639      	mov	r1, r7
 8009b04:	4620      	mov	r0, r4
 8009b06:	f000 fec4 	bl	800a892 <__any_on>
 8009b0a:	4681      	mov	r9, r0
 8009b0c:	117a      	asrs	r2, r7, #5
 8009b0e:	2301      	movs	r3, #1
 8009b10:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009b14:	f007 071f 	and.w	r7, r7, #31
 8009b18:	40bb      	lsls	r3, r7
 8009b1a:	4213      	tst	r3, r2
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	4620      	mov	r0, r4
 8009b20:	bf18      	it	ne
 8009b22:	f049 0902 	orrne.w	r9, r9, #2
 8009b26:	f7ff fe21 	bl	800976c <rshift>
 8009b2a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009b2e:	1b76      	subs	r6, r6, r5
 8009b30:	2502      	movs	r5, #2
 8009b32:	f1b9 0f00 	cmp.w	r9, #0
 8009b36:	d047      	beq.n	8009bc8 <__gethex+0x38c>
 8009b38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d015      	beq.n	8009b6c <__gethex+0x330>
 8009b40:	2b03      	cmp	r3, #3
 8009b42:	d017      	beq.n	8009b74 <__gethex+0x338>
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d109      	bne.n	8009b5c <__gethex+0x320>
 8009b48:	f019 0f02 	tst.w	r9, #2
 8009b4c:	d006      	beq.n	8009b5c <__gethex+0x320>
 8009b4e:	f8da 3000 	ldr.w	r3, [sl]
 8009b52:	ea49 0903 	orr.w	r9, r9, r3
 8009b56:	f019 0f01 	tst.w	r9, #1
 8009b5a:	d10e      	bne.n	8009b7a <__gethex+0x33e>
 8009b5c:	f045 0510 	orr.w	r5, r5, #16
 8009b60:	e032      	b.n	8009bc8 <__gethex+0x38c>
 8009b62:	f04f 0901 	mov.w	r9, #1
 8009b66:	e7d1      	b.n	8009b0c <__gethex+0x2d0>
 8009b68:	2501      	movs	r5, #1
 8009b6a:	e7e2      	b.n	8009b32 <__gethex+0x2f6>
 8009b6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b6e:	f1c3 0301 	rsb	r3, r3, #1
 8009b72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d0f0      	beq.n	8009b5c <__gethex+0x320>
 8009b7a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009b7e:	f104 0314 	add.w	r3, r4, #20
 8009b82:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009b86:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b8a:	f04f 0c00 	mov.w	ip, #0
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b94:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009b98:	d01b      	beq.n	8009bd2 <__gethex+0x396>
 8009b9a:	3201      	adds	r2, #1
 8009b9c:	6002      	str	r2, [r0, #0]
 8009b9e:	2d02      	cmp	r5, #2
 8009ba0:	f104 0314 	add.w	r3, r4, #20
 8009ba4:	d13c      	bne.n	8009c20 <__gethex+0x3e4>
 8009ba6:	f8d8 2000 	ldr.w	r2, [r8]
 8009baa:	3a01      	subs	r2, #1
 8009bac:	42b2      	cmp	r2, r6
 8009bae:	d109      	bne.n	8009bc4 <__gethex+0x388>
 8009bb0:	1171      	asrs	r1, r6, #5
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009bb8:	f006 061f 	and.w	r6, r6, #31
 8009bbc:	fa02 f606 	lsl.w	r6, r2, r6
 8009bc0:	421e      	tst	r6, r3
 8009bc2:	d13a      	bne.n	8009c3a <__gethex+0x3fe>
 8009bc4:	f045 0520 	orr.w	r5, r5, #32
 8009bc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bca:	601c      	str	r4, [r3, #0]
 8009bcc:	9b02      	ldr	r3, [sp, #8]
 8009bce:	601f      	str	r7, [r3, #0]
 8009bd0:	e6b0      	b.n	8009934 <__gethex+0xf8>
 8009bd2:	4299      	cmp	r1, r3
 8009bd4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009bd8:	d8d9      	bhi.n	8009b8e <__gethex+0x352>
 8009bda:	68a3      	ldr	r3, [r4, #8]
 8009bdc:	459b      	cmp	fp, r3
 8009bde:	db17      	blt.n	8009c10 <__gethex+0x3d4>
 8009be0:	6861      	ldr	r1, [r4, #4]
 8009be2:	9801      	ldr	r0, [sp, #4]
 8009be4:	3101      	adds	r1, #1
 8009be6:	f000 f9c3 	bl	8009f70 <_Balloc>
 8009bea:	4681      	mov	r9, r0
 8009bec:	b918      	cbnz	r0, 8009bf6 <__gethex+0x3ba>
 8009bee:	4b1a      	ldr	r3, [pc, #104]	@ (8009c58 <__gethex+0x41c>)
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	2184      	movs	r1, #132	@ 0x84
 8009bf4:	e6c5      	b.n	8009982 <__gethex+0x146>
 8009bf6:	6922      	ldr	r2, [r4, #16]
 8009bf8:	3202      	adds	r2, #2
 8009bfa:	f104 010c 	add.w	r1, r4, #12
 8009bfe:	0092      	lsls	r2, r2, #2
 8009c00:	300c      	adds	r0, #12
 8009c02:	f7fe fee0 	bl	80089c6 <memcpy>
 8009c06:	4621      	mov	r1, r4
 8009c08:	9801      	ldr	r0, [sp, #4]
 8009c0a:	f000 f9f1 	bl	8009ff0 <_Bfree>
 8009c0e:	464c      	mov	r4, r9
 8009c10:	6923      	ldr	r3, [r4, #16]
 8009c12:	1c5a      	adds	r2, r3, #1
 8009c14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c18:	6122      	str	r2, [r4, #16]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	615a      	str	r2, [r3, #20]
 8009c1e:	e7be      	b.n	8009b9e <__gethex+0x362>
 8009c20:	6922      	ldr	r2, [r4, #16]
 8009c22:	455a      	cmp	r2, fp
 8009c24:	dd0b      	ble.n	8009c3e <__gethex+0x402>
 8009c26:	2101      	movs	r1, #1
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f7ff fd9f 	bl	800976c <rshift>
 8009c2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c32:	3701      	adds	r7, #1
 8009c34:	42bb      	cmp	r3, r7
 8009c36:	f6ff aee0 	blt.w	80099fa <__gethex+0x1be>
 8009c3a:	2501      	movs	r5, #1
 8009c3c:	e7c2      	b.n	8009bc4 <__gethex+0x388>
 8009c3e:	f016 061f 	ands.w	r6, r6, #31
 8009c42:	d0fa      	beq.n	8009c3a <__gethex+0x3fe>
 8009c44:	4453      	add	r3, sl
 8009c46:	f1c6 0620 	rsb	r6, r6, #32
 8009c4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009c4e:	f000 fa81 	bl	800a154 <__hi0bits>
 8009c52:	42b0      	cmp	r0, r6
 8009c54:	dbe7      	blt.n	8009c26 <__gethex+0x3ea>
 8009c56:	e7f0      	b.n	8009c3a <__gethex+0x3fe>
 8009c58:	0800b65a 	.word	0x0800b65a

08009c5c <L_shift>:
 8009c5c:	f1c2 0208 	rsb	r2, r2, #8
 8009c60:	0092      	lsls	r2, r2, #2
 8009c62:	b570      	push	{r4, r5, r6, lr}
 8009c64:	f1c2 0620 	rsb	r6, r2, #32
 8009c68:	6843      	ldr	r3, [r0, #4]
 8009c6a:	6804      	ldr	r4, [r0, #0]
 8009c6c:	fa03 f506 	lsl.w	r5, r3, r6
 8009c70:	432c      	orrs	r4, r5
 8009c72:	40d3      	lsrs	r3, r2
 8009c74:	6004      	str	r4, [r0, #0]
 8009c76:	f840 3f04 	str.w	r3, [r0, #4]!
 8009c7a:	4288      	cmp	r0, r1
 8009c7c:	d3f4      	bcc.n	8009c68 <L_shift+0xc>
 8009c7e:	bd70      	pop	{r4, r5, r6, pc}

08009c80 <__match>:
 8009c80:	b530      	push	{r4, r5, lr}
 8009c82:	6803      	ldr	r3, [r0, #0]
 8009c84:	3301      	adds	r3, #1
 8009c86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c8a:	b914      	cbnz	r4, 8009c92 <__match+0x12>
 8009c8c:	6003      	str	r3, [r0, #0]
 8009c8e:	2001      	movs	r0, #1
 8009c90:	bd30      	pop	{r4, r5, pc}
 8009c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c96:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009c9a:	2d19      	cmp	r5, #25
 8009c9c:	bf98      	it	ls
 8009c9e:	3220      	addls	r2, #32
 8009ca0:	42a2      	cmp	r2, r4
 8009ca2:	d0f0      	beq.n	8009c86 <__match+0x6>
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	e7f3      	b.n	8009c90 <__match+0x10>

08009ca8 <__hexnan>:
 8009ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cac:	680b      	ldr	r3, [r1, #0]
 8009cae:	6801      	ldr	r1, [r0, #0]
 8009cb0:	115e      	asrs	r6, r3, #5
 8009cb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009cb6:	f013 031f 	ands.w	r3, r3, #31
 8009cba:	b087      	sub	sp, #28
 8009cbc:	bf18      	it	ne
 8009cbe:	3604      	addne	r6, #4
 8009cc0:	2500      	movs	r5, #0
 8009cc2:	1f37      	subs	r7, r6, #4
 8009cc4:	4682      	mov	sl, r0
 8009cc6:	4690      	mov	r8, r2
 8009cc8:	9301      	str	r3, [sp, #4]
 8009cca:	f846 5c04 	str.w	r5, [r6, #-4]
 8009cce:	46b9      	mov	r9, r7
 8009cd0:	463c      	mov	r4, r7
 8009cd2:	9502      	str	r5, [sp, #8]
 8009cd4:	46ab      	mov	fp, r5
 8009cd6:	784a      	ldrb	r2, [r1, #1]
 8009cd8:	1c4b      	adds	r3, r1, #1
 8009cda:	9303      	str	r3, [sp, #12]
 8009cdc:	b342      	cbz	r2, 8009d30 <__hexnan+0x88>
 8009cde:	4610      	mov	r0, r2
 8009ce0:	9105      	str	r1, [sp, #20]
 8009ce2:	9204      	str	r2, [sp, #16]
 8009ce4:	f7ff fd94 	bl	8009810 <__hexdig_fun>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	d151      	bne.n	8009d90 <__hexnan+0xe8>
 8009cec:	9a04      	ldr	r2, [sp, #16]
 8009cee:	9905      	ldr	r1, [sp, #20]
 8009cf0:	2a20      	cmp	r2, #32
 8009cf2:	d818      	bhi.n	8009d26 <__hexnan+0x7e>
 8009cf4:	9b02      	ldr	r3, [sp, #8]
 8009cf6:	459b      	cmp	fp, r3
 8009cf8:	dd13      	ble.n	8009d22 <__hexnan+0x7a>
 8009cfa:	454c      	cmp	r4, r9
 8009cfc:	d206      	bcs.n	8009d0c <__hexnan+0x64>
 8009cfe:	2d07      	cmp	r5, #7
 8009d00:	dc04      	bgt.n	8009d0c <__hexnan+0x64>
 8009d02:	462a      	mov	r2, r5
 8009d04:	4649      	mov	r1, r9
 8009d06:	4620      	mov	r0, r4
 8009d08:	f7ff ffa8 	bl	8009c5c <L_shift>
 8009d0c:	4544      	cmp	r4, r8
 8009d0e:	d952      	bls.n	8009db6 <__hexnan+0x10e>
 8009d10:	2300      	movs	r3, #0
 8009d12:	f1a4 0904 	sub.w	r9, r4, #4
 8009d16:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d1a:	f8cd b008 	str.w	fp, [sp, #8]
 8009d1e:	464c      	mov	r4, r9
 8009d20:	461d      	mov	r5, r3
 8009d22:	9903      	ldr	r1, [sp, #12]
 8009d24:	e7d7      	b.n	8009cd6 <__hexnan+0x2e>
 8009d26:	2a29      	cmp	r2, #41	@ 0x29
 8009d28:	d157      	bne.n	8009dda <__hexnan+0x132>
 8009d2a:	3102      	adds	r1, #2
 8009d2c:	f8ca 1000 	str.w	r1, [sl]
 8009d30:	f1bb 0f00 	cmp.w	fp, #0
 8009d34:	d051      	beq.n	8009dda <__hexnan+0x132>
 8009d36:	454c      	cmp	r4, r9
 8009d38:	d206      	bcs.n	8009d48 <__hexnan+0xa0>
 8009d3a:	2d07      	cmp	r5, #7
 8009d3c:	dc04      	bgt.n	8009d48 <__hexnan+0xa0>
 8009d3e:	462a      	mov	r2, r5
 8009d40:	4649      	mov	r1, r9
 8009d42:	4620      	mov	r0, r4
 8009d44:	f7ff ff8a 	bl	8009c5c <L_shift>
 8009d48:	4544      	cmp	r4, r8
 8009d4a:	d936      	bls.n	8009dba <__hexnan+0x112>
 8009d4c:	f1a8 0204 	sub.w	r2, r8, #4
 8009d50:	4623      	mov	r3, r4
 8009d52:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d56:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d5a:	429f      	cmp	r7, r3
 8009d5c:	d2f9      	bcs.n	8009d52 <__hexnan+0xaa>
 8009d5e:	1b3b      	subs	r3, r7, r4
 8009d60:	f023 0303 	bic.w	r3, r3, #3
 8009d64:	3304      	adds	r3, #4
 8009d66:	3401      	adds	r4, #1
 8009d68:	3e03      	subs	r6, #3
 8009d6a:	42b4      	cmp	r4, r6
 8009d6c:	bf88      	it	hi
 8009d6e:	2304      	movhi	r3, #4
 8009d70:	4443      	add	r3, r8
 8009d72:	2200      	movs	r2, #0
 8009d74:	f843 2b04 	str.w	r2, [r3], #4
 8009d78:	429f      	cmp	r7, r3
 8009d7a:	d2fb      	bcs.n	8009d74 <__hexnan+0xcc>
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	b91b      	cbnz	r3, 8009d88 <__hexnan+0xe0>
 8009d80:	4547      	cmp	r7, r8
 8009d82:	d128      	bne.n	8009dd6 <__hexnan+0x12e>
 8009d84:	2301      	movs	r3, #1
 8009d86:	603b      	str	r3, [r7, #0]
 8009d88:	2005      	movs	r0, #5
 8009d8a:	b007      	add	sp, #28
 8009d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d90:	3501      	adds	r5, #1
 8009d92:	2d08      	cmp	r5, #8
 8009d94:	f10b 0b01 	add.w	fp, fp, #1
 8009d98:	dd06      	ble.n	8009da8 <__hexnan+0x100>
 8009d9a:	4544      	cmp	r4, r8
 8009d9c:	d9c1      	bls.n	8009d22 <__hexnan+0x7a>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f844 3c04 	str.w	r3, [r4, #-4]
 8009da4:	2501      	movs	r5, #1
 8009da6:	3c04      	subs	r4, #4
 8009da8:	6822      	ldr	r2, [r4, #0]
 8009daa:	f000 000f 	and.w	r0, r0, #15
 8009dae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009db2:	6020      	str	r0, [r4, #0]
 8009db4:	e7b5      	b.n	8009d22 <__hexnan+0x7a>
 8009db6:	2508      	movs	r5, #8
 8009db8:	e7b3      	b.n	8009d22 <__hexnan+0x7a>
 8009dba:	9b01      	ldr	r3, [sp, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d0dd      	beq.n	8009d7c <__hexnan+0xd4>
 8009dc0:	f1c3 0320 	rsb	r3, r3, #32
 8009dc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009dc8:	40da      	lsrs	r2, r3
 8009dca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009dce:	4013      	ands	r3, r2
 8009dd0:	f846 3c04 	str.w	r3, [r6, #-4]
 8009dd4:	e7d2      	b.n	8009d7c <__hexnan+0xd4>
 8009dd6:	3f04      	subs	r7, #4
 8009dd8:	e7d0      	b.n	8009d7c <__hexnan+0xd4>
 8009dda:	2004      	movs	r0, #4
 8009ddc:	e7d5      	b.n	8009d8a <__hexnan+0xe2>
	...

08009de0 <malloc>:
 8009de0:	4b02      	ldr	r3, [pc, #8]	@ (8009dec <malloc+0xc>)
 8009de2:	4601      	mov	r1, r0
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	f000 b825 	b.w	8009e34 <_malloc_r>
 8009dea:	bf00      	nop
 8009dec:	20000184 	.word	0x20000184

08009df0 <sbrk_aligned>:
 8009df0:	b570      	push	{r4, r5, r6, lr}
 8009df2:	4e0f      	ldr	r6, [pc, #60]	@ (8009e30 <sbrk_aligned+0x40>)
 8009df4:	460c      	mov	r4, r1
 8009df6:	6831      	ldr	r1, [r6, #0]
 8009df8:	4605      	mov	r5, r0
 8009dfa:	b911      	cbnz	r1, 8009e02 <sbrk_aligned+0x12>
 8009dfc:	f000 ffa6 	bl	800ad4c <_sbrk_r>
 8009e00:	6030      	str	r0, [r6, #0]
 8009e02:	4621      	mov	r1, r4
 8009e04:	4628      	mov	r0, r5
 8009e06:	f000 ffa1 	bl	800ad4c <_sbrk_r>
 8009e0a:	1c43      	adds	r3, r0, #1
 8009e0c:	d103      	bne.n	8009e16 <sbrk_aligned+0x26>
 8009e0e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009e12:	4620      	mov	r0, r4
 8009e14:	bd70      	pop	{r4, r5, r6, pc}
 8009e16:	1cc4      	adds	r4, r0, #3
 8009e18:	f024 0403 	bic.w	r4, r4, #3
 8009e1c:	42a0      	cmp	r0, r4
 8009e1e:	d0f8      	beq.n	8009e12 <sbrk_aligned+0x22>
 8009e20:	1a21      	subs	r1, r4, r0
 8009e22:	4628      	mov	r0, r5
 8009e24:	f000 ff92 	bl	800ad4c <_sbrk_r>
 8009e28:	3001      	adds	r0, #1
 8009e2a:	d1f2      	bne.n	8009e12 <sbrk_aligned+0x22>
 8009e2c:	e7ef      	b.n	8009e0e <sbrk_aligned+0x1e>
 8009e2e:	bf00      	nop
 8009e30:	2000519c 	.word	0x2000519c

08009e34 <_malloc_r>:
 8009e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e38:	1ccd      	adds	r5, r1, #3
 8009e3a:	f025 0503 	bic.w	r5, r5, #3
 8009e3e:	3508      	adds	r5, #8
 8009e40:	2d0c      	cmp	r5, #12
 8009e42:	bf38      	it	cc
 8009e44:	250c      	movcc	r5, #12
 8009e46:	2d00      	cmp	r5, #0
 8009e48:	4606      	mov	r6, r0
 8009e4a:	db01      	blt.n	8009e50 <_malloc_r+0x1c>
 8009e4c:	42a9      	cmp	r1, r5
 8009e4e:	d904      	bls.n	8009e5a <_malloc_r+0x26>
 8009e50:	230c      	movs	r3, #12
 8009e52:	6033      	str	r3, [r6, #0]
 8009e54:	2000      	movs	r0, #0
 8009e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f30 <_malloc_r+0xfc>
 8009e5e:	f000 f87b 	bl	8009f58 <__malloc_lock>
 8009e62:	f8d8 3000 	ldr.w	r3, [r8]
 8009e66:	461c      	mov	r4, r3
 8009e68:	bb44      	cbnz	r4, 8009ebc <_malloc_r+0x88>
 8009e6a:	4629      	mov	r1, r5
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	f7ff ffbf 	bl	8009df0 <sbrk_aligned>
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	4604      	mov	r4, r0
 8009e76:	d158      	bne.n	8009f2a <_malloc_r+0xf6>
 8009e78:	f8d8 4000 	ldr.w	r4, [r8]
 8009e7c:	4627      	mov	r7, r4
 8009e7e:	2f00      	cmp	r7, #0
 8009e80:	d143      	bne.n	8009f0a <_malloc_r+0xd6>
 8009e82:	2c00      	cmp	r4, #0
 8009e84:	d04b      	beq.n	8009f1e <_malloc_r+0xea>
 8009e86:	6823      	ldr	r3, [r4, #0]
 8009e88:	4639      	mov	r1, r7
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	eb04 0903 	add.w	r9, r4, r3
 8009e90:	f000 ff5c 	bl	800ad4c <_sbrk_r>
 8009e94:	4581      	cmp	r9, r0
 8009e96:	d142      	bne.n	8009f1e <_malloc_r+0xea>
 8009e98:	6821      	ldr	r1, [r4, #0]
 8009e9a:	1a6d      	subs	r5, r5, r1
 8009e9c:	4629      	mov	r1, r5
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	f7ff ffa6 	bl	8009df0 <sbrk_aligned>
 8009ea4:	3001      	adds	r0, #1
 8009ea6:	d03a      	beq.n	8009f1e <_malloc_r+0xea>
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	442b      	add	r3, r5
 8009eac:	6023      	str	r3, [r4, #0]
 8009eae:	f8d8 3000 	ldr.w	r3, [r8]
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	bb62      	cbnz	r2, 8009f10 <_malloc_r+0xdc>
 8009eb6:	f8c8 7000 	str.w	r7, [r8]
 8009eba:	e00f      	b.n	8009edc <_malloc_r+0xa8>
 8009ebc:	6822      	ldr	r2, [r4, #0]
 8009ebe:	1b52      	subs	r2, r2, r5
 8009ec0:	d420      	bmi.n	8009f04 <_malloc_r+0xd0>
 8009ec2:	2a0b      	cmp	r2, #11
 8009ec4:	d917      	bls.n	8009ef6 <_malloc_r+0xc2>
 8009ec6:	1961      	adds	r1, r4, r5
 8009ec8:	42a3      	cmp	r3, r4
 8009eca:	6025      	str	r5, [r4, #0]
 8009ecc:	bf18      	it	ne
 8009ece:	6059      	strne	r1, [r3, #4]
 8009ed0:	6863      	ldr	r3, [r4, #4]
 8009ed2:	bf08      	it	eq
 8009ed4:	f8c8 1000 	streq.w	r1, [r8]
 8009ed8:	5162      	str	r2, [r4, r5]
 8009eda:	604b      	str	r3, [r1, #4]
 8009edc:	4630      	mov	r0, r6
 8009ede:	f000 f841 	bl	8009f64 <__malloc_unlock>
 8009ee2:	f104 000b 	add.w	r0, r4, #11
 8009ee6:	1d23      	adds	r3, r4, #4
 8009ee8:	f020 0007 	bic.w	r0, r0, #7
 8009eec:	1ac2      	subs	r2, r0, r3
 8009eee:	bf1c      	itt	ne
 8009ef0:	1a1b      	subne	r3, r3, r0
 8009ef2:	50a3      	strne	r3, [r4, r2]
 8009ef4:	e7af      	b.n	8009e56 <_malloc_r+0x22>
 8009ef6:	6862      	ldr	r2, [r4, #4]
 8009ef8:	42a3      	cmp	r3, r4
 8009efa:	bf0c      	ite	eq
 8009efc:	f8c8 2000 	streq.w	r2, [r8]
 8009f00:	605a      	strne	r2, [r3, #4]
 8009f02:	e7eb      	b.n	8009edc <_malloc_r+0xa8>
 8009f04:	4623      	mov	r3, r4
 8009f06:	6864      	ldr	r4, [r4, #4]
 8009f08:	e7ae      	b.n	8009e68 <_malloc_r+0x34>
 8009f0a:	463c      	mov	r4, r7
 8009f0c:	687f      	ldr	r7, [r7, #4]
 8009f0e:	e7b6      	b.n	8009e7e <_malloc_r+0x4a>
 8009f10:	461a      	mov	r2, r3
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	42a3      	cmp	r3, r4
 8009f16:	d1fb      	bne.n	8009f10 <_malloc_r+0xdc>
 8009f18:	2300      	movs	r3, #0
 8009f1a:	6053      	str	r3, [r2, #4]
 8009f1c:	e7de      	b.n	8009edc <_malloc_r+0xa8>
 8009f1e:	230c      	movs	r3, #12
 8009f20:	6033      	str	r3, [r6, #0]
 8009f22:	4630      	mov	r0, r6
 8009f24:	f000 f81e 	bl	8009f64 <__malloc_unlock>
 8009f28:	e794      	b.n	8009e54 <_malloc_r+0x20>
 8009f2a:	6005      	str	r5, [r0, #0]
 8009f2c:	e7d6      	b.n	8009edc <_malloc_r+0xa8>
 8009f2e:	bf00      	nop
 8009f30:	200051a0 	.word	0x200051a0

08009f34 <__ascii_mbtowc>:
 8009f34:	b082      	sub	sp, #8
 8009f36:	b901      	cbnz	r1, 8009f3a <__ascii_mbtowc+0x6>
 8009f38:	a901      	add	r1, sp, #4
 8009f3a:	b142      	cbz	r2, 8009f4e <__ascii_mbtowc+0x1a>
 8009f3c:	b14b      	cbz	r3, 8009f52 <__ascii_mbtowc+0x1e>
 8009f3e:	7813      	ldrb	r3, [r2, #0]
 8009f40:	600b      	str	r3, [r1, #0]
 8009f42:	7812      	ldrb	r2, [r2, #0]
 8009f44:	1e10      	subs	r0, r2, #0
 8009f46:	bf18      	it	ne
 8009f48:	2001      	movne	r0, #1
 8009f4a:	b002      	add	sp, #8
 8009f4c:	4770      	bx	lr
 8009f4e:	4610      	mov	r0, r2
 8009f50:	e7fb      	b.n	8009f4a <__ascii_mbtowc+0x16>
 8009f52:	f06f 0001 	mvn.w	r0, #1
 8009f56:	e7f8      	b.n	8009f4a <__ascii_mbtowc+0x16>

08009f58 <__malloc_lock>:
 8009f58:	4801      	ldr	r0, [pc, #4]	@ (8009f60 <__malloc_lock+0x8>)
 8009f5a:	f7fe bd32 	b.w	80089c2 <__retarget_lock_acquire_recursive>
 8009f5e:	bf00      	nop
 8009f60:	20005198 	.word	0x20005198

08009f64 <__malloc_unlock>:
 8009f64:	4801      	ldr	r0, [pc, #4]	@ (8009f6c <__malloc_unlock+0x8>)
 8009f66:	f7fe bd2d 	b.w	80089c4 <__retarget_lock_release_recursive>
 8009f6a:	bf00      	nop
 8009f6c:	20005198 	.word	0x20005198

08009f70 <_Balloc>:
 8009f70:	b570      	push	{r4, r5, r6, lr}
 8009f72:	69c6      	ldr	r6, [r0, #28]
 8009f74:	4604      	mov	r4, r0
 8009f76:	460d      	mov	r5, r1
 8009f78:	b976      	cbnz	r6, 8009f98 <_Balloc+0x28>
 8009f7a:	2010      	movs	r0, #16
 8009f7c:	f7ff ff30 	bl	8009de0 <malloc>
 8009f80:	4602      	mov	r2, r0
 8009f82:	61e0      	str	r0, [r4, #28]
 8009f84:	b920      	cbnz	r0, 8009f90 <_Balloc+0x20>
 8009f86:	4b18      	ldr	r3, [pc, #96]	@ (8009fe8 <_Balloc+0x78>)
 8009f88:	4818      	ldr	r0, [pc, #96]	@ (8009fec <_Balloc+0x7c>)
 8009f8a:	216b      	movs	r1, #107	@ 0x6b
 8009f8c:	f7fe fd3a 	bl	8008a04 <__assert_func>
 8009f90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f94:	6006      	str	r6, [r0, #0]
 8009f96:	60c6      	str	r6, [r0, #12]
 8009f98:	69e6      	ldr	r6, [r4, #28]
 8009f9a:	68f3      	ldr	r3, [r6, #12]
 8009f9c:	b183      	cbz	r3, 8009fc0 <_Balloc+0x50>
 8009f9e:	69e3      	ldr	r3, [r4, #28]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009fa6:	b9b8      	cbnz	r0, 8009fd8 <_Balloc+0x68>
 8009fa8:	2101      	movs	r1, #1
 8009faa:	fa01 f605 	lsl.w	r6, r1, r5
 8009fae:	1d72      	adds	r2, r6, #5
 8009fb0:	0092      	lsls	r2, r2, #2
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f000 fee1 	bl	800ad7a <_calloc_r>
 8009fb8:	b160      	cbz	r0, 8009fd4 <_Balloc+0x64>
 8009fba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009fbe:	e00e      	b.n	8009fde <_Balloc+0x6e>
 8009fc0:	2221      	movs	r2, #33	@ 0x21
 8009fc2:	2104      	movs	r1, #4
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f000 fed8 	bl	800ad7a <_calloc_r>
 8009fca:	69e3      	ldr	r3, [r4, #28]
 8009fcc:	60f0      	str	r0, [r6, #12]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1e4      	bne.n	8009f9e <_Balloc+0x2e>
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	bd70      	pop	{r4, r5, r6, pc}
 8009fd8:	6802      	ldr	r2, [r0, #0]
 8009fda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009fde:	2300      	movs	r3, #0
 8009fe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009fe4:	e7f7      	b.n	8009fd6 <_Balloc+0x66>
 8009fe6:	bf00      	nop
 8009fe8:	0800b5eb 	.word	0x0800b5eb
 8009fec:	0800b6cb 	.word	0x0800b6cb

08009ff0 <_Bfree>:
 8009ff0:	b570      	push	{r4, r5, r6, lr}
 8009ff2:	69c6      	ldr	r6, [r0, #28]
 8009ff4:	4605      	mov	r5, r0
 8009ff6:	460c      	mov	r4, r1
 8009ff8:	b976      	cbnz	r6, 800a018 <_Bfree+0x28>
 8009ffa:	2010      	movs	r0, #16
 8009ffc:	f7ff fef0 	bl	8009de0 <malloc>
 800a000:	4602      	mov	r2, r0
 800a002:	61e8      	str	r0, [r5, #28]
 800a004:	b920      	cbnz	r0, 800a010 <_Bfree+0x20>
 800a006:	4b09      	ldr	r3, [pc, #36]	@ (800a02c <_Bfree+0x3c>)
 800a008:	4809      	ldr	r0, [pc, #36]	@ (800a030 <_Bfree+0x40>)
 800a00a:	218f      	movs	r1, #143	@ 0x8f
 800a00c:	f7fe fcfa 	bl	8008a04 <__assert_func>
 800a010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a014:	6006      	str	r6, [r0, #0]
 800a016:	60c6      	str	r6, [r0, #12]
 800a018:	b13c      	cbz	r4, 800a02a <_Bfree+0x3a>
 800a01a:	69eb      	ldr	r3, [r5, #28]
 800a01c:	6862      	ldr	r2, [r4, #4]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a024:	6021      	str	r1, [r4, #0]
 800a026:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a02a:	bd70      	pop	{r4, r5, r6, pc}
 800a02c:	0800b5eb 	.word	0x0800b5eb
 800a030:	0800b6cb 	.word	0x0800b6cb

0800a034 <__multadd>:
 800a034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a038:	690d      	ldr	r5, [r1, #16]
 800a03a:	4607      	mov	r7, r0
 800a03c:	460c      	mov	r4, r1
 800a03e:	461e      	mov	r6, r3
 800a040:	f101 0c14 	add.w	ip, r1, #20
 800a044:	2000      	movs	r0, #0
 800a046:	f8dc 3000 	ldr.w	r3, [ip]
 800a04a:	b299      	uxth	r1, r3
 800a04c:	fb02 6101 	mla	r1, r2, r1, r6
 800a050:	0c1e      	lsrs	r6, r3, #16
 800a052:	0c0b      	lsrs	r3, r1, #16
 800a054:	fb02 3306 	mla	r3, r2, r6, r3
 800a058:	b289      	uxth	r1, r1
 800a05a:	3001      	adds	r0, #1
 800a05c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a060:	4285      	cmp	r5, r0
 800a062:	f84c 1b04 	str.w	r1, [ip], #4
 800a066:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a06a:	dcec      	bgt.n	800a046 <__multadd+0x12>
 800a06c:	b30e      	cbz	r6, 800a0b2 <__multadd+0x7e>
 800a06e:	68a3      	ldr	r3, [r4, #8]
 800a070:	42ab      	cmp	r3, r5
 800a072:	dc19      	bgt.n	800a0a8 <__multadd+0x74>
 800a074:	6861      	ldr	r1, [r4, #4]
 800a076:	4638      	mov	r0, r7
 800a078:	3101      	adds	r1, #1
 800a07a:	f7ff ff79 	bl	8009f70 <_Balloc>
 800a07e:	4680      	mov	r8, r0
 800a080:	b928      	cbnz	r0, 800a08e <__multadd+0x5a>
 800a082:	4602      	mov	r2, r0
 800a084:	4b0c      	ldr	r3, [pc, #48]	@ (800a0b8 <__multadd+0x84>)
 800a086:	480d      	ldr	r0, [pc, #52]	@ (800a0bc <__multadd+0x88>)
 800a088:	21ba      	movs	r1, #186	@ 0xba
 800a08a:	f7fe fcbb 	bl	8008a04 <__assert_func>
 800a08e:	6922      	ldr	r2, [r4, #16]
 800a090:	3202      	adds	r2, #2
 800a092:	f104 010c 	add.w	r1, r4, #12
 800a096:	0092      	lsls	r2, r2, #2
 800a098:	300c      	adds	r0, #12
 800a09a:	f7fe fc94 	bl	80089c6 <memcpy>
 800a09e:	4621      	mov	r1, r4
 800a0a0:	4638      	mov	r0, r7
 800a0a2:	f7ff ffa5 	bl	8009ff0 <_Bfree>
 800a0a6:	4644      	mov	r4, r8
 800a0a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a0ac:	3501      	adds	r5, #1
 800a0ae:	615e      	str	r6, [r3, #20]
 800a0b0:	6125      	str	r5, [r4, #16]
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0b8:	0800b65a 	.word	0x0800b65a
 800a0bc:	0800b6cb 	.word	0x0800b6cb

0800a0c0 <__s2b>:
 800a0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0c4:	460c      	mov	r4, r1
 800a0c6:	4615      	mov	r5, r2
 800a0c8:	461f      	mov	r7, r3
 800a0ca:	2209      	movs	r2, #9
 800a0cc:	3308      	adds	r3, #8
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	db09      	blt.n	800a0f0 <__s2b+0x30>
 800a0dc:	4630      	mov	r0, r6
 800a0de:	f7ff ff47 	bl	8009f70 <_Balloc>
 800a0e2:	b940      	cbnz	r0, 800a0f6 <__s2b+0x36>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	4b19      	ldr	r3, [pc, #100]	@ (800a14c <__s2b+0x8c>)
 800a0e8:	4819      	ldr	r0, [pc, #100]	@ (800a150 <__s2b+0x90>)
 800a0ea:	21d3      	movs	r1, #211	@ 0xd3
 800a0ec:	f7fe fc8a 	bl	8008a04 <__assert_func>
 800a0f0:	0052      	lsls	r2, r2, #1
 800a0f2:	3101      	adds	r1, #1
 800a0f4:	e7f0      	b.n	800a0d8 <__s2b+0x18>
 800a0f6:	9b08      	ldr	r3, [sp, #32]
 800a0f8:	6143      	str	r3, [r0, #20]
 800a0fa:	2d09      	cmp	r5, #9
 800a0fc:	f04f 0301 	mov.w	r3, #1
 800a100:	6103      	str	r3, [r0, #16]
 800a102:	dd16      	ble.n	800a132 <__s2b+0x72>
 800a104:	f104 0909 	add.w	r9, r4, #9
 800a108:	46c8      	mov	r8, r9
 800a10a:	442c      	add	r4, r5
 800a10c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a110:	4601      	mov	r1, r0
 800a112:	3b30      	subs	r3, #48	@ 0x30
 800a114:	220a      	movs	r2, #10
 800a116:	4630      	mov	r0, r6
 800a118:	f7ff ff8c 	bl	800a034 <__multadd>
 800a11c:	45a0      	cmp	r8, r4
 800a11e:	d1f5      	bne.n	800a10c <__s2b+0x4c>
 800a120:	f1a5 0408 	sub.w	r4, r5, #8
 800a124:	444c      	add	r4, r9
 800a126:	1b2d      	subs	r5, r5, r4
 800a128:	1963      	adds	r3, r4, r5
 800a12a:	42bb      	cmp	r3, r7
 800a12c:	db04      	blt.n	800a138 <__s2b+0x78>
 800a12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a132:	340a      	adds	r4, #10
 800a134:	2509      	movs	r5, #9
 800a136:	e7f6      	b.n	800a126 <__s2b+0x66>
 800a138:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a13c:	4601      	mov	r1, r0
 800a13e:	3b30      	subs	r3, #48	@ 0x30
 800a140:	220a      	movs	r2, #10
 800a142:	4630      	mov	r0, r6
 800a144:	f7ff ff76 	bl	800a034 <__multadd>
 800a148:	e7ee      	b.n	800a128 <__s2b+0x68>
 800a14a:	bf00      	nop
 800a14c:	0800b65a 	.word	0x0800b65a
 800a150:	0800b6cb 	.word	0x0800b6cb

0800a154 <__hi0bits>:
 800a154:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a158:	4603      	mov	r3, r0
 800a15a:	bf36      	itet	cc
 800a15c:	0403      	lslcc	r3, r0, #16
 800a15e:	2000      	movcs	r0, #0
 800a160:	2010      	movcc	r0, #16
 800a162:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a166:	bf3c      	itt	cc
 800a168:	021b      	lslcc	r3, r3, #8
 800a16a:	3008      	addcc	r0, #8
 800a16c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a170:	bf3c      	itt	cc
 800a172:	011b      	lslcc	r3, r3, #4
 800a174:	3004      	addcc	r0, #4
 800a176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a17a:	bf3c      	itt	cc
 800a17c:	009b      	lslcc	r3, r3, #2
 800a17e:	3002      	addcc	r0, #2
 800a180:	2b00      	cmp	r3, #0
 800a182:	db05      	blt.n	800a190 <__hi0bits+0x3c>
 800a184:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a188:	f100 0001 	add.w	r0, r0, #1
 800a18c:	bf08      	it	eq
 800a18e:	2020      	moveq	r0, #32
 800a190:	4770      	bx	lr

0800a192 <__lo0bits>:
 800a192:	6803      	ldr	r3, [r0, #0]
 800a194:	4602      	mov	r2, r0
 800a196:	f013 0007 	ands.w	r0, r3, #7
 800a19a:	d00b      	beq.n	800a1b4 <__lo0bits+0x22>
 800a19c:	07d9      	lsls	r1, r3, #31
 800a19e:	d421      	bmi.n	800a1e4 <__lo0bits+0x52>
 800a1a0:	0798      	lsls	r0, r3, #30
 800a1a2:	bf49      	itett	mi
 800a1a4:	085b      	lsrmi	r3, r3, #1
 800a1a6:	089b      	lsrpl	r3, r3, #2
 800a1a8:	2001      	movmi	r0, #1
 800a1aa:	6013      	strmi	r3, [r2, #0]
 800a1ac:	bf5c      	itt	pl
 800a1ae:	6013      	strpl	r3, [r2, #0]
 800a1b0:	2002      	movpl	r0, #2
 800a1b2:	4770      	bx	lr
 800a1b4:	b299      	uxth	r1, r3
 800a1b6:	b909      	cbnz	r1, 800a1bc <__lo0bits+0x2a>
 800a1b8:	0c1b      	lsrs	r3, r3, #16
 800a1ba:	2010      	movs	r0, #16
 800a1bc:	b2d9      	uxtb	r1, r3
 800a1be:	b909      	cbnz	r1, 800a1c4 <__lo0bits+0x32>
 800a1c0:	3008      	adds	r0, #8
 800a1c2:	0a1b      	lsrs	r3, r3, #8
 800a1c4:	0719      	lsls	r1, r3, #28
 800a1c6:	bf04      	itt	eq
 800a1c8:	091b      	lsreq	r3, r3, #4
 800a1ca:	3004      	addeq	r0, #4
 800a1cc:	0799      	lsls	r1, r3, #30
 800a1ce:	bf04      	itt	eq
 800a1d0:	089b      	lsreq	r3, r3, #2
 800a1d2:	3002      	addeq	r0, #2
 800a1d4:	07d9      	lsls	r1, r3, #31
 800a1d6:	d403      	bmi.n	800a1e0 <__lo0bits+0x4e>
 800a1d8:	085b      	lsrs	r3, r3, #1
 800a1da:	f100 0001 	add.w	r0, r0, #1
 800a1de:	d003      	beq.n	800a1e8 <__lo0bits+0x56>
 800a1e0:	6013      	str	r3, [r2, #0]
 800a1e2:	4770      	bx	lr
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	4770      	bx	lr
 800a1e8:	2020      	movs	r0, #32
 800a1ea:	4770      	bx	lr

0800a1ec <__i2b>:
 800a1ec:	b510      	push	{r4, lr}
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	f7ff febd 	bl	8009f70 <_Balloc>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	b928      	cbnz	r0, 800a206 <__i2b+0x1a>
 800a1fa:	4b05      	ldr	r3, [pc, #20]	@ (800a210 <__i2b+0x24>)
 800a1fc:	4805      	ldr	r0, [pc, #20]	@ (800a214 <__i2b+0x28>)
 800a1fe:	f240 1145 	movw	r1, #325	@ 0x145
 800a202:	f7fe fbff 	bl	8008a04 <__assert_func>
 800a206:	2301      	movs	r3, #1
 800a208:	6144      	str	r4, [r0, #20]
 800a20a:	6103      	str	r3, [r0, #16]
 800a20c:	bd10      	pop	{r4, pc}
 800a20e:	bf00      	nop
 800a210:	0800b65a 	.word	0x0800b65a
 800a214:	0800b6cb 	.word	0x0800b6cb

0800a218 <__multiply>:
 800a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	4614      	mov	r4, r2
 800a21e:	690a      	ldr	r2, [r1, #16]
 800a220:	6923      	ldr	r3, [r4, #16]
 800a222:	429a      	cmp	r2, r3
 800a224:	bfa8      	it	ge
 800a226:	4623      	movge	r3, r4
 800a228:	460f      	mov	r7, r1
 800a22a:	bfa4      	itt	ge
 800a22c:	460c      	movge	r4, r1
 800a22e:	461f      	movge	r7, r3
 800a230:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a234:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a238:	68a3      	ldr	r3, [r4, #8]
 800a23a:	6861      	ldr	r1, [r4, #4]
 800a23c:	eb0a 0609 	add.w	r6, sl, r9
 800a240:	42b3      	cmp	r3, r6
 800a242:	b085      	sub	sp, #20
 800a244:	bfb8      	it	lt
 800a246:	3101      	addlt	r1, #1
 800a248:	f7ff fe92 	bl	8009f70 <_Balloc>
 800a24c:	b930      	cbnz	r0, 800a25c <__multiply+0x44>
 800a24e:	4602      	mov	r2, r0
 800a250:	4b44      	ldr	r3, [pc, #272]	@ (800a364 <__multiply+0x14c>)
 800a252:	4845      	ldr	r0, [pc, #276]	@ (800a368 <__multiply+0x150>)
 800a254:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a258:	f7fe fbd4 	bl	8008a04 <__assert_func>
 800a25c:	f100 0514 	add.w	r5, r0, #20
 800a260:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a264:	462b      	mov	r3, r5
 800a266:	2200      	movs	r2, #0
 800a268:	4543      	cmp	r3, r8
 800a26a:	d321      	bcc.n	800a2b0 <__multiply+0x98>
 800a26c:	f107 0114 	add.w	r1, r7, #20
 800a270:	f104 0214 	add.w	r2, r4, #20
 800a274:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a278:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a27c:	9302      	str	r3, [sp, #8]
 800a27e:	1b13      	subs	r3, r2, r4
 800a280:	3b15      	subs	r3, #21
 800a282:	f023 0303 	bic.w	r3, r3, #3
 800a286:	3304      	adds	r3, #4
 800a288:	f104 0715 	add.w	r7, r4, #21
 800a28c:	42ba      	cmp	r2, r7
 800a28e:	bf38      	it	cc
 800a290:	2304      	movcc	r3, #4
 800a292:	9301      	str	r3, [sp, #4]
 800a294:	9b02      	ldr	r3, [sp, #8]
 800a296:	9103      	str	r1, [sp, #12]
 800a298:	428b      	cmp	r3, r1
 800a29a:	d80c      	bhi.n	800a2b6 <__multiply+0x9e>
 800a29c:	2e00      	cmp	r6, #0
 800a29e:	dd03      	ble.n	800a2a8 <__multiply+0x90>
 800a2a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d05b      	beq.n	800a360 <__multiply+0x148>
 800a2a8:	6106      	str	r6, [r0, #16]
 800a2aa:	b005      	add	sp, #20
 800a2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b0:	f843 2b04 	str.w	r2, [r3], #4
 800a2b4:	e7d8      	b.n	800a268 <__multiply+0x50>
 800a2b6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a2ba:	f1ba 0f00 	cmp.w	sl, #0
 800a2be:	d024      	beq.n	800a30a <__multiply+0xf2>
 800a2c0:	f104 0e14 	add.w	lr, r4, #20
 800a2c4:	46a9      	mov	r9, r5
 800a2c6:	f04f 0c00 	mov.w	ip, #0
 800a2ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a2ce:	f8d9 3000 	ldr.w	r3, [r9]
 800a2d2:	fa1f fb87 	uxth.w	fp, r7
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800a2dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a2e0:	f8d9 7000 	ldr.w	r7, [r9]
 800a2e4:	4463      	add	r3, ip
 800a2e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a2ea:	fb0a c70b 	mla	r7, sl, fp, ip
 800a2ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a2f8:	4572      	cmp	r2, lr
 800a2fa:	f849 3b04 	str.w	r3, [r9], #4
 800a2fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a302:	d8e2      	bhi.n	800a2ca <__multiply+0xb2>
 800a304:	9b01      	ldr	r3, [sp, #4]
 800a306:	f845 c003 	str.w	ip, [r5, r3]
 800a30a:	9b03      	ldr	r3, [sp, #12]
 800a30c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a310:	3104      	adds	r1, #4
 800a312:	f1b9 0f00 	cmp.w	r9, #0
 800a316:	d021      	beq.n	800a35c <__multiply+0x144>
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	f104 0c14 	add.w	ip, r4, #20
 800a31e:	46ae      	mov	lr, r5
 800a320:	f04f 0a00 	mov.w	sl, #0
 800a324:	f8bc b000 	ldrh.w	fp, [ip]
 800a328:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a32c:	fb09 770b 	mla	r7, r9, fp, r7
 800a330:	4457      	add	r7, sl
 800a332:	b29b      	uxth	r3, r3
 800a334:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a338:	f84e 3b04 	str.w	r3, [lr], #4
 800a33c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a340:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a344:	f8be 3000 	ldrh.w	r3, [lr]
 800a348:	fb09 330a 	mla	r3, r9, sl, r3
 800a34c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a350:	4562      	cmp	r2, ip
 800a352:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a356:	d8e5      	bhi.n	800a324 <__multiply+0x10c>
 800a358:	9f01      	ldr	r7, [sp, #4]
 800a35a:	51eb      	str	r3, [r5, r7]
 800a35c:	3504      	adds	r5, #4
 800a35e:	e799      	b.n	800a294 <__multiply+0x7c>
 800a360:	3e01      	subs	r6, #1
 800a362:	e79b      	b.n	800a29c <__multiply+0x84>
 800a364:	0800b65a 	.word	0x0800b65a
 800a368:	0800b6cb 	.word	0x0800b6cb

0800a36c <__pow5mult>:
 800a36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a370:	4615      	mov	r5, r2
 800a372:	f012 0203 	ands.w	r2, r2, #3
 800a376:	4607      	mov	r7, r0
 800a378:	460e      	mov	r6, r1
 800a37a:	d007      	beq.n	800a38c <__pow5mult+0x20>
 800a37c:	4c25      	ldr	r4, [pc, #148]	@ (800a414 <__pow5mult+0xa8>)
 800a37e:	3a01      	subs	r2, #1
 800a380:	2300      	movs	r3, #0
 800a382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a386:	f7ff fe55 	bl	800a034 <__multadd>
 800a38a:	4606      	mov	r6, r0
 800a38c:	10ad      	asrs	r5, r5, #2
 800a38e:	d03d      	beq.n	800a40c <__pow5mult+0xa0>
 800a390:	69fc      	ldr	r4, [r7, #28]
 800a392:	b97c      	cbnz	r4, 800a3b4 <__pow5mult+0x48>
 800a394:	2010      	movs	r0, #16
 800a396:	f7ff fd23 	bl	8009de0 <malloc>
 800a39a:	4602      	mov	r2, r0
 800a39c:	61f8      	str	r0, [r7, #28]
 800a39e:	b928      	cbnz	r0, 800a3ac <__pow5mult+0x40>
 800a3a0:	4b1d      	ldr	r3, [pc, #116]	@ (800a418 <__pow5mult+0xac>)
 800a3a2:	481e      	ldr	r0, [pc, #120]	@ (800a41c <__pow5mult+0xb0>)
 800a3a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a3a8:	f7fe fb2c 	bl	8008a04 <__assert_func>
 800a3ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3b0:	6004      	str	r4, [r0, #0]
 800a3b2:	60c4      	str	r4, [r0, #12]
 800a3b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a3b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3bc:	b94c      	cbnz	r4, 800a3d2 <__pow5mult+0x66>
 800a3be:	f240 2171 	movw	r1, #625	@ 0x271
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	f7ff ff12 	bl	800a1ec <__i2b>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	6003      	str	r3, [r0, #0]
 800a3d2:	f04f 0900 	mov.w	r9, #0
 800a3d6:	07eb      	lsls	r3, r5, #31
 800a3d8:	d50a      	bpl.n	800a3f0 <__pow5mult+0x84>
 800a3da:	4631      	mov	r1, r6
 800a3dc:	4622      	mov	r2, r4
 800a3de:	4638      	mov	r0, r7
 800a3e0:	f7ff ff1a 	bl	800a218 <__multiply>
 800a3e4:	4631      	mov	r1, r6
 800a3e6:	4680      	mov	r8, r0
 800a3e8:	4638      	mov	r0, r7
 800a3ea:	f7ff fe01 	bl	8009ff0 <_Bfree>
 800a3ee:	4646      	mov	r6, r8
 800a3f0:	106d      	asrs	r5, r5, #1
 800a3f2:	d00b      	beq.n	800a40c <__pow5mult+0xa0>
 800a3f4:	6820      	ldr	r0, [r4, #0]
 800a3f6:	b938      	cbnz	r0, 800a408 <__pow5mult+0x9c>
 800a3f8:	4622      	mov	r2, r4
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f7ff ff0b 	bl	800a218 <__multiply>
 800a402:	6020      	str	r0, [r4, #0]
 800a404:	f8c0 9000 	str.w	r9, [r0]
 800a408:	4604      	mov	r4, r0
 800a40a:	e7e4      	b.n	800a3d6 <__pow5mult+0x6a>
 800a40c:	4630      	mov	r0, r6
 800a40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a412:	bf00      	nop
 800a414:	0800b724 	.word	0x0800b724
 800a418:	0800b5eb 	.word	0x0800b5eb
 800a41c:	0800b6cb 	.word	0x0800b6cb

0800a420 <__lshift>:
 800a420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a424:	460c      	mov	r4, r1
 800a426:	6849      	ldr	r1, [r1, #4]
 800a428:	6923      	ldr	r3, [r4, #16]
 800a42a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a42e:	68a3      	ldr	r3, [r4, #8]
 800a430:	4607      	mov	r7, r0
 800a432:	4691      	mov	r9, r2
 800a434:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a438:	f108 0601 	add.w	r6, r8, #1
 800a43c:	42b3      	cmp	r3, r6
 800a43e:	db0b      	blt.n	800a458 <__lshift+0x38>
 800a440:	4638      	mov	r0, r7
 800a442:	f7ff fd95 	bl	8009f70 <_Balloc>
 800a446:	4605      	mov	r5, r0
 800a448:	b948      	cbnz	r0, 800a45e <__lshift+0x3e>
 800a44a:	4602      	mov	r2, r0
 800a44c:	4b28      	ldr	r3, [pc, #160]	@ (800a4f0 <__lshift+0xd0>)
 800a44e:	4829      	ldr	r0, [pc, #164]	@ (800a4f4 <__lshift+0xd4>)
 800a450:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a454:	f7fe fad6 	bl	8008a04 <__assert_func>
 800a458:	3101      	adds	r1, #1
 800a45a:	005b      	lsls	r3, r3, #1
 800a45c:	e7ee      	b.n	800a43c <__lshift+0x1c>
 800a45e:	2300      	movs	r3, #0
 800a460:	f100 0114 	add.w	r1, r0, #20
 800a464:	f100 0210 	add.w	r2, r0, #16
 800a468:	4618      	mov	r0, r3
 800a46a:	4553      	cmp	r3, sl
 800a46c:	db33      	blt.n	800a4d6 <__lshift+0xb6>
 800a46e:	6920      	ldr	r0, [r4, #16]
 800a470:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a474:	f104 0314 	add.w	r3, r4, #20
 800a478:	f019 091f 	ands.w	r9, r9, #31
 800a47c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a480:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a484:	d02b      	beq.n	800a4de <__lshift+0xbe>
 800a486:	f1c9 0e20 	rsb	lr, r9, #32
 800a48a:	468a      	mov	sl, r1
 800a48c:	2200      	movs	r2, #0
 800a48e:	6818      	ldr	r0, [r3, #0]
 800a490:	fa00 f009 	lsl.w	r0, r0, r9
 800a494:	4310      	orrs	r0, r2
 800a496:	f84a 0b04 	str.w	r0, [sl], #4
 800a49a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a49e:	459c      	cmp	ip, r3
 800a4a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a4a4:	d8f3      	bhi.n	800a48e <__lshift+0x6e>
 800a4a6:	ebac 0304 	sub.w	r3, ip, r4
 800a4aa:	3b15      	subs	r3, #21
 800a4ac:	f023 0303 	bic.w	r3, r3, #3
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	f104 0015 	add.w	r0, r4, #21
 800a4b6:	4584      	cmp	ip, r0
 800a4b8:	bf38      	it	cc
 800a4ba:	2304      	movcc	r3, #4
 800a4bc:	50ca      	str	r2, [r1, r3]
 800a4be:	b10a      	cbz	r2, 800a4c4 <__lshift+0xa4>
 800a4c0:	f108 0602 	add.w	r6, r8, #2
 800a4c4:	3e01      	subs	r6, #1
 800a4c6:	4638      	mov	r0, r7
 800a4c8:	612e      	str	r6, [r5, #16]
 800a4ca:	4621      	mov	r1, r4
 800a4cc:	f7ff fd90 	bl	8009ff0 <_Bfree>
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a4da:	3301      	adds	r3, #1
 800a4dc:	e7c5      	b.n	800a46a <__lshift+0x4a>
 800a4de:	3904      	subs	r1, #4
 800a4e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4e8:	459c      	cmp	ip, r3
 800a4ea:	d8f9      	bhi.n	800a4e0 <__lshift+0xc0>
 800a4ec:	e7ea      	b.n	800a4c4 <__lshift+0xa4>
 800a4ee:	bf00      	nop
 800a4f0:	0800b65a 	.word	0x0800b65a
 800a4f4:	0800b6cb 	.word	0x0800b6cb

0800a4f8 <__mcmp>:
 800a4f8:	690a      	ldr	r2, [r1, #16]
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	6900      	ldr	r0, [r0, #16]
 800a4fe:	1a80      	subs	r0, r0, r2
 800a500:	b530      	push	{r4, r5, lr}
 800a502:	d10e      	bne.n	800a522 <__mcmp+0x2a>
 800a504:	3314      	adds	r3, #20
 800a506:	3114      	adds	r1, #20
 800a508:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a50c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a510:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a514:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a518:	4295      	cmp	r5, r2
 800a51a:	d003      	beq.n	800a524 <__mcmp+0x2c>
 800a51c:	d205      	bcs.n	800a52a <__mcmp+0x32>
 800a51e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a522:	bd30      	pop	{r4, r5, pc}
 800a524:	42a3      	cmp	r3, r4
 800a526:	d3f3      	bcc.n	800a510 <__mcmp+0x18>
 800a528:	e7fb      	b.n	800a522 <__mcmp+0x2a>
 800a52a:	2001      	movs	r0, #1
 800a52c:	e7f9      	b.n	800a522 <__mcmp+0x2a>
	...

0800a530 <__mdiff>:
 800a530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a534:	4689      	mov	r9, r1
 800a536:	4606      	mov	r6, r0
 800a538:	4611      	mov	r1, r2
 800a53a:	4648      	mov	r0, r9
 800a53c:	4614      	mov	r4, r2
 800a53e:	f7ff ffdb 	bl	800a4f8 <__mcmp>
 800a542:	1e05      	subs	r5, r0, #0
 800a544:	d112      	bne.n	800a56c <__mdiff+0x3c>
 800a546:	4629      	mov	r1, r5
 800a548:	4630      	mov	r0, r6
 800a54a:	f7ff fd11 	bl	8009f70 <_Balloc>
 800a54e:	4602      	mov	r2, r0
 800a550:	b928      	cbnz	r0, 800a55e <__mdiff+0x2e>
 800a552:	4b3f      	ldr	r3, [pc, #252]	@ (800a650 <__mdiff+0x120>)
 800a554:	f240 2137 	movw	r1, #567	@ 0x237
 800a558:	483e      	ldr	r0, [pc, #248]	@ (800a654 <__mdiff+0x124>)
 800a55a:	f7fe fa53 	bl	8008a04 <__assert_func>
 800a55e:	2301      	movs	r3, #1
 800a560:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a564:	4610      	mov	r0, r2
 800a566:	b003      	add	sp, #12
 800a568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56c:	bfbc      	itt	lt
 800a56e:	464b      	movlt	r3, r9
 800a570:	46a1      	movlt	r9, r4
 800a572:	4630      	mov	r0, r6
 800a574:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a578:	bfba      	itte	lt
 800a57a:	461c      	movlt	r4, r3
 800a57c:	2501      	movlt	r5, #1
 800a57e:	2500      	movge	r5, #0
 800a580:	f7ff fcf6 	bl	8009f70 <_Balloc>
 800a584:	4602      	mov	r2, r0
 800a586:	b918      	cbnz	r0, 800a590 <__mdiff+0x60>
 800a588:	4b31      	ldr	r3, [pc, #196]	@ (800a650 <__mdiff+0x120>)
 800a58a:	f240 2145 	movw	r1, #581	@ 0x245
 800a58e:	e7e3      	b.n	800a558 <__mdiff+0x28>
 800a590:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a594:	6926      	ldr	r6, [r4, #16]
 800a596:	60c5      	str	r5, [r0, #12]
 800a598:	f109 0310 	add.w	r3, r9, #16
 800a59c:	f109 0514 	add.w	r5, r9, #20
 800a5a0:	f104 0e14 	add.w	lr, r4, #20
 800a5a4:	f100 0b14 	add.w	fp, r0, #20
 800a5a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a5ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a5b0:	9301      	str	r3, [sp, #4]
 800a5b2:	46d9      	mov	r9, fp
 800a5b4:	f04f 0c00 	mov.w	ip, #0
 800a5b8:	9b01      	ldr	r3, [sp, #4]
 800a5ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a5be:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a5c2:	9301      	str	r3, [sp, #4]
 800a5c4:	fa1f f38a 	uxth.w	r3, sl
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	b283      	uxth	r3, r0
 800a5cc:	1acb      	subs	r3, r1, r3
 800a5ce:	0c00      	lsrs	r0, r0, #16
 800a5d0:	4463      	add	r3, ip
 800a5d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a5d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a5e0:	4576      	cmp	r6, lr
 800a5e2:	f849 3b04 	str.w	r3, [r9], #4
 800a5e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a5ea:	d8e5      	bhi.n	800a5b8 <__mdiff+0x88>
 800a5ec:	1b33      	subs	r3, r6, r4
 800a5ee:	3b15      	subs	r3, #21
 800a5f0:	f023 0303 	bic.w	r3, r3, #3
 800a5f4:	3415      	adds	r4, #21
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	42a6      	cmp	r6, r4
 800a5fa:	bf38      	it	cc
 800a5fc:	2304      	movcc	r3, #4
 800a5fe:	441d      	add	r5, r3
 800a600:	445b      	add	r3, fp
 800a602:	461e      	mov	r6, r3
 800a604:	462c      	mov	r4, r5
 800a606:	4544      	cmp	r4, r8
 800a608:	d30e      	bcc.n	800a628 <__mdiff+0xf8>
 800a60a:	f108 0103 	add.w	r1, r8, #3
 800a60e:	1b49      	subs	r1, r1, r5
 800a610:	f021 0103 	bic.w	r1, r1, #3
 800a614:	3d03      	subs	r5, #3
 800a616:	45a8      	cmp	r8, r5
 800a618:	bf38      	it	cc
 800a61a:	2100      	movcc	r1, #0
 800a61c:	440b      	add	r3, r1
 800a61e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a622:	b191      	cbz	r1, 800a64a <__mdiff+0x11a>
 800a624:	6117      	str	r7, [r2, #16]
 800a626:	e79d      	b.n	800a564 <__mdiff+0x34>
 800a628:	f854 1b04 	ldr.w	r1, [r4], #4
 800a62c:	46e6      	mov	lr, ip
 800a62e:	0c08      	lsrs	r0, r1, #16
 800a630:	fa1c fc81 	uxtah	ip, ip, r1
 800a634:	4471      	add	r1, lr
 800a636:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a63a:	b289      	uxth	r1, r1
 800a63c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a640:	f846 1b04 	str.w	r1, [r6], #4
 800a644:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a648:	e7dd      	b.n	800a606 <__mdiff+0xd6>
 800a64a:	3f01      	subs	r7, #1
 800a64c:	e7e7      	b.n	800a61e <__mdiff+0xee>
 800a64e:	bf00      	nop
 800a650:	0800b65a 	.word	0x0800b65a
 800a654:	0800b6cb 	.word	0x0800b6cb

0800a658 <__ulp>:
 800a658:	b082      	sub	sp, #8
 800a65a:	ed8d 0b00 	vstr	d0, [sp]
 800a65e:	9a01      	ldr	r2, [sp, #4]
 800a660:	4b0f      	ldr	r3, [pc, #60]	@ (800a6a0 <__ulp+0x48>)
 800a662:	4013      	ands	r3, r2
 800a664:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	dc08      	bgt.n	800a67e <__ulp+0x26>
 800a66c:	425b      	negs	r3, r3
 800a66e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a672:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a676:	da04      	bge.n	800a682 <__ulp+0x2a>
 800a678:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a67c:	4113      	asrs	r3, r2
 800a67e:	2200      	movs	r2, #0
 800a680:	e008      	b.n	800a694 <__ulp+0x3c>
 800a682:	f1a2 0314 	sub.w	r3, r2, #20
 800a686:	2b1e      	cmp	r3, #30
 800a688:	bfda      	itte	le
 800a68a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a68e:	40da      	lsrle	r2, r3
 800a690:	2201      	movgt	r2, #1
 800a692:	2300      	movs	r3, #0
 800a694:	4619      	mov	r1, r3
 800a696:	4610      	mov	r0, r2
 800a698:	ec41 0b10 	vmov	d0, r0, r1
 800a69c:	b002      	add	sp, #8
 800a69e:	4770      	bx	lr
 800a6a0:	7ff00000 	.word	0x7ff00000

0800a6a4 <__b2d>:
 800a6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a8:	6906      	ldr	r6, [r0, #16]
 800a6aa:	f100 0814 	add.w	r8, r0, #20
 800a6ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a6b2:	1f37      	subs	r7, r6, #4
 800a6b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a6b8:	4610      	mov	r0, r2
 800a6ba:	f7ff fd4b 	bl	800a154 <__hi0bits>
 800a6be:	f1c0 0320 	rsb	r3, r0, #32
 800a6c2:	280a      	cmp	r0, #10
 800a6c4:	600b      	str	r3, [r1, #0]
 800a6c6:	491b      	ldr	r1, [pc, #108]	@ (800a734 <__b2d+0x90>)
 800a6c8:	dc15      	bgt.n	800a6f6 <__b2d+0x52>
 800a6ca:	f1c0 0c0b 	rsb	ip, r0, #11
 800a6ce:	fa22 f30c 	lsr.w	r3, r2, ip
 800a6d2:	45b8      	cmp	r8, r7
 800a6d4:	ea43 0501 	orr.w	r5, r3, r1
 800a6d8:	bf34      	ite	cc
 800a6da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a6de:	2300      	movcs	r3, #0
 800a6e0:	3015      	adds	r0, #21
 800a6e2:	fa02 f000 	lsl.w	r0, r2, r0
 800a6e6:	fa23 f30c 	lsr.w	r3, r3, ip
 800a6ea:	4303      	orrs	r3, r0
 800a6ec:	461c      	mov	r4, r3
 800a6ee:	ec45 4b10 	vmov	d0, r4, r5
 800a6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6f6:	45b8      	cmp	r8, r7
 800a6f8:	bf3a      	itte	cc
 800a6fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a6fe:	f1a6 0708 	subcc.w	r7, r6, #8
 800a702:	2300      	movcs	r3, #0
 800a704:	380b      	subs	r0, #11
 800a706:	d012      	beq.n	800a72e <__b2d+0x8a>
 800a708:	f1c0 0120 	rsb	r1, r0, #32
 800a70c:	fa23 f401 	lsr.w	r4, r3, r1
 800a710:	4082      	lsls	r2, r0
 800a712:	4322      	orrs	r2, r4
 800a714:	4547      	cmp	r7, r8
 800a716:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a71a:	bf8c      	ite	hi
 800a71c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a720:	2200      	movls	r2, #0
 800a722:	4083      	lsls	r3, r0
 800a724:	40ca      	lsrs	r2, r1
 800a726:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a72a:	4313      	orrs	r3, r2
 800a72c:	e7de      	b.n	800a6ec <__b2d+0x48>
 800a72e:	ea42 0501 	orr.w	r5, r2, r1
 800a732:	e7db      	b.n	800a6ec <__b2d+0x48>
 800a734:	3ff00000 	.word	0x3ff00000

0800a738 <__d2b>:
 800a738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a73c:	460f      	mov	r7, r1
 800a73e:	2101      	movs	r1, #1
 800a740:	ec59 8b10 	vmov	r8, r9, d0
 800a744:	4616      	mov	r6, r2
 800a746:	f7ff fc13 	bl	8009f70 <_Balloc>
 800a74a:	4604      	mov	r4, r0
 800a74c:	b930      	cbnz	r0, 800a75c <__d2b+0x24>
 800a74e:	4602      	mov	r2, r0
 800a750:	4b23      	ldr	r3, [pc, #140]	@ (800a7e0 <__d2b+0xa8>)
 800a752:	4824      	ldr	r0, [pc, #144]	@ (800a7e4 <__d2b+0xac>)
 800a754:	f240 310f 	movw	r1, #783	@ 0x30f
 800a758:	f7fe f954 	bl	8008a04 <__assert_func>
 800a75c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a764:	b10d      	cbz	r5, 800a76a <__d2b+0x32>
 800a766:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a76a:	9301      	str	r3, [sp, #4]
 800a76c:	f1b8 0300 	subs.w	r3, r8, #0
 800a770:	d023      	beq.n	800a7ba <__d2b+0x82>
 800a772:	4668      	mov	r0, sp
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	f7ff fd0c 	bl	800a192 <__lo0bits>
 800a77a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a77e:	b1d0      	cbz	r0, 800a7b6 <__d2b+0x7e>
 800a780:	f1c0 0320 	rsb	r3, r0, #32
 800a784:	fa02 f303 	lsl.w	r3, r2, r3
 800a788:	430b      	orrs	r3, r1
 800a78a:	40c2      	lsrs	r2, r0
 800a78c:	6163      	str	r3, [r4, #20]
 800a78e:	9201      	str	r2, [sp, #4]
 800a790:	9b01      	ldr	r3, [sp, #4]
 800a792:	61a3      	str	r3, [r4, #24]
 800a794:	2b00      	cmp	r3, #0
 800a796:	bf0c      	ite	eq
 800a798:	2201      	moveq	r2, #1
 800a79a:	2202      	movne	r2, #2
 800a79c:	6122      	str	r2, [r4, #16]
 800a79e:	b1a5      	cbz	r5, 800a7ca <__d2b+0x92>
 800a7a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a7a4:	4405      	add	r5, r0
 800a7a6:	603d      	str	r5, [r7, #0]
 800a7a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a7ac:	6030      	str	r0, [r6, #0]
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	b003      	add	sp, #12
 800a7b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7b6:	6161      	str	r1, [r4, #20]
 800a7b8:	e7ea      	b.n	800a790 <__d2b+0x58>
 800a7ba:	a801      	add	r0, sp, #4
 800a7bc:	f7ff fce9 	bl	800a192 <__lo0bits>
 800a7c0:	9b01      	ldr	r3, [sp, #4]
 800a7c2:	6163      	str	r3, [r4, #20]
 800a7c4:	3020      	adds	r0, #32
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	e7e8      	b.n	800a79c <__d2b+0x64>
 800a7ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a7d2:	6038      	str	r0, [r7, #0]
 800a7d4:	6918      	ldr	r0, [r3, #16]
 800a7d6:	f7ff fcbd 	bl	800a154 <__hi0bits>
 800a7da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7de:	e7e5      	b.n	800a7ac <__d2b+0x74>
 800a7e0:	0800b65a 	.word	0x0800b65a
 800a7e4:	0800b6cb 	.word	0x0800b6cb

0800a7e8 <__ratio>:
 800a7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ec:	b085      	sub	sp, #20
 800a7ee:	e9cd 1000 	strd	r1, r0, [sp]
 800a7f2:	a902      	add	r1, sp, #8
 800a7f4:	f7ff ff56 	bl	800a6a4 <__b2d>
 800a7f8:	9800      	ldr	r0, [sp, #0]
 800a7fa:	a903      	add	r1, sp, #12
 800a7fc:	ec55 4b10 	vmov	r4, r5, d0
 800a800:	f7ff ff50 	bl	800a6a4 <__b2d>
 800a804:	9b01      	ldr	r3, [sp, #4]
 800a806:	6919      	ldr	r1, [r3, #16]
 800a808:	9b00      	ldr	r3, [sp, #0]
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	1ac9      	subs	r1, r1, r3
 800a80e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a812:	1a9b      	subs	r3, r3, r2
 800a814:	ec5b ab10 	vmov	sl, fp, d0
 800a818:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	bfce      	itee	gt
 800a820:	462a      	movgt	r2, r5
 800a822:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a826:	465a      	movle	r2, fp
 800a828:	462f      	mov	r7, r5
 800a82a:	46d9      	mov	r9, fp
 800a82c:	bfcc      	ite	gt
 800a82e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a832:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a836:	464b      	mov	r3, r9
 800a838:	4652      	mov	r2, sl
 800a83a:	4620      	mov	r0, r4
 800a83c:	4639      	mov	r1, r7
 800a83e:	f7f6 f815 	bl	800086c <__aeabi_ddiv>
 800a842:	ec41 0b10 	vmov	d0, r0, r1
 800a846:	b005      	add	sp, #20
 800a848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a84c <__copybits>:
 800a84c:	3901      	subs	r1, #1
 800a84e:	b570      	push	{r4, r5, r6, lr}
 800a850:	1149      	asrs	r1, r1, #5
 800a852:	6914      	ldr	r4, [r2, #16]
 800a854:	3101      	adds	r1, #1
 800a856:	f102 0314 	add.w	r3, r2, #20
 800a85a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a85e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a862:	1f05      	subs	r5, r0, #4
 800a864:	42a3      	cmp	r3, r4
 800a866:	d30c      	bcc.n	800a882 <__copybits+0x36>
 800a868:	1aa3      	subs	r3, r4, r2
 800a86a:	3b11      	subs	r3, #17
 800a86c:	f023 0303 	bic.w	r3, r3, #3
 800a870:	3211      	adds	r2, #17
 800a872:	42a2      	cmp	r2, r4
 800a874:	bf88      	it	hi
 800a876:	2300      	movhi	r3, #0
 800a878:	4418      	add	r0, r3
 800a87a:	2300      	movs	r3, #0
 800a87c:	4288      	cmp	r0, r1
 800a87e:	d305      	bcc.n	800a88c <__copybits+0x40>
 800a880:	bd70      	pop	{r4, r5, r6, pc}
 800a882:	f853 6b04 	ldr.w	r6, [r3], #4
 800a886:	f845 6f04 	str.w	r6, [r5, #4]!
 800a88a:	e7eb      	b.n	800a864 <__copybits+0x18>
 800a88c:	f840 3b04 	str.w	r3, [r0], #4
 800a890:	e7f4      	b.n	800a87c <__copybits+0x30>

0800a892 <__any_on>:
 800a892:	f100 0214 	add.w	r2, r0, #20
 800a896:	6900      	ldr	r0, [r0, #16]
 800a898:	114b      	asrs	r3, r1, #5
 800a89a:	4298      	cmp	r0, r3
 800a89c:	b510      	push	{r4, lr}
 800a89e:	db11      	blt.n	800a8c4 <__any_on+0x32>
 800a8a0:	dd0a      	ble.n	800a8b8 <__any_on+0x26>
 800a8a2:	f011 011f 	ands.w	r1, r1, #31
 800a8a6:	d007      	beq.n	800a8b8 <__any_on+0x26>
 800a8a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a8ac:	fa24 f001 	lsr.w	r0, r4, r1
 800a8b0:	fa00 f101 	lsl.w	r1, r0, r1
 800a8b4:	428c      	cmp	r4, r1
 800a8b6:	d10b      	bne.n	800a8d0 <__any_on+0x3e>
 800a8b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d803      	bhi.n	800a8c8 <__any_on+0x36>
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	bd10      	pop	{r4, pc}
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	e7f7      	b.n	800a8b8 <__any_on+0x26>
 800a8c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8cc:	2900      	cmp	r1, #0
 800a8ce:	d0f5      	beq.n	800a8bc <__any_on+0x2a>
 800a8d0:	2001      	movs	r0, #1
 800a8d2:	e7f6      	b.n	800a8c2 <__any_on+0x30>

0800a8d4 <__ascii_wctomb>:
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	4608      	mov	r0, r1
 800a8d8:	b141      	cbz	r1, 800a8ec <__ascii_wctomb+0x18>
 800a8da:	2aff      	cmp	r2, #255	@ 0xff
 800a8dc:	d904      	bls.n	800a8e8 <__ascii_wctomb+0x14>
 800a8de:	228a      	movs	r2, #138	@ 0x8a
 800a8e0:	601a      	str	r2, [r3, #0]
 800a8e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8e6:	4770      	bx	lr
 800a8e8:	700a      	strb	r2, [r1, #0]
 800a8ea:	2001      	movs	r0, #1
 800a8ec:	4770      	bx	lr

0800a8ee <__ssputs_r>:
 800a8ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f2:	688e      	ldr	r6, [r1, #8]
 800a8f4:	461f      	mov	r7, r3
 800a8f6:	42be      	cmp	r6, r7
 800a8f8:	680b      	ldr	r3, [r1, #0]
 800a8fa:	4682      	mov	sl, r0
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	4690      	mov	r8, r2
 800a900:	d82d      	bhi.n	800a95e <__ssputs_r+0x70>
 800a902:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a906:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a90a:	d026      	beq.n	800a95a <__ssputs_r+0x6c>
 800a90c:	6965      	ldr	r5, [r4, #20]
 800a90e:	6909      	ldr	r1, [r1, #16]
 800a910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a914:	eba3 0901 	sub.w	r9, r3, r1
 800a918:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a91c:	1c7b      	adds	r3, r7, #1
 800a91e:	444b      	add	r3, r9
 800a920:	106d      	asrs	r5, r5, #1
 800a922:	429d      	cmp	r5, r3
 800a924:	bf38      	it	cc
 800a926:	461d      	movcc	r5, r3
 800a928:	0553      	lsls	r3, r2, #21
 800a92a:	d527      	bpl.n	800a97c <__ssputs_r+0x8e>
 800a92c:	4629      	mov	r1, r5
 800a92e:	f7ff fa81 	bl	8009e34 <_malloc_r>
 800a932:	4606      	mov	r6, r0
 800a934:	b360      	cbz	r0, 800a990 <__ssputs_r+0xa2>
 800a936:	6921      	ldr	r1, [r4, #16]
 800a938:	464a      	mov	r2, r9
 800a93a:	f7fe f844 	bl	80089c6 <memcpy>
 800a93e:	89a3      	ldrh	r3, [r4, #12]
 800a940:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a948:	81a3      	strh	r3, [r4, #12]
 800a94a:	6126      	str	r6, [r4, #16]
 800a94c:	6165      	str	r5, [r4, #20]
 800a94e:	444e      	add	r6, r9
 800a950:	eba5 0509 	sub.w	r5, r5, r9
 800a954:	6026      	str	r6, [r4, #0]
 800a956:	60a5      	str	r5, [r4, #8]
 800a958:	463e      	mov	r6, r7
 800a95a:	42be      	cmp	r6, r7
 800a95c:	d900      	bls.n	800a960 <__ssputs_r+0x72>
 800a95e:	463e      	mov	r6, r7
 800a960:	6820      	ldr	r0, [r4, #0]
 800a962:	4632      	mov	r2, r6
 800a964:	4641      	mov	r1, r8
 800a966:	f000 f9d7 	bl	800ad18 <memmove>
 800a96a:	68a3      	ldr	r3, [r4, #8]
 800a96c:	1b9b      	subs	r3, r3, r6
 800a96e:	60a3      	str	r3, [r4, #8]
 800a970:	6823      	ldr	r3, [r4, #0]
 800a972:	4433      	add	r3, r6
 800a974:	6023      	str	r3, [r4, #0]
 800a976:	2000      	movs	r0, #0
 800a978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a97c:	462a      	mov	r2, r5
 800a97e:	f000 fa10 	bl	800ada2 <_realloc_r>
 800a982:	4606      	mov	r6, r0
 800a984:	2800      	cmp	r0, #0
 800a986:	d1e0      	bne.n	800a94a <__ssputs_r+0x5c>
 800a988:	6921      	ldr	r1, [r4, #16]
 800a98a:	4650      	mov	r0, sl
 800a98c:	f7fe fea4 	bl	80096d8 <_free_r>
 800a990:	230c      	movs	r3, #12
 800a992:	f8ca 3000 	str.w	r3, [sl]
 800a996:	89a3      	ldrh	r3, [r4, #12]
 800a998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a99c:	81a3      	strh	r3, [r4, #12]
 800a99e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9a2:	e7e9      	b.n	800a978 <__ssputs_r+0x8a>

0800a9a4 <_svfiprintf_r>:
 800a9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a8:	4698      	mov	r8, r3
 800a9aa:	898b      	ldrh	r3, [r1, #12]
 800a9ac:	061b      	lsls	r3, r3, #24
 800a9ae:	b09d      	sub	sp, #116	@ 0x74
 800a9b0:	4607      	mov	r7, r0
 800a9b2:	460d      	mov	r5, r1
 800a9b4:	4614      	mov	r4, r2
 800a9b6:	d510      	bpl.n	800a9da <_svfiprintf_r+0x36>
 800a9b8:	690b      	ldr	r3, [r1, #16]
 800a9ba:	b973      	cbnz	r3, 800a9da <_svfiprintf_r+0x36>
 800a9bc:	2140      	movs	r1, #64	@ 0x40
 800a9be:	f7ff fa39 	bl	8009e34 <_malloc_r>
 800a9c2:	6028      	str	r0, [r5, #0]
 800a9c4:	6128      	str	r0, [r5, #16]
 800a9c6:	b930      	cbnz	r0, 800a9d6 <_svfiprintf_r+0x32>
 800a9c8:	230c      	movs	r3, #12
 800a9ca:	603b      	str	r3, [r7, #0]
 800a9cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9d0:	b01d      	add	sp, #116	@ 0x74
 800a9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d6:	2340      	movs	r3, #64	@ 0x40
 800a9d8:	616b      	str	r3, [r5, #20]
 800a9da:	2300      	movs	r3, #0
 800a9dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9de:	2320      	movs	r3, #32
 800a9e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9e8:	2330      	movs	r3, #48	@ 0x30
 800a9ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ab88 <_svfiprintf_r+0x1e4>
 800a9ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9f2:	f04f 0901 	mov.w	r9, #1
 800a9f6:	4623      	mov	r3, r4
 800a9f8:	469a      	mov	sl, r3
 800a9fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9fe:	b10a      	cbz	r2, 800aa04 <_svfiprintf_r+0x60>
 800aa00:	2a25      	cmp	r2, #37	@ 0x25
 800aa02:	d1f9      	bne.n	800a9f8 <_svfiprintf_r+0x54>
 800aa04:	ebba 0b04 	subs.w	fp, sl, r4
 800aa08:	d00b      	beq.n	800aa22 <_svfiprintf_r+0x7e>
 800aa0a:	465b      	mov	r3, fp
 800aa0c:	4622      	mov	r2, r4
 800aa0e:	4629      	mov	r1, r5
 800aa10:	4638      	mov	r0, r7
 800aa12:	f7ff ff6c 	bl	800a8ee <__ssputs_r>
 800aa16:	3001      	adds	r0, #1
 800aa18:	f000 80a7 	beq.w	800ab6a <_svfiprintf_r+0x1c6>
 800aa1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa1e:	445a      	add	r2, fp
 800aa20:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa22:	f89a 3000 	ldrb.w	r3, [sl]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	f000 809f 	beq.w	800ab6a <_svfiprintf_r+0x1c6>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa36:	f10a 0a01 	add.w	sl, sl, #1
 800aa3a:	9304      	str	r3, [sp, #16]
 800aa3c:	9307      	str	r3, [sp, #28]
 800aa3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa42:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa44:	4654      	mov	r4, sl
 800aa46:	2205      	movs	r2, #5
 800aa48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa4c:	484e      	ldr	r0, [pc, #312]	@ (800ab88 <_svfiprintf_r+0x1e4>)
 800aa4e:	f7f5 fbcf 	bl	80001f0 <memchr>
 800aa52:	9a04      	ldr	r2, [sp, #16]
 800aa54:	b9d8      	cbnz	r0, 800aa8e <_svfiprintf_r+0xea>
 800aa56:	06d0      	lsls	r0, r2, #27
 800aa58:	bf44      	itt	mi
 800aa5a:	2320      	movmi	r3, #32
 800aa5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa60:	0711      	lsls	r1, r2, #28
 800aa62:	bf44      	itt	mi
 800aa64:	232b      	movmi	r3, #43	@ 0x2b
 800aa66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa6a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa70:	d015      	beq.n	800aa9e <_svfiprintf_r+0xfa>
 800aa72:	9a07      	ldr	r2, [sp, #28]
 800aa74:	4654      	mov	r4, sl
 800aa76:	2000      	movs	r0, #0
 800aa78:	f04f 0c0a 	mov.w	ip, #10
 800aa7c:	4621      	mov	r1, r4
 800aa7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa82:	3b30      	subs	r3, #48	@ 0x30
 800aa84:	2b09      	cmp	r3, #9
 800aa86:	d94b      	bls.n	800ab20 <_svfiprintf_r+0x17c>
 800aa88:	b1b0      	cbz	r0, 800aab8 <_svfiprintf_r+0x114>
 800aa8a:	9207      	str	r2, [sp, #28]
 800aa8c:	e014      	b.n	800aab8 <_svfiprintf_r+0x114>
 800aa8e:	eba0 0308 	sub.w	r3, r0, r8
 800aa92:	fa09 f303 	lsl.w	r3, r9, r3
 800aa96:	4313      	orrs	r3, r2
 800aa98:	9304      	str	r3, [sp, #16]
 800aa9a:	46a2      	mov	sl, r4
 800aa9c:	e7d2      	b.n	800aa44 <_svfiprintf_r+0xa0>
 800aa9e:	9b03      	ldr	r3, [sp, #12]
 800aaa0:	1d19      	adds	r1, r3, #4
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	9103      	str	r1, [sp, #12]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	bfbb      	ittet	lt
 800aaaa:	425b      	neglt	r3, r3
 800aaac:	f042 0202 	orrlt.w	r2, r2, #2
 800aab0:	9307      	strge	r3, [sp, #28]
 800aab2:	9307      	strlt	r3, [sp, #28]
 800aab4:	bfb8      	it	lt
 800aab6:	9204      	strlt	r2, [sp, #16]
 800aab8:	7823      	ldrb	r3, [r4, #0]
 800aaba:	2b2e      	cmp	r3, #46	@ 0x2e
 800aabc:	d10a      	bne.n	800aad4 <_svfiprintf_r+0x130>
 800aabe:	7863      	ldrb	r3, [r4, #1]
 800aac0:	2b2a      	cmp	r3, #42	@ 0x2a
 800aac2:	d132      	bne.n	800ab2a <_svfiprintf_r+0x186>
 800aac4:	9b03      	ldr	r3, [sp, #12]
 800aac6:	1d1a      	adds	r2, r3, #4
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	9203      	str	r2, [sp, #12]
 800aacc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aad0:	3402      	adds	r4, #2
 800aad2:	9305      	str	r3, [sp, #20]
 800aad4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ab98 <_svfiprintf_r+0x1f4>
 800aad8:	7821      	ldrb	r1, [r4, #0]
 800aada:	2203      	movs	r2, #3
 800aadc:	4650      	mov	r0, sl
 800aade:	f7f5 fb87 	bl	80001f0 <memchr>
 800aae2:	b138      	cbz	r0, 800aaf4 <_svfiprintf_r+0x150>
 800aae4:	9b04      	ldr	r3, [sp, #16]
 800aae6:	eba0 000a 	sub.w	r0, r0, sl
 800aaea:	2240      	movs	r2, #64	@ 0x40
 800aaec:	4082      	lsls	r2, r0
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	3401      	adds	r4, #1
 800aaf2:	9304      	str	r3, [sp, #16]
 800aaf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaf8:	4824      	ldr	r0, [pc, #144]	@ (800ab8c <_svfiprintf_r+0x1e8>)
 800aafa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aafe:	2206      	movs	r2, #6
 800ab00:	f7f5 fb76 	bl	80001f0 <memchr>
 800ab04:	2800      	cmp	r0, #0
 800ab06:	d036      	beq.n	800ab76 <_svfiprintf_r+0x1d2>
 800ab08:	4b21      	ldr	r3, [pc, #132]	@ (800ab90 <_svfiprintf_r+0x1ec>)
 800ab0a:	bb1b      	cbnz	r3, 800ab54 <_svfiprintf_r+0x1b0>
 800ab0c:	9b03      	ldr	r3, [sp, #12]
 800ab0e:	3307      	adds	r3, #7
 800ab10:	f023 0307 	bic.w	r3, r3, #7
 800ab14:	3308      	adds	r3, #8
 800ab16:	9303      	str	r3, [sp, #12]
 800ab18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab1a:	4433      	add	r3, r6
 800ab1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab1e:	e76a      	b.n	800a9f6 <_svfiprintf_r+0x52>
 800ab20:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab24:	460c      	mov	r4, r1
 800ab26:	2001      	movs	r0, #1
 800ab28:	e7a8      	b.n	800aa7c <_svfiprintf_r+0xd8>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	3401      	adds	r4, #1
 800ab2e:	9305      	str	r3, [sp, #20]
 800ab30:	4619      	mov	r1, r3
 800ab32:	f04f 0c0a 	mov.w	ip, #10
 800ab36:	4620      	mov	r0, r4
 800ab38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab3c:	3a30      	subs	r2, #48	@ 0x30
 800ab3e:	2a09      	cmp	r2, #9
 800ab40:	d903      	bls.n	800ab4a <_svfiprintf_r+0x1a6>
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d0c6      	beq.n	800aad4 <_svfiprintf_r+0x130>
 800ab46:	9105      	str	r1, [sp, #20]
 800ab48:	e7c4      	b.n	800aad4 <_svfiprintf_r+0x130>
 800ab4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab4e:	4604      	mov	r4, r0
 800ab50:	2301      	movs	r3, #1
 800ab52:	e7f0      	b.n	800ab36 <_svfiprintf_r+0x192>
 800ab54:	ab03      	add	r3, sp, #12
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	462a      	mov	r2, r5
 800ab5a:	4b0e      	ldr	r3, [pc, #56]	@ (800ab94 <_svfiprintf_r+0x1f0>)
 800ab5c:	a904      	add	r1, sp, #16
 800ab5e:	4638      	mov	r0, r7
 800ab60:	f7fc ff30 	bl	80079c4 <_printf_float>
 800ab64:	1c42      	adds	r2, r0, #1
 800ab66:	4606      	mov	r6, r0
 800ab68:	d1d6      	bne.n	800ab18 <_svfiprintf_r+0x174>
 800ab6a:	89ab      	ldrh	r3, [r5, #12]
 800ab6c:	065b      	lsls	r3, r3, #25
 800ab6e:	f53f af2d 	bmi.w	800a9cc <_svfiprintf_r+0x28>
 800ab72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab74:	e72c      	b.n	800a9d0 <_svfiprintf_r+0x2c>
 800ab76:	ab03      	add	r3, sp, #12
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	462a      	mov	r2, r5
 800ab7c:	4b05      	ldr	r3, [pc, #20]	@ (800ab94 <_svfiprintf_r+0x1f0>)
 800ab7e:	a904      	add	r1, sp, #16
 800ab80:	4638      	mov	r0, r7
 800ab82:	f7fd f9b7 	bl	8007ef4 <_printf_i>
 800ab86:	e7ed      	b.n	800ab64 <_svfiprintf_r+0x1c0>
 800ab88:	0800b820 	.word	0x0800b820
 800ab8c:	0800b82a 	.word	0x0800b82a
 800ab90:	080079c5 	.word	0x080079c5
 800ab94:	0800a8ef 	.word	0x0800a8ef
 800ab98:	0800b826 	.word	0x0800b826

0800ab9c <__sflush_r>:
 800ab9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba4:	0716      	lsls	r6, r2, #28
 800aba6:	4605      	mov	r5, r0
 800aba8:	460c      	mov	r4, r1
 800abaa:	d454      	bmi.n	800ac56 <__sflush_r+0xba>
 800abac:	684b      	ldr	r3, [r1, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	dc02      	bgt.n	800abb8 <__sflush_r+0x1c>
 800abb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	dd48      	ble.n	800ac4a <__sflush_r+0xae>
 800abb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abba:	2e00      	cmp	r6, #0
 800abbc:	d045      	beq.n	800ac4a <__sflush_r+0xae>
 800abbe:	2300      	movs	r3, #0
 800abc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800abc4:	682f      	ldr	r7, [r5, #0]
 800abc6:	6a21      	ldr	r1, [r4, #32]
 800abc8:	602b      	str	r3, [r5, #0]
 800abca:	d030      	beq.n	800ac2e <__sflush_r+0x92>
 800abcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800abce:	89a3      	ldrh	r3, [r4, #12]
 800abd0:	0759      	lsls	r1, r3, #29
 800abd2:	d505      	bpl.n	800abe0 <__sflush_r+0x44>
 800abd4:	6863      	ldr	r3, [r4, #4]
 800abd6:	1ad2      	subs	r2, r2, r3
 800abd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800abda:	b10b      	cbz	r3, 800abe0 <__sflush_r+0x44>
 800abdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800abde:	1ad2      	subs	r2, r2, r3
 800abe0:	2300      	movs	r3, #0
 800abe2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abe4:	6a21      	ldr	r1, [r4, #32]
 800abe6:	4628      	mov	r0, r5
 800abe8:	47b0      	blx	r6
 800abea:	1c43      	adds	r3, r0, #1
 800abec:	89a3      	ldrh	r3, [r4, #12]
 800abee:	d106      	bne.n	800abfe <__sflush_r+0x62>
 800abf0:	6829      	ldr	r1, [r5, #0]
 800abf2:	291d      	cmp	r1, #29
 800abf4:	d82b      	bhi.n	800ac4e <__sflush_r+0xb2>
 800abf6:	4a2a      	ldr	r2, [pc, #168]	@ (800aca0 <__sflush_r+0x104>)
 800abf8:	410a      	asrs	r2, r1
 800abfa:	07d6      	lsls	r6, r2, #31
 800abfc:	d427      	bmi.n	800ac4e <__sflush_r+0xb2>
 800abfe:	2200      	movs	r2, #0
 800ac00:	6062      	str	r2, [r4, #4]
 800ac02:	04d9      	lsls	r1, r3, #19
 800ac04:	6922      	ldr	r2, [r4, #16]
 800ac06:	6022      	str	r2, [r4, #0]
 800ac08:	d504      	bpl.n	800ac14 <__sflush_r+0x78>
 800ac0a:	1c42      	adds	r2, r0, #1
 800ac0c:	d101      	bne.n	800ac12 <__sflush_r+0x76>
 800ac0e:	682b      	ldr	r3, [r5, #0]
 800ac10:	b903      	cbnz	r3, 800ac14 <__sflush_r+0x78>
 800ac12:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac16:	602f      	str	r7, [r5, #0]
 800ac18:	b1b9      	cbz	r1, 800ac4a <__sflush_r+0xae>
 800ac1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac1e:	4299      	cmp	r1, r3
 800ac20:	d002      	beq.n	800ac28 <__sflush_r+0x8c>
 800ac22:	4628      	mov	r0, r5
 800ac24:	f7fe fd58 	bl	80096d8 <_free_r>
 800ac28:	2300      	movs	r3, #0
 800ac2a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac2c:	e00d      	b.n	800ac4a <__sflush_r+0xae>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	4628      	mov	r0, r5
 800ac32:	47b0      	blx	r6
 800ac34:	4602      	mov	r2, r0
 800ac36:	1c50      	adds	r0, r2, #1
 800ac38:	d1c9      	bne.n	800abce <__sflush_r+0x32>
 800ac3a:	682b      	ldr	r3, [r5, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0c6      	beq.n	800abce <__sflush_r+0x32>
 800ac40:	2b1d      	cmp	r3, #29
 800ac42:	d001      	beq.n	800ac48 <__sflush_r+0xac>
 800ac44:	2b16      	cmp	r3, #22
 800ac46:	d11e      	bne.n	800ac86 <__sflush_r+0xea>
 800ac48:	602f      	str	r7, [r5, #0]
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	e022      	b.n	800ac94 <__sflush_r+0xf8>
 800ac4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac52:	b21b      	sxth	r3, r3
 800ac54:	e01b      	b.n	800ac8e <__sflush_r+0xf2>
 800ac56:	690f      	ldr	r7, [r1, #16]
 800ac58:	2f00      	cmp	r7, #0
 800ac5a:	d0f6      	beq.n	800ac4a <__sflush_r+0xae>
 800ac5c:	0793      	lsls	r3, r2, #30
 800ac5e:	680e      	ldr	r6, [r1, #0]
 800ac60:	bf08      	it	eq
 800ac62:	694b      	ldreq	r3, [r1, #20]
 800ac64:	600f      	str	r7, [r1, #0]
 800ac66:	bf18      	it	ne
 800ac68:	2300      	movne	r3, #0
 800ac6a:	eba6 0807 	sub.w	r8, r6, r7
 800ac6e:	608b      	str	r3, [r1, #8]
 800ac70:	f1b8 0f00 	cmp.w	r8, #0
 800ac74:	dde9      	ble.n	800ac4a <__sflush_r+0xae>
 800ac76:	6a21      	ldr	r1, [r4, #32]
 800ac78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ac7a:	4643      	mov	r3, r8
 800ac7c:	463a      	mov	r2, r7
 800ac7e:	4628      	mov	r0, r5
 800ac80:	47b0      	blx	r6
 800ac82:	2800      	cmp	r0, #0
 800ac84:	dc08      	bgt.n	800ac98 <__sflush_r+0xfc>
 800ac86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac8e:	81a3      	strh	r3, [r4, #12]
 800ac90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac98:	4407      	add	r7, r0
 800ac9a:	eba8 0800 	sub.w	r8, r8, r0
 800ac9e:	e7e7      	b.n	800ac70 <__sflush_r+0xd4>
 800aca0:	dfbffffe 	.word	0xdfbffffe

0800aca4 <_fflush_r>:
 800aca4:	b538      	push	{r3, r4, r5, lr}
 800aca6:	690b      	ldr	r3, [r1, #16]
 800aca8:	4605      	mov	r5, r0
 800acaa:	460c      	mov	r4, r1
 800acac:	b913      	cbnz	r3, 800acb4 <_fflush_r+0x10>
 800acae:	2500      	movs	r5, #0
 800acb0:	4628      	mov	r0, r5
 800acb2:	bd38      	pop	{r3, r4, r5, pc}
 800acb4:	b118      	cbz	r0, 800acbe <_fflush_r+0x1a>
 800acb6:	6a03      	ldr	r3, [r0, #32]
 800acb8:	b90b      	cbnz	r3, 800acbe <_fflush_r+0x1a>
 800acba:	f7fd fcdb 	bl	8008674 <__sinit>
 800acbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d0f3      	beq.n	800acae <_fflush_r+0xa>
 800acc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800acc8:	07d0      	lsls	r0, r2, #31
 800acca:	d404      	bmi.n	800acd6 <_fflush_r+0x32>
 800accc:	0599      	lsls	r1, r3, #22
 800acce:	d402      	bmi.n	800acd6 <_fflush_r+0x32>
 800acd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acd2:	f7fd fe76 	bl	80089c2 <__retarget_lock_acquire_recursive>
 800acd6:	4628      	mov	r0, r5
 800acd8:	4621      	mov	r1, r4
 800acda:	f7ff ff5f 	bl	800ab9c <__sflush_r>
 800acde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ace0:	07da      	lsls	r2, r3, #31
 800ace2:	4605      	mov	r5, r0
 800ace4:	d4e4      	bmi.n	800acb0 <_fflush_r+0xc>
 800ace6:	89a3      	ldrh	r3, [r4, #12]
 800ace8:	059b      	lsls	r3, r3, #22
 800acea:	d4e1      	bmi.n	800acb0 <_fflush_r+0xc>
 800acec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acee:	f7fd fe69 	bl	80089c4 <__retarget_lock_release_recursive>
 800acf2:	e7dd      	b.n	800acb0 <_fflush_r+0xc>

0800acf4 <fiprintf>:
 800acf4:	b40e      	push	{r1, r2, r3}
 800acf6:	b503      	push	{r0, r1, lr}
 800acf8:	4601      	mov	r1, r0
 800acfa:	ab03      	add	r3, sp, #12
 800acfc:	4805      	ldr	r0, [pc, #20]	@ (800ad14 <fiprintf+0x20>)
 800acfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad02:	6800      	ldr	r0, [r0, #0]
 800ad04:	9301      	str	r3, [sp, #4]
 800ad06:	f000 f8a3 	bl	800ae50 <_vfiprintf_r>
 800ad0a:	b002      	add	sp, #8
 800ad0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad10:	b003      	add	sp, #12
 800ad12:	4770      	bx	lr
 800ad14:	20000184 	.word	0x20000184

0800ad18 <memmove>:
 800ad18:	4288      	cmp	r0, r1
 800ad1a:	b510      	push	{r4, lr}
 800ad1c:	eb01 0402 	add.w	r4, r1, r2
 800ad20:	d902      	bls.n	800ad28 <memmove+0x10>
 800ad22:	4284      	cmp	r4, r0
 800ad24:	4623      	mov	r3, r4
 800ad26:	d807      	bhi.n	800ad38 <memmove+0x20>
 800ad28:	1e43      	subs	r3, r0, #1
 800ad2a:	42a1      	cmp	r1, r4
 800ad2c:	d008      	beq.n	800ad40 <memmove+0x28>
 800ad2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad36:	e7f8      	b.n	800ad2a <memmove+0x12>
 800ad38:	4402      	add	r2, r0
 800ad3a:	4601      	mov	r1, r0
 800ad3c:	428a      	cmp	r2, r1
 800ad3e:	d100      	bne.n	800ad42 <memmove+0x2a>
 800ad40:	bd10      	pop	{r4, pc}
 800ad42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad4a:	e7f7      	b.n	800ad3c <memmove+0x24>

0800ad4c <_sbrk_r>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	4d06      	ldr	r5, [pc, #24]	@ (800ad68 <_sbrk_r+0x1c>)
 800ad50:	2300      	movs	r3, #0
 800ad52:	4604      	mov	r4, r0
 800ad54:	4608      	mov	r0, r1
 800ad56:	602b      	str	r3, [r5, #0]
 800ad58:	f7f7 fe54 	bl	8002a04 <_sbrk>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	d102      	bne.n	800ad66 <_sbrk_r+0x1a>
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	b103      	cbz	r3, 800ad66 <_sbrk_r+0x1a>
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	bd38      	pop	{r3, r4, r5, pc}
 800ad68:	20005194 	.word	0x20005194

0800ad6c <abort>:
 800ad6c:	b508      	push	{r3, lr}
 800ad6e:	2006      	movs	r0, #6
 800ad70:	f000 fa42 	bl	800b1f8 <raise>
 800ad74:	2001      	movs	r0, #1
 800ad76:	f7f7 fdcd 	bl	8002914 <_exit>

0800ad7a <_calloc_r>:
 800ad7a:	b570      	push	{r4, r5, r6, lr}
 800ad7c:	fba1 5402 	umull	r5, r4, r1, r2
 800ad80:	b93c      	cbnz	r4, 800ad92 <_calloc_r+0x18>
 800ad82:	4629      	mov	r1, r5
 800ad84:	f7ff f856 	bl	8009e34 <_malloc_r>
 800ad88:	4606      	mov	r6, r0
 800ad8a:	b928      	cbnz	r0, 800ad98 <_calloc_r+0x1e>
 800ad8c:	2600      	movs	r6, #0
 800ad8e:	4630      	mov	r0, r6
 800ad90:	bd70      	pop	{r4, r5, r6, pc}
 800ad92:	220c      	movs	r2, #12
 800ad94:	6002      	str	r2, [r0, #0]
 800ad96:	e7f9      	b.n	800ad8c <_calloc_r+0x12>
 800ad98:	462a      	mov	r2, r5
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	f7fd fd03 	bl	80087a6 <memset>
 800ada0:	e7f5      	b.n	800ad8e <_calloc_r+0x14>

0800ada2 <_realloc_r>:
 800ada2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada6:	4680      	mov	r8, r0
 800ada8:	4615      	mov	r5, r2
 800adaa:	460c      	mov	r4, r1
 800adac:	b921      	cbnz	r1, 800adb8 <_realloc_r+0x16>
 800adae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adb2:	4611      	mov	r1, r2
 800adb4:	f7ff b83e 	b.w	8009e34 <_malloc_r>
 800adb8:	b92a      	cbnz	r2, 800adc6 <_realloc_r+0x24>
 800adba:	f7fe fc8d 	bl	80096d8 <_free_r>
 800adbe:	2400      	movs	r4, #0
 800adc0:	4620      	mov	r0, r4
 800adc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc6:	f000 fa33 	bl	800b230 <_malloc_usable_size_r>
 800adca:	4285      	cmp	r5, r0
 800adcc:	4606      	mov	r6, r0
 800adce:	d802      	bhi.n	800add6 <_realloc_r+0x34>
 800add0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800add4:	d8f4      	bhi.n	800adc0 <_realloc_r+0x1e>
 800add6:	4629      	mov	r1, r5
 800add8:	4640      	mov	r0, r8
 800adda:	f7ff f82b 	bl	8009e34 <_malloc_r>
 800adde:	4607      	mov	r7, r0
 800ade0:	2800      	cmp	r0, #0
 800ade2:	d0ec      	beq.n	800adbe <_realloc_r+0x1c>
 800ade4:	42b5      	cmp	r5, r6
 800ade6:	462a      	mov	r2, r5
 800ade8:	4621      	mov	r1, r4
 800adea:	bf28      	it	cs
 800adec:	4632      	movcs	r2, r6
 800adee:	f7fd fdea 	bl	80089c6 <memcpy>
 800adf2:	4621      	mov	r1, r4
 800adf4:	4640      	mov	r0, r8
 800adf6:	f7fe fc6f 	bl	80096d8 <_free_r>
 800adfa:	463c      	mov	r4, r7
 800adfc:	e7e0      	b.n	800adc0 <_realloc_r+0x1e>

0800adfe <__sfputc_r>:
 800adfe:	6893      	ldr	r3, [r2, #8]
 800ae00:	3b01      	subs	r3, #1
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	b410      	push	{r4}
 800ae06:	6093      	str	r3, [r2, #8]
 800ae08:	da08      	bge.n	800ae1c <__sfputc_r+0x1e>
 800ae0a:	6994      	ldr	r4, [r2, #24]
 800ae0c:	42a3      	cmp	r3, r4
 800ae0e:	db01      	blt.n	800ae14 <__sfputc_r+0x16>
 800ae10:	290a      	cmp	r1, #10
 800ae12:	d103      	bne.n	800ae1c <__sfputc_r+0x1e>
 800ae14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae18:	f000 b932 	b.w	800b080 <__swbuf_r>
 800ae1c:	6813      	ldr	r3, [r2, #0]
 800ae1e:	1c58      	adds	r0, r3, #1
 800ae20:	6010      	str	r0, [r2, #0]
 800ae22:	7019      	strb	r1, [r3, #0]
 800ae24:	4608      	mov	r0, r1
 800ae26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <__sfputs_r>:
 800ae2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2e:	4606      	mov	r6, r0
 800ae30:	460f      	mov	r7, r1
 800ae32:	4614      	mov	r4, r2
 800ae34:	18d5      	adds	r5, r2, r3
 800ae36:	42ac      	cmp	r4, r5
 800ae38:	d101      	bne.n	800ae3e <__sfputs_r+0x12>
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	e007      	b.n	800ae4e <__sfputs_r+0x22>
 800ae3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae42:	463a      	mov	r2, r7
 800ae44:	4630      	mov	r0, r6
 800ae46:	f7ff ffda 	bl	800adfe <__sfputc_r>
 800ae4a:	1c43      	adds	r3, r0, #1
 800ae4c:	d1f3      	bne.n	800ae36 <__sfputs_r+0xa>
 800ae4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae50 <_vfiprintf_r>:
 800ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	460d      	mov	r5, r1
 800ae56:	b09d      	sub	sp, #116	@ 0x74
 800ae58:	4614      	mov	r4, r2
 800ae5a:	4698      	mov	r8, r3
 800ae5c:	4606      	mov	r6, r0
 800ae5e:	b118      	cbz	r0, 800ae68 <_vfiprintf_r+0x18>
 800ae60:	6a03      	ldr	r3, [r0, #32]
 800ae62:	b90b      	cbnz	r3, 800ae68 <_vfiprintf_r+0x18>
 800ae64:	f7fd fc06 	bl	8008674 <__sinit>
 800ae68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae6a:	07d9      	lsls	r1, r3, #31
 800ae6c:	d405      	bmi.n	800ae7a <_vfiprintf_r+0x2a>
 800ae6e:	89ab      	ldrh	r3, [r5, #12]
 800ae70:	059a      	lsls	r2, r3, #22
 800ae72:	d402      	bmi.n	800ae7a <_vfiprintf_r+0x2a>
 800ae74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae76:	f7fd fda4 	bl	80089c2 <__retarget_lock_acquire_recursive>
 800ae7a:	89ab      	ldrh	r3, [r5, #12]
 800ae7c:	071b      	lsls	r3, r3, #28
 800ae7e:	d501      	bpl.n	800ae84 <_vfiprintf_r+0x34>
 800ae80:	692b      	ldr	r3, [r5, #16]
 800ae82:	b99b      	cbnz	r3, 800aeac <_vfiprintf_r+0x5c>
 800ae84:	4629      	mov	r1, r5
 800ae86:	4630      	mov	r0, r6
 800ae88:	f000 f938 	bl	800b0fc <__swsetup_r>
 800ae8c:	b170      	cbz	r0, 800aeac <_vfiprintf_r+0x5c>
 800ae8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae90:	07dc      	lsls	r4, r3, #31
 800ae92:	d504      	bpl.n	800ae9e <_vfiprintf_r+0x4e>
 800ae94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae98:	b01d      	add	sp, #116	@ 0x74
 800ae9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9e:	89ab      	ldrh	r3, [r5, #12]
 800aea0:	0598      	lsls	r0, r3, #22
 800aea2:	d4f7      	bmi.n	800ae94 <_vfiprintf_r+0x44>
 800aea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aea6:	f7fd fd8d 	bl	80089c4 <__retarget_lock_release_recursive>
 800aeaa:	e7f3      	b.n	800ae94 <_vfiprintf_r+0x44>
 800aeac:	2300      	movs	r3, #0
 800aeae:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeb0:	2320      	movs	r3, #32
 800aeb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aeb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800aeba:	2330      	movs	r3, #48	@ 0x30
 800aebc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b06c <_vfiprintf_r+0x21c>
 800aec0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aec4:	f04f 0901 	mov.w	r9, #1
 800aec8:	4623      	mov	r3, r4
 800aeca:	469a      	mov	sl, r3
 800aecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aed0:	b10a      	cbz	r2, 800aed6 <_vfiprintf_r+0x86>
 800aed2:	2a25      	cmp	r2, #37	@ 0x25
 800aed4:	d1f9      	bne.n	800aeca <_vfiprintf_r+0x7a>
 800aed6:	ebba 0b04 	subs.w	fp, sl, r4
 800aeda:	d00b      	beq.n	800aef4 <_vfiprintf_r+0xa4>
 800aedc:	465b      	mov	r3, fp
 800aede:	4622      	mov	r2, r4
 800aee0:	4629      	mov	r1, r5
 800aee2:	4630      	mov	r0, r6
 800aee4:	f7ff ffa2 	bl	800ae2c <__sfputs_r>
 800aee8:	3001      	adds	r0, #1
 800aeea:	f000 80a7 	beq.w	800b03c <_vfiprintf_r+0x1ec>
 800aeee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aef0:	445a      	add	r2, fp
 800aef2:	9209      	str	r2, [sp, #36]	@ 0x24
 800aef4:	f89a 3000 	ldrb.w	r3, [sl]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 809f 	beq.w	800b03c <_vfiprintf_r+0x1ec>
 800aefe:	2300      	movs	r3, #0
 800af00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af08:	f10a 0a01 	add.w	sl, sl, #1
 800af0c:	9304      	str	r3, [sp, #16]
 800af0e:	9307      	str	r3, [sp, #28]
 800af10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af14:	931a      	str	r3, [sp, #104]	@ 0x68
 800af16:	4654      	mov	r4, sl
 800af18:	2205      	movs	r2, #5
 800af1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af1e:	4853      	ldr	r0, [pc, #332]	@ (800b06c <_vfiprintf_r+0x21c>)
 800af20:	f7f5 f966 	bl	80001f0 <memchr>
 800af24:	9a04      	ldr	r2, [sp, #16]
 800af26:	b9d8      	cbnz	r0, 800af60 <_vfiprintf_r+0x110>
 800af28:	06d1      	lsls	r1, r2, #27
 800af2a:	bf44      	itt	mi
 800af2c:	2320      	movmi	r3, #32
 800af2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af32:	0713      	lsls	r3, r2, #28
 800af34:	bf44      	itt	mi
 800af36:	232b      	movmi	r3, #43	@ 0x2b
 800af38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af3c:	f89a 3000 	ldrb.w	r3, [sl]
 800af40:	2b2a      	cmp	r3, #42	@ 0x2a
 800af42:	d015      	beq.n	800af70 <_vfiprintf_r+0x120>
 800af44:	9a07      	ldr	r2, [sp, #28]
 800af46:	4654      	mov	r4, sl
 800af48:	2000      	movs	r0, #0
 800af4a:	f04f 0c0a 	mov.w	ip, #10
 800af4e:	4621      	mov	r1, r4
 800af50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af54:	3b30      	subs	r3, #48	@ 0x30
 800af56:	2b09      	cmp	r3, #9
 800af58:	d94b      	bls.n	800aff2 <_vfiprintf_r+0x1a2>
 800af5a:	b1b0      	cbz	r0, 800af8a <_vfiprintf_r+0x13a>
 800af5c:	9207      	str	r2, [sp, #28]
 800af5e:	e014      	b.n	800af8a <_vfiprintf_r+0x13a>
 800af60:	eba0 0308 	sub.w	r3, r0, r8
 800af64:	fa09 f303 	lsl.w	r3, r9, r3
 800af68:	4313      	orrs	r3, r2
 800af6a:	9304      	str	r3, [sp, #16]
 800af6c:	46a2      	mov	sl, r4
 800af6e:	e7d2      	b.n	800af16 <_vfiprintf_r+0xc6>
 800af70:	9b03      	ldr	r3, [sp, #12]
 800af72:	1d19      	adds	r1, r3, #4
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	9103      	str	r1, [sp, #12]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	bfbb      	ittet	lt
 800af7c:	425b      	neglt	r3, r3
 800af7e:	f042 0202 	orrlt.w	r2, r2, #2
 800af82:	9307      	strge	r3, [sp, #28]
 800af84:	9307      	strlt	r3, [sp, #28]
 800af86:	bfb8      	it	lt
 800af88:	9204      	strlt	r2, [sp, #16]
 800af8a:	7823      	ldrb	r3, [r4, #0]
 800af8c:	2b2e      	cmp	r3, #46	@ 0x2e
 800af8e:	d10a      	bne.n	800afa6 <_vfiprintf_r+0x156>
 800af90:	7863      	ldrb	r3, [r4, #1]
 800af92:	2b2a      	cmp	r3, #42	@ 0x2a
 800af94:	d132      	bne.n	800affc <_vfiprintf_r+0x1ac>
 800af96:	9b03      	ldr	r3, [sp, #12]
 800af98:	1d1a      	adds	r2, r3, #4
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	9203      	str	r2, [sp, #12]
 800af9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afa2:	3402      	adds	r4, #2
 800afa4:	9305      	str	r3, [sp, #20]
 800afa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b07c <_vfiprintf_r+0x22c>
 800afaa:	7821      	ldrb	r1, [r4, #0]
 800afac:	2203      	movs	r2, #3
 800afae:	4650      	mov	r0, sl
 800afb0:	f7f5 f91e 	bl	80001f0 <memchr>
 800afb4:	b138      	cbz	r0, 800afc6 <_vfiprintf_r+0x176>
 800afb6:	9b04      	ldr	r3, [sp, #16]
 800afb8:	eba0 000a 	sub.w	r0, r0, sl
 800afbc:	2240      	movs	r2, #64	@ 0x40
 800afbe:	4082      	lsls	r2, r0
 800afc0:	4313      	orrs	r3, r2
 800afc2:	3401      	adds	r4, #1
 800afc4:	9304      	str	r3, [sp, #16]
 800afc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afca:	4829      	ldr	r0, [pc, #164]	@ (800b070 <_vfiprintf_r+0x220>)
 800afcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afd0:	2206      	movs	r2, #6
 800afd2:	f7f5 f90d 	bl	80001f0 <memchr>
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d03f      	beq.n	800b05a <_vfiprintf_r+0x20a>
 800afda:	4b26      	ldr	r3, [pc, #152]	@ (800b074 <_vfiprintf_r+0x224>)
 800afdc:	bb1b      	cbnz	r3, 800b026 <_vfiprintf_r+0x1d6>
 800afde:	9b03      	ldr	r3, [sp, #12]
 800afe0:	3307      	adds	r3, #7
 800afe2:	f023 0307 	bic.w	r3, r3, #7
 800afe6:	3308      	adds	r3, #8
 800afe8:	9303      	str	r3, [sp, #12]
 800afea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afec:	443b      	add	r3, r7
 800afee:	9309      	str	r3, [sp, #36]	@ 0x24
 800aff0:	e76a      	b.n	800aec8 <_vfiprintf_r+0x78>
 800aff2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aff6:	460c      	mov	r4, r1
 800aff8:	2001      	movs	r0, #1
 800affa:	e7a8      	b.n	800af4e <_vfiprintf_r+0xfe>
 800affc:	2300      	movs	r3, #0
 800affe:	3401      	adds	r4, #1
 800b000:	9305      	str	r3, [sp, #20]
 800b002:	4619      	mov	r1, r3
 800b004:	f04f 0c0a 	mov.w	ip, #10
 800b008:	4620      	mov	r0, r4
 800b00a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b00e:	3a30      	subs	r2, #48	@ 0x30
 800b010:	2a09      	cmp	r2, #9
 800b012:	d903      	bls.n	800b01c <_vfiprintf_r+0x1cc>
 800b014:	2b00      	cmp	r3, #0
 800b016:	d0c6      	beq.n	800afa6 <_vfiprintf_r+0x156>
 800b018:	9105      	str	r1, [sp, #20]
 800b01a:	e7c4      	b.n	800afa6 <_vfiprintf_r+0x156>
 800b01c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b020:	4604      	mov	r4, r0
 800b022:	2301      	movs	r3, #1
 800b024:	e7f0      	b.n	800b008 <_vfiprintf_r+0x1b8>
 800b026:	ab03      	add	r3, sp, #12
 800b028:	9300      	str	r3, [sp, #0]
 800b02a:	462a      	mov	r2, r5
 800b02c:	4b12      	ldr	r3, [pc, #72]	@ (800b078 <_vfiprintf_r+0x228>)
 800b02e:	a904      	add	r1, sp, #16
 800b030:	4630      	mov	r0, r6
 800b032:	f7fc fcc7 	bl	80079c4 <_printf_float>
 800b036:	4607      	mov	r7, r0
 800b038:	1c78      	adds	r0, r7, #1
 800b03a:	d1d6      	bne.n	800afea <_vfiprintf_r+0x19a>
 800b03c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b03e:	07d9      	lsls	r1, r3, #31
 800b040:	d405      	bmi.n	800b04e <_vfiprintf_r+0x1fe>
 800b042:	89ab      	ldrh	r3, [r5, #12]
 800b044:	059a      	lsls	r2, r3, #22
 800b046:	d402      	bmi.n	800b04e <_vfiprintf_r+0x1fe>
 800b048:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b04a:	f7fd fcbb 	bl	80089c4 <__retarget_lock_release_recursive>
 800b04e:	89ab      	ldrh	r3, [r5, #12]
 800b050:	065b      	lsls	r3, r3, #25
 800b052:	f53f af1f 	bmi.w	800ae94 <_vfiprintf_r+0x44>
 800b056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b058:	e71e      	b.n	800ae98 <_vfiprintf_r+0x48>
 800b05a:	ab03      	add	r3, sp, #12
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	462a      	mov	r2, r5
 800b060:	4b05      	ldr	r3, [pc, #20]	@ (800b078 <_vfiprintf_r+0x228>)
 800b062:	a904      	add	r1, sp, #16
 800b064:	4630      	mov	r0, r6
 800b066:	f7fc ff45 	bl	8007ef4 <_printf_i>
 800b06a:	e7e4      	b.n	800b036 <_vfiprintf_r+0x1e6>
 800b06c:	0800b820 	.word	0x0800b820
 800b070:	0800b82a 	.word	0x0800b82a
 800b074:	080079c5 	.word	0x080079c5
 800b078:	0800ae2d 	.word	0x0800ae2d
 800b07c:	0800b826 	.word	0x0800b826

0800b080 <__swbuf_r>:
 800b080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b082:	460e      	mov	r6, r1
 800b084:	4614      	mov	r4, r2
 800b086:	4605      	mov	r5, r0
 800b088:	b118      	cbz	r0, 800b092 <__swbuf_r+0x12>
 800b08a:	6a03      	ldr	r3, [r0, #32]
 800b08c:	b90b      	cbnz	r3, 800b092 <__swbuf_r+0x12>
 800b08e:	f7fd faf1 	bl	8008674 <__sinit>
 800b092:	69a3      	ldr	r3, [r4, #24]
 800b094:	60a3      	str	r3, [r4, #8]
 800b096:	89a3      	ldrh	r3, [r4, #12]
 800b098:	071a      	lsls	r2, r3, #28
 800b09a:	d501      	bpl.n	800b0a0 <__swbuf_r+0x20>
 800b09c:	6923      	ldr	r3, [r4, #16]
 800b09e:	b943      	cbnz	r3, 800b0b2 <__swbuf_r+0x32>
 800b0a0:	4621      	mov	r1, r4
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	f000 f82a 	bl	800b0fc <__swsetup_r>
 800b0a8:	b118      	cbz	r0, 800b0b2 <__swbuf_r+0x32>
 800b0aa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b0ae:	4638      	mov	r0, r7
 800b0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	6922      	ldr	r2, [r4, #16]
 800b0b6:	1a98      	subs	r0, r3, r2
 800b0b8:	6963      	ldr	r3, [r4, #20]
 800b0ba:	b2f6      	uxtb	r6, r6
 800b0bc:	4283      	cmp	r3, r0
 800b0be:	4637      	mov	r7, r6
 800b0c0:	dc05      	bgt.n	800b0ce <__swbuf_r+0x4e>
 800b0c2:	4621      	mov	r1, r4
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	f7ff fded 	bl	800aca4 <_fflush_r>
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	d1ed      	bne.n	800b0aa <__swbuf_r+0x2a>
 800b0ce:	68a3      	ldr	r3, [r4, #8]
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	60a3      	str	r3, [r4, #8]
 800b0d4:	6823      	ldr	r3, [r4, #0]
 800b0d6:	1c5a      	adds	r2, r3, #1
 800b0d8:	6022      	str	r2, [r4, #0]
 800b0da:	701e      	strb	r6, [r3, #0]
 800b0dc:	6962      	ldr	r2, [r4, #20]
 800b0de:	1c43      	adds	r3, r0, #1
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d004      	beq.n	800b0ee <__swbuf_r+0x6e>
 800b0e4:	89a3      	ldrh	r3, [r4, #12]
 800b0e6:	07db      	lsls	r3, r3, #31
 800b0e8:	d5e1      	bpl.n	800b0ae <__swbuf_r+0x2e>
 800b0ea:	2e0a      	cmp	r6, #10
 800b0ec:	d1df      	bne.n	800b0ae <__swbuf_r+0x2e>
 800b0ee:	4621      	mov	r1, r4
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	f7ff fdd7 	bl	800aca4 <_fflush_r>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	d0d9      	beq.n	800b0ae <__swbuf_r+0x2e>
 800b0fa:	e7d6      	b.n	800b0aa <__swbuf_r+0x2a>

0800b0fc <__swsetup_r>:
 800b0fc:	b538      	push	{r3, r4, r5, lr}
 800b0fe:	4b29      	ldr	r3, [pc, #164]	@ (800b1a4 <__swsetup_r+0xa8>)
 800b100:	4605      	mov	r5, r0
 800b102:	6818      	ldr	r0, [r3, #0]
 800b104:	460c      	mov	r4, r1
 800b106:	b118      	cbz	r0, 800b110 <__swsetup_r+0x14>
 800b108:	6a03      	ldr	r3, [r0, #32]
 800b10a:	b90b      	cbnz	r3, 800b110 <__swsetup_r+0x14>
 800b10c:	f7fd fab2 	bl	8008674 <__sinit>
 800b110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b114:	0719      	lsls	r1, r3, #28
 800b116:	d422      	bmi.n	800b15e <__swsetup_r+0x62>
 800b118:	06da      	lsls	r2, r3, #27
 800b11a:	d407      	bmi.n	800b12c <__swsetup_r+0x30>
 800b11c:	2209      	movs	r2, #9
 800b11e:	602a      	str	r2, [r5, #0]
 800b120:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b124:	81a3      	strh	r3, [r4, #12]
 800b126:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b12a:	e033      	b.n	800b194 <__swsetup_r+0x98>
 800b12c:	0758      	lsls	r0, r3, #29
 800b12e:	d512      	bpl.n	800b156 <__swsetup_r+0x5a>
 800b130:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b132:	b141      	cbz	r1, 800b146 <__swsetup_r+0x4a>
 800b134:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b138:	4299      	cmp	r1, r3
 800b13a:	d002      	beq.n	800b142 <__swsetup_r+0x46>
 800b13c:	4628      	mov	r0, r5
 800b13e:	f7fe facb 	bl	80096d8 <_free_r>
 800b142:	2300      	movs	r3, #0
 800b144:	6363      	str	r3, [r4, #52]	@ 0x34
 800b146:	89a3      	ldrh	r3, [r4, #12]
 800b148:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b14c:	81a3      	strh	r3, [r4, #12]
 800b14e:	2300      	movs	r3, #0
 800b150:	6063      	str	r3, [r4, #4]
 800b152:	6923      	ldr	r3, [r4, #16]
 800b154:	6023      	str	r3, [r4, #0]
 800b156:	89a3      	ldrh	r3, [r4, #12]
 800b158:	f043 0308 	orr.w	r3, r3, #8
 800b15c:	81a3      	strh	r3, [r4, #12]
 800b15e:	6923      	ldr	r3, [r4, #16]
 800b160:	b94b      	cbnz	r3, 800b176 <__swsetup_r+0x7a>
 800b162:	89a3      	ldrh	r3, [r4, #12]
 800b164:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b16c:	d003      	beq.n	800b176 <__swsetup_r+0x7a>
 800b16e:	4621      	mov	r1, r4
 800b170:	4628      	mov	r0, r5
 800b172:	f000 f88b 	bl	800b28c <__smakebuf_r>
 800b176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b17a:	f013 0201 	ands.w	r2, r3, #1
 800b17e:	d00a      	beq.n	800b196 <__swsetup_r+0x9a>
 800b180:	2200      	movs	r2, #0
 800b182:	60a2      	str	r2, [r4, #8]
 800b184:	6962      	ldr	r2, [r4, #20]
 800b186:	4252      	negs	r2, r2
 800b188:	61a2      	str	r2, [r4, #24]
 800b18a:	6922      	ldr	r2, [r4, #16]
 800b18c:	b942      	cbnz	r2, 800b1a0 <__swsetup_r+0xa4>
 800b18e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b192:	d1c5      	bne.n	800b120 <__swsetup_r+0x24>
 800b194:	bd38      	pop	{r3, r4, r5, pc}
 800b196:	0799      	lsls	r1, r3, #30
 800b198:	bf58      	it	pl
 800b19a:	6962      	ldrpl	r2, [r4, #20]
 800b19c:	60a2      	str	r2, [r4, #8]
 800b19e:	e7f4      	b.n	800b18a <__swsetup_r+0x8e>
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	e7f7      	b.n	800b194 <__swsetup_r+0x98>
 800b1a4:	20000184 	.word	0x20000184

0800b1a8 <_raise_r>:
 800b1a8:	291f      	cmp	r1, #31
 800b1aa:	b538      	push	{r3, r4, r5, lr}
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	d904      	bls.n	800b1bc <_raise_r+0x14>
 800b1b2:	2316      	movs	r3, #22
 800b1b4:	6003      	str	r3, [r0, #0]
 800b1b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1ba:	bd38      	pop	{r3, r4, r5, pc}
 800b1bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b1be:	b112      	cbz	r2, 800b1c6 <_raise_r+0x1e>
 800b1c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1c4:	b94b      	cbnz	r3, 800b1da <_raise_r+0x32>
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	f000 f830 	bl	800b22c <_getpid_r>
 800b1cc:	4622      	mov	r2, r4
 800b1ce:	4601      	mov	r1, r0
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1d6:	f000 b817 	b.w	800b208 <_kill_r>
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d00a      	beq.n	800b1f4 <_raise_r+0x4c>
 800b1de:	1c59      	adds	r1, r3, #1
 800b1e0:	d103      	bne.n	800b1ea <_raise_r+0x42>
 800b1e2:	2316      	movs	r3, #22
 800b1e4:	6003      	str	r3, [r0, #0]
 800b1e6:	2001      	movs	r0, #1
 800b1e8:	e7e7      	b.n	800b1ba <_raise_r+0x12>
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	4798      	blx	r3
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	e7e0      	b.n	800b1ba <_raise_r+0x12>

0800b1f8 <raise>:
 800b1f8:	4b02      	ldr	r3, [pc, #8]	@ (800b204 <raise+0xc>)
 800b1fa:	4601      	mov	r1, r0
 800b1fc:	6818      	ldr	r0, [r3, #0]
 800b1fe:	f7ff bfd3 	b.w	800b1a8 <_raise_r>
 800b202:	bf00      	nop
 800b204:	20000184 	.word	0x20000184

0800b208 <_kill_r>:
 800b208:	b538      	push	{r3, r4, r5, lr}
 800b20a:	4d07      	ldr	r5, [pc, #28]	@ (800b228 <_kill_r+0x20>)
 800b20c:	2300      	movs	r3, #0
 800b20e:	4604      	mov	r4, r0
 800b210:	4608      	mov	r0, r1
 800b212:	4611      	mov	r1, r2
 800b214:	602b      	str	r3, [r5, #0]
 800b216:	f7f7 fb6d 	bl	80028f4 <_kill>
 800b21a:	1c43      	adds	r3, r0, #1
 800b21c:	d102      	bne.n	800b224 <_kill_r+0x1c>
 800b21e:	682b      	ldr	r3, [r5, #0]
 800b220:	b103      	cbz	r3, 800b224 <_kill_r+0x1c>
 800b222:	6023      	str	r3, [r4, #0]
 800b224:	bd38      	pop	{r3, r4, r5, pc}
 800b226:	bf00      	nop
 800b228:	20005194 	.word	0x20005194

0800b22c <_getpid_r>:
 800b22c:	f7f7 bb5a 	b.w	80028e4 <_getpid>

0800b230 <_malloc_usable_size_r>:
 800b230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b234:	1f18      	subs	r0, r3, #4
 800b236:	2b00      	cmp	r3, #0
 800b238:	bfbc      	itt	lt
 800b23a:	580b      	ldrlt	r3, [r1, r0]
 800b23c:	18c0      	addlt	r0, r0, r3
 800b23e:	4770      	bx	lr

0800b240 <__swhatbuf_r>:
 800b240:	b570      	push	{r4, r5, r6, lr}
 800b242:	460c      	mov	r4, r1
 800b244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b248:	2900      	cmp	r1, #0
 800b24a:	b096      	sub	sp, #88	@ 0x58
 800b24c:	4615      	mov	r5, r2
 800b24e:	461e      	mov	r6, r3
 800b250:	da0d      	bge.n	800b26e <__swhatbuf_r+0x2e>
 800b252:	89a3      	ldrh	r3, [r4, #12]
 800b254:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b258:	f04f 0100 	mov.w	r1, #0
 800b25c:	bf14      	ite	ne
 800b25e:	2340      	movne	r3, #64	@ 0x40
 800b260:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b264:	2000      	movs	r0, #0
 800b266:	6031      	str	r1, [r6, #0]
 800b268:	602b      	str	r3, [r5, #0]
 800b26a:	b016      	add	sp, #88	@ 0x58
 800b26c:	bd70      	pop	{r4, r5, r6, pc}
 800b26e:	466a      	mov	r2, sp
 800b270:	f000 f848 	bl	800b304 <_fstat_r>
 800b274:	2800      	cmp	r0, #0
 800b276:	dbec      	blt.n	800b252 <__swhatbuf_r+0x12>
 800b278:	9901      	ldr	r1, [sp, #4]
 800b27a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b27e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b282:	4259      	negs	r1, r3
 800b284:	4159      	adcs	r1, r3
 800b286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b28a:	e7eb      	b.n	800b264 <__swhatbuf_r+0x24>

0800b28c <__smakebuf_r>:
 800b28c:	898b      	ldrh	r3, [r1, #12]
 800b28e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b290:	079d      	lsls	r5, r3, #30
 800b292:	4606      	mov	r6, r0
 800b294:	460c      	mov	r4, r1
 800b296:	d507      	bpl.n	800b2a8 <__smakebuf_r+0x1c>
 800b298:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b29c:	6023      	str	r3, [r4, #0]
 800b29e:	6123      	str	r3, [r4, #16]
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	6163      	str	r3, [r4, #20]
 800b2a4:	b003      	add	sp, #12
 800b2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2a8:	ab01      	add	r3, sp, #4
 800b2aa:	466a      	mov	r2, sp
 800b2ac:	f7ff ffc8 	bl	800b240 <__swhatbuf_r>
 800b2b0:	9f00      	ldr	r7, [sp, #0]
 800b2b2:	4605      	mov	r5, r0
 800b2b4:	4639      	mov	r1, r7
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	f7fe fdbc 	bl	8009e34 <_malloc_r>
 800b2bc:	b948      	cbnz	r0, 800b2d2 <__smakebuf_r+0x46>
 800b2be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2c2:	059a      	lsls	r2, r3, #22
 800b2c4:	d4ee      	bmi.n	800b2a4 <__smakebuf_r+0x18>
 800b2c6:	f023 0303 	bic.w	r3, r3, #3
 800b2ca:	f043 0302 	orr.w	r3, r3, #2
 800b2ce:	81a3      	strh	r3, [r4, #12]
 800b2d0:	e7e2      	b.n	800b298 <__smakebuf_r+0xc>
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	6020      	str	r0, [r4, #0]
 800b2d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2da:	81a3      	strh	r3, [r4, #12]
 800b2dc:	9b01      	ldr	r3, [sp, #4]
 800b2de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b2e2:	b15b      	cbz	r3, 800b2fc <__smakebuf_r+0x70>
 800b2e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f000 f81d 	bl	800b328 <_isatty_r>
 800b2ee:	b128      	cbz	r0, 800b2fc <__smakebuf_r+0x70>
 800b2f0:	89a3      	ldrh	r3, [r4, #12]
 800b2f2:	f023 0303 	bic.w	r3, r3, #3
 800b2f6:	f043 0301 	orr.w	r3, r3, #1
 800b2fa:	81a3      	strh	r3, [r4, #12]
 800b2fc:	89a3      	ldrh	r3, [r4, #12]
 800b2fe:	431d      	orrs	r5, r3
 800b300:	81a5      	strh	r5, [r4, #12]
 800b302:	e7cf      	b.n	800b2a4 <__smakebuf_r+0x18>

0800b304 <_fstat_r>:
 800b304:	b538      	push	{r3, r4, r5, lr}
 800b306:	4d07      	ldr	r5, [pc, #28]	@ (800b324 <_fstat_r+0x20>)
 800b308:	2300      	movs	r3, #0
 800b30a:	4604      	mov	r4, r0
 800b30c:	4608      	mov	r0, r1
 800b30e:	4611      	mov	r1, r2
 800b310:	602b      	str	r3, [r5, #0]
 800b312:	f7f7 fb4f 	bl	80029b4 <_fstat>
 800b316:	1c43      	adds	r3, r0, #1
 800b318:	d102      	bne.n	800b320 <_fstat_r+0x1c>
 800b31a:	682b      	ldr	r3, [r5, #0]
 800b31c:	b103      	cbz	r3, 800b320 <_fstat_r+0x1c>
 800b31e:	6023      	str	r3, [r4, #0]
 800b320:	bd38      	pop	{r3, r4, r5, pc}
 800b322:	bf00      	nop
 800b324:	20005194 	.word	0x20005194

0800b328 <_isatty_r>:
 800b328:	b538      	push	{r3, r4, r5, lr}
 800b32a:	4d06      	ldr	r5, [pc, #24]	@ (800b344 <_isatty_r+0x1c>)
 800b32c:	2300      	movs	r3, #0
 800b32e:	4604      	mov	r4, r0
 800b330:	4608      	mov	r0, r1
 800b332:	602b      	str	r3, [r5, #0]
 800b334:	f7f7 fb4e 	bl	80029d4 <_isatty>
 800b338:	1c43      	adds	r3, r0, #1
 800b33a:	d102      	bne.n	800b342 <_isatty_r+0x1a>
 800b33c:	682b      	ldr	r3, [r5, #0]
 800b33e:	b103      	cbz	r3, 800b342 <_isatty_r+0x1a>
 800b340:	6023      	str	r3, [r4, #0]
 800b342:	bd38      	pop	{r3, r4, r5, pc}
 800b344:	20005194 	.word	0x20005194

0800b348 <_init>:
 800b348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b34a:	bf00      	nop
 800b34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b34e:	bc08      	pop	{r3}
 800b350:	469e      	mov	lr, r3
 800b352:	4770      	bx	lr

0800b354 <_fini>:
 800b354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b356:	bf00      	nop
 800b358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b35a:	bc08      	pop	{r3}
 800b35c:	469e      	mov	lr, r3
 800b35e:	4770      	bx	lr
