
PracaInz_v6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac00  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800adb0  0800adb0  0000bdb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2f4  0800b2f4  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2f4  0800b2f4  0000c2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2fc  0800b2fc  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2fc  0800b2fc  0000c2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b300  0800b300  0000c300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b304  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d4  2**0
                  CONTENTS
 10 .bss          00004ed4  200001d4  200001d4  0000d1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200050a8  200050a8  0000d1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000183a3  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b22  00000000  00000000  000255a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  000290d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f99  00000000  00000000  0002a538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb85  00000000  00000000  0002b4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d1f  00000000  00000000  0004b056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000edd99  00000000  00000000  00060d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014eb0e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000069ac  00000000  00000000  0014eb54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00155500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ad98 	.word	0x0800ad98

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	0800ad98 	.word	0x0800ad98

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4907      	ldr	r1, [pc, #28]	@ (800103c <__NVIC_EnableIRQ+0x38>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	@ (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	@ (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <can_filter_init>:
#include "can.h"

/*!
 *  \brief Initialize can filter
 */
void can_filter_init ( uint16_t can_client_id, uint32_t can_filter_mask ){
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	80fb      	strh	r3, [r7, #6]

	/* Enter filter initialization mode */
	CAN1->FMR |= CAN_FMR_FINIT;
 80010a0:	4b23      	ldr	r3, [pc, #140]	@ (8001130 <can_filter_init+0x9c>)
 80010a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010a6:	4a22      	ldr	r2, [pc, #136]	@ (8001130 <can_filter_init+0x9c>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

	/* Deactivate filter bank */
	CAN1->FA1R &= ~CAN_FA1R_FACT0;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <can_filter_init+0x9c>)
 80010b2:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80010b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001130 <can_filter_init+0x9c>)
 80010b8:	f023 0301 	bic.w	r3, r3, #1
 80010bc:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c

	/*----------------- FILTER BANK 0 -----------------------*/

	/* Use filter bank 0 in IDENTIFIER MASK MODE 1 */
	CAN1->FM1R &= ~CAN_FM1R_FBM0;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <can_filter_init+0x9c>)
 80010c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80010c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001130 <can_filter_init+0x9c>)
 80010c8:	f023 0301 	bic.w	r3, r3, #1
 80010cc:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204

	/* CAN filter scale - use 1 single 32 bit register */
	CAN1->FS1R |= CAN_FS1R_FSC0;
 80010d0:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <can_filter_init+0x9c>)
 80010d2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80010d6:	4a16      	ldr	r2, [pc, #88]	@ (8001130 <can_filter_init+0x9c>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c

	/* assign to FIFO 0 */
	CAN1->FFA1R &= ~CAN_FFA1R_FFA0;
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <can_filter_init+0x9c>)
 80010e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80010e6:	4a12      	ldr	r2, [pc, #72]	@ (8001130 <can_filter_init+0x9c>)
 80010e8:	f023 0301 	bic.w	r3, r3, #1
 80010ec:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
	CAN1->FA1R |= CAN_FA1R_FACT0; */

	/*--------------- FILTER CONTENT ------------------------*/

	/* Register 1 - filter */
	CAN1->sFilterRegister[0].FR1 = (can_client_id << STDID_POS);
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001130 <can_filter_init+0x9c>)
 80010f4:	055b      	lsls	r3, r3, #21
 80010f6:	f8c2 3240 	str.w	r3, [r2, #576]	@ 0x240

	/* Register 2 - filter mask */
	CAN1->sFilterRegister[0].FR2 = (CAN_FILTER_MASK);
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <can_filter_init+0x9c>)
 80010fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <can_filter_init+0xa0>)
 80010fe:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244

	/* Filter activation register */
	CAN1->FA1R |= CAN_FA1R_FACT0;
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <can_filter_init+0x9c>)
 8001104:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8001108:	4a09      	ldr	r2, [pc, #36]	@ (8001130 <can_filter_init+0x9c>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	/*CAN1->sFilterRegister[1].FR2 = (can_filter_mask << STDID_POS);*/

	/*-------------------------------------------------------*/

	/* Leave filter initialization mode */
	CAN1->FMR &= ~CAN_FMR_FINIT;
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <can_filter_init+0x9c>)
 8001114:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001118:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <can_filter_init+0x9c>)
 800111a:	f023 0301 	bic.w	r3, r3, #1
 800111e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40006400 	.word	0x40006400
 8001134:	ffe00000 	.word	0xffe00000

08001138 <can_init>:

void can_init (){
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0

	/* Enable clock access to CAN */
	RCC->APB1ENR |= RCC_APB1ENR_CAN1;
 800113c:	4b4c      	ldr	r3, [pc, #304]	@ (8001270 <can_init+0x138>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	4a4b      	ldr	r2, [pc, #300]	@ (8001270 <can_init+0x138>)
 8001142:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001146:	6413      	str	r3, [r2, #64]	@ 0x40

	/*---------------------- GPIOD ---------------------*/

	/* Enable pins - port D */
	RCC->AHB1ENR |= RCC_GPIOD_EN;
 8001148:	4b49      	ldr	r3, [pc, #292]	@ (8001270 <can_init+0x138>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114c:	4a48      	ldr	r2, [pc, #288]	@ (8001270 <can_init+0x138>)
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	6313      	str	r3, [r2, #48]	@ 0x30

	/* PD0 - CAN1_RD */
	GPIOD->MODER |= MODE_PD0_1;
 8001154:	4b47      	ldr	r3, [pc, #284]	@ (8001274 <can_init+0x13c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a46      	ldr	r2, [pc, #280]	@ (8001274 <can_init+0x13c>)
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~MODE_PD0_0;
 8001160:	4b44      	ldr	r3, [pc, #272]	@ (8001274 <can_init+0x13c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a43      	ldr	r2, [pc, #268]	@ (8001274 <can_init+0x13c>)
 8001166:	f023 0301 	bic.w	r3, r3, #1
 800116a:	6013      	str	r3, [r2, #0]

	/* Set PD0 alternate function to CAN1_RD (AF9) */
	GPIOD->AFR[0] |= AFRL0_3;
 800116c:	4b41      	ldr	r3, [pc, #260]	@ (8001274 <can_init+0x13c>)
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	4a40      	ldr	r2, [pc, #256]	@ (8001274 <can_init+0x13c>)
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] &= ~AFRL0_2;
 8001178:	4b3e      	ldr	r3, [pc, #248]	@ (8001274 <can_init+0x13c>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	4a3d      	ldr	r2, [pc, #244]	@ (8001274 <can_init+0x13c>)
 800117e:	f023 0304 	bic.w	r3, r3, #4
 8001182:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] &= ~AFRL0_1;
 8001184:	4b3b      	ldr	r3, [pc, #236]	@ (8001274 <can_init+0x13c>)
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	4a3a      	ldr	r2, [pc, #232]	@ (8001274 <can_init+0x13c>)
 800118a:	f023 0302 	bic.w	r3, r3, #2
 800118e:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= AFRL0_0;
 8001190:	4b38      	ldr	r3, [pc, #224]	@ (8001274 <can_init+0x13c>)
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	4a37      	ldr	r2, [pc, #220]	@ (8001274 <can_init+0x13c>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6213      	str	r3, [r2, #32]

	/* PD1 - CAN1_TD */
	GPIOD->MODER |= MODE_PD1_1;
 800119c:	4b35      	ldr	r3, [pc, #212]	@ (8001274 <can_init+0x13c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a34      	ldr	r2, [pc, #208]	@ (8001274 <can_init+0x13c>)
 80011a2:	f043 0308 	orr.w	r3, r3, #8
 80011a6:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~MODE_PD1_0;
 80011a8:	4b32      	ldr	r3, [pc, #200]	@ (8001274 <can_init+0x13c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a31      	ldr	r2, [pc, #196]	@ (8001274 <can_init+0x13c>)
 80011ae:	f023 0304 	bic.w	r3, r3, #4
 80011b2:	6013      	str	r3, [r2, #0]

	/* Set PD1 alternate function to CAN1_TD (AF9) */
	GPIOD->AFR[0] |= AFRL1_3;
 80011b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001274 <can_init+0x13c>)
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	4a2e      	ldr	r2, [pc, #184]	@ (8001274 <can_init+0x13c>)
 80011ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011be:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] &= ~AFRL1_2;
 80011c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001274 <can_init+0x13c>)
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001274 <can_init+0x13c>)
 80011c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80011ca:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] &= ~AFRL1_1;
 80011cc:	4b29      	ldr	r3, [pc, #164]	@ (8001274 <can_init+0x13c>)
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	4a28      	ldr	r2, [pc, #160]	@ (8001274 <can_init+0x13c>)
 80011d2:	f023 0320 	bic.w	r3, r3, #32
 80011d6:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= AFRL1_0;
 80011d8:	4b26      	ldr	r3, [pc, #152]	@ (8001274 <can_init+0x13c>)
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	4a25      	ldr	r2, [pc, #148]	@ (8001274 <can_init+0x13c>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	6213      	str	r3, [r2, #32]

	/* ------------------------------------------------------ */

	/* ENTER initialization mode - set INRQ in CAN_MC */
	CAN1->MCR |= CAN_MCR_INRQ;
 80011e4:	4b24      	ldr	r3, [pc, #144]	@ (8001278 <can_init+0x140>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a23      	ldr	r2, [pc, #140]	@ (8001278 <can_init+0x140>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6013      	str	r3, [r2, #0]

	/* Wait until INAK bit in CAN_MSR is set */
	while ( ! (CAN1->MSR & CAN_MSR_INAK) ){}
 80011f0:	bf00      	nop
 80011f2:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <can_init+0x140>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f9      	beq.n	80011f2 <can_init+0xba>

	/* Leave sleep mode, after reset CAN is in SLEEP mode */
	CAN1->MCR &= ~CAN_MCR_SLEEP;
 80011fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <can_init+0x140>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a1d      	ldr	r2, [pc, #116]	@ (8001278 <can_init+0x140>)
 8001204:	f023 0302 	bic.w	r3, r3, #2
 8001208:	6013      	str	r3, [r2, #0]

	/* Wait until SLAK bit in CAN_MSR is cleared */
	while ( CAN1->MSR & CAN_MSR_SLAK ) {}
 800120a:	bf00      	nop
 800120c:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <can_init+0x140>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f9      	bne.n	800120c <can_init+0xd4>
	 * BS2	-	2
	 * BRP	- 	11
	 */

	/* Set BTR */
	CAN1->BTR = 0x001a0005;
 8001218:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <can_init+0x140>)
 800121a:	4a18      	ldr	r2, [pc, #96]	@ (800127c <can_init+0x144>)
 800121c:	61da      	str	r2, [r3, #28]

	/* ------------------- Set receiver -----------------------*/
	CAN1->IER |= ( CAN_IER_FMPIE0 | CAN_IER_FMPIE1 );
 800121e:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <can_init+0x140>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a15      	ldr	r2, [pc, #84]	@ (8001278 <can_init+0x140>)
 8001224:	f043 0312 	orr.w	r3, r3, #18
 8001228:	6153      	str	r3, [r2, #20]


	/*---------------------------------------------------------*/

	/*------------------- Set filters -------------------------*/
	can_filter_init(CAN_ECU_ID, CAN_FILTER_MASK);
 800122a:	4915      	ldr	r1, [pc, #84]	@ (8001280 <can_init+0x148>)
 800122c:	f240 70df 	movw	r0, #2015	@ 0x7df
 8001230:	f7ff ff30 	bl	8001094 <can_filter_init>

	/* LEAVE initialization mode */
	CAN1->MCR &= ~CAN_MCR_INRQ;
 8001234:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <can_init+0x140>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0f      	ldr	r2, [pc, #60]	@ (8001278 <can_init+0x140>)
 800123a:	f023 0301 	bic.w	r3, r3, #1
 800123e:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority(CAN1_RX0_IRQn,15);
 8001240:	210f      	movs	r1, #15
 8001242:	2014      	movs	r0, #20
 8001244:	f7ff fefc 	bl	8001040 <__NVIC_SetPriority>
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001248:	2014      	movs	r0, #20
 800124a:	f7ff fedb 	bl	8001004 <__NVIC_EnableIRQ>

	NVIC_SetPriority(CAN1_RX1_IRQn,15);
 800124e:	210f      	movs	r1, #15
 8001250:	2015      	movs	r0, #21
 8001252:	f7ff fef5 	bl	8001040 <__NVIC_SetPriority>
	NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001256:	2015      	movs	r0, #21
 8001258:	f7ff fed4 	bl	8001004 <__NVIC_EnableIRQ>


	/* Wait until INAK bit in CAN_MSR is cleared */
	while ( (CAN1->MSR & CAN_MSR_INAK) ){}
 800125c:	bf00      	nop
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <can_init+0x140>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f9      	bne.n	800125e <can_init+0x126>
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	40020c00 	.word	0x40020c00
 8001278:	40006400 	.word	0x40006400
 800127c:	001a0005 	.word	0x001a0005
 8001280:	ffe00000 	.word	0xffe00000

08001284 <can_send_request>:

int can_send_request ( struct can_frame *msg, uint8_t pid_code ){
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]

	/* Set CAN ID */
	msg->_can_id = CAN_CLIENT_ID;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f44f 62fd 	mov.w	r2, #2024	@ 0x7e8
 8001296:	801a      	strh	r2, [r3, #0]

	msg->_dlc = DATA_FRAME_LENGTH; /* Set data length */
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2208      	movs	r2, #8
 800129c:	709a      	strb	r2, [r3, #2]

	msg->_data[0] = 0x02;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2202      	movs	r2, #2
 80012a2:	70da      	strb	r2, [r3, #3]
	msg->_data[1] = PID_01;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	711a      	strb	r2, [r3, #4]
	msg->_data[2] = pid_code;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	78fa      	ldrb	r2, [r7, #3]
 80012ae:	715a      	strb	r2, [r3, #5]

	for ( int i = 3; i < DATA_FRAME_LENGTH; ++i ){
 80012b0:	2303      	movs	r3, #3
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e008      	b.n	80012c8 <can_send_request+0x44>
		msg->_data[i] = 0xaa;
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	3303      	adds	r3, #3
 80012be:	22aa      	movs	r2, #170	@ 0xaa
 80012c0:	701a      	strb	r2, [r3, #0]
	for ( int i = 3; i < DATA_FRAME_LENGTH; ++i ){
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3301      	adds	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b07      	cmp	r3, #7
 80012cc:	ddf3      	ble.n	80012b6 <can_send_request+0x32>
	}

	return can_send(msg);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f910 	bl	80014f4 <can_send>
 80012d4:	4603      	mov	r3, r0
	msg->_data[0] = 0x02;
	msg->_data[1] = PID_01;
	msg->_data[2] = pid_code;
	*/

}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <can_process>:

int can_process ( struct can_frame *msg, struct can_data_collection *collection ){
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]

	switch ( msg->_data[2] ){
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	795b      	ldrb	r3, [r3, #5]
 80012ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80012ee:	d02e      	beq.n	800134e <can_process+0x70>
 80012f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80012f2:	dc40      	bgt.n	8001376 <can_process+0x98>
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d016      	beq.n	8001326 <can_process+0x48>
 80012f8:	2b0c      	cmp	r3, #12
 80012fa:	d13c      	bne.n	8001376 <can_process+0x98>

		case CAN_ENGINE_RPM:

			if ( msg->_data[1] == PID_01_POSITIVE_RESPONSE ){
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	791b      	ldrb	r3, [r3, #4]
 8001300:	2b41      	cmp	r3, #65	@ 0x41
 8001302:	d109      	bne.n	8001318 <can_process+0x3a>
				collection->_engine_rpm = engine_rpm_receive(msg->_data);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3303      	adds	r3, #3
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f839 	bl	8001380 <engine_rpm_receive>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	801a      	strh	r2, [r3, #0]
			} else {
				collection->_engine_rpm = -1;
				return -1;
			}

		break;
 8001316:	e02e      	b.n	8001376 <can_process+0x98>
				collection->_engine_rpm = -1;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800131e:	801a      	strh	r2, [r3, #0]
				return -1;
 8001320:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001324:	e028      	b.n	8001378 <can_process+0x9a>

		case CAN_ENGINE_LOAD:

			if ( msg->_data[1] == PID_01_POSITIVE_RESPONSE ){
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	791b      	ldrb	r3, [r3, #4]
 800132a:	2b41      	cmp	r3, #65	@ 0x41
 800132c:	d109      	bne.n	8001342 <can_process+0x64>
				collection->_engine_load = engine_load_receive(msg->_data);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3303      	adds	r3, #3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f83c 	bl	80013b0 <engine_load_receive>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	709a      	strb	r2, [r3, #2]
			} else {
				collection->_engine_load = -1;
				return -1;
			}

		break;
 8001340:	e019      	b.n	8001376 <can_process+0x98>
				collection->_engine_load = -1;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	22ff      	movs	r2, #255	@ 0xff
 8001346:	709a      	strb	r2, [r3, #2]
				return -1;
 8001348:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800134c:	e014      	b.n	8001378 <can_process+0x9a>

		case CAN_TANK_LEVEL:

			if ( msg->_data[1] == PID_01_POSITIVE_RESPONSE ){
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	791b      	ldrb	r3, [r3, #4]
 8001352:	2b41      	cmp	r3, #65	@ 0x41
 8001354:	d109      	bne.n	800136a <can_process+0x8c>
				collection->_tank_level = tank_level_receive(msg->_data);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3303      	adds	r3, #3
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f844 	bl	80013e8 <tank_level_receive>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	70da      	strb	r2, [r3, #3]
			} else {
				collection->_tank_level = -1;
				return -1;
			}

		break;
 8001368:	e005      	b.n	8001376 <can_process+0x98>
				collection->_tank_level = -1;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	22ff      	movs	r2, #255	@ 0xff
 800136e:	70da      	strb	r2, [r3, #3]
				return -1;
 8001370:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001374:	e000      	b.n	8001378 <can_process+0x9a>
	}

	return 0;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <engine_rpm_receive>:

/*
 *
 */
uint16_t engine_rpm_receive ( uint8_t *can_data ){
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	return (256 * can_data[3] + can_data[4])/4;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3303      	adds	r3, #3
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	3204      	adds	r2, #4
 8001394:	7812      	ldrb	r2, [r2, #0]
 8001396:	4413      	add	r3, r2
 8001398:	2b00      	cmp	r3, #0
 800139a:	da00      	bge.n	800139e <engine_rpm_receive+0x1e>
 800139c:	3303      	adds	r3, #3
 800139e:	109b      	asrs	r3, r3, #2
 80013a0:	b29b      	uxth	r3, r3
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <engine_load_receive>:

uint8_t engine_load_receive ( uint8_t *can_data ){
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	return (100 * can_data[3])/255;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3303      	adds	r3, #3
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	2364      	movs	r3, #100	@ 0x64
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	4a07      	ldr	r2, [pc, #28]	@ (80013e4 <engine_load_receive+0x34>)
 80013c8:	fb82 1203 	smull	r1, r2, r2, r3
 80013cc:	441a      	add	r2, r3
 80013ce:	11d2      	asrs	r2, r2, #7
 80013d0:	17db      	asrs	r3, r3, #31
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	b2db      	uxtb	r3, r3
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	80808081 	.word	0x80808081

080013e8 <tank_level_receive>:

uint8_t tank_level_receive ( uint8_t *can_data ){
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	return (100 * can_data[3])/255;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3303      	adds	r3, #3
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	2364      	movs	r3, #100	@ 0x64
 80013fa:	fb02 f303 	mul.w	r3, r2, r3
 80013fe:	4a07      	ldr	r2, [pc, #28]	@ (800141c <tank_level_receive+0x34>)
 8001400:	fb82 1203 	smull	r1, r2, r2, r3
 8001404:	441a      	add	r2, r3
 8001406:	11d2      	asrs	r2, r2, #7
 8001408:	17db      	asrs	r3, r3, #31
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	b2db      	uxtb	r3, r3
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	80808081 	.word	0x80808081

08001420 <can_receive>:

int can_receive(struct can_frame *msg, uint8_t FIFO_No ){
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]

		/* Read message can id */
		msg->_can_id = ((CAN1->sFIFOMailBox[FIFO_No].RIR & 0xffe00000) >> 21);
 800142c:	4a30      	ldr	r2, [pc, #192]	@ (80014f0 <can_receive+0xd0>)
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	331b      	adds	r3, #27
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	4413      	add	r3, r2
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	0d5b      	lsrs	r3, r3, #21
 800143a:	b29b      	uxth	r3, r3
 800143c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001440:	b29a      	uxth	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	801a      	strh	r2, [r3, #0]

		/* Read message length */
		msg->_dlc = (CAN1->sFIFOMailBox[FIFO_No].RDTR & 0xf);
 8001446:	4a2a      	ldr	r2, [pc, #168]	@ (80014f0 <can_receive+0xd0>)
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	331b      	adds	r3, #27
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	4413      	add	r3, r2
 8001450:	3304      	adds	r3, #4
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	b2da      	uxtb	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	709a      	strb	r2, [r3, #2]

		for ( uint8_t i = 0; i < msg->_dlc; ++i ){
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	e028      	b.n	80014b8 <can_receive+0x98>

			if ( i < 4 ){
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	2b03      	cmp	r3, #3
 800146a:	d810      	bhi.n	800148e <can_receive+0x6e>
				msg->_data[i] = (CAN1->sFIFOMailBox[FIFO_No].RDLR >> (8 * i));
 800146c:	4a20      	ldr	r2, [pc, #128]	@ (80014f0 <can_receive+0xd0>)
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	011b      	lsls	r3, r3, #4
 8001472:	4413      	add	r3, r2
 8001474:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	40da      	lsrs	r2, r3
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	b2d1      	uxtb	r1, r2
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	460a      	mov	r2, r1
 800148a:	70da      	strb	r2, [r3, #3]
 800148c:	e011      	b.n	80014b2 <can_receive+0x92>
			}
			else {
				msg->_data[i] = ( CAN1->sFIFOMailBox[FIFO_No].RDHR >> ((8*(i)) % 32));
 800148e:	4a18      	ldr	r2, [pc, #96]	@ (80014f0 <can_receive+0xd0>)
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4413      	add	r3, r2
 8001496:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	f003 0318 	and.w	r3, r3, #24
 80014a4:	40da      	lsrs	r2, r3
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	b2d1      	uxtb	r1, r2
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	460a      	mov	r2, r1
 80014b0:	70da      	strb	r2, [r3, #3]
		for ( uint8_t i = 0; i < msg->_dlc; ++i ){
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	3301      	adds	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	789b      	ldrb	r3, [r3, #2]
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d3d1      	bcc.n	8001466 <can_receive+0x46>
			}
		}

		if ( FIFO_No == 0){
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d106      	bne.n	80014d6 <can_receive+0xb6>
			CAN1->RF0R |= (1U << 5);
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <can_receive+0xd0>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	4a08      	ldr	r2, [pc, #32]	@ (80014f0 <can_receive+0xd0>)
 80014ce:	f043 0320 	orr.w	r3, r3, #32
 80014d2:	60d3      	str	r3, [r2, #12]
 80014d4:	e005      	b.n	80014e2 <can_receive+0xc2>
		} else {
			CAN1->RF1R |= (1U << 5);
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <can_receive+0xd0>)
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	4a05      	ldr	r2, [pc, #20]	@ (80014f0 <can_receive+0xd0>)
 80014dc:	f043 0320 	orr.w	r3, r3, #32
 80014e0:	6113      	str	r3, [r2, #16]
		}

		return 0;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	40006400 	.word	0x40006400

080014f4 <can_send>:

int can_send ( struct can_frame *msg ){
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

	/* 	Select empty mailbox -
	 *  first step use only one mailbox No. 0
	 *  Wait until transmit mailbox 0 is empty */
	while(!(CAN1->TSR & CAN_TSR_TME0_M)){}
 80014fc:	bf00      	nop
 80014fe:	4b3b      	ldr	r3, [pc, #236]	@ (80015ec <can_send+0xf8>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f9      	beq.n	80014fe <can_send+0xa>

	/* Set up identifier */
	CAN1->sTxMailBox[0].TIR = ( msg->_can_id << STDID_POS );
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	4a37      	ldr	r2, [pc, #220]	@ (80015ec <can_send+0xf8>)
 8001510:	055b      	lsls	r3, r3, #21
 8001512:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180

	/* Set up DLC - [0:3] bits describe DLC */
	CAN1->sTxMailBox[0].TDTR = ( msg->_dlc );
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	789a      	ldrb	r2, [r3, #2]
 800151a:	4b34      	ldr	r3, [pc, #208]	@ (80015ec <can_send+0xf8>)
 800151c:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184

	CAN1->sTxMailBox[0].TDLR = 0;
 8001520:	4b32      	ldr	r3, [pc, #200]	@ (80015ec <can_send+0xf8>)
 8001522:	2200      	movs	r2, #0
 8001524:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
	CAN1->sTxMailBox[0].TDHR = 0;
 8001528:	4b30      	ldr	r3, [pc, #192]	@ (80015ec <can_send+0xf8>)
 800152a:	2200      	movs	r2, #0
 800152c:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c

	/* Set up DATA */
	for ( int i = 0; i < msg->_dlc; ++i){
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	e030      	b.n	8001598 <can_send+0xa4>

		if ( i < 4){
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2b03      	cmp	r3, #3
 800153a:	dc12      	bgt.n	8001562 <can_send+0x6e>
			/* Write least significant bytes to TDLR register
			 * TDLR stores first four bytes */
			CAN1->sTxMailBox[0].TDLR |= ( msg->_data[i] << (i * 8));
 800153c:	4b2b      	ldr	r3, [pc, #172]	@ (80015ec <can_send+0xf8>)
 800153e:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	440a      	add	r2, r1
 8001548:	3203      	adds	r2, #3
 800154a:	7812      	ldrb	r2, [r2, #0]
 800154c:	4611      	mov	r1, r2
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	00d2      	lsls	r2, r2, #3
 8001552:	fa01 f202 	lsl.w	r2, r1, r2
 8001556:	4611      	mov	r1, r2
 8001558:	4a24      	ldr	r2, [pc, #144]	@ (80015ec <can_send+0xf8>)
 800155a:	430b      	orrs	r3, r1
 800155c:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
 8001560:	e017      	b.n	8001592 <can_send+0x9e>
		}
		else {
			/* TDHR stores last four bytes of CAN frame */
			CAN1->sTxMailBox[0].TDHR |= ( msg->_data[i] << ((i%4) * 8));
 8001562:	4b22      	ldr	r3, [pc, #136]	@ (80015ec <can_send+0xf8>)
 8001564:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	440b      	add	r3, r1
 800156e:	3303      	adds	r3, #3
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4259      	negs	r1, r3
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	f001 0103 	and.w	r1, r1, #3
 8001580:	bf58      	it	pl
 8001582:	424b      	negpl	r3, r1
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	fa00 f303 	lsl.w	r3, r0, r3
 800158a:	4918      	ldr	r1, [pc, #96]	@ (80015ec <can_send+0xf8>)
 800158c:	4313      	orrs	r3, r2
 800158e:	f8c1 318c 	str.w	r3, [r1, #396]	@ 0x18c
	for ( int i = 0; i < msg->_dlc; ++i){
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3301      	adds	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	789b      	ldrb	r3, [r3, #2]
 800159c:	461a      	mov	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4293      	cmp	r3, r2
 80015a2:	dbc8      	blt.n	8001536 <can_send+0x42>
		}
	}

	/* Request transmission- set TXRQ */
	CAN1->sTxMailBox[0].TIR |= CAN_TIxR_TXRQ;
 80015a4:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <can_send+0xf8>)
 80015a6:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80015aa:	4a10      	ldr	r2, [pc, #64]	@ (80015ec <can_send+0xf8>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180

	/* Wait until transmission takes place
	 * Meanwhile check possible transmission errors */
	while ( !(CAN1->TSR & (CAN_TSR_RQCP0 | CAN_TSR_TXOK0)) ){
 80015b4:	e00d      	b.n	80015d2 <can_send+0xde>

		/* Check possible errors - Arbitration Lost ALST0 or
		 * Transmission Error Detection TERR0
		 */
		if ( (CAN1->TSR & CAN_TSR_ALST0) || (CAN1->TSR & CAN_TSR_TERR0) ){
 80015b6:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <can_send+0xf8>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d105      	bne.n	80015ce <can_send+0xda>
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <can_send+0xf8>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <can_send+0xde>
			return 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e006      	b.n	80015e0 <can_send+0xec>
	while ( !(CAN1->TSR & (CAN_TSR_RQCP0 | CAN_TSR_TXOK0)) ){
 80015d2:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <can_send+0xf8>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0eb      	beq.n	80015b6 <can_send+0xc2>
		}
	}

	return 0;
 80015de:	2300      	movs	r3, #0

}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	40006400 	.word	0x40006400

080015f0 <gpiob_init>:
 *  Created on: Oct 25, 2024
 *      Author: tomasz
 */
#include "gpiob.h"

void gpiob_init(void){
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_GPIOB_EN;
 80015f4:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <gpiob_init+0x64>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f8:	4a16      	ldr	r2, [pc, #88]	@ (8001654 <gpiob_init+0x64>)
 80015fa:	f043 0302 	orr.w	r3, r3, #2
 80015fe:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOB->MODER &= ~MODE_PB14_1;
 8001600:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <gpiob_init+0x68>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a14      	ldr	r2, [pc, #80]	@ (8001658 <gpiob_init+0x68>)
 8001606:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800160a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= MODE_PB14_0;
 800160c:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <gpiob_init+0x68>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a11      	ldr	r2, [pc, #68]	@ (8001658 <gpiob_init+0x68>)
 8001612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001616:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~MODE_PB7_1;
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <gpiob_init+0x68>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0e      	ldr	r2, [pc, #56]	@ (8001658 <gpiob_init+0x68>)
 800161e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001622:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= MODE_PB7_0;
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <gpiob_init+0x68>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0b      	ldr	r2, [pc, #44]	@ (8001658 <gpiob_init+0x68>)
 800162a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800162e:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~MODE_PB0_1;
 8001630:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <gpiob_init+0x68>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a08      	ldr	r2, [pc, #32]	@ (8001658 <gpiob_init+0x68>)
 8001636:	f023 0302 	bic.w	r3, r3, #2
 800163a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= MODE_PB0_0;
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <gpiob_init+0x68>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a05      	ldr	r2, [pc, #20]	@ (8001658 <gpiob_init+0x68>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6013      	str	r3, [r2, #0]

}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40020400 	.word	0x40020400

0800165c <__NVIC_EnableIRQ>:
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	db0b      	blt.n	8001686 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	f003 021f 	and.w	r2, r3, #31
 8001674:	4907      	ldr	r1, [pc, #28]	@ (8001694 <__NVIC_EnableIRQ+0x38>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	2001      	movs	r0, #1
 800167e:	fa00 f202 	lsl.w	r2, r0, r2
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000e100 	.word	0xe000e100

08001698 <__NVIC_SetPriority>:
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	db0a      	blt.n	80016c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	490c      	ldr	r1, [pc, #48]	@ (80016e4 <__NVIC_SetPriority+0x4c>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	0112      	lsls	r2, r2, #4
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	440b      	add	r3, r1
 80016bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80016c0:	e00a      	b.n	80016d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4908      	ldr	r1, [pc, #32]	@ (80016e8 <__NVIC_SetPriority+0x50>)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	3b04      	subs	r3, #4
 80016d0:	0112      	lsls	r2, r2, #4
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	440b      	add	r3, r1
 80016d6:	761a      	strb	r2, [r3, #24]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <compute_uart_div>:

/********************* USART INTERRUPT FLAGS ************************************/

/***************************** USART 2 ******************************************/

uint16_t compute_uart_div ( uint32_t peripheralClock, uint32_t baudRate ){
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
	return ((peripheralClock + (baudRate/2U))/baudRate);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	085a      	lsrs	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	441a      	add	r2, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	fbb2 f3f3 	udiv	r3, r2, r3
 8001704:	b29b      	uxth	r3, r3
	/*return peripheralClock / ( 8 * 2 * baudRate );*/

}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <set_uart_baudrate>:

void set_uart_baudrate(USART_TypeDef *USART, uint32_t peripheralClock, uint32_t baudRate){
 8001712:	b580      	push	{r7, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	60f8      	str	r0, [r7, #12]
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
	USART->BRR = compute_uart_div(peripheralClock,baudRate);
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	68b8      	ldr	r0, [r7, #8]
 8001722:	f7ff ffe3 	bl	80016ec <compute_uart_div>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	609a      	str	r2, [r3, #8]
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <uart2_rx_tx_init>:
 * 	Receive PIN - do not use DMA controller, use interrupt
 *
 *
 ************************** GPS MODULE ******************************
 */
void uart2_rx_tx_init(){
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0

	/************** Configure UART2 GPIO PIN (PORT D) ***************/

	/* Enable access to PORTD */
	RCC->AHB1ENR |= RCC_GPIOD_EN;
 800173c:	4b40      	ldr	r3, [pc, #256]	@ (8001840 <uart2_rx_tx_init+0x108>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001740:	4a3f      	ldr	r2, [pc, #252]	@ (8001840 <uart2_rx_tx_init+0x108>)
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	6313      	str	r3, [r2, #48]	@ 0x30

	/************************ TRANSMIT PIN ******************************/

	/* Set PD5 to alternate function */
	GPIOD->MODER |= MODE_PD5_1;
 8001748:	4b3e      	ldr	r3, [pc, #248]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a3d      	ldr	r2, [pc, #244]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 800174e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001752:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(MODE_PD5_0);
 8001754:	4b3b      	ldr	r3, [pc, #236]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a3a      	ldr	r2, [pc, #232]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 800175a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800175e:	6013      	str	r3, [r2, #0]

	/* Set PD5 alternate function to TX */
	GPIOD->AFR[0] &= ~(AFRL5_3);
 8001760:	4b38      	ldr	r3, [pc, #224]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4a37      	ldr	r2, [pc, #220]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 8001766:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800176a:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= AFRL5_2;
 800176c:	4b35      	ldr	r3, [pc, #212]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4a34      	ldr	r2, [pc, #208]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 8001772:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001776:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= AFRL5_1;
 8001778:	4b32      	ldr	r3, [pc, #200]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	4a31      	ldr	r2, [pc, #196]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 800177e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001782:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= AFRL5_0;
 8001784:	4b2f      	ldr	r3, [pc, #188]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4a2e      	ldr	r2, [pc, #184]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 800178a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800178e:	6213      	str	r3, [r2, #32]

	/************************* RECEIVE PIN *****************************/

	/* Set PD6 to alternate function */
	GPIOD->MODER |= MODE_PD6_1;
 8001790:	4b2c      	ldr	r3, [pc, #176]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a2b      	ldr	r2, [pc, #172]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 8001796:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800179a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(MODE_PD6_0);
 800179c:	4b29      	ldr	r3, [pc, #164]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a28      	ldr	r2, [pc, #160]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 80017a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017a6:	6013      	str	r3, [r2, #0]

	/* Set PD6 alternate function to RX (AF7) */
	GPIOD->AFR[0] &= ~(AFRL6_3);
 80017a8:	4b26      	ldr	r3, [pc, #152]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4a25      	ldr	r2, [pc, #148]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 80017ae:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80017b2:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= AFRL6_2;
 80017b4:	4b23      	ldr	r3, [pc, #140]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4a22      	ldr	r2, [pc, #136]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 80017ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80017be:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= AFRL6_1;
 80017c0:	4b20      	ldr	r3, [pc, #128]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 80017c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017ca:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= AFRL6_0;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001844 <uart2_rx_tx_init+0x10c>)
 80017d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017d6:	6213      	str	r3, [r2, #32]

	/************************ Configure UART ***************************/

	/* Enable clock access to UART2 */
	RCC->APB1ENR |= RCC_USART2_EN;
 80017d8:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <uart2_rx_tx_init+0x108>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017dc:	4a18      	ldr	r2, [pc, #96]	@ (8001840 <uart2_rx_tx_init+0x108>)
 80017de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e2:	6413      	str	r3, [r2, #64]	@ 0x40

	set_uart_baudrate(USART2,APB1_CLK,USART2_BAUDRATE);
 80017e4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017e8:	4917      	ldr	r1, [pc, #92]	@ (8001848 <uart2_rx_tx_init+0x110>)
 80017ea:	4818      	ldr	r0, [pc, #96]	@ (800184c <uart2_rx_tx_init+0x114>)
 80017ec:	f7ff ff91 	bl	8001712 <set_uart_baudrate>

	/* Enable DMA for TX */
	USART2->CR3 = CR3_DMAT | CR3_DMAR;
 80017f0:	4b16      	ldr	r3, [pc, #88]	@ (800184c <uart2_rx_tx_init+0x114>)
 80017f2:	22c0      	movs	r2, #192	@ 0xc0
 80017f4:	615a      	str	r2, [r3, #20]

	/* Configure transfer direction */
	USART2->CR1 = CR1_TE | CR1_RE;
 80017f6:	4b15      	ldr	r3, [pc, #84]	@ (800184c <uart2_rx_tx_init+0x114>)
 80017f8:	220c      	movs	r2, #12
 80017fa:	60da      	str	r2, [r3, #12]

	/* Clear all flags */
	USART2->SR &= ~SR_TC;
 80017fc:	4b13      	ldr	r3, [pc, #76]	@ (800184c <uart2_rx_tx_init+0x114>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a12      	ldr	r2, [pc, #72]	@ (800184c <uart2_rx_tx_init+0x114>)
 8001802:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001806:	6013      	str	r3, [r2, #0]
	USART2->SR &= ~SR_IDLE;
 8001808:	4b10      	ldr	r3, [pc, #64]	@ (800184c <uart2_rx_tx_init+0x114>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0f      	ldr	r2, [pc, #60]	@ (800184c <uart2_rx_tx_init+0x114>)
 800180e:	f023 0310 	bic.w	r3, r3, #16
 8001812:	6013      	str	r3, [r2, #0]
	/*
	 * -> Receive interrupt enable
	 * -> TCIE transmission complete interrupt
	 *
	 */
	USART2->CR1 |= CR1_IDLEIE;
 8001814:	4b0d      	ldr	r3, [pc, #52]	@ (800184c <uart2_rx_tx_init+0x114>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	4a0c      	ldr	r2, [pc, #48]	@ (800184c <uart2_rx_tx_init+0x114>)
 800181a:	f043 0310 	orr.w	r3, r3, #16
 800181e:	60d3      	str	r3, [r2, #12]

	/* Enable UART */
	USART2->CR1 |= CR1_UE;
 8001820:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <uart2_rx_tx_init+0x114>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4a09      	ldr	r2, [pc, #36]	@ (800184c <uart2_rx_tx_init+0x114>)
 8001826:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800182a:	60d3      	str	r3, [r2, #12]


	/* Enable USART2 interrupt in NVIC */
	NVIC_SetPriority(USART2_IRQn,15);
 800182c:	210f      	movs	r1, #15
 800182e:	2026      	movs	r0, #38	@ 0x26
 8001830:	f7ff ff32 	bl	8001698 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8001834:	2026      	movs	r0, #38	@ 0x26
 8001836:	f7ff ff11 	bl	800165c <__NVIC_EnableIRQ>

}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40020c00 	.word	0x40020c00
 8001848:	0280de80 	.word	0x0280de80
 800184c:	40004400 	.word	0x40004400

08001850 <uart3_rx_tx_init>:

void uart3_rx_tx_init(void){
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0

	/************** Configure UART3 GPIO PIN (PORT B) ***************/

	/* Enable access to PORTB */
	RCC->AHB1ENR |= RCC_GPIOB_EN;
 8001854:	4b3b      	ldr	r3, [pc, #236]	@ (8001944 <uart3_rx_tx_init+0xf4>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001858:	4a3a      	ldr	r2, [pc, #232]	@ (8001944 <uart3_rx_tx_init+0xf4>)
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	6313      	str	r3, [r2, #48]	@ 0x30

	/************************ TRANSMIT PIN ******************************/

	/* Set PB10 to alternate function */
	GPIOB->MODER |= MODE_PB10_1;
 8001860:	4b39      	ldr	r3, [pc, #228]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a38      	ldr	r2, [pc, #224]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 8001866:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800186a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~MODE_PB10_0;
 800186c:	4b36      	ldr	r3, [pc, #216]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a35      	ldr	r2, [pc, #212]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 8001872:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001876:	6013      	str	r3, [r2, #0]

	/* Set PB10 alternate function to TX */
	GPIOB->AFR[1] &= ~AFRH10_3;
 8001878:	4b33      	ldr	r3, [pc, #204]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	4a32      	ldr	r2, [pc, #200]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 800187e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001882:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= AFRH10_2;
 8001884:	4b30      	ldr	r3, [pc, #192]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 8001886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001888:	4a2f      	ldr	r2, [pc, #188]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 800188a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800188e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= AFRH10_1;
 8001890:	4b2d      	ldr	r3, [pc, #180]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 8001892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001894:	4a2c      	ldr	r2, [pc, #176]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 8001896:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800189a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= AFRH10_0;
 800189c:	4b2a      	ldr	r3, [pc, #168]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 800189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a0:	4a29      	ldr	r2, [pc, #164]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 80018a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a6:	6253      	str	r3, [r2, #36]	@ 0x24

	/************************* RECEIVE PIN *****************************/

	/* Set PB11 to alternate function */
	GPIOB->MODER |= MODE_PB11_1;
 80018a8:	4b27      	ldr	r3, [pc, #156]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a26      	ldr	r2, [pc, #152]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 80018ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018b2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~MODE_PB11_0;
 80018b4:	4b24      	ldr	r3, [pc, #144]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a23      	ldr	r2, [pc, #140]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 80018ba:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80018be:	6013      	str	r3, [r2, #0]

	/* Set PB11 alternate function to RX */
	GPIOB->AFR[1] &= ~AFRH11_3;
 80018c0:	4b21      	ldr	r3, [pc, #132]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 80018c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c4:	4a20      	ldr	r2, [pc, #128]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 80018c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80018ca:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= AFRH11_2;
 80018cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 80018ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 80018d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= AFRH11_1;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 80018da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 80018de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018e2:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= AFRH11_0;
 80018e4:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 80018e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e8:	4a17      	ldr	r2, [pc, #92]	@ (8001948 <uart3_rx_tx_init+0xf8>)
 80018ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018ee:	6253      	str	r3, [r2, #36]	@ 0x24

	/************************* Configure UART **************************/

	/* Enable UART3 access to clock */
	RCC->APB1ENR |= RCC_USART3_EN;
 80018f0:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <uart3_rx_tx_init+0xf4>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f4:	4a13      	ldr	r2, [pc, #76]	@ (8001944 <uart3_rx_tx_init+0xf4>)
 80018f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018fa:	6413      	str	r3, [r2, #64]	@ 0x40

	/* Set baudrate */
	set_uart_baudrate(USART3,APB1_CLK,USART3_BAUDRATE);
 80018fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001900:	4912      	ldr	r1, [pc, #72]	@ (800194c <uart3_rx_tx_init+0xfc>)
 8001902:	4813      	ldr	r0, [pc, #76]	@ (8001950 <uart3_rx_tx_init+0x100>)
 8001904:	f7ff ff05 	bl	8001712 <set_uart_baudrate>

	/* Select to use DMA module for UART */
	USART3->CR3 = CR3_DMAT | CR3_DMAR;
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <uart3_rx_tx_init+0x100>)
 800190a:	22c0      	movs	r2, #192	@ 0xc0
 800190c:	615a      	str	r2, [r3, #20]

	/* Configure transfer direction */
	USART3->CR1 = CR1_TE | CR1_RE;
 800190e:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <uart3_rx_tx_init+0x100>)
 8001910:	220c      	movs	r2, #12
 8001912:	60da      	str	r2, [r3, #12]

	/* Clear all flags */
	USART3->SR &= ~SR_TC;
 8001914:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <uart3_rx_tx_init+0x100>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0d      	ldr	r2, [pc, #52]	@ (8001950 <uart3_rx_tx_init+0x100>)
 800191a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800191e:	6013      	str	r3, [r2, #0]
	USART3->SR &= ~SR_IDLE;
 8001920:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <uart3_rx_tx_init+0x100>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <uart3_rx_tx_init+0x100>)
 8001926:	f023 0310 	bic.w	r3, r3, #16
 800192a:	6013      	str	r3, [r2, #0]

	/* Enable receive and transfer interrupt */
	/* USART3->CR1 |= CR1_TCIE | CR1_RXNEIE;*/

	/* Enable UART */
	USART3->CR1 |= CR1_UE;
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <uart3_rx_tx_init+0x100>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	4a07      	ldr	r2, [pc, #28]	@ (8001950 <uart3_rx_tx_init+0x100>)
 8001932:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001936:	60d3      	str	r3, [r2, #12]

	/* Enable interrupt in NVIC */
	NVIC_EnableIRQ(USART3_IRQn);
 8001938:	2027      	movs	r0, #39	@ 0x27
 800193a:	f7ff fe8f 	bl	800165c <__NVIC_EnableIRQ>
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40020400 	.word	0x40020400
 800194c:	0280de80 	.word	0x0280de80
 8001950:	40004800 	.word	0x40004800

08001954 <dma1_init>:



}

void dma1_init(void){
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0

	/* Enable clock access to DMA1 */
	RCC->AHB1ENR |= RCC_DMA1_EN;
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <dma1_init+0x1c>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195c:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <dma1_init+0x1c>)
 800195e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001962:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Enable DMA interrupt in NVIC */
	/*NVIC_EnableIRQ(DMA1_Stream3_IRQn);*/

	/* Enable DMA Stream3 interrupt in NVIC */
	NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001964:	200e      	movs	r0, #14
 8001966:	f7ff fe79 	bl	800165c <__NVIC_EnableIRQ>
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800

08001974 <dma1_stream5_rx_config>:
	DMA1_Stream3->CR |= DMA_SXCR_EN;

}

/********************** USART2 DMA STREAMS ***************************/
void dma1_stream5_rx_config(uint32_t rx_buffer){
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

	/* Disable DMA1 stream 5 */
		DMA1_Stream5->CR &= ~ DMA_SXCR_EN;
 800197c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a2c      	ldr	r2, [pc, #176]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 8001982:	f023 0301 	bic.w	r3, r3, #1
 8001986:	6013      	str	r3, [r2, #0]

		/* Wait until EN bit is set to 0 */
		while ( DMA1_Stream5->CR & DMA_SXCR_EN ){}
 8001988:	bf00      	nop
 800198a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f9      	bne.n	800198a <dma1_stream5_rx_config+0x16>

		/* Clear all interrupt flags related to stream 1 */
		DMA1->HIFCR = HIFCR_CTCIF5 | HIFCR_CHTIF5 |
 8001996:	4b28      	ldr	r3, [pc, #160]	@ (8001a38 <dma1_stream5_rx_config+0xc4>)
 8001998:	f44f 6274 	mov.w	r2, #3904	@ 0xf40
 800199c:	60da      	str	r2, [r3, #12]

		/* Writing 1 to each of those bits clears
		 * corresponding bit in interrupt register */

		/* Set peripheral address */
		DMA1_Stream5->PAR = (uint32_t)(&(USART2->DR));
 800199e:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 80019a0:	4a26      	ldr	r2, [pc, #152]	@ (8001a3c <dma1_stream5_rx_config+0xc8>)
 80019a2:	609a      	str	r2, [r3, #8]

		/* Set memory address */
		DMA1_Stream5->M0AR = (uint32_t)(rx_buffer);
 80019a4:	4a23      	ldr	r2, [pc, #140]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60d3      	str	r3, [r2, #12]

		/* Set number of transfers */
		DMA1_Stream5->NDTR = (uint16_t) BUFFER_SIZE_USART2;
 80019aa:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 80019ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019b0:	605a      	str	r2, [r3, #4]

		/* Select channel (4) */
		DMA1_Stream5->CR |= DMA_SXCR_CHSEL_2;
 80019b2:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 80019b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80019bc:	6013      	str	r3, [r2, #0]
		DMA1_Stream5->CR &= ~DMA_SXCR_CHSEL_1;
 80019be:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 80019c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80019c8:	6013      	str	r3, [r2, #0]
		DMA1_Stream5->CR &= ~DMA_SXCR_CHSEL_0;
 80019ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a19      	ldr	r2, [pc, #100]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 80019d0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80019d4:	6013      	str	r3, [r2, #0]

		/* Enable memory address increment */
		DMA1_Stream5->CR |= DMA_SXCR_MINC;
 80019d6:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a16      	ldr	r2, [pc, #88]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 80019dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019e0:	6013      	str	r3, [r2, #0]

		/* Enable transfer complete interrupt */
		DMA1_Stream5->CR |= DMA_SXCR_TCIE | DMA_SXCR_HTIE;
 80019e2:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a13      	ldr	r2, [pc, #76]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 80019e8:	f043 0318 	orr.w	r3, r3, #24
 80019ec:	6013      	str	r3, [r2, #0]

		/* Enable circular mode */
		DMA1_Stream5->CR |= DMA_SXCR_CRC;
 80019ee:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a10      	ldr	r2, [pc, #64]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 80019f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f8:	6013      	str	r3, [r2, #0]

		/* Set transfer direction (peripheral to memory) */
		DMA1_Stream5->CR &= ~DMA_SXCR_DIR_1;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 8001a00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a04:	6013      	str	r3, [r2, #0]
		DMA1_Stream5->CR &= ~DMA_SXCR_DIR_0;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 8001a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001a10:	6013      	str	r3, [r2, #0]

		/* Enable DMA stream */
		DMA1_Stream5->CR |= DMA_SXCR_EN;
 8001a12:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a07      	ldr	r2, [pc, #28]	@ (8001a34 <dma1_stream5_rx_config+0xc0>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6013      	str	r3, [r2, #0]

		NVIC_SetPriority(DMA1_Stream5_IRQn,15);
 8001a1e:	210f      	movs	r1, #15
 8001a20:	2010      	movs	r0, #16
 8001a22:	f7ff fe39 	bl	8001698 <__NVIC_SetPriority>
		/* Enable DMA Stream5 interrupt in NVIC */
		NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a26:	2010      	movs	r0, #16
 8001a28:	f7ff fe18 	bl	800165c <__NVIC_EnableIRQ>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40026088 	.word	0x40026088
 8001a38:	40026000 	.word	0x40026000
 8001a3c:	40004404 	.word	0x40004404

08001a40 <usart2_process_data>:

void usart2_process_data ( gps *gpsPtr, uint8_t *ptr, size_t length ){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]

	if ( !parseMessage(gpsPtr, (char *) ptr, length )){
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 f88d 	bl	8001b70 <parseMessage>
		while(!(USART3->SR & SR_TC)) {}
		*/

	}

}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <usart2_dma_check_buffer>:

void usart2_dma_check_buffer ( uart_ds *ptr, gps *gpsPtr ){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]

	size_t pos = BUFFER_SIZE_USART2 - (size_t) GET_DMA_DATA_LENGTH_USART2();
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae8 <usart2_dma_check_buffer+0x88>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001a72:	60fb      	str	r3, [r7, #12]

	if ( pos >= 0 ){

		if ( pos != ptr->old_pos ){
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d02f      	beq.n	8001ae0 <usart2_dma_check_buffer+0x80>

		if ( pos > ptr->old_pos ){
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d90e      	bls.n	8001aaa <usart2_dma_check_buffer+0x4a>
			usart2_process_data(gpsPtr, &(ptr->uart_rx_dma_buffer[ptr->old_pos]),pos - ptr->old_pos);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	18d1      	adds	r1, r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	6838      	ldr	r0, [r7, #0]
 8001aa4:	f7ff ffcc 	bl	8001a40 <usart2_process_data>
 8001aa8:	e016      	b.n	8001ad8 <usart2_dma_check_buffer+0x78>
		}
		else{
			usart2_process_data(gpsPtr, &(ptr->uart_rx_dma_buffer[ptr->old_pos]),BUFFER_SIZE_USART2 - ptr->old_pos);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	18d1      	adds	r1, r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001aba:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001abe:	461a      	mov	r2, r3
 8001ac0:	6838      	ldr	r0, [r7, #0]
 8001ac2:	f7ff ffbd 	bl	8001a40 <usart2_process_data>
			if ( pos > 0 ){
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <usart2_dma_check_buffer+0x78>
				usart2_process_data(gpsPtr,&(ptr->uart_rx_dma_buffer[0]),pos);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	6838      	ldr	r0, [r7, #0]
 8001ad4:	f7ff ffb4 	bl	8001a40 <usart2_process_data>
			}
		}

		ptr->old_pos = pos;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	}
	}
}
 8001ae0:	bf00      	nop
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40026088 	.word	0x40026088

08001aec <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void){
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

	/* Transfer complete interrupt */
	if ((DMA1->LISR) & LIFSR_CTCIF1){
 8001af0:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <DMA1_Stream1_IRQHandler+0x28>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <DMA1_Stream1_IRQHandler+0x1c>

		DMA1->LIFCR |= LIFCR_CTCIF1;
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <DMA1_Stream1_IRQHandler+0x28>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	4a04      	ldr	r2, [pc, #16]	@ (8001b14 <DMA1_Stream1_IRQHandler+0x28>)
 8001b02:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b06:	6093      	str	r3, [r2, #8]
	}
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40026000 	.word	0x40026000

08001b18 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void){
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

	/* Transfer complete interrupt */
	if ((DMA1->LISR) & LIFSR_CTCIF3){
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <DMA1_Stream3_IRQHandler+0x34>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00b      	beq.n	8001b40 <DMA1_Stream3_IRQHandler+0x28>

		GPIOB->ODR |= ODR_PB14;
 8001b28:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <DMA1_Stream3_IRQHandler+0x38>)
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <DMA1_Stream3_IRQHandler+0x38>)
 8001b2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b32:	6153      	str	r3, [r2, #20]
		DMA1->LIFCR |= LIFSR_CTCIF3;
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <DMA1_Stream3_IRQHandler+0x34>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a04      	ldr	r2, [pc, #16]	@ (8001b4c <DMA1_Stream3_IRQHandler+0x34>)
 8001b3a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001b3e:	6093      	str	r3, [r2, #8]
	}
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40026000 	.word	0x40026000
 8001b50:	40020400 	.word	0x40020400

08001b54 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void){
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <USART3_IRQHandler>:
void uart2_callback(void){

}


void USART3_IRQHandler(void){
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0

}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <parseMessage>:
#include "gps.h"

int parseMessage ( gps *gpsStruct, char *msg, size_t length){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]

	for ( int i = 0; i < strlen(GPGGA_HEADER); ++i){
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e00e      	b.n	8001ba0 <parseMessage+0x30>
		if ( msg[i] != GPGGA_HEADER[i] )
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	4413      	add	r3, r2
 8001b88:	781a      	ldrb	r2, [r3, #0]
 8001b8a:	4934      	ldr	r1, [pc, #208]	@ (8001c5c <parseMessage+0xec>)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	440b      	add	r3, r1
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d001      	beq.n	8001b9a <parseMessage+0x2a>
			return 1;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e05b      	b.n	8001c52 <parseMessage+0xe2>
	for ( int i = 0; i < strlen(GPGGA_HEADER); ++i){
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d9ed      	bls.n	8001b82 <parseMessage+0x12>
	}

		if ( strtok(msg,",") == NULL){
 8001ba6:	492e      	ldr	r1, [pc, #184]	@ (8001c60 <parseMessage+0xf0>)
 8001ba8:	68b8      	ldr	r0, [r7, #8]
 8001baa:	f006 fb0d 	bl	80081c8 <strtok>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <parseMessage+0x48>
			return 1;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e04c      	b.n	8001c52 <parseMessage+0xe2>
		}

		if ( strtok(NULL,",") == NULL){
 8001bb8:	4929      	ldr	r1, [pc, #164]	@ (8001c60 <parseMessage+0xf0>)
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f006 fb04 	bl	80081c8 <strtok>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <parseMessage+0x5a>
			return 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e043      	b.n	8001c52 <parseMessage+0xe2>
		}

		gpsStruct->_latitude = atof(strtok(NULL,","));
 8001bca:	4925      	ldr	r1, [pc, #148]	@ (8001c60 <parseMessage+0xf0>)
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f006 fafb 	bl	80081c8 <strtok>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f004 fca7 	bl	8006528 <atof>
 8001bda:	ec53 2b10 	vmov	r2, r3, d0
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f7ff f811 	bl	8000c08 <__aeabi_d2f>
 8001be6:	4602      	mov	r2, r0
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
		gpsStruct->_latitude_attitude = strtok(NULL,",")[0];
 8001bee:	491c      	ldr	r1, [pc, #112]	@ (8001c60 <parseMessage+0xf0>)
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f006 fae9 	bl	80081c8 <strtok>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

		gpsStruct->_longitude = atof(strtok(NULL,","));
 8001c00:	4917      	ldr	r1, [pc, #92]	@ (8001c60 <parseMessage+0xf0>)
 8001c02:	2000      	movs	r0, #0
 8001c04:	f006 fae0 	bl	80081c8 <strtok>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f004 fc8c 	bl	8006528 <atof>
 8001c10:	ec53 2b10 	vmov	r2, r3, d0
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	f7fe fff6 	bl	8000c08 <__aeabi_d2f>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
		gpsStruct->_longitude_attitude = strtok(NULL,",")[0];
 8001c24:	490e      	ldr	r1, [pc, #56]	@ (8001c60 <parseMessage+0xf0>)
 8001c26:	2000      	movs	r0, #0
 8001c28:	f006 face 	bl	80081c8 <strtok>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

		if (atoi(strtok(NULL,","))){
 8001c36:	490a      	ldr	r1, [pc, #40]	@ (8001c60 <parseMessage+0xf0>)
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f006 fac5 	bl	80081c8 <strtok>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f004 fc74 	bl	800652e <atoi>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <parseMessage+0xe0>
			return 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e000      	b.n	8001c52 <parseMessage+0xe2>
		}


	return 1;
 8001c50:	2301      	movs	r3, #1
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	0800adb4 	.word	0x0800adb4
 8001c60:	0800adb0 	.word	0x0800adb0

08001c64 <main>:
void obd_module(void *parameters);
void send_task(void *parameters );


int main(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af02      	add	r7, sp, #8

	/* HAL_Init contains NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4) */
	HAL_Init();
 8001c6a:	f000 fccd 	bl	8002608 <HAL_Init>
	SystemClock_Config();
 8001c6e:	f000 f981 	bl	8001f74 <SystemClock_Config>

	gpiob_init(); /* Init user's LED's */
 8001c72:	f7ff fcbd 	bl	80015f0 <gpiob_init>

	/* Create QUEUE's */
	if ( (gpsReceiver = xQueueCreate(QUEUE_LENGTH,sizeof(uint8_t))) == NULL ){
 8001c76:	2200      	movs	r2, #0
 8001c78:	2101      	movs	r1, #1
 8001c7a:	200a      	movs	r0, #10
 8001c7c:	f002 f8af 	bl	8003dde <xQueueGenericCreate>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4a3c      	ldr	r2, [pc, #240]	@ (8001d74 <main+0x110>)
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b3b      	ldr	r3, [pc, #236]	@ (8001d74 <main+0x110>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d105      	bne.n	8001c9a <main+0x36>
	  GPIOB->ODR |= ODR_PB14;
 8001c8e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d78 <main+0x114>)
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	4a39      	ldr	r2, [pc, #228]	@ (8001d78 <main+0x114>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c98:	6153      	str	r3, [r2, #20]
	}

	if ( (CAN_receiver = xQueueCreate(QUEUE_LENGTH,sizeof(uint8_t))) == NULL ){
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	200a      	movs	r0, #10
 8001ca0:	f002 f89d 	bl	8003dde <xQueueGenericCreate>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4a35      	ldr	r2, [pc, #212]	@ (8001d7c <main+0x118>)
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b34      	ldr	r3, [pc, #208]	@ (8001d7c <main+0x118>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d105      	bne.n	8001cbe <main+0x5a>
	  GPIOB->ODR |= ODR_PB14;
 8001cb2:	4b31      	ldr	r3, [pc, #196]	@ (8001d78 <main+0x114>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	4a30      	ldr	r2, [pc, #192]	@ (8001d78 <main+0x114>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cbc:	6153      	str	r3, [r2, #20]
	}


	/* Create event group */
	if ( (dataReceived = xEventGroupCreate()) == NULL ){
 8001cbe:	f001 fd59 	bl	8003774 <xEventGroupCreate>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8001d80 <main+0x11c>)
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d80 <main+0x11c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <main+0x78>
		GPIOB->ODR |= ODR_PB14;
 8001cd0:	4b29      	ldr	r3, [pc, #164]	@ (8001d78 <main+0x114>)
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	4a28      	ldr	r2, [pc, #160]	@ (8001d78 <main+0x114>)
 8001cd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cda:	6153      	str	r3, [r2, #20]
	 * Bi1 1 - received and processed data from GPS
	 * Bit 2 - created packet to send
	 *
	 */

	uart2_rx_tx_init();
 8001cdc:	f7ff fd2c 	bl	8001738 <uart2_rx_tx_init>
	uart3_rx_tx_init();
 8001ce0:	f7ff fdb6 	bl	8001850 <uart3_rx_tx_init>
	dma1_init();
 8001ce4:	f7ff fe36 	bl	8001954 <dma1_init>
	dma1_stream5_rx_config((uint32_t) usart2.uart_rx_dma_buffer);
 8001ce8:	4b26      	ldr	r3, [pc, #152]	@ (8001d84 <main+0x120>)
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fe42 	bl	8001974 <dma1_stream5_rx_config>

	can_init();
 8001cf0:	f7ff fa22 	bl	8001138 <can_init>

	if ( pdPASS != xTaskCreate(usart2_dma_rx_task,"DMAU2",256,NULL,configMAX_PRIORITIES-1,NULL)){
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	2337      	movs	r3, #55	@ 0x37
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d02:	4921      	ldr	r1, [pc, #132]	@ (8001d88 <main+0x124>)
 8001d04:	4821      	ldr	r0, [pc, #132]	@ (8001d8c <main+0x128>)
 8001d06:	f002 fd19 	bl	800473c <xTaskCreate>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d005      	beq.n	8001d1c <main+0xb8>
		GPIOB->ODR |= ODR_PB7;
 8001d10:	4b19      	ldr	r3, [pc, #100]	@ (8001d78 <main+0x114>)
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	4a18      	ldr	r2, [pc, #96]	@ (8001d78 <main+0x114>)
 8001d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d1a:	6153      	str	r3, [r2, #20]
		}

	if ( pdPASS != xTaskCreate(obd_module,"CAN", 256, NULL, configMAX_PRIORITIES-1, NULL)){
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	2337      	movs	r3, #55	@ 0x37
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	2300      	movs	r3, #0
 8001d26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d2a:	4919      	ldr	r1, [pc, #100]	@ (8001d90 <main+0x12c>)
 8001d2c:	4819      	ldr	r0, [pc, #100]	@ (8001d94 <main+0x130>)
 8001d2e:	f002 fd05 	bl	800473c <xTaskCreate>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d005      	beq.n	8001d44 <main+0xe0>
	 GPIOB->ODR |= ODR_PB7;
 8001d38:	4b0f      	ldr	r3, [pc, #60]	@ (8001d78 <main+0x114>)
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d78 <main+0x114>)
 8001d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d42:	6153      	str	r3, [r2, #20]
	}

	if ( pdPASS != xTaskCreate(send_task,"SEND", 256, NULL, configMAX_PRIORITIES -1, NULL)){
 8001d44:	2300      	movs	r3, #0
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	2337      	movs	r3, #55	@ 0x37
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d52:	4911      	ldr	r1, [pc, #68]	@ (8001d98 <main+0x134>)
 8001d54:	4811      	ldr	r0, [pc, #68]	@ (8001d9c <main+0x138>)
 8001d56:	f002 fcf1 	bl	800473c <xTaskCreate>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d005      	beq.n	8001d6c <main+0x108>
		GPIOB->ODR |= ODR_PB7;
 8001d60:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <main+0x114>)
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	4a04      	ldr	r2, [pc, #16]	@ (8001d78 <main+0x114>)
 8001d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d6a:	6153      	str	r3, [r2, #20]
	}

	vTaskStartScheduler();
 8001d6c:	f002 fe44 	bl	80049f8 <vTaskStartScheduler>

  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <main+0x10c>
 8001d74:	2000050c 	.word	0x2000050c
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	20000510 	.word	0x20000510
 8001d80:	20000514 	.word	0x20000514
 8001d84:	200001f0 	.word	0x200001f0
 8001d88:	0800adbc 	.word	0x0800adbc
 8001d8c:	08002049 	.word	0x08002049
 8001d90:	0800adc4 	.word	0x0800adc4
 8001d94:	08002145 	.word	0x08002145
 8001d98:	0800adc8 	.word	0x0800adc8
 8001d9c:	080020a1 	.word	0x080020a1

08001da0 <CAN1_RX0_IRQHandler>:
  {
  }
}

void CAN1_RX0_IRQHandler(void){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0

	if ( CAN1->RF0R & CAN_RF0R_FMP0 ){
 8001da6:	4b18      	ldr	r3, [pc, #96]	@ (8001e08 <CAN1_RX0_IRQHandler+0x68>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d025      	beq.n	8001dfe <CAN1_RX0_IRQHandler+0x5e>

		/* FIFO No */
		uint8_t d = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	71fb      	strb	r3, [r7, #7]

		xHigherPriorityTaskWoken = pdFALSE;
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <CAN1_RX0_IRQHandler+0x6c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

		if ( xQueueSendFromISR(CAN_receiver,&d,&xHigherPriorityTaskWoken) != pdPASS ){
 8001dbc:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <CAN1_RX0_IRQHandler+0x70>)
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	1df9      	adds	r1, r7, #7
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	4a11      	ldr	r2, [pc, #68]	@ (8001e0c <CAN1_RX0_IRQHandler+0x6c>)
 8001dc6:	f002 f96b 	bl	80040a0 <xQueueGenericSendFromISR>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d005      	beq.n	8001ddc <CAN1_RX0_IRQHandler+0x3c>
			GPIOB->ODR |= ODR_PB7;
 8001dd0:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <CAN1_RX0_IRQHandler+0x74>)
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	4a0f      	ldr	r2, [pc, #60]	@ (8001e14 <CAN1_RX0_IRQHandler+0x74>)
 8001dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dda:	6153      	str	r3, [r2, #20]
		}

		/* Receive message - read CAN frame */
		can_receive(&msg_receive, d);
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	4619      	mov	r1, r3
 8001de0:	480d      	ldr	r0, [pc, #52]	@ (8001e18 <CAN1_RX0_IRQHandler+0x78>)
 8001de2:	f7ff fb1d 	bl	8001420 <can_receive>

		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8001de6:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <CAN1_RX0_IRQHandler+0x6c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d007      	beq.n	8001dfe <CAN1_RX0_IRQHandler+0x5e>
 8001dee:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <CAN1_RX0_IRQHandler+0x7c>)
 8001df0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	f3bf 8f4f 	dsb	sy
 8001dfa:	f3bf 8f6f 	isb	sy

	}

}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40006400 	.word	0x40006400
 8001e0c:	20000518 	.word	0x20000518
 8001e10:	20000510 	.word	0x20000510
 8001e14:	40020400 	.word	0x40020400
 8001e18:	2000051c 	.word	0x2000051c
 8001e1c:	e000ed04 	.word	0xe000ed04

08001e20 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0

	if ( CAN1->RF1R & CAN_RF1R_FMP1){
 8001e26:	4b15      	ldr	r3, [pc, #84]	@ (8001e7c <CAN1_RX1_IRQHandler+0x5c>)
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d020      	beq.n	8001e74 <CAN1_RX1_IRQHandler+0x54>

			uint8_t d = 1;
 8001e32:	2301      	movs	r3, #1
 8001e34:	71fb      	strb	r3, [r7, #7]
			xHigherPriorityTaskWoken = pdFALSE;
 8001e36:	4b12      	ldr	r3, [pc, #72]	@ (8001e80 <CAN1_RX1_IRQHandler+0x60>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

			if ( xQueueSendFromISR(CAN_receiver,&d,&xHigherPriorityTaskWoken) == errQUEUE_FULL ){
 8001e3c:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <CAN1_RX1_IRQHandler+0x64>)
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	1df9      	adds	r1, r7, #7
 8001e42:	2300      	movs	r3, #0
 8001e44:	4a0e      	ldr	r2, [pc, #56]	@ (8001e80 <CAN1_RX1_IRQHandler+0x60>)
 8001e46:	f002 f92b 	bl	80040a0 <xQueueGenericSendFromISR>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d105      	bne.n	8001e5c <CAN1_RX1_IRQHandler+0x3c>
				GPIOB->ODR |= ODR_PB7;
 8001e50:	4b0d      	ldr	r3, [pc, #52]	@ (8001e88 <CAN1_RX1_IRQHandler+0x68>)
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	4a0c      	ldr	r2, [pc, #48]	@ (8001e88 <CAN1_RX1_IRQHandler+0x68>)
 8001e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e5a:	6153      	str	r3, [r2, #20]
			}

			portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8001e5c:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <CAN1_RX1_IRQHandler+0x60>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <CAN1_RX1_IRQHandler+0x54>
 8001e64:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <CAN1_RX1_IRQHandler+0x6c>)
 8001e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	f3bf 8f4f 	dsb	sy
 8001e70:	f3bf 8f6f 	isb	sy
	}
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40006400 	.word	0x40006400
 8001e80:	20000518 	.word	0x20000518
 8001e84:	20000510 	.word	0x20000510
 8001e88:	40020400 	.word	0x40020400
 8001e8c:	e000ed04 	.word	0xe000ed04

08001e90 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0

	if (USART2->SR & SR_IDLE){
 8001e96:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <USART2_IRQHandler+0x60>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d022      	beq.n	8001ee8 <USART2_IRQHandler+0x58>

		uint8_t d = 1;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	71fb      	strb	r3, [r7, #7]

		xHigherPriorityTaskWoken = pdFALSE;
 8001ea6:	4b13      	ldr	r3, [pc, #76]	@ (8001ef4 <USART2_IRQHandler+0x64>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
		USART2->DR;
 8001eac:	4b10      	ldr	r3, [pc, #64]	@ (8001ef0 <USART2_IRQHandler+0x60>)
 8001eae:	685b      	ldr	r3, [r3, #4]

		/* Check if message has been sent correctly */
		if( xQueueSendFromISR(gpsReceiver,&d,&xHigherPriorityTaskWoken) != pdPASS ){
 8001eb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <USART2_IRQHandler+0x68>)
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	1df9      	adds	r1, r7, #7
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef4 <USART2_IRQHandler+0x64>)
 8001eba:	f002 f8f1 	bl	80040a0 <xQueueGenericSendFromISR>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d005      	beq.n	8001ed0 <USART2_IRQHandler+0x40>
			GPIOB->ODR |= ODR_PB7;
 8001ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <USART2_IRQHandler+0x6c>)
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8001efc <USART2_IRQHandler+0x6c>)
 8001eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ece:	6153      	str	r3, [r2, #20]
		}

		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8001ed0:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <USART2_IRQHandler+0x64>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <USART2_IRQHandler+0x58>
 8001ed8:	4b09      	ldr	r3, [pc, #36]	@ (8001f00 <USART2_IRQHandler+0x70>)
 8001eda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	f3bf 8f4f 	dsb	sy
 8001ee4:	f3bf 8f6f 	isb	sy
	}
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40004400 	.word	0x40004400
 8001ef4:	20000518 	.word	0x20000518
 8001ef8:	2000050c 	.word	0x2000050c
 8001efc:	40020400 	.word	0x40020400
 8001f00:	e000ed04 	.word	0xe000ed04

08001f04 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void){
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0

	uint8_t d =1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	71fb      	strb	r3, [r7, #7]
	xHigherPriorityTaskWoken = pdFALSE;
 8001f0e:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <DMA1_Stream5_IRQHandler+0x64>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

	if (((DMA1->HISR) & HIFSR_CTCIF5)){
 8001f14:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <DMA1_Stream5_IRQHandler+0x68>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00c      	beq.n	8001f3a <DMA1_Stream5_IRQHandler+0x36>

		xQueueSendFromISR(gpsReceiver,&d,&xHigherPriorityTaskWoken);
 8001f20:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <DMA1_Stream5_IRQHandler+0x6c>)
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	1df9      	adds	r1, r7, #7
 8001f26:	2300      	movs	r3, #0
 8001f28:	4a0f      	ldr	r2, [pc, #60]	@ (8001f68 <DMA1_Stream5_IRQHandler+0x64>)
 8001f2a:	f002 f8b9 	bl	80040a0 <xQueueGenericSendFromISR>
		DMA1->HIFCR |= HIFCR_CTCIF5;
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <DMA1_Stream5_IRQHandler+0x68>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	4a0e      	ldr	r2, [pc, #56]	@ (8001f6c <DMA1_Stream5_IRQHandler+0x68>)
 8001f34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f38:	60d3      	str	r3, [r2, #12]
	}

	if (((DMA1->HISR) & HIFSR_CHTIF5)){
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <DMA1_Stream5_IRQHandler+0x68>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <DMA1_Stream5_IRQHandler+0x5c>

		xQueueSendFromISR(gpsReceiver,&d,&xHigherPriorityTaskWoken);
 8001f46:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <DMA1_Stream5_IRQHandler+0x6c>)
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	1df9      	adds	r1, r7, #7
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	4a06      	ldr	r2, [pc, #24]	@ (8001f68 <DMA1_Stream5_IRQHandler+0x64>)
 8001f50:	f002 f8a6 	bl	80040a0 <xQueueGenericSendFromISR>
		DMA1->HIFCR |= HIFCR_CHTIF5;
 8001f54:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <DMA1_Stream5_IRQHandler+0x68>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4a04      	ldr	r2, [pc, #16]	@ (8001f6c <DMA1_Stream5_IRQHandler+0x68>)
 8001f5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f5e:	60d3      	str	r3, [r2, #12]
	}
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000518 	.word	0x20000518
 8001f6c:	40026000 	.word	0x40026000
 8001f70:	2000050c 	.word	0x2000050c

08001f74 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b094      	sub	sp, #80	@ 0x50
 8001f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f7a:	f107 0320 	add.w	r3, r7, #32
 8001f7e:	2230      	movs	r2, #48	@ 0x30
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f006 f905 	bl	8008192 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f88:	f107 030c 	add.w	r3, r7, #12
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	4b28      	ldr	r3, [pc, #160]	@ (8002040 <SystemClock_Config+0xcc>)
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	4a27      	ldr	r2, [pc, #156]	@ (8002040 <SystemClock_Config+0xcc>)
 8001fa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa8:	4b25      	ldr	r3, [pc, #148]	@ (8002040 <SystemClock_Config+0xcc>)
 8001faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	4b22      	ldr	r3, [pc, #136]	@ (8002044 <SystemClock_Config+0xd0>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a21      	ldr	r2, [pc, #132]	@ (8002044 <SystemClock_Config+0xd0>)
 8001fbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002044 <SystemClock_Config+0xd0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001fd4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fde:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001fe8:	23a8      	movs	r3, #168	@ 0xa8
 8001fea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fec:	2302      	movs	r3, #2
 8001fee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ff0:	2307      	movs	r3, #7
 8001ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff4:	f107 0320 	add.w	r3, r7, #32
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fc15 	bl	8002828 <HAL_RCC_OscConfig>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002004:	f000 f8f6 	bl	80021f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002008:	230f      	movs	r3, #15
 800200a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800200c:	2302      	movs	r3, #2
 800200e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002014:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002018:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800201a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800201e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002020:	f107 030c 	add.w	r3, r7, #12
 8002024:	2105      	movs	r1, #5
 8002026:	4618      	mov	r0, r3
 8002028:	f000 fe76 	bl	8002d18 <HAL_RCC_ClockConfig>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002032:	f000 f8df 	bl	80021f4 <Error_Handler>
  }
}
 8002036:	bf00      	nop
 8002038:	3750      	adds	r7, #80	@ 0x50
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40023800 	.word	0x40023800
 8002044:	40007000 	.word	0x40007000

08002048 <usart2_dma_rx_task>:

void usart2_dma_rx_task ( void *queuePtr ){
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

	uint8_t d = 1;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]

	while(1){

		GPIOB->ODR ^= ODR_PB0;
 8002054:	4b0d      	ldr	r3, [pc, #52]	@ (800208c <usart2_dma_rx_task+0x44>)
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	4a0c      	ldr	r2, [pc, #48]	@ (800208c <usart2_dma_rx_task+0x44>)
 800205a:	f083 0301 	eor.w	r3, r3, #1
 800205e:	6153      	str	r3, [r2, #20]

		/* Wait until there is any element from USART2 IRQ and
		 * DMA1_Stream5 IRQ handlers
		 */
		xQueueReceive(gpsReceiver, &d, portMAX_DELAY);
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <usart2_dma_rx_task+0x48>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f107 010f 	add.w	r1, r7, #15
 8002068:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800206c:	4618      	mov	r0, r3
 800206e:	f002 f8b5 	bl	80041dc <xQueueReceive>

		/* Process message */
		usart2_dma_check_buffer(&usart2, &packetData._gps_data);
 8002072:	4908      	ldr	r1, [pc, #32]	@ (8002094 <usart2_dma_rx_task+0x4c>)
 8002074:	4808      	ldr	r0, [pc, #32]	@ (8002098 <usart2_dma_rx_task+0x50>)
 8002076:	f7ff fcf3 	bl	8001a60 <usart2_dma_check_buffer>

		/* Set bits */
		xEventGroupSetBits(dataReceived,GPS_MODULE);
 800207a:	4b08      	ldr	r3, [pc, #32]	@ (800209c <usart2_dma_rx_task+0x54>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2102      	movs	r1, #2
 8002080:	4618      	mov	r0, r3
 8002082:	f001 fc63 	bl	800394c <xEventGroupSetBits>
		GPIOB->ODR ^= ODR_PB0;
 8002086:	bf00      	nop
 8002088:	e7e4      	b.n	8002054 <usart2_dma_rx_task+0xc>
 800208a:	bf00      	nop
 800208c:	40020400 	.word	0x40020400
 8002090:	2000050c 	.word	0x2000050c
 8002094:	200003fc 	.word	0x200003fc
 8002098:	200001f0 	.word	0x200001f0
 800209c:	20000514 	.word	0x20000514

080020a0 <send_task>:
	}

}

void send_task ( void *parameters ){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b0a6      	sub	sp, #152	@ 0x98
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	6078      	str	r0, [r7, #4]
	uint8_t message[MESSAGE_LENGTH];
	uint8_t message_length;

	while (1) {

		xEventGroupWaitBits(dataReceived,3, pdTRUE, pdTRUE, portMAX_DELAY);
 80020a8:	4b22      	ldr	r3, [pc, #136]	@ (8002134 <send_task+0x94>)
 80020aa:	6818      	ldr	r0, [r3, #0]
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	2301      	movs	r3, #1
 80020b4:	2201      	movs	r2, #1
 80020b6:	2103      	movs	r1, #3
 80020b8:	f001 fb76 	bl	80037a8 <xEventGroupWaitBits>
		message_length = prepare_json( &packetData,message);
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	4619      	mov	r1, r3
 80020c2:	481d      	ldr	r0, [pc, #116]	@ (8002138 <send_task+0x98>)
 80020c4:	f000 f89c 	bl	8002200 <prepare_json>
 80020c8:	4603      	mov	r3, r0
 80020ca:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e

		for ( uint8_t i = 0; i < message_length; ++i ){
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80020d4:	e020      	b.n	8002118 <send_task+0x78>

				USART3->DR = message[i];
 80020d6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80020da:	3390      	adds	r3, #144	@ 0x90
 80020dc:	443b      	add	r3, r7
 80020de:	f813 2c84 	ldrb.w	r2, [r3, #-132]
 80020e2:	4b16      	ldr	r3, [pc, #88]	@ (800213c <send_task+0x9c>)
 80020e4:	605a      	str	r2, [r3, #4]

				GPIOB->ODR ^= ODR_PB7;
 80020e6:	4b16      	ldr	r3, [pc, #88]	@ (8002140 <send_task+0xa0>)
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	4a15      	ldr	r2, [pc, #84]	@ (8002140 <send_task+0xa0>)
 80020ec:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 80020f0:	6153      	str	r3, [r2, #20]
			while(!(USART3->SR & SR_TXE)){}
 80020f2:	bf00      	nop
 80020f4:	4b11      	ldr	r3, [pc, #68]	@ (800213c <send_task+0x9c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f9      	beq.n	80020f4 <send_task+0x54>

			while(!(USART3->SR & SR_TC)) {}
 8002100:	bf00      	nop
 8002102:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <send_task+0x9c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f9      	beq.n	8002102 <send_task+0x62>
		for ( uint8_t i = 0; i < message_length; ++i ){
 800210e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002112:	3301      	adds	r3, #1
 8002114:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8002118:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800211c:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8002120:	429a      	cmp	r2, r3
 8002122:	d3d8      	bcc.n	80020d6 <send_task+0x36>
		}

		xEventGroupSetBits(dataReceived,PACKET_PREPARED);
 8002124:	4b03      	ldr	r3, [pc, #12]	@ (8002134 <send_task+0x94>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2104      	movs	r1, #4
 800212a:	4618      	mov	r0, r3
 800212c:	f001 fc0e 	bl	800394c <xEventGroupSetBits>
		xEventGroupWaitBits(dataReceived,3, pdTRUE, pdTRUE, portMAX_DELAY);
 8002130:	e7ba      	b.n	80020a8 <send_task+0x8>
 8002132:	bf00      	nop
 8002134:	20000514 	.word	0x20000514
 8002138:	200003f8 	.word	0x200003f8
 800213c:	40004800 	.word	0x40004800
 8002140:	40020400 	.word	0x40020400

08002144 <obd_module>:
	}
}

void obd_module ( void *parameters ){
 8002144:	b580      	push	{r7, lr}
 8002146:	b08c      	sub	sp, #48	@ 0x30
 8002148:	af02      	add	r7, sp, #8
 800214a:	6078      	str	r0, [r7, #4]

	uint8_t request_code[] = { CAN_ENGINE_RPM, CAN_ENGINE_LOAD, CAN_TANK_LEVEL};
 800214c:	4a24      	ldr	r2, [pc, #144]	@ (80021e0 <obd_module+0x9c>)
 800214e:	f107 031c 	add.w	r3, r7, #28
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	4611      	mov	r1, r2
 8002156:	8019      	strh	r1, [r3, #0]
 8002158:	3302      	adds	r3, #2
 800215a:	0c12      	lsrs	r2, r2, #16
 800215c:	701a      	strb	r2, [r3, #0]
	can_frame msg_transmit;

	/* Request code array length */
	uint8_t request_code_array_length = sizeof(request_code)/sizeof(uint8_t);
 800215e:	2303      	movs	r3, #3
 8002160:	77fb      	strb	r3, [r7, #31]
	uint8_t d = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	73fb      	strb	r3, [r7, #15]

	while(1){


		for ( int i = 0; i < request_code_array_length; ++i){
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24
 800216a:	e00d      	b.n	8002188 <obd_module+0x44>
			can_send_request(&msg_transmit,request_code[i]);
 800216c:	f107 021c 	add.w	r2, r7, #28
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	4413      	add	r3, r2
 8002174:	781a      	ldrb	r2, [r3, #0]
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff f881 	bl	8001284 <can_send_request>
		for ( int i = 0; i < request_code_array_length; ++i){
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	3301      	adds	r3, #1
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
 8002188:	7ffb      	ldrb	r3, [r7, #31]
 800218a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800218c:	429a      	cmp	r2, r3
 800218e:	dbed      	blt.n	800216c <obd_module+0x28>
		}

		for ( int i = 0; i < request_code_array_length; ++i){
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
 8002194:	e00f      	b.n	80021b6 <obd_module+0x72>

			/* Wait until new message incomes */
			xQueueReceive(CAN_receiver,&d, portMAX_DELAY);
 8002196:	4b13      	ldr	r3, [pc, #76]	@ (80021e4 <obd_module+0xa0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f107 010f 	add.w	r1, r7, #15
 800219e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021a2:	4618      	mov	r0, r3
 80021a4:	f002 f81a 	bl	80041dc <xQueueReceive>

			/* Receive and process message */

			can_process(&msg_receive, &packetData._obd_data);
 80021a8:	490f      	ldr	r1, [pc, #60]	@ (80021e8 <obd_module+0xa4>)
 80021aa:	4810      	ldr	r0, [pc, #64]	@ (80021ec <obd_module+0xa8>)
 80021ac:	f7ff f897 	bl	80012de <can_process>
		for ( int i = 0; i < request_code_array_length; ++i){
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	3301      	adds	r3, #1
 80021b4:	623b      	str	r3, [r7, #32]
 80021b6:	7ffb      	ldrb	r3, [r7, #31]
 80021b8:	6a3a      	ldr	r2, [r7, #32]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	dbeb      	blt.n	8002196 <obd_module+0x52>
		}

		/* Send notification that all responses have been received ? Event group ?*/
		xEventGroupSetBits(dataReceived,OBD_MODULE);
 80021be:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <obd_module+0xac>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2101      	movs	r1, #1
 80021c4:	4618      	mov	r0, r3
 80021c6:	f001 fbc1 	bl	800394c <xEventGroupSetBits>
		xEventGroupWaitBits(dataReceived,PACKET_PREPARED, pdTRUE, pdTRUE, portMAX_DELAY);
 80021ca:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <obd_module+0xac>)
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2301      	movs	r3, #1
 80021d6:	2201      	movs	r2, #1
 80021d8:	2104      	movs	r1, #4
 80021da:	f001 fae5 	bl	80037a8 <xEventGroupWaitBits>
		for ( int i = 0; i < request_code_array_length; ++i){
 80021de:	e7c2      	b.n	8002166 <obd_module+0x22>
 80021e0:	0800add0 	.word	0x0800add0
 80021e4:	20000510 	.word	0x20000510
 80021e8:	200003f8 	.word	0x200003f8
 80021ec:	2000051c 	.word	0x2000051c
 80021f0:	20000514 	.word	0x20000514

080021f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f8:	b672      	cpsid	i
}
 80021fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <Error_Handler+0x8>

08002200 <prepare_json>:
 *      Author: tomasz
 */
#include "packet.h"

int prepare_json ( struct packet *packet,
		uint8_t *packet_json ){
 8002200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002202:	b08d      	sub	sp, #52	@ 0x34
 8002204:	af08      	add	r7, sp, #32
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]

    return sprintf((char *) packet_json,
    		"{\"lat\":\"%f\",\"latAtt\":\"%c\",\"lng\":\"%f\",\"lngAtt\":\"%c\",\"eng_rpm\":\"%d\",\"eng_load\":\"%d\",\"tnk_lvl\":\"%d\"}",
        packet->_gps_data._latitude,packet->_gps_data._latitude_attitude,
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
    return sprintf((char *) packet_json,
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe f9a9 	bl	8000568 <__aeabi_f2d>
 8002216:	4604      	mov	r4, r0
 8002218:	460d      	mov	r5, r1
        packet->_gps_data._latitude,packet->_gps_data._latitude_attitude,
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
    return sprintf((char *) packet_json,
 8002220:	461e      	mov	r6, r3
		packet->_gps_data._longitude,packet->_gps_data._longitude_attitude,
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
    return sprintf((char *) packet_json,
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe f99d 	bl	8000568 <__aeabi_f2d>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
		packet->_gps_data._longitude,packet->_gps_data._longitude_attitude,
 8002232:	68f9      	ldr	r1, [r7, #12]
 8002234:	f891 1104 	ldrb.w	r1, [r1, #260]	@ 0x104
    return sprintf((char *) packet_json,
 8002238:	4608      	mov	r0, r1
		packet->_obd_data._engine_rpm,packet->_obd_data._engine_load,packet->_obd_data._tank_level);
 800223a:	68f9      	ldr	r1, [r7, #12]
 800223c:	8809      	ldrh	r1, [r1, #0]
    return sprintf((char *) packet_json,
 800223e:	6079      	str	r1, [r7, #4]
		packet->_obd_data._engine_rpm,packet->_obd_data._engine_load,packet->_obd_data._tank_level);
 8002240:	68f9      	ldr	r1, [r7, #12]
 8002242:	7889      	ldrb	r1, [r1, #2]
    return sprintf((char *) packet_json,
 8002244:	6039      	str	r1, [r7, #0]
		packet->_obd_data._engine_rpm,packet->_obd_data._engine_load,packet->_obd_data._tank_level);
 8002246:	68f9      	ldr	r1, [r7, #12]
 8002248:	78c9      	ldrb	r1, [r1, #3]
    return sprintf((char *) packet_json,
 800224a:	9107      	str	r1, [sp, #28]
 800224c:	6839      	ldr	r1, [r7, #0]
 800224e:	9106      	str	r1, [sp, #24]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	9105      	str	r1, [sp, #20]
 8002254:	9004      	str	r0, [sp, #16]
 8002256:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800225a:	9600      	str	r6, [sp, #0]
 800225c:	4622      	mov	r2, r4
 800225e:	462b      	mov	r3, r5
 8002260:	4904      	ldr	r1, [pc, #16]	@ (8002274 <prepare_json+0x74>)
 8002262:	68b8      	ldr	r0, [r7, #8]
 8002264:	f005 ff32 	bl	80080cc <siprintf>
 8002268:	4603      	mov	r3, r0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002272:	bf00      	nop
 8002274:	0800add4 	.word	0x0800add4

08002278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	4b12      	ldr	r3, [pc, #72]	@ (80022cc <HAL_MspInit+0x54>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002286:	4a11      	ldr	r2, [pc, #68]	@ (80022cc <HAL_MspInit+0x54>)
 8002288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800228c:	6453      	str	r3, [r2, #68]	@ 0x44
 800228e:	4b0f      	ldr	r3, [pc, #60]	@ (80022cc <HAL_MspInit+0x54>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	603b      	str	r3, [r7, #0]
 800229e:	4b0b      	ldr	r3, [pc, #44]	@ (80022cc <HAL_MspInit+0x54>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	4a0a      	ldr	r2, [pc, #40]	@ (80022cc <HAL_MspInit+0x54>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022aa:	4b08      	ldr	r3, [pc, #32]	@ (80022cc <HAL_MspInit+0x54>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	210f      	movs	r1, #15
 80022ba:	f06f 0001 	mvn.w	r0, #1
 80022be:	f000 fa89 	bl	80027d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800

080022d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08c      	sub	sp, #48	@ 0x30
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	4b2f      	ldr	r3, [pc, #188]	@ (80023a4 <HAL_InitTick+0xd4>)
 80022e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e8:	4a2e      	ldr	r2, [pc, #184]	@ (80023a4 <HAL_InitTick+0xd4>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80022f0:	4b2c      	ldr	r3, [pc, #176]	@ (80023a4 <HAL_InitTick+0xd4>)
 80022f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022fc:	f107 020c 	add.w	r2, r7, #12
 8002300:	f107 0310 	add.w	r3, r7, #16
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f000 ff12 	bl	8003130 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800230c:	f000 fefc 	bl	8003108 <HAL_RCC_GetPCLK2Freq>
 8002310:	4603      	mov	r3, r0
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002318:	4a23      	ldr	r2, [pc, #140]	@ (80023a8 <HAL_InitTick+0xd8>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0c9b      	lsrs	r3, r3, #18
 8002320:	3b01      	subs	r3, #1
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002324:	4b21      	ldr	r3, [pc, #132]	@ (80023ac <HAL_InitTick+0xdc>)
 8002326:	4a22      	ldr	r2, [pc, #136]	@ (80023b0 <HAL_InitTick+0xe0>)
 8002328:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800232a:	4b20      	ldr	r3, [pc, #128]	@ (80023ac <HAL_InitTick+0xdc>)
 800232c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002330:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002332:	4a1e      	ldr	r2, [pc, #120]	@ (80023ac <HAL_InitTick+0xdc>)
 8002334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002336:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002338:	4b1c      	ldr	r3, [pc, #112]	@ (80023ac <HAL_InitTick+0xdc>)
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800233e:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <HAL_InitTick+0xdc>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002344:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <HAL_InitTick+0xdc>)
 8002346:	2200      	movs	r2, #0
 8002348:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800234a:	4818      	ldr	r0, [pc, #96]	@ (80023ac <HAL_InitTick+0xdc>)
 800234c:	f000 ff22 	bl	8003194 <HAL_TIM_Base_Init>
 8002350:	4603      	mov	r3, r0
 8002352:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002356:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800235a:	2b00      	cmp	r3, #0
 800235c:	d11b      	bne.n	8002396 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800235e:	4813      	ldr	r0, [pc, #76]	@ (80023ac <HAL_InitTick+0xdc>)
 8002360:	f000 ff72 	bl	8003248 <HAL_TIM_Base_Start_IT>
 8002364:	4603      	mov	r3, r0
 8002366:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800236a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800236e:	2b00      	cmp	r3, #0
 8002370:	d111      	bne.n	8002396 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002372:	2019      	movs	r0, #25
 8002374:	f000 fa4a 	bl	800280c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b0f      	cmp	r3, #15
 800237c:	d808      	bhi.n	8002390 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800237e:	2200      	movs	r2, #0
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	2019      	movs	r0, #25
 8002384:	f000 fa26 	bl	80027d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002388:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <HAL_InitTick+0xe4>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e002      	b.n	8002396 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002396:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800239a:	4618      	mov	r0, r3
 800239c:	3730      	adds	r7, #48	@ 0x30
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800
 80023a8:	431bde83 	.word	0x431bde83
 80023ac:	20000528 	.word	0x20000528
 80023b0:	40010000 	.word	0x40010000
 80023b4:	20000004 	.word	0x20000004

080023b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <NMI_Handler+0x4>

080023c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <HardFault_Handler+0x4>

080023c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <MemManage_Handler+0x4>

080023d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <BusFault_Handler+0x4>

080023d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <UsageFault_Handler+0x4>

080023e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023f4:	4802      	ldr	r0, [pc, #8]	@ (8002400 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80023f6:	f000 ff97 	bl	8003328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000528 	.word	0x20000528

08002404 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return 1;
 8002408:	2301      	movs	r3, #1
}
 800240a:	4618      	mov	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <_kill>:

int _kill(int pid, int sig)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800241e:	f005 ffcf 	bl	80083c0 <__errno>
 8002422:	4603      	mov	r3, r0
 8002424:	2216      	movs	r2, #22
 8002426:	601a      	str	r2, [r3, #0]
  return -1;
 8002428:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <_exit>:

void _exit (int status)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800243c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff ffe7 	bl	8002414 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002446:	bf00      	nop
 8002448:	e7fd      	b.n	8002446 <_exit+0x12>

0800244a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e00a      	b.n	8002472 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800245c:	f3af 8000 	nop.w
 8002460:	4601      	mov	r1, r0
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	60ba      	str	r2, [r7, #8]
 8002468:	b2ca      	uxtb	r2, r1
 800246a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	3301      	adds	r3, #1
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	429a      	cmp	r2, r3
 8002478:	dbf0      	blt.n	800245c <_read+0x12>
  }

  return len;
 800247a:	687b      	ldr	r3, [r7, #4]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	e009      	b.n	80024aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	60ba      	str	r2, [r7, #8]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	3301      	adds	r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	dbf1      	blt.n	8002496 <_write+0x12>
  }
  return len;
 80024b2:	687b      	ldr	r3, [r7, #4]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_close>:

int _close(int file)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024e4:	605a      	str	r2, [r3, #4]
  return 0;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <_isatty>:

int _isatty(int file)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024fc:	2301      	movs	r3, #1
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800250a:	b480      	push	{r7}
 800250c:	b085      	sub	sp, #20
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800252c:	4a14      	ldr	r2, [pc, #80]	@ (8002580 <_sbrk+0x5c>)
 800252e:	4b15      	ldr	r3, [pc, #84]	@ (8002584 <_sbrk+0x60>)
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002538:	4b13      	ldr	r3, [pc, #76]	@ (8002588 <_sbrk+0x64>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d102      	bne.n	8002546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002540:	4b11      	ldr	r3, [pc, #68]	@ (8002588 <_sbrk+0x64>)
 8002542:	4a12      	ldr	r2, [pc, #72]	@ (800258c <_sbrk+0x68>)
 8002544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002546:	4b10      	ldr	r3, [pc, #64]	@ (8002588 <_sbrk+0x64>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	429a      	cmp	r2, r3
 8002552:	d207      	bcs.n	8002564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002554:	f005 ff34 	bl	80083c0 <__errno>
 8002558:	4603      	mov	r3, r0
 800255a:	220c      	movs	r2, #12
 800255c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800255e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002562:	e009      	b.n	8002578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002564:	4b08      	ldr	r3, [pc, #32]	@ (8002588 <_sbrk+0x64>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800256a:	4b07      	ldr	r3, [pc, #28]	@ (8002588 <_sbrk+0x64>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	4a05      	ldr	r2, [pc, #20]	@ (8002588 <_sbrk+0x64>)
 8002574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002576:	68fb      	ldr	r3, [r7, #12]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20030000 	.word	0x20030000
 8002584:	00000400 	.word	0x00000400
 8002588:	20000570 	.word	0x20000570
 800258c:	200050a8 	.word	0x200050a8

08002590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002594:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <SystemInit+0x20>)
 8002596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259a:	4a05      	ldr	r2, [pc, #20]	@ (80025b0 <SystemInit+0x20>)
 800259c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80025b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025b8:	f7ff ffea 	bl	8002590 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025bc:	480c      	ldr	r0, [pc, #48]	@ (80025f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025be:	490d      	ldr	r1, [pc, #52]	@ (80025f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025c0:	4a0d      	ldr	r2, [pc, #52]	@ (80025f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025c4:	e002      	b.n	80025cc <LoopCopyDataInit>

080025c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ca:	3304      	adds	r3, #4

080025cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d0:	d3f9      	bcc.n	80025c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025d2:	4a0a      	ldr	r2, [pc, #40]	@ (80025fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002600 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025d8:	e001      	b.n	80025de <LoopFillZerobss>

080025da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025dc:	3204      	adds	r2, #4

080025de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e0:	d3fb      	bcc.n	80025da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80025e2:	f005 fef3 	bl	80083cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025e6:	f7ff fb3d 	bl	8001c64 <main>
  bx  lr    
 80025ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80025ec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80025f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025f4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80025f8:	0800b304 	.word	0x0800b304
  ldr r2, =_sbss
 80025fc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002600:	200050a8 	.word	0x200050a8

08002604 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002604:	e7fe      	b.n	8002604 <ADC_IRQHandler>
	...

08002608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800260c:	4b0e      	ldr	r3, [pc, #56]	@ (8002648 <HAL_Init+0x40>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0d      	ldr	r2, [pc, #52]	@ (8002648 <HAL_Init+0x40>)
 8002612:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002616:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002618:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <HAL_Init+0x40>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0a      	ldr	r2, [pc, #40]	@ (8002648 <HAL_Init+0x40>)
 800261e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002622:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002624:	4b08      	ldr	r3, [pc, #32]	@ (8002648 <HAL_Init+0x40>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a07      	ldr	r2, [pc, #28]	@ (8002648 <HAL_Init+0x40>)
 800262a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800262e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002630:	2003      	movs	r0, #3
 8002632:	f000 f8c4 	bl	80027be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002636:	200f      	movs	r0, #15
 8002638:	f7ff fe4a 	bl	80022d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800263c:	f7ff fe1c 	bl	8002278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023c00 	.word	0x40023c00

0800264c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return uwTick;
 8002650:	4b03      	ldr	r3, [pc, #12]	@ (8002660 <HAL_GetTick+0x14>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000574 	.word	0x20000574

08002664 <__NVIC_SetPriorityGrouping>:
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002674:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002680:	4013      	ands	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800268c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002696:	4a04      	ldr	r2, [pc, #16]	@ (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	60d3      	str	r3, [r2, #12]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_GetPriorityGrouping>:
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b0:	4b04      	ldr	r3, [pc, #16]	@ (80026c4 <__NVIC_GetPriorityGrouping+0x18>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 0307 	and.w	r3, r3, #7
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_EnableIRQ>:
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	db0b      	blt.n	80026f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4907      	ldr	r1, [pc, #28]	@ (8002700 <__NVIC_EnableIRQ+0x38>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2001      	movs	r0, #1
 80026ea:	fa00 f202 	lsl.w	r2, r0, r2
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000e100 	.word	0xe000e100

08002704 <__NVIC_SetPriority>:
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db0a      	blt.n	800272e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	490c      	ldr	r1, [pc, #48]	@ (8002750 <__NVIC_SetPriority+0x4c>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	0112      	lsls	r2, r2, #4
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	440b      	add	r3, r1
 8002728:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800272c:	e00a      	b.n	8002744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4908      	ldr	r1, [pc, #32]	@ (8002754 <__NVIC_SetPriority+0x50>)
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3b04      	subs	r3, #4
 800273c:	0112      	lsls	r2, r2, #4
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	440b      	add	r3, r1
 8002742:	761a      	strb	r2, [r3, #24]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000e100 	.word	0xe000e100
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	@ 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f1c3 0307 	rsb	r3, r3, #7
 8002772:	2b04      	cmp	r3, #4
 8002774:	bf28      	it	cs
 8002776:	2304      	movcs	r3, #4
 8002778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3304      	adds	r3, #4
 800277e:	2b06      	cmp	r3, #6
 8002780:	d902      	bls.n	8002788 <NVIC_EncodePriority+0x30>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3b03      	subs	r3, #3
 8002786:	e000      	b.n	800278a <NVIC_EncodePriority+0x32>
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	401a      	ands	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	43d9      	mvns	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	4313      	orrs	r3, r2
         );
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3724      	adds	r7, #36	@ 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff ff4c 	bl	8002664 <__NVIC_SetPriorityGrouping>
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e6:	f7ff ff61 	bl	80026ac <__NVIC_GetPriorityGrouping>
 80027ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	6978      	ldr	r0, [r7, #20]
 80027f2:	f7ff ffb1 	bl	8002758 <NVIC_EncodePriority>
 80027f6:	4602      	mov	r2, r0
 80027f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ff80 	bl	8002704 <__NVIC_SetPriority>
}
 8002804:	bf00      	nop
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ff54 	bl	80026c8 <__NVIC_EnableIRQ>
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e267      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d075      	beq.n	8002932 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002846:	4b88      	ldr	r3, [pc, #544]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b04      	cmp	r3, #4
 8002850:	d00c      	beq.n	800286c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002852:	4b85      	ldr	r3, [pc, #532]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800285a:	2b08      	cmp	r3, #8
 800285c:	d112      	bne.n	8002884 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800285e:	4b82      	ldr	r3, [pc, #520]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002866:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800286a:	d10b      	bne.n	8002884 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286c:	4b7e      	ldr	r3, [pc, #504]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d05b      	beq.n	8002930 <HAL_RCC_OscConfig+0x108>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d157      	bne.n	8002930 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e242      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800288c:	d106      	bne.n	800289c <HAL_RCC_OscConfig+0x74>
 800288e:	4b76      	ldr	r3, [pc, #472]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a75      	ldr	r2, [pc, #468]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e01d      	b.n	80028d8 <HAL_RCC_OscConfig+0xb0>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x98>
 80028a6:	4b70      	ldr	r3, [pc, #448]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a6f      	ldr	r2, [pc, #444]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a6c      	ldr	r2, [pc, #432]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e00b      	b.n	80028d8 <HAL_RCC_OscConfig+0xb0>
 80028c0:	4b69      	ldr	r3, [pc, #420]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a68      	ldr	r2, [pc, #416]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b66      	ldr	r3, [pc, #408]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a65      	ldr	r2, [pc, #404]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d013      	beq.n	8002908 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7ff feb4 	bl	800264c <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e8:	f7ff feb0 	bl	800264c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	@ 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e207      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0xc0>
 8002906:	e014      	b.n	8002932 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7ff fea0 	bl	800264c <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002910:	f7ff fe9c 	bl	800264c <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	@ 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e1f3      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	4b51      	ldr	r3, [pc, #324]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0xe8>
 800292e:	e000      	b.n	8002932 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d063      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800293e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00b      	beq.n	8002962 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800294a:	4b47      	ldr	r3, [pc, #284]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002952:	2b08      	cmp	r3, #8
 8002954:	d11c      	bne.n	8002990 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002956:	4b44      	ldr	r3, [pc, #272]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d116      	bne.n	8002990 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002962:	4b41      	ldr	r3, [pc, #260]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <HAL_RCC_OscConfig+0x152>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d001      	beq.n	800297a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e1c7      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4937      	ldr	r1, [pc, #220]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	e03a      	b.n	8002a06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d020      	beq.n	80029da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002998:	4b34      	ldr	r3, [pc, #208]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 800299a:	2201      	movs	r2, #1
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299e:	f7ff fe55 	bl	800264c <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a6:	f7ff fe51 	bl	800264c <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e1a8      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c4:	4b28      	ldr	r3, [pc, #160]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4925      	ldr	r1, [pc, #148]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	600b      	str	r3, [r1, #0]
 80029d8:	e015      	b.n	8002a06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029da:	4b24      	ldr	r3, [pc, #144]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7ff fe34 	bl	800264c <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e8:	f7ff fe30 	bl	800264c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e187      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d036      	beq.n	8002a80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d016      	beq.n	8002a48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1a:	4b15      	ldr	r3, [pc, #84]	@ (8002a70 <HAL_RCC_OscConfig+0x248>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a20:	f7ff fe14 	bl	800264c <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a28:	f7ff fe10 	bl	800264c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e167      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x200>
 8002a46:	e01b      	b.n	8002a80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a48:	4b09      	ldr	r3, [pc, #36]	@ (8002a70 <HAL_RCC_OscConfig+0x248>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4e:	f7ff fdfd 	bl	800264c <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a54:	e00e      	b.n	8002a74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a56:	f7ff fdf9 	bl	800264c <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d907      	bls.n	8002a74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e150      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	42470000 	.word	0x42470000
 8002a70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a74:	4b88      	ldr	r3, [pc, #544]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1ea      	bne.n	8002a56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8097 	beq.w	8002bbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a92:	4b81      	ldr	r3, [pc, #516]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10f      	bne.n	8002abe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	4b7d      	ldr	r3, [pc, #500]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	4a7c      	ldr	r2, [pc, #496]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aae:	4b7a      	ldr	r3, [pc, #488]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aba:	2301      	movs	r3, #1
 8002abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abe:	4b77      	ldr	r3, [pc, #476]	@ (8002c9c <HAL_RCC_OscConfig+0x474>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d118      	bne.n	8002afc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aca:	4b74      	ldr	r3, [pc, #464]	@ (8002c9c <HAL_RCC_OscConfig+0x474>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a73      	ldr	r2, [pc, #460]	@ (8002c9c <HAL_RCC_OscConfig+0x474>)
 8002ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad6:	f7ff fdb9 	bl	800264c <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ade:	f7ff fdb5 	bl	800264c <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e10c      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af0:	4b6a      	ldr	r3, [pc, #424]	@ (8002c9c <HAL_RCC_OscConfig+0x474>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d106      	bne.n	8002b12 <HAL_RCC_OscConfig+0x2ea>
 8002b04:	4b64      	ldr	r3, [pc, #400]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b08:	4a63      	ldr	r2, [pc, #396]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b10:	e01c      	b.n	8002b4c <HAL_RCC_OscConfig+0x324>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x30c>
 8002b1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1e:	4a5e      	ldr	r2, [pc, #376]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b20:	f043 0304 	orr.w	r3, r3, #4
 8002b24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b26:	4b5c      	ldr	r3, [pc, #368]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2a:	4a5b      	ldr	r2, [pc, #364]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b32:	e00b      	b.n	8002b4c <HAL_RCC_OscConfig+0x324>
 8002b34:	4b58      	ldr	r3, [pc, #352]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b38:	4a57      	ldr	r2, [pc, #348]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b40:	4b55      	ldr	r3, [pc, #340]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b44:	4a54      	ldr	r2, [pc, #336]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b46:	f023 0304 	bic.w	r3, r3, #4
 8002b4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d015      	beq.n	8002b80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b54:	f7ff fd7a 	bl	800264c <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5a:	e00a      	b.n	8002b72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5c:	f7ff fd76 	bl	800264c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e0cb      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b72:	4b49      	ldr	r3, [pc, #292]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0ee      	beq.n	8002b5c <HAL_RCC_OscConfig+0x334>
 8002b7e:	e014      	b.n	8002baa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b80:	f7ff fd64 	bl	800264c <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b86:	e00a      	b.n	8002b9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b88:	f7ff fd60 	bl	800264c <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e0b5      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1ee      	bne.n	8002b88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d105      	bne.n	8002bbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb0:	4b39      	ldr	r3, [pc, #228]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	4a38      	ldr	r2, [pc, #224]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80a1 	beq.w	8002d08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bc6:	4b34      	ldr	r3, [pc, #208]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d05c      	beq.n	8002c8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d141      	bne.n	8002c5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bda:	4b31      	ldr	r3, [pc, #196]	@ (8002ca0 <HAL_RCC_OscConfig+0x478>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7ff fd34 	bl	800264c <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be8:	f7ff fd30 	bl	800264c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e087      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfa:	4b27      	ldr	r3, [pc, #156]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	019b      	lsls	r3, r3, #6
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	041b      	lsls	r3, r3, #16
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c28:	061b      	lsls	r3, r3, #24
 8002c2a:	491b      	ldr	r1, [pc, #108]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca0 <HAL_RCC_OscConfig+0x478>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c36:	f7ff fd09 	bl	800264c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7ff fd05 	bl	800264c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e05c      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c50:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x416>
 8002c5c:	e054      	b.n	8002d08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ca0 <HAL_RCC_OscConfig+0x478>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7ff fcf2 	bl	800264c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7ff fcee 	bl	800264c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e045      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x444>
 8002c8a:	e03d      	b.n	8002d08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d107      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e038      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d14 <HAL_RCC_OscConfig+0x4ec>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d028      	beq.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d121      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d11a      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d111      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	3b01      	subs	r3, #1
 8002cee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800

08002d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0cc      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b68      	ldr	r3, [pc, #416]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d90c      	bls.n	8002d54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b65      	ldr	r3, [pc, #404]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b63      	ldr	r3, [pc, #396]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0b8      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d020      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d6c:	4b59      	ldr	r3, [pc, #356]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4a58      	ldr	r2, [pc, #352]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d84:	4b53      	ldr	r3, [pc, #332]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	4a52      	ldr	r2, [pc, #328]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d90:	4b50      	ldr	r3, [pc, #320]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	494d      	ldr	r1, [pc, #308]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d044      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	4b47      	ldr	r3, [pc, #284]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d119      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e07f      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d003      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e06f      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e067      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002df6:	4b37      	ldr	r3, [pc, #220]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f023 0203 	bic.w	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4934      	ldr	r1, [pc, #208]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e08:	f7ff fc20 	bl	800264c <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e10:	f7ff fc1c 	bl	800264c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e04f      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	4b2b      	ldr	r3, [pc, #172]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 020c 	and.w	r2, r3, #12
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d1eb      	bne.n	8002e10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e38:	4b25      	ldr	r3, [pc, #148]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d20c      	bcs.n	8002e60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b22      	ldr	r3, [pc, #136]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b20      	ldr	r3, [pc, #128]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e032      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e6c:	4b19      	ldr	r3, [pc, #100]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4916      	ldr	r1, [pc, #88]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e8a:	4b12      	ldr	r3, [pc, #72]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	490e      	ldr	r1, [pc, #56]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e9e:	f000 f821 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	490a      	ldr	r1, [pc, #40]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb0:	5ccb      	ldrb	r3, [r1, r3]
 8002eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb6:	4a09      	ldr	r2, [pc, #36]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002eba:	4b09      	ldr	r3, [pc, #36]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fa06 	bl	80022d0 <HAL_InitTick>

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023c00 	.word	0x40023c00
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	0800ae50 	.word	0x0800ae50
 8002edc:	20000000 	.word	0x20000000
 8002ee0:	20000004 	.word	0x20000004

08002ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee8:	b094      	sub	sp, #80	@ 0x50
 8002eea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002efc:	4b79      	ldr	r3, [pc, #484]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d00d      	beq.n	8002f24 <HAL_RCC_GetSysClockFreq+0x40>
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	f200 80e1 	bhi.w	80030d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0x34>
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d003      	beq.n	8002f1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f16:	e0db      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f18:	4b73      	ldr	r3, [pc, #460]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f1c:	e0db      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f1e:	4b73      	ldr	r3, [pc, #460]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x208>)
 8002f20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f22:	e0d8      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f24:	4b6f      	ldr	r3, [pc, #444]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f2e:	4b6d      	ldr	r3, [pc, #436]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d063      	beq.n	8003002 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3a:	4b6a      	ldr	r3, [pc, #424]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	099b      	lsrs	r3, r3, #6
 8002f40:	2200      	movs	r2, #0
 8002f42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f4e:	2300      	movs	r3, #0
 8002f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f56:	4622      	mov	r2, r4
 8002f58:	462b      	mov	r3, r5
 8002f5a:	f04f 0000 	mov.w	r0, #0
 8002f5e:	f04f 0100 	mov.w	r1, #0
 8002f62:	0159      	lsls	r1, r3, #5
 8002f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f68:	0150      	lsls	r0, r2, #5
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4621      	mov	r1, r4
 8002f70:	1a51      	subs	r1, r2, r1
 8002f72:	6139      	str	r1, [r7, #16]
 8002f74:	4629      	mov	r1, r5
 8002f76:	eb63 0301 	sbc.w	r3, r3, r1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f88:	4659      	mov	r1, fp
 8002f8a:	018b      	lsls	r3, r1, #6
 8002f8c:	4651      	mov	r1, sl
 8002f8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f92:	4651      	mov	r1, sl
 8002f94:	018a      	lsls	r2, r1, #6
 8002f96:	4651      	mov	r1, sl
 8002f98:	ebb2 0801 	subs.w	r8, r2, r1
 8002f9c:	4659      	mov	r1, fp
 8002f9e:	eb63 0901 	sbc.w	r9, r3, r1
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb6:	4690      	mov	r8, r2
 8002fb8:	4699      	mov	r9, r3
 8002fba:	4623      	mov	r3, r4
 8002fbc:	eb18 0303 	adds.w	r3, r8, r3
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	462b      	mov	r3, r5
 8002fc4:	eb49 0303 	adc.w	r3, r9, r3
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	024b      	lsls	r3, r1, #9
 8002fda:	4621      	mov	r1, r4
 8002fdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	024a      	lsls	r2, r1, #9
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fea:	2200      	movs	r2, #0
 8002fec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ff0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ff4:	f7fd fe58 	bl	8000ca8 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003000:	e058      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003002:	4b38      	ldr	r3, [pc, #224]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	099b      	lsrs	r3, r3, #6
 8003008:	2200      	movs	r2, #0
 800300a:	4618      	mov	r0, r3
 800300c:	4611      	mov	r1, r2
 800300e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003012:	623b      	str	r3, [r7, #32]
 8003014:	2300      	movs	r3, #0
 8003016:	627b      	str	r3, [r7, #36]	@ 0x24
 8003018:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800301c:	4642      	mov	r2, r8
 800301e:	464b      	mov	r3, r9
 8003020:	f04f 0000 	mov.w	r0, #0
 8003024:	f04f 0100 	mov.w	r1, #0
 8003028:	0159      	lsls	r1, r3, #5
 800302a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800302e:	0150      	lsls	r0, r2, #5
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4641      	mov	r1, r8
 8003036:	ebb2 0a01 	subs.w	sl, r2, r1
 800303a:	4649      	mov	r1, r9
 800303c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800304c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003050:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003054:	ebb2 040a 	subs.w	r4, r2, sl
 8003058:	eb63 050b 	sbc.w	r5, r3, fp
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	00eb      	lsls	r3, r5, #3
 8003066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800306a:	00e2      	lsls	r2, r4, #3
 800306c:	4614      	mov	r4, r2
 800306e:	461d      	mov	r5, r3
 8003070:	4643      	mov	r3, r8
 8003072:	18e3      	adds	r3, r4, r3
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	464b      	mov	r3, r9
 8003078:	eb45 0303 	adc.w	r3, r5, r3
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9d7 4500 	ldrd	r4, r5, [r7]
 800308a:	4629      	mov	r1, r5
 800308c:	028b      	lsls	r3, r1, #10
 800308e:	4621      	mov	r1, r4
 8003090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003094:	4621      	mov	r1, r4
 8003096:	028a      	lsls	r2, r1, #10
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800309e:	2200      	movs	r2, #0
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	61fa      	str	r2, [r7, #28]
 80030a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030a8:	f7fd fdfe 	bl	8000ca8 <__aeabi_uldivmod>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4613      	mov	r3, r2
 80030b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030b4:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	0c1b      	lsrs	r3, r3, #16
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	3301      	adds	r3, #1
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80030c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030ce:	e002      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030d0:	4b05      	ldr	r3, [pc, #20]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80030d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3750      	adds	r7, #80	@ 0x50
 80030dc:	46bd      	mov	sp, r7
 80030de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	00f42400 	.word	0x00f42400
 80030ec:	007a1200 	.word	0x007a1200

080030f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f4:	4b03      	ldr	r3, [pc, #12]	@ (8003104 <HAL_RCC_GetHCLKFreq+0x14>)
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000000 	.word	0x20000000

08003108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800310c:	f7ff fff0 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 8003110:	4602      	mov	r2, r0
 8003112:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	0b5b      	lsrs	r3, r3, #13
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	4903      	ldr	r1, [pc, #12]	@ (800312c <HAL_RCC_GetPCLK2Freq+0x24>)
 800311e:	5ccb      	ldrb	r3, [r1, r3]
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	0800ae60 	.word	0x0800ae60

08003130 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	220f      	movs	r2, #15
 800313e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003140:	4b12      	ldr	r3, [pc, #72]	@ (800318c <HAL_RCC_GetClockConfig+0x5c>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0203 	and.w	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800314c:	4b0f      	ldr	r3, [pc, #60]	@ (800318c <HAL_RCC_GetClockConfig+0x5c>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003158:	4b0c      	ldr	r3, [pc, #48]	@ (800318c <HAL_RCC_GetClockConfig+0x5c>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003164:	4b09      	ldr	r3, [pc, #36]	@ (800318c <HAL_RCC_GetClockConfig+0x5c>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	08db      	lsrs	r3, r3, #3
 800316a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003172:	4b07      	ldr	r3, [pc, #28]	@ (8003190 <HAL_RCC_GetClockConfig+0x60>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 020f 	and.w	r2, r3, #15
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	601a      	str	r2, [r3, #0]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	40023c00 	.word	0x40023c00

08003194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e041      	b.n	800322a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f839 	bl	8003232 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3304      	adds	r3, #4
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f000 f9ca 	bl	800356c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	d001      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e04e      	b.n	80032fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a23      	ldr	r2, [pc, #140]	@ (800330c <HAL_TIM_Base_Start_IT+0xc4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d022      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800328a:	d01d      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1f      	ldr	r2, [pc, #124]	@ (8003310 <HAL_TIM_Base_Start_IT+0xc8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d018      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1e      	ldr	r2, [pc, #120]	@ (8003314 <HAL_TIM_Base_Start_IT+0xcc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d013      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003318 <HAL_TIM_Base_Start_IT+0xd0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00e      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1b      	ldr	r2, [pc, #108]	@ (800331c <HAL_TIM_Base_Start_IT+0xd4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d009      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a19      	ldr	r2, [pc, #100]	@ (8003320 <HAL_TIM_Base_Start_IT+0xd8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d004      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a18      	ldr	r2, [pc, #96]	@ (8003324 <HAL_TIM_Base_Start_IT+0xdc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d111      	bne.n	80032ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b06      	cmp	r3, #6
 80032d8:	d010      	beq.n	80032fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0201 	orr.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ea:	e007      	b.n	80032fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40010000 	.word	0x40010000
 8003310:	40000400 	.word	0x40000400
 8003314:	40000800 	.word	0x40000800
 8003318:	40000c00 	.word	0x40000c00
 800331c:	40010400 	.word	0x40010400
 8003320:	40014000 	.word	0x40014000
 8003324:	40001800 	.word	0x40001800

08003328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d020      	beq.n	800338c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01b      	beq.n	800338c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0202 	mvn.w	r2, #2
 800335c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f8dc 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f8ce 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f8df 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d020      	beq.n	80033d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01b      	beq.n	80033d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0204 	mvn.w	r2, #4
 80033a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8b6 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8a8 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f8b9 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d020      	beq.n	8003424 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01b      	beq.n	8003424 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0208 	mvn.w	r2, #8
 80033f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2204      	movs	r2, #4
 80033fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f890 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 8003410:	e005      	b.n	800341e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f882 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f893 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b00      	cmp	r3, #0
 800342c:	d020      	beq.n	8003470 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01b      	beq.n	8003470 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0210 	mvn.w	r2, #16
 8003440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2208      	movs	r2, #8
 8003446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f86a 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 800345c:	e005      	b.n	800346a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f85c 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f86d 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00c      	beq.n	8003494 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0201 	mvn.w	r2, #1
 800348c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f83a 	bl	8003508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00c      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d007      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f910 	bl	80036d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00c      	beq.n	80034dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f83e 	bl	8003558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00c      	beq.n	8003500 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d007      	beq.n	8003500 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0220 	mvn.w	r2, #32
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f8e2 	bl	80036c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a46      	ldr	r2, [pc, #280]	@ (8003698 <TIM_Base_SetConfig+0x12c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d013      	beq.n	80035ac <TIM_Base_SetConfig+0x40>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800358a:	d00f      	beq.n	80035ac <TIM_Base_SetConfig+0x40>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a43      	ldr	r2, [pc, #268]	@ (800369c <TIM_Base_SetConfig+0x130>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00b      	beq.n	80035ac <TIM_Base_SetConfig+0x40>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a42      	ldr	r2, [pc, #264]	@ (80036a0 <TIM_Base_SetConfig+0x134>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d007      	beq.n	80035ac <TIM_Base_SetConfig+0x40>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a41      	ldr	r2, [pc, #260]	@ (80036a4 <TIM_Base_SetConfig+0x138>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <TIM_Base_SetConfig+0x40>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a40      	ldr	r2, [pc, #256]	@ (80036a8 <TIM_Base_SetConfig+0x13c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d108      	bne.n	80035be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a35      	ldr	r2, [pc, #212]	@ (8003698 <TIM_Base_SetConfig+0x12c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d02b      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035cc:	d027      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a32      	ldr	r2, [pc, #200]	@ (800369c <TIM_Base_SetConfig+0x130>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d023      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a31      	ldr	r2, [pc, #196]	@ (80036a0 <TIM_Base_SetConfig+0x134>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01f      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a30      	ldr	r2, [pc, #192]	@ (80036a4 <TIM_Base_SetConfig+0x138>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01b      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a2f      	ldr	r2, [pc, #188]	@ (80036a8 <TIM_Base_SetConfig+0x13c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d017      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a2e      	ldr	r2, [pc, #184]	@ (80036ac <TIM_Base_SetConfig+0x140>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a2d      	ldr	r2, [pc, #180]	@ (80036b0 <TIM_Base_SetConfig+0x144>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00f      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a2c      	ldr	r2, [pc, #176]	@ (80036b4 <TIM_Base_SetConfig+0x148>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00b      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a2b      	ldr	r2, [pc, #172]	@ (80036b8 <TIM_Base_SetConfig+0x14c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d007      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a2a      	ldr	r2, [pc, #168]	@ (80036bc <TIM_Base_SetConfig+0x150>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d003      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a29      	ldr	r2, [pc, #164]	@ (80036c0 <TIM_Base_SetConfig+0x154>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d108      	bne.n	8003630 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a10      	ldr	r2, [pc, #64]	@ (8003698 <TIM_Base_SetConfig+0x12c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d003      	beq.n	8003664 <TIM_Base_SetConfig+0xf8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a12      	ldr	r2, [pc, #72]	@ (80036a8 <TIM_Base_SetConfig+0x13c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d103      	bne.n	800366c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b01      	cmp	r3, #1
 800367c:	d105      	bne.n	800368a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f023 0201 	bic.w	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	611a      	str	r2, [r3, #16]
  }
}
 800368a:	bf00      	nop
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40010000 	.word	0x40010000
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800
 80036a4:	40000c00 	.word	0x40000c00
 80036a8:	40010400 	.word	0x40010400
 80036ac:	40014000 	.word	0x40014000
 80036b0:	40014400 	.word	0x40014400
 80036b4:	40014800 	.word	0x40014800
 80036b8:	40001800 	.word	0x40001800
 80036bc:	40001c00 	.word	0x40001c00
 80036c0:	40002000 	.word	0x40002000

080036c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80036f0:	4b05      	ldr	r3, [pc, #20]	@ (8003708 <SysTick_Handler+0x1c>)
 80036f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80036f4:	f001 fe86 	bl	8005404 <xTaskGetSchedulerState>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d001      	beq.n	8003702 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80036fe:	f002 fc93 	bl	8006028 <xPortSysTickHandler>
  }
}
 8003702:	bf00      	nop
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	e000e010 	.word	0xe000e010

0800370c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4a07      	ldr	r2, [pc, #28]	@ (8003738 <vApplicationGetIdleTaskMemory+0x2c>)
 800371c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4a06      	ldr	r2, [pc, #24]	@ (800373c <vApplicationGetIdleTaskMemory+0x30>)
 8003722:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2280      	movs	r2, #128	@ 0x80
 8003728:	601a      	str	r2, [r3, #0]
}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000578 	.word	0x20000578
 800373c:	20000620 	.word	0x20000620

08003740 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4a07      	ldr	r2, [pc, #28]	@ (800376c <vApplicationGetTimerTaskMemory+0x2c>)
 8003750:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4a06      	ldr	r2, [pc, #24]	@ (8003770 <vApplicationGetTimerTaskMemory+0x30>)
 8003756:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800375e:	601a      	str	r2, [r3, #0]
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	20000820 	.word	0x20000820
 8003770:	200008c8 	.word	0x200008c8

08003774 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800377a:	2020      	movs	r0, #32
 800377c:	f002 fce6 	bl	800614c <pvPortMalloc>
 8003780:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3304      	adds	r3, #4
 8003792:	4618      	mov	r0, r3
 8003794:	f000 f988 	bl	8003aa8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800379e:	687b      	ldr	r3, [r7, #4]
	}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b090      	sub	sp, #64	@ 0x40
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80037be:	2300      	movs	r3, #0
 80037c0:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10b      	bne.n	80037e0 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037da:	bf00      	nop
 80037dc:	bf00      	nop
 80037de:	e7fd      	b.n	80037dc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037e6:	d30b      	bcc.n	8003800 <xEventGroupWaitBits+0x58>
	__asm volatile
 80037e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	61fb      	str	r3, [r7, #28]
}
 80037fa:	bf00      	nop
 80037fc:	bf00      	nop
 80037fe:	e7fd      	b.n	80037fc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10b      	bne.n	800381e <xEventGroupWaitBits+0x76>
	__asm volatile
 8003806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	61bb      	str	r3, [r7, #24]
}
 8003818:	bf00      	nop
 800381a:	bf00      	nop
 800381c:	e7fd      	b.n	800381a <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800381e:	f001 fdf1 	bl	8005404 <xTaskGetSchedulerState>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <xEventGroupWaitBits+0x86>
 8003828:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <xEventGroupWaitBits+0x8a>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <xEventGroupWaitBits+0x8c>
 8003832:	2300      	movs	r3, #0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10b      	bne.n	8003850 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	617b      	str	r3, [r7, #20]
}
 800384a:	bf00      	nop
 800384c:	bf00      	nop
 800384e:	e7fd      	b.n	800384c <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8003850:	f001 f942 	bl	8004ad8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003860:	f000 f900 	bl	8003a64 <prvTestWaitCondition>
 8003864:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8003866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00e      	beq.n	800388a <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800386c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8003870:	2300      	movs	r3, #0
 8003872:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d028      	beq.n	80038cc <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800387a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	43db      	mvns	r3, r3
 8003882:	401a      	ands	r2, r3
 8003884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	e020      	b.n	80038cc <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800388a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800388c:	2b00      	cmp	r3, #0
 800388e:	d104      	bne.n	800389a <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8003890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003892:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8003894:	2301      	movs	r3, #1
 8003896:	633b      	str	r3, [r7, #48]	@ 0x30
 8003898:	e018      	b.n	80038cc <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80038a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038a6:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80038ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038b4:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80038b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b8:	1d18      	adds	r0, r3, #4
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038be:	4313      	orrs	r3, r2
 80038c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038c2:	4619      	mov	r1, r3
 80038c4:	f001 fb0a 	bl	8004edc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80038cc:	f001 f912 	bl	8004af4 <xTaskResumeAll>
 80038d0:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80038d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d031      	beq.n	800393c <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d107      	bne.n	80038ee <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 80038de:	4b1a      	ldr	r3, [pc, #104]	@ (8003948 <xEventGroupWaitBits+0x1a0>)
 80038e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80038ee:	f001 fe17 	bl	8005520 <uxTaskResetEventItemValue>
 80038f2:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80038f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d11a      	bne.n	8003934 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 80038fe:	f002 fb03 	bl	8005f08 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	68b9      	ldr	r1, [r7, #8]
 800390c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800390e:	f000 f8a9 	bl	8003a64 <prvTestWaitCondition>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d009      	beq.n	800392c <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d006      	beq.n	800392c <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800391e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	43db      	mvns	r3, r3
 8003926:	401a      	ands	r2, r3
 8003928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800392a:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800392c:	2301      	movs	r3, #1
 800392e:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8003930:	f002 fb1c 	bl	8005f6c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003936:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800393a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800393c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800393e:	4618      	mov	r0, r3
 8003940:	3740      	adds	r7, #64	@ 0x40
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	e000ed04 	.word	0xe000ed04

0800394c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08e      	sub	sp, #56	@ 0x38
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8003956:	2300      	movs	r3, #0
 8003958:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800395e:	2300      	movs	r3, #0
 8003960:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10b      	bne.n	8003980 <xEventGroupSetBits+0x34>
	__asm volatile
 8003968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	613b      	str	r3, [r7, #16]
}
 800397a:	bf00      	nop
 800397c:	bf00      	nop
 800397e:	e7fd      	b.n	800397c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003986:	d30b      	bcc.n	80039a0 <xEventGroupSetBits+0x54>
	__asm volatile
 8003988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	60fb      	str	r3, [r7, #12]
}
 800399a:	bf00      	nop
 800399c:	bf00      	nop
 800399e:	e7fd      	b.n	800399c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80039a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a2:	3304      	adds	r3, #4
 80039a4:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	3308      	adds	r3, #8
 80039aa:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80039ac:	f001 f894 	bl	8004ad8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80039b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80039b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	431a      	orrs	r2, r3
 80039be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c0:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80039c2:	e03c      	b.n	8003a3e <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 80039c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80039ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80039d0:	2300      	movs	r3, #0
 80039d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80039da:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80039e2:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d108      	bne.n	8003a00 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80039ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 80039fa:	2301      	movs	r3, #1
 80039fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039fe:	e008      	b.n	8003a12 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	4013      	ands	r3, r2
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d101      	bne.n	8003a12 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8003a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d010      	beq.n	8003a3a <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8003a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8003a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a32:	4619      	mov	r1, r3
 8003a34:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003a36:	f001 fb1f 	bl	8005078 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8003a3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d1be      	bne.n	80039c4 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	401a      	ands	r2, r3
 8003a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a52:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8003a54:	f001 f84e 	bl	8004af4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8003a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5a:	681b      	ldr	r3, [r3, #0]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3738      	adds	r7, #56	@ 0x38
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d107      	bne.n	8003a8a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003a84:	2301      	movs	r3, #1
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	e007      	b.n	8003a9a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d101      	bne.n	8003a9a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003a96:	2301      	movs	r3, #1
 8003a98:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8003a9a:	697b      	ldr	r3, [r7, #20]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	371c      	adds	r7, #28
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f103 0208 	add.w	r2, r3, #8
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ac0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f103 0208 	add.w	r2, r3, #8
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f103 0208 	add.w	r2, r3, #8
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b02:	b480      	push	{r7}
 8003b04:	b085      	sub	sp, #20
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	601a      	str	r2, [r3, #0]
}
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b085      	sub	sp, #20
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b60:	d103      	bne.n	8003b6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	e00c      	b.n	8003b84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	e002      	b.n	8003b78 <vListInsert+0x2e>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d2f6      	bcs.n	8003b72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	601a      	str	r2, [r3, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6892      	ldr	r2, [r2, #8]
 8003bd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6852      	ldr	r2, [r2, #4]
 8003bdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d103      	bne.n	8003bf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	1e5a      	subs	r2, r3, #1
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10b      	bne.n	8003c3c <xQueueGenericReset+0x2c>
	__asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	60bb      	str	r3, [r7, #8]
}
 8003c36:	bf00      	nop
 8003c38:	bf00      	nop
 8003c3a:	e7fd      	b.n	8003c38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c3c:	f002 f964 	bl	8005f08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c48:	68f9      	ldr	r1, [r7, #12]
 8003c4a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	441a      	add	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	68f9      	ldr	r1, [r7, #12]
 8003c70:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c72:	fb01 f303 	mul.w	r3, r1, r3
 8003c76:	441a      	add	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	22ff      	movs	r2, #255	@ 0xff
 8003c80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	22ff      	movs	r2, #255	@ 0xff
 8003c88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d114      	bne.n	8003cbc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d01a      	beq.n	8003cd0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3310      	adds	r3, #16
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f001 f986 	bl	8004fb0 <xTaskRemoveFromEventList>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d012      	beq.n	8003cd0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003caa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce0 <xQueueGenericReset+0xd0>)
 8003cac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	e009      	b.n	8003cd0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3310      	adds	r3, #16
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff fef1 	bl	8003aa8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3324      	adds	r3, #36	@ 0x24
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff feec 	bl	8003aa8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cd0:	f002 f94c 	bl	8005f6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cd4:	2301      	movs	r3, #1
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	e000ed04 	.word	0xe000ed04

08003ce4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08e      	sub	sp, #56	@ 0x38
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10b      	bne.n	8003d10 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d0a:	bf00      	nop
 8003d0c:	bf00      	nop
 8003d0e:	e7fd      	b.n	8003d0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10b      	bne.n	8003d2e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	e7fd      	b.n	8003d2a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <xQueueGenericCreateStatic+0x56>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <xQueueGenericCreateStatic+0x5a>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <xQueueGenericCreateStatic+0x5c>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10b      	bne.n	8003d5c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	623b      	str	r3, [r7, #32]
}
 8003d56:	bf00      	nop
 8003d58:	bf00      	nop
 8003d5a:	e7fd      	b.n	8003d58 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d102      	bne.n	8003d68 <xQueueGenericCreateStatic+0x84>
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <xQueueGenericCreateStatic+0x88>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <xQueueGenericCreateStatic+0x8a>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10b      	bne.n	8003d8a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	61fb      	str	r3, [r7, #28]
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop
 8003d88:	e7fd      	b.n	8003d86 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d8a:	2350      	movs	r3, #80	@ 0x50
 8003d8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2b50      	cmp	r3, #80	@ 0x50
 8003d92:	d00b      	beq.n	8003dac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	61bb      	str	r3, [r7, #24]
}
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	e7fd      	b.n	8003da8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003dac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dc0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f840 	bl	8003e54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3730      	adds	r7, #48	@ 0x30
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b08a      	sub	sp, #40	@ 0x28
 8003de2:	af02      	add	r7, sp, #8
 8003de4:	60f8      	str	r0, [r7, #12]
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	4613      	mov	r3, r2
 8003dea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10b      	bne.n	8003e0a <xQueueGenericCreate+0x2c>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	613b      	str	r3, [r7, #16]
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	e7fd      	b.n	8003e06 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	fb02 f303 	mul.w	r3, r2, r3
 8003e12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	3350      	adds	r3, #80	@ 0x50
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f002 f997 	bl	800614c <pvPortMalloc>
 8003e1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d011      	beq.n	8003e4a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	3350      	adds	r3, #80	@ 0x50
 8003e2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e38:	79fa      	ldrb	r2, [r7, #7]
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 f805 	bl	8003e54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
	}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d103      	bne.n	8003e70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e002      	b.n	8003e76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e82:	2101      	movs	r1, #1
 8003e84:	69b8      	ldr	r0, [r7, #24]
 8003e86:	f7ff fec3 	bl	8003c10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	78fa      	ldrb	r2, [r7, #3]
 8003e8e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e92:	bf00      	nop
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08e      	sub	sp, #56	@ 0x38
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10b      	bne.n	8003ed0 <xQueueGenericSend+0x34>
	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003eca:	bf00      	nop
 8003ecc:	bf00      	nop
 8003ece:	e7fd      	b.n	8003ecc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d103      	bne.n	8003ede <xQueueGenericSend+0x42>
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <xQueueGenericSend+0x46>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <xQueueGenericSend+0x48>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10b      	bne.n	8003f00 <xQueueGenericSend+0x64>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003efa:	bf00      	nop
 8003efc:	bf00      	nop
 8003efe:	e7fd      	b.n	8003efc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d103      	bne.n	8003f0e <xQueueGenericSend+0x72>
 8003f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d101      	bne.n	8003f12 <xQueueGenericSend+0x76>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <xQueueGenericSend+0x78>
 8003f12:	2300      	movs	r3, #0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10b      	bne.n	8003f30 <xQueueGenericSend+0x94>
	__asm volatile
 8003f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	623b      	str	r3, [r7, #32]
}
 8003f2a:	bf00      	nop
 8003f2c:	bf00      	nop
 8003f2e:	e7fd      	b.n	8003f2c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f30:	f001 fa68 	bl	8005404 <xTaskGetSchedulerState>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d102      	bne.n	8003f40 <xQueueGenericSend+0xa4>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <xQueueGenericSend+0xa8>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <xQueueGenericSend+0xaa>
 8003f44:	2300      	movs	r3, #0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10b      	bne.n	8003f62 <xQueueGenericSend+0xc6>
	__asm volatile
 8003f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	61fb      	str	r3, [r7, #28]
}
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
 8003f60:	e7fd      	b.n	8003f5e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f62:	f001 ffd1 	bl	8005f08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d302      	bcc.n	8003f78 <xQueueGenericSend+0xdc>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d129      	bne.n	8003fcc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f7e:	f000 fa0f 	bl	80043a0 <prvCopyDataToQueue>
 8003f82:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d010      	beq.n	8003fae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8e:	3324      	adds	r3, #36	@ 0x24
 8003f90:	4618      	mov	r0, r3
 8003f92:	f001 f80d 	bl	8004fb0 <xTaskRemoveFromEventList>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d013      	beq.n	8003fc4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f9c:	4b3f      	ldr	r3, [pc, #252]	@ (800409c <xQueueGenericSend+0x200>)
 8003f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	e00a      	b.n	8003fc4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d007      	beq.n	8003fc4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003fb4:	4b39      	ldr	r3, [pc, #228]	@ (800409c <xQueueGenericSend+0x200>)
 8003fb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003fc4:	f001 ffd2 	bl	8005f6c <vPortExitCritical>
				return pdPASS;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e063      	b.n	8004094 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d103      	bne.n	8003fda <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fd2:	f001 ffcb 	bl	8005f6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e05c      	b.n	8004094 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d106      	bne.n	8003fee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fe0:	f107 0314 	add.w	r3, r7, #20
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f001 f8ab 	bl	8005140 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fea:	2301      	movs	r3, #1
 8003fec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fee:	f001 ffbd 	bl	8005f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ff2:	f000 fd71 	bl	8004ad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ff6:	f001 ff87 	bl	8005f08 <vPortEnterCritical>
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004000:	b25b      	sxtb	r3, r3
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004006:	d103      	bne.n	8004010 <xQueueGenericSend+0x174>
 8004008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004012:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004016:	b25b      	sxtb	r3, r3
 8004018:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800401c:	d103      	bne.n	8004026 <xQueueGenericSend+0x18a>
 800401e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004026:	f001 ffa1 	bl	8005f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800402a:	1d3a      	adds	r2, r7, #4
 800402c:	f107 0314 	add.w	r3, r7, #20
 8004030:	4611      	mov	r1, r2
 8004032:	4618      	mov	r0, r3
 8004034:	f001 f89a 	bl	800516c <xTaskCheckForTimeOut>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d124      	bne.n	8004088 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800403e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004040:	f000 faa6 	bl	8004590 <prvIsQueueFull>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d018      	beq.n	800407c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800404a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404c:	3310      	adds	r3, #16
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f000 ff1c 	bl	8004e90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004058:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800405a:	f000 fa31 	bl	80044c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800405e:	f000 fd49 	bl	8004af4 <xTaskResumeAll>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	f47f af7c 	bne.w	8003f62 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800406a:	4b0c      	ldr	r3, [pc, #48]	@ (800409c <xQueueGenericSend+0x200>)
 800406c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	e772      	b.n	8003f62 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800407c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800407e:	f000 fa1f 	bl	80044c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004082:	f000 fd37 	bl	8004af4 <xTaskResumeAll>
 8004086:	e76c      	b.n	8003f62 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004088:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800408a:	f000 fa19 	bl	80044c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800408e:	f000 fd31 	bl	8004af4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004092:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004094:	4618      	mov	r0, r3
 8004096:	3738      	adds	r7, #56	@ 0x38
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	e000ed04 	.word	0xe000ed04

080040a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b090      	sub	sp, #64	@ 0x40
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80040b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10b      	bne.n	80040d0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80040ca:	bf00      	nop
 80040cc:	bf00      	nop
 80040ce:	e7fd      	b.n	80040cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d103      	bne.n	80040de <xQueueGenericSendFromISR+0x3e>
 80040d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <xQueueGenericSendFromISR+0x42>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <xQueueGenericSendFromISR+0x44>
 80040e2:	2300      	movs	r3, #0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80040fa:	bf00      	nop
 80040fc:	bf00      	nop
 80040fe:	e7fd      	b.n	80040fc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d103      	bne.n	800410e <xQueueGenericSendFromISR+0x6e>
 8004106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <xQueueGenericSendFromISR+0x72>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <xQueueGenericSendFromISR+0x74>
 8004112:	2300      	movs	r3, #0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10b      	bne.n	8004130 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	623b      	str	r3, [r7, #32]
}
 800412a:	bf00      	nop
 800412c:	bf00      	nop
 800412e:	e7fd      	b.n	800412c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004130:	f001 ffca 	bl	80060c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004134:	f3ef 8211 	mrs	r2, BASEPRI
 8004138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	61fa      	str	r2, [r7, #28]
 800414a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800414c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800414e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004152:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004158:	429a      	cmp	r2, r3
 800415a:	d302      	bcc.n	8004162 <xQueueGenericSendFromISR+0xc2>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d12f      	bne.n	80041c2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004164:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004168:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800416c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004170:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004178:	f000 f912 	bl	80043a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800417c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004184:	d112      	bne.n	80041ac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418a:	2b00      	cmp	r3, #0
 800418c:	d016      	beq.n	80041bc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800418e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004190:	3324      	adds	r3, #36	@ 0x24
 8004192:	4618      	mov	r0, r3
 8004194:	f000 ff0c 	bl	8004fb0 <xTaskRemoveFromEventList>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00e      	beq.n	80041bc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00b      	beq.n	80041bc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e007      	b.n	80041bc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80041b0:	3301      	adds	r3, #1
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	b25a      	sxtb	r2, r3
 80041b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80041bc:	2301      	movs	r3, #1
 80041be:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80041c0:	e001      	b.n	80041c6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3740      	adds	r7, #64	@ 0x40
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08c      	sub	sp, #48	@ 0x30
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80041f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10b      	bne.n	800420e <xQueueReceive+0x32>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	623b      	str	r3, [r7, #32]
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	e7fd      	b.n	800420a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d103      	bne.n	800421c <xQueueReceive+0x40>
 8004214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <xQueueReceive+0x44>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <xQueueReceive+0x46>
 8004220:	2300      	movs	r3, #0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10b      	bne.n	800423e <xQueueReceive+0x62>
	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	61fb      	str	r3, [r7, #28]
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	e7fd      	b.n	800423a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800423e:	f001 f8e1 	bl	8005404 <xTaskGetSchedulerState>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d102      	bne.n	800424e <xQueueReceive+0x72>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <xQueueReceive+0x76>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <xQueueReceive+0x78>
 8004252:	2300      	movs	r3, #0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10b      	bne.n	8004270 <xQueueReceive+0x94>
	__asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	61bb      	str	r3, [r7, #24]
}
 800426a:	bf00      	nop
 800426c:	bf00      	nop
 800426e:	e7fd      	b.n	800426c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004270:	f001 fe4a 	bl	8005f08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004278:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01f      	beq.n	80042c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004284:	f000 f8f6 	bl	8004474 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428a:	1e5a      	subs	r2, r3, #1
 800428c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00f      	beq.n	80042b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429a:	3310      	adds	r3, #16
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fe87 	bl	8004fb0 <xTaskRemoveFromEventList>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d007      	beq.n	80042b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042a8:	4b3c      	ldr	r3, [pc, #240]	@ (800439c <xQueueReceive+0x1c0>)
 80042aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042b8:	f001 fe58 	bl	8005f6c <vPortExitCritical>
				return pdPASS;
 80042bc:	2301      	movs	r3, #1
 80042be:	e069      	b.n	8004394 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d103      	bne.n	80042ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042c6:	f001 fe51 	bl	8005f6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80042ca:	2300      	movs	r3, #0
 80042cc:	e062      	b.n	8004394 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d106      	bne.n	80042e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042d4:	f107 0310 	add.w	r3, r7, #16
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 ff31 	bl	8005140 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042de:	2301      	movs	r3, #1
 80042e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042e2:	f001 fe43 	bl	8005f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042e6:	f000 fbf7 	bl	8004ad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042ea:	f001 fe0d 	bl	8005f08 <vPortEnterCritical>
 80042ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042f4:	b25b      	sxtb	r3, r3
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042fa:	d103      	bne.n	8004304 <xQueueReceive+0x128>
 80042fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004306:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800430a:	b25b      	sxtb	r3, r3
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004310:	d103      	bne.n	800431a <xQueueReceive+0x13e>
 8004312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800431a:	f001 fe27 	bl	8005f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800431e:	1d3a      	adds	r2, r7, #4
 8004320:	f107 0310 	add.w	r3, r7, #16
 8004324:	4611      	mov	r1, r2
 8004326:	4618      	mov	r0, r3
 8004328:	f000 ff20 	bl	800516c <xTaskCheckForTimeOut>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d123      	bne.n	800437a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004332:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004334:	f000 f916 	bl	8004564 <prvIsQueueEmpty>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d017      	beq.n	800436e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800433e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004340:	3324      	adds	r3, #36	@ 0x24
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	4611      	mov	r1, r2
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fda2 	bl	8004e90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800434c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800434e:	f000 f8b7 	bl	80044c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004352:	f000 fbcf 	bl	8004af4 <xTaskResumeAll>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d189      	bne.n	8004270 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800435c:	4b0f      	ldr	r3, [pc, #60]	@ (800439c <xQueueReceive+0x1c0>)
 800435e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	e780      	b.n	8004270 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800436e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004370:	f000 f8a6 	bl	80044c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004374:	f000 fbbe 	bl	8004af4 <xTaskResumeAll>
 8004378:	e77a      	b.n	8004270 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800437a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800437c:	f000 f8a0 	bl	80044c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004380:	f000 fbb8 	bl	8004af4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004384:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004386:	f000 f8ed 	bl	8004564 <prvIsQueueEmpty>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	f43f af6f 	beq.w	8004270 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004392:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004394:	4618      	mov	r0, r3
 8004396:	3730      	adds	r7, #48	@ 0x30
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	e000ed04 	.word	0xe000ed04

080043a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10d      	bne.n	80043da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d14d      	bne.n	8004462 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f001 f838 	bl	8005440 <xTaskPriorityDisinherit>
 80043d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	e043      	b.n	8004462 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d119      	bne.n	8004414 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6858      	ldr	r0, [r3, #4]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e8:	461a      	mov	r2, r3
 80043ea:	68b9      	ldr	r1, [r7, #8]
 80043ec:	f004 f815 	bl	800841a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f8:	441a      	add	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	429a      	cmp	r2, r3
 8004408:	d32b      	bcc.n	8004462 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	e026      	b.n	8004462 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	68d8      	ldr	r0, [r3, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441c:	461a      	mov	r2, r3
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	f003 fffb 	bl	800841a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442c:	425b      	negs	r3, r3
 800442e:	441a      	add	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d207      	bcs.n	8004450 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004448:	425b      	negs	r3, r3
 800444a:	441a      	add	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d105      	bne.n	8004462 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	3b01      	subs	r3, #1
 8004460:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800446a:	697b      	ldr	r3, [r7, #20]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	d018      	beq.n	80044b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	441a      	add	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	429a      	cmp	r2, r3
 800449e:	d303      	bcc.n	80044a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68d9      	ldr	r1, [r3, #12]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b0:	461a      	mov	r2, r3
 80044b2:	6838      	ldr	r0, [r7, #0]
 80044b4:	f003 ffb1 	bl	800841a <memcpy>
	}
}
 80044b8:	bf00      	nop
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80044c8:	f001 fd1e 	bl	8005f08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044d4:	e011      	b.n	80044fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d012      	beq.n	8004504 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3324      	adds	r3, #36	@ 0x24
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fd64 	bl	8004fb0 <xTaskRemoveFromEventList>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80044ee:	f000 fea1 	bl	8005234 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	dce9      	bgt.n	80044d6 <prvUnlockQueue+0x16>
 8004502:	e000      	b.n	8004506 <prvUnlockQueue+0x46>
					break;
 8004504:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	22ff      	movs	r2, #255	@ 0xff
 800450a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800450e:	f001 fd2d 	bl	8005f6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004512:	f001 fcf9 	bl	8005f08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800451c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800451e:	e011      	b.n	8004544 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d012      	beq.n	800454e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3310      	adds	r3, #16
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fd3f 	bl	8004fb0 <xTaskRemoveFromEventList>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004538:	f000 fe7c 	bl	8005234 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800453c:	7bbb      	ldrb	r3, [r7, #14]
 800453e:	3b01      	subs	r3, #1
 8004540:	b2db      	uxtb	r3, r3
 8004542:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004544:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004548:	2b00      	cmp	r3, #0
 800454a:	dce9      	bgt.n	8004520 <prvUnlockQueue+0x60>
 800454c:	e000      	b.n	8004550 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800454e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	22ff      	movs	r2, #255	@ 0xff
 8004554:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004558:	f001 fd08 	bl	8005f6c <vPortExitCritical>
}
 800455c:	bf00      	nop
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800456c:	f001 fccc 	bl	8005f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004574:	2b00      	cmp	r3, #0
 8004576:	d102      	bne.n	800457e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004578:	2301      	movs	r3, #1
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	e001      	b.n	8004582 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004582:	f001 fcf3 	bl	8005f6c <vPortExitCritical>

	return xReturn;
 8004586:	68fb      	ldr	r3, [r7, #12]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004598:	f001 fcb6 	bl	8005f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d102      	bne.n	80045ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80045a8:	2301      	movs	r3, #1
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	e001      	b.n	80045b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045b2:	f001 fcdb 	bl	8005f6c <vPortExitCritical>

	return xReturn;
 80045b6:	68fb      	ldr	r3, [r7, #12]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	e014      	b.n	80045fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80045d0:	4a0f      	ldr	r2, [pc, #60]	@ (8004610 <vQueueAddToRegistry+0x50>)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10b      	bne.n	80045f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80045dc:	490c      	ldr	r1, [pc, #48]	@ (8004610 <vQueueAddToRegistry+0x50>)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80045e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004610 <vQueueAddToRegistry+0x50>)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4413      	add	r3, r2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80045f2:	e006      	b.n	8004602 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3301      	adds	r3, #1
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2b07      	cmp	r3, #7
 80045fe:	d9e7      	bls.n	80045d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004600:	bf00      	nop
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20000cc8 	.word	0x20000cc8

08004614 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004624:	f001 fc70 	bl	8005f08 <vPortEnterCritical>
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800462e:	b25b      	sxtb	r3, r3
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004634:	d103      	bne.n	800463e <vQueueWaitForMessageRestricted+0x2a>
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004644:	b25b      	sxtb	r3, r3
 8004646:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800464a:	d103      	bne.n	8004654 <vQueueWaitForMessageRestricted+0x40>
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004654:	f001 fc8a 	bl	8005f6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	3324      	adds	r3, #36	@ 0x24
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fc75 	bl	8004f58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800466e:	6978      	ldr	r0, [r7, #20]
 8004670:	f7ff ff26 	bl	80044c0 <prvUnlockQueue>
	}
 8004674:	bf00      	nop
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08e      	sub	sp, #56	@ 0x38
 8004680:	af04      	add	r7, sp, #16
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800468a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10b      	bne.n	80046a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	623b      	str	r3, [r7, #32]
}
 80046a2:	bf00      	nop
 80046a4:	bf00      	nop
 80046a6:	e7fd      	b.n	80046a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80046a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10b      	bne.n	80046c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	61fb      	str	r3, [r7, #28]
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	e7fd      	b.n	80046c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80046c6:	23a8      	movs	r3, #168	@ 0xa8
 80046c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2ba8      	cmp	r3, #168	@ 0xa8
 80046ce:	d00b      	beq.n	80046e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	61bb      	str	r3, [r7, #24]
}
 80046e2:	bf00      	nop
 80046e4:	bf00      	nop
 80046e6:	e7fd      	b.n	80046e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80046e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80046ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01e      	beq.n	800472e <xTaskCreateStatic+0xb2>
 80046f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01b      	beq.n	800472e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	2202      	movs	r2, #2
 8004704:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004708:	2300      	movs	r3, #0
 800470a:	9303      	str	r3, [sp, #12]
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470e:	9302      	str	r3, [sp, #8]
 8004710:	f107 0314 	add.w	r3, r7, #20
 8004714:	9301      	str	r3, [sp, #4]
 8004716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 f851 	bl	80047c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004726:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004728:	f000 f8f6 	bl	8004918 <prvAddNewTaskToReadyList>
 800472c:	e001      	b.n	8004732 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004732:	697b      	ldr	r3, [r7, #20]
	}
 8004734:	4618      	mov	r0, r3
 8004736:	3728      	adds	r7, #40	@ 0x28
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08c      	sub	sp, #48	@ 0x30
 8004740:	af04      	add	r7, sp, #16
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	4613      	mov	r3, r2
 800474a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800474c:	88fb      	ldrh	r3, [r7, #6]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4618      	mov	r0, r3
 8004752:	f001 fcfb 	bl	800614c <pvPortMalloc>
 8004756:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00e      	beq.n	800477c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800475e:	20a8      	movs	r0, #168	@ 0xa8
 8004760:	f001 fcf4 	bl	800614c <pvPortMalloc>
 8004764:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	631a      	str	r2, [r3, #48]	@ 0x30
 8004772:	e005      	b.n	8004780 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004774:	6978      	ldr	r0, [r7, #20]
 8004776:	f001 fdb7 	bl	80062e8 <vPortFree>
 800477a:	e001      	b.n	8004780 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d017      	beq.n	80047b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800478e:	88fa      	ldrh	r2, [r7, #6]
 8004790:	2300      	movs	r3, #0
 8004792:	9303      	str	r3, [sp, #12]
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	9302      	str	r3, [sp, #8]
 8004798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800479a:	9301      	str	r3, [sp, #4]
 800479c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 f80f 	bl	80047c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047aa:	69f8      	ldr	r0, [r7, #28]
 80047ac:	f000 f8b4 	bl	8004918 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80047b0:	2301      	movs	r3, #1
 80047b2:	61bb      	str	r3, [r7, #24]
 80047b4:	e002      	b.n	80047bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80047bc:	69bb      	ldr	r3, [r7, #24]
	}
 80047be:	4618      	mov	r0, r3
 80047c0:	3720      	adds	r7, #32
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80047d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	461a      	mov	r2, r3
 80047e0:	21a5      	movs	r1, #165	@ 0xa5
 80047e2:	f003 fcd6 	bl	8008192 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80047e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047f0:	3b01      	subs	r3, #1
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	f023 0307 	bic.w	r3, r3, #7
 80047fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00b      	beq.n	8004822 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	617b      	str	r3, [r7, #20]
}
 800481c:	bf00      	nop
 800481e:	bf00      	nop
 8004820:	e7fd      	b.n	800481e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d01f      	beq.n	8004868 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004828:	2300      	movs	r3, #0
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	e012      	b.n	8004854 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	4413      	add	r3, r2
 8004834:	7819      	ldrb	r1, [r3, #0]
 8004836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	4413      	add	r3, r2
 800483c:	3334      	adds	r3, #52	@ 0x34
 800483e:	460a      	mov	r2, r1
 8004840:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	4413      	add	r3, r2
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d006      	beq.n	800485c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	3301      	adds	r3, #1
 8004852:	61fb      	str	r3, [r7, #28]
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	2b0f      	cmp	r3, #15
 8004858:	d9e9      	bls.n	800482e <prvInitialiseNewTask+0x66>
 800485a:	e000      	b.n	800485e <prvInitialiseNewTask+0x96>
			{
				break;
 800485c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004866:	e003      	b.n	8004870 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004872:	2b37      	cmp	r3, #55	@ 0x37
 8004874:	d901      	bls.n	800487a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004876:	2337      	movs	r3, #55	@ 0x37
 8004878:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800487a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800487e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004882:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004884:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004888:	2200      	movs	r2, #0
 800488a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800488c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488e:	3304      	adds	r3, #4
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff f929 	bl	8003ae8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004898:	3318      	adds	r3, #24
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff f924 	bl	8003ae8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80048ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80048b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80048b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b8:	2200      	movs	r2, #0
 80048ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80048be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80048c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c8:	3354      	adds	r3, #84	@ 0x54
 80048ca:	224c      	movs	r2, #76	@ 0x4c
 80048cc:	2100      	movs	r1, #0
 80048ce:	4618      	mov	r0, r3
 80048d0:	f003 fc5f 	bl	8008192 <memset>
 80048d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d6:	4a0d      	ldr	r2, [pc, #52]	@ (800490c <prvInitialiseNewTask+0x144>)
 80048d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80048da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004910 <prvInitialiseNewTask+0x148>)
 80048de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004914 <prvInitialiseNewTask+0x14c>)
 80048e4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	68f9      	ldr	r1, [r7, #12]
 80048ea:	69b8      	ldr	r0, [r7, #24]
 80048ec:	f001 f9de 	bl	8005cac <pxPortInitialiseStack>
 80048f0:	4602      	mov	r2, r0
 80048f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80048f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004900:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004902:	bf00      	nop
 8004904:	3720      	adds	r7, #32
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20004f5c 	.word	0x20004f5c
 8004910:	20004fc4 	.word	0x20004fc4
 8004914:	2000502c 	.word	0x2000502c

08004918 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004920:	f001 faf2 	bl	8005f08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004924:	4b2d      	ldr	r3, [pc, #180]	@ (80049dc <prvAddNewTaskToReadyList+0xc4>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3301      	adds	r3, #1
 800492a:	4a2c      	ldr	r2, [pc, #176]	@ (80049dc <prvAddNewTaskToReadyList+0xc4>)
 800492c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800492e:	4b2c      	ldr	r3, [pc, #176]	@ (80049e0 <prvAddNewTaskToReadyList+0xc8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004936:	4a2a      	ldr	r2, [pc, #168]	@ (80049e0 <prvAddNewTaskToReadyList+0xc8>)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800493c:	4b27      	ldr	r3, [pc, #156]	@ (80049dc <prvAddNewTaskToReadyList+0xc4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d110      	bne.n	8004966 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004944:	f000 fc9a 	bl	800527c <prvInitialiseTaskLists>
 8004948:	e00d      	b.n	8004966 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800494a:	4b26      	ldr	r3, [pc, #152]	@ (80049e4 <prvAddNewTaskToReadyList+0xcc>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d109      	bne.n	8004966 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004952:	4b23      	ldr	r3, [pc, #140]	@ (80049e0 <prvAddNewTaskToReadyList+0xc8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495c:	429a      	cmp	r2, r3
 800495e:	d802      	bhi.n	8004966 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004960:	4a1f      	ldr	r2, [pc, #124]	@ (80049e0 <prvAddNewTaskToReadyList+0xc8>)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004966:	4b20      	ldr	r3, [pc, #128]	@ (80049e8 <prvAddNewTaskToReadyList+0xd0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3301      	adds	r3, #1
 800496c:	4a1e      	ldr	r2, [pc, #120]	@ (80049e8 <prvAddNewTaskToReadyList+0xd0>)
 800496e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004970:	4b1d      	ldr	r3, [pc, #116]	@ (80049e8 <prvAddNewTaskToReadyList+0xd0>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800497c:	4b1b      	ldr	r3, [pc, #108]	@ (80049ec <prvAddNewTaskToReadyList+0xd4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d903      	bls.n	800498c <prvAddNewTaskToReadyList+0x74>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004988:	4a18      	ldr	r2, [pc, #96]	@ (80049ec <prvAddNewTaskToReadyList+0xd4>)
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4a15      	ldr	r2, [pc, #84]	@ (80049f0 <prvAddNewTaskToReadyList+0xd8>)
 800499a:	441a      	add	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3304      	adds	r3, #4
 80049a0:	4619      	mov	r1, r3
 80049a2:	4610      	mov	r0, r2
 80049a4:	f7ff f8ad 	bl	8003b02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049a8:	f001 fae0 	bl	8005f6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049ac:	4b0d      	ldr	r3, [pc, #52]	@ (80049e4 <prvAddNewTaskToReadyList+0xcc>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00e      	beq.n	80049d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049b4:	4b0a      	ldr	r3, [pc, #40]	@ (80049e0 <prvAddNewTaskToReadyList+0xc8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049be:	429a      	cmp	r2, r3
 80049c0:	d207      	bcs.n	80049d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80049c2:	4b0c      	ldr	r3, [pc, #48]	@ (80049f4 <prvAddNewTaskToReadyList+0xdc>)
 80049c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049d2:	bf00      	nop
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	200011dc 	.word	0x200011dc
 80049e0:	20000d08 	.word	0x20000d08
 80049e4:	200011e8 	.word	0x200011e8
 80049e8:	200011f8 	.word	0x200011f8
 80049ec:	200011e4 	.word	0x200011e4
 80049f0:	20000d0c 	.word	0x20000d0c
 80049f4:	e000ed04 	.word	0xe000ed04

080049f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08a      	sub	sp, #40	@ 0x28
 80049fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a06:	463a      	mov	r2, r7
 8004a08:	1d39      	adds	r1, r7, #4
 8004a0a:	f107 0308 	add.w	r3, r7, #8
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe fe7c 	bl	800370c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a14:	6839      	ldr	r1, [r7, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	9202      	str	r2, [sp, #8]
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	2300      	movs	r3, #0
 8004a24:	460a      	mov	r2, r1
 8004a26:	4924      	ldr	r1, [pc, #144]	@ (8004ab8 <vTaskStartScheduler+0xc0>)
 8004a28:	4824      	ldr	r0, [pc, #144]	@ (8004abc <vTaskStartScheduler+0xc4>)
 8004a2a:	f7ff fe27 	bl	800467c <xTaskCreateStatic>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	4a23      	ldr	r2, [pc, #140]	@ (8004ac0 <vTaskStartScheduler+0xc8>)
 8004a32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a34:	4b22      	ldr	r3, [pc, #136]	@ (8004ac0 <vTaskStartScheduler+0xc8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e001      	b.n	8004a46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d102      	bne.n	8004a52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004a4c:	f000 fdd4 	bl	80055f8 <xTimerCreateTimerTask>
 8004a50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d11b      	bne.n	8004a90 <vTaskStartScheduler+0x98>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	613b      	str	r3, [r7, #16]
}
 8004a6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a6c:	4b15      	ldr	r3, [pc, #84]	@ (8004ac4 <vTaskStartScheduler+0xcc>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3354      	adds	r3, #84	@ 0x54
 8004a72:	4a15      	ldr	r2, [pc, #84]	@ (8004ac8 <vTaskStartScheduler+0xd0>)
 8004a74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a76:	4b15      	ldr	r3, [pc, #84]	@ (8004acc <vTaskStartScheduler+0xd4>)
 8004a78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a7e:	4b14      	ldr	r3, [pc, #80]	@ (8004ad0 <vTaskStartScheduler+0xd8>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a84:	4b13      	ldr	r3, [pc, #76]	@ (8004ad4 <vTaskStartScheduler+0xdc>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a8a:	f001 f999 	bl	8005dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a8e:	e00f      	b.n	8004ab0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a96:	d10b      	bne.n	8004ab0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	60fb      	str	r3, [r7, #12]
}
 8004aaa:	bf00      	nop
 8004aac:	bf00      	nop
 8004aae:	e7fd      	b.n	8004aac <vTaskStartScheduler+0xb4>
}
 8004ab0:	bf00      	nop
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	0800ae38 	.word	0x0800ae38
 8004abc:	0800524d 	.word	0x0800524d
 8004ac0:	20001200 	.word	0x20001200
 8004ac4:	20000d08 	.word	0x20000d08
 8004ac8:	20000184 	.word	0x20000184
 8004acc:	200011fc 	.word	0x200011fc
 8004ad0:	200011e8 	.word	0x200011e8
 8004ad4:	200011e0 	.word	0x200011e0

08004ad8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004adc:	4b04      	ldr	r3, [pc, #16]	@ (8004af0 <vTaskSuspendAll+0x18>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	4a03      	ldr	r2, [pc, #12]	@ (8004af0 <vTaskSuspendAll+0x18>)
 8004ae4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ae6:	bf00      	nop
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	20001204 	.word	0x20001204

08004af4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b02:	4b42      	ldr	r3, [pc, #264]	@ (8004c0c <xTaskResumeAll+0x118>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <xTaskResumeAll+0x2e>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	603b      	str	r3, [r7, #0]
}
 8004b1c:	bf00      	nop
 8004b1e:	bf00      	nop
 8004b20:	e7fd      	b.n	8004b1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b22:	f001 f9f1 	bl	8005f08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b26:	4b39      	ldr	r3, [pc, #228]	@ (8004c0c <xTaskResumeAll+0x118>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	4a37      	ldr	r2, [pc, #220]	@ (8004c0c <xTaskResumeAll+0x118>)
 8004b2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b30:	4b36      	ldr	r3, [pc, #216]	@ (8004c0c <xTaskResumeAll+0x118>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d162      	bne.n	8004bfe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b38:	4b35      	ldr	r3, [pc, #212]	@ (8004c10 <xTaskResumeAll+0x11c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d05e      	beq.n	8004bfe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b40:	e02f      	b.n	8004ba2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b42:	4b34      	ldr	r3, [pc, #208]	@ (8004c14 <xTaskResumeAll+0x120>)
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	3318      	adds	r3, #24
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff f834 	bl	8003bbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3304      	adds	r3, #4
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff f82f 	bl	8003bbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b62:	4b2d      	ldr	r3, [pc, #180]	@ (8004c18 <xTaskResumeAll+0x124>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d903      	bls.n	8004b72 <xTaskResumeAll+0x7e>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6e:	4a2a      	ldr	r2, [pc, #168]	@ (8004c18 <xTaskResumeAll+0x124>)
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4a27      	ldr	r2, [pc, #156]	@ (8004c1c <xTaskResumeAll+0x128>)
 8004b80:	441a      	add	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3304      	adds	r3, #4
 8004b86:	4619      	mov	r1, r3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	f7fe ffba 	bl	8003b02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b92:	4b23      	ldr	r3, [pc, #140]	@ (8004c20 <xTaskResumeAll+0x12c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d302      	bcc.n	8004ba2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004b9c:	4b21      	ldr	r3, [pc, #132]	@ (8004c24 <xTaskResumeAll+0x130>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8004c14 <xTaskResumeAll+0x120>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1cb      	bne.n	8004b42 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004bb0:	f000 fc08 	bl	80053c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8004c28 <xTaskResumeAll+0x134>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d010      	beq.n	8004be2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004bc0:	f000 f846 	bl	8004c50 <xTaskIncrementTick>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004bca:	4b16      	ldr	r3, [pc, #88]	@ (8004c24 <xTaskResumeAll+0x130>)
 8004bcc:	2201      	movs	r2, #1
 8004bce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1f1      	bne.n	8004bc0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004bdc:	4b12      	ldr	r3, [pc, #72]	@ (8004c28 <xTaskResumeAll+0x134>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004be2:	4b10      	ldr	r3, [pc, #64]	@ (8004c24 <xTaskResumeAll+0x130>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d009      	beq.n	8004bfe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004bea:	2301      	movs	r3, #1
 8004bec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bee:	4b0f      	ldr	r3, [pc, #60]	@ (8004c2c <xTaskResumeAll+0x138>)
 8004bf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bfe:	f001 f9b5 	bl	8005f6c <vPortExitCritical>

	return xAlreadyYielded;
 8004c02:	68bb      	ldr	r3, [r7, #8]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	20001204 	.word	0x20001204
 8004c10:	200011dc 	.word	0x200011dc
 8004c14:	2000119c 	.word	0x2000119c
 8004c18:	200011e4 	.word	0x200011e4
 8004c1c:	20000d0c 	.word	0x20000d0c
 8004c20:	20000d08 	.word	0x20000d08
 8004c24:	200011f0 	.word	0x200011f0
 8004c28:	200011ec 	.word	0x200011ec
 8004c2c:	e000ed04 	.word	0xe000ed04

08004c30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c36:	4b05      	ldr	r3, [pc, #20]	@ (8004c4c <xTaskGetTickCount+0x1c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c3c:	687b      	ldr	r3, [r7, #4]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	200011e0 	.word	0x200011e0

08004c50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c5a:	4b4f      	ldr	r3, [pc, #316]	@ (8004d98 <xTaskIncrementTick+0x148>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f040 8090 	bne.w	8004d84 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c64:	4b4d      	ldr	r3, [pc, #308]	@ (8004d9c <xTaskIncrementTick+0x14c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c6c:	4a4b      	ldr	r2, [pc, #300]	@ (8004d9c <xTaskIncrementTick+0x14c>)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d121      	bne.n	8004cbc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c78:	4b49      	ldr	r3, [pc, #292]	@ (8004da0 <xTaskIncrementTick+0x150>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00b      	beq.n	8004c9a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	603b      	str	r3, [r7, #0]
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	e7fd      	b.n	8004c96 <xTaskIncrementTick+0x46>
 8004c9a:	4b41      	ldr	r3, [pc, #260]	@ (8004da0 <xTaskIncrementTick+0x150>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	4b40      	ldr	r3, [pc, #256]	@ (8004da4 <xTaskIncrementTick+0x154>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a3e      	ldr	r2, [pc, #248]	@ (8004da0 <xTaskIncrementTick+0x150>)
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	4a3e      	ldr	r2, [pc, #248]	@ (8004da4 <xTaskIncrementTick+0x154>)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	4b3e      	ldr	r3, [pc, #248]	@ (8004da8 <xTaskIncrementTick+0x158>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	4a3c      	ldr	r2, [pc, #240]	@ (8004da8 <xTaskIncrementTick+0x158>)
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	f000 fb84 	bl	80053c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8004dac <xTaskIncrementTick+0x15c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d349      	bcc.n	8004d5a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cc6:	4b36      	ldr	r3, [pc, #216]	@ (8004da0 <xTaskIncrementTick+0x150>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d104      	bne.n	8004cda <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cd0:	4b36      	ldr	r3, [pc, #216]	@ (8004dac <xTaskIncrementTick+0x15c>)
 8004cd2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004cd6:	601a      	str	r2, [r3, #0]
					break;
 8004cd8:	e03f      	b.n	8004d5a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cda:	4b31      	ldr	r3, [pc, #196]	@ (8004da0 <xTaskIncrementTick+0x150>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d203      	bcs.n	8004cfa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004cf2:	4a2e      	ldr	r2, [pc, #184]	@ (8004dac <xTaskIncrementTick+0x15c>)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004cf8:	e02f      	b.n	8004d5a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fe ff5c 	bl	8003bbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d004      	beq.n	8004d16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	3318      	adds	r3, #24
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fe ff53 	bl	8003bbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d1a:	4b25      	ldr	r3, [pc, #148]	@ (8004db0 <xTaskIncrementTick+0x160>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d903      	bls.n	8004d2a <xTaskIncrementTick+0xda>
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d26:	4a22      	ldr	r2, [pc, #136]	@ (8004db0 <xTaskIncrementTick+0x160>)
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4a1f      	ldr	r2, [pc, #124]	@ (8004db4 <xTaskIncrementTick+0x164>)
 8004d38:	441a      	add	r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4610      	mov	r0, r2
 8004d42:	f7fe fede 	bl	8003b02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004db8 <xTaskIncrementTick+0x168>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d3b8      	bcc.n	8004cc6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004d54:	2301      	movs	r3, #1
 8004d56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d58:	e7b5      	b.n	8004cc6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d5a:	4b17      	ldr	r3, [pc, #92]	@ (8004db8 <xTaskIncrementTick+0x168>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d60:	4914      	ldr	r1, [pc, #80]	@ (8004db4 <xTaskIncrementTick+0x164>)
 8004d62:	4613      	mov	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d901      	bls.n	8004d76 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004d72:	2301      	movs	r3, #1
 8004d74:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d76:	4b11      	ldr	r3, [pc, #68]	@ (8004dbc <xTaskIncrementTick+0x16c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d007      	beq.n	8004d8e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	e004      	b.n	8004d8e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d84:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc0 <xTaskIncrementTick+0x170>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8004dc0 <xTaskIncrementTick+0x170>)
 8004d8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d8e:	697b      	ldr	r3, [r7, #20]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	20001204 	.word	0x20001204
 8004d9c:	200011e0 	.word	0x200011e0
 8004da0:	20001194 	.word	0x20001194
 8004da4:	20001198 	.word	0x20001198
 8004da8:	200011f4 	.word	0x200011f4
 8004dac:	200011fc 	.word	0x200011fc
 8004db0:	200011e4 	.word	0x200011e4
 8004db4:	20000d0c 	.word	0x20000d0c
 8004db8:	20000d08 	.word	0x20000d08
 8004dbc:	200011f0 	.word	0x200011f0
 8004dc0:	200011ec 	.word	0x200011ec

08004dc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004dca:	4b2b      	ldr	r3, [pc, #172]	@ (8004e78 <vTaskSwitchContext+0xb4>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8004e7c <vTaskSwitchContext+0xb8>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004dd8:	e047      	b.n	8004e6a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004dda:	4b28      	ldr	r3, [pc, #160]	@ (8004e7c <vTaskSwitchContext+0xb8>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004de0:	4b27      	ldr	r3, [pc, #156]	@ (8004e80 <vTaskSwitchContext+0xbc>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	e011      	b.n	8004e0c <vTaskSwitchContext+0x48>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10b      	bne.n	8004e06 <vTaskSwitchContext+0x42>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	607b      	str	r3, [r7, #4]
}
 8004e00:	bf00      	nop
 8004e02:	bf00      	nop
 8004e04:	e7fd      	b.n	8004e02 <vTaskSwitchContext+0x3e>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	491d      	ldr	r1, [pc, #116]	@ (8004e84 <vTaskSwitchContext+0xc0>)
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4613      	mov	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	440b      	add	r3, r1
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0e3      	beq.n	8004de8 <vTaskSwitchContext+0x24>
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4a16      	ldr	r2, [pc, #88]	@ (8004e84 <vTaskSwitchContext+0xc0>)
 8004e2c:	4413      	add	r3, r2
 8004e2e:	60bb      	str	r3, [r7, #8]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	605a      	str	r2, [r3, #4]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	3308      	adds	r3, #8
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d104      	bne.n	8004e50 <vTaskSwitchContext+0x8c>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	605a      	str	r2, [r3, #4]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	4a0c      	ldr	r2, [pc, #48]	@ (8004e88 <vTaskSwitchContext+0xc4>)
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	4a09      	ldr	r2, [pc, #36]	@ (8004e80 <vTaskSwitchContext+0xbc>)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e60:	4b09      	ldr	r3, [pc, #36]	@ (8004e88 <vTaskSwitchContext+0xc4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3354      	adds	r3, #84	@ 0x54
 8004e66:	4a09      	ldr	r2, [pc, #36]	@ (8004e8c <vTaskSwitchContext+0xc8>)
 8004e68:	6013      	str	r3, [r2, #0]
}
 8004e6a:	bf00      	nop
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	20001204 	.word	0x20001204
 8004e7c:	200011f0 	.word	0x200011f0
 8004e80:	200011e4 	.word	0x200011e4
 8004e84:	20000d0c 	.word	0x20000d0c
 8004e88:	20000d08 	.word	0x20000d08
 8004e8c:	20000184 	.word	0x20000184

08004e90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10b      	bne.n	8004eb8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	60fb      	str	r3, [r7, #12]
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	e7fd      	b.n	8004eb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004eb8:	4b07      	ldr	r3, [pc, #28]	@ (8004ed8 <vTaskPlaceOnEventList+0x48>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3318      	adds	r3, #24
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7fe fe42 	bl	8003b4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	6838      	ldr	r0, [r7, #0]
 8004eca:	f000 fb41 	bl	8005550 <prvAddCurrentTaskToDelayedList>
}
 8004ece:	bf00      	nop
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20000d08 	.word	0x20000d08

08004edc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10b      	bne.n	8004f06 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	617b      	str	r3, [r7, #20]
}
 8004f00:	bf00      	nop
 8004f02:	bf00      	nop
 8004f04:	e7fd      	b.n	8004f02 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004f06:	4b12      	ldr	r3, [pc, #72]	@ (8004f50 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10b      	bne.n	8004f26 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	613b      	str	r3, [r7, #16]
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	e7fd      	b.n	8004f22 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004f26:	4b0b      	ldr	r3, [pc, #44]	@ (8004f54 <vTaskPlaceOnUnorderedEventList+0x78>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004f30:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f32:	4b08      	ldr	r3, [pc, #32]	@ (8004f54 <vTaskPlaceOnUnorderedEventList+0x78>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3318      	adds	r3, #24
 8004f38:	4619      	mov	r1, r3
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f7fe fde1 	bl	8003b02 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f40:	2101      	movs	r1, #1
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fb04 	bl	8005550 <prvAddCurrentTaskToDelayedList>
}
 8004f48:	bf00      	nop
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20001204 	.word	0x20001204
 8004f54:	20000d08 	.word	0x20000d08

08004f58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10b      	bne.n	8004f82 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	617b      	str	r3, [r7, #20]
}
 8004f7c:	bf00      	nop
 8004f7e:	bf00      	nop
 8004f80:	e7fd      	b.n	8004f7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f82:	4b0a      	ldr	r3, [pc, #40]	@ (8004fac <vTaskPlaceOnEventListRestricted+0x54>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3318      	adds	r3, #24
 8004f88:	4619      	mov	r1, r3
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f7fe fdb9 	bl	8003b02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004f96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f9a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	68b8      	ldr	r0, [r7, #8]
 8004fa0:	f000 fad6 	bl	8005550 <prvAddCurrentTaskToDelayedList>
	}
 8004fa4:	bf00      	nop
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20000d08 	.word	0x20000d08

08004fb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10b      	bne.n	8004fde <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	60fb      	str	r3, [r7, #12]
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	e7fd      	b.n	8004fda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	3318      	adds	r3, #24
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fe fdea 	bl	8003bbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8005060 <xTaskRemoveFromEventList+0xb0>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d11d      	bne.n	800502c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fe fde1 	bl	8003bbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ffe:	4b19      	ldr	r3, [pc, #100]	@ (8005064 <xTaskRemoveFromEventList+0xb4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d903      	bls.n	800500e <xTaskRemoveFromEventList+0x5e>
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500a:	4a16      	ldr	r2, [pc, #88]	@ (8005064 <xTaskRemoveFromEventList+0xb4>)
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4a13      	ldr	r2, [pc, #76]	@ (8005068 <xTaskRemoveFromEventList+0xb8>)
 800501c:	441a      	add	r2, r3
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	3304      	adds	r3, #4
 8005022:	4619      	mov	r1, r3
 8005024:	4610      	mov	r0, r2
 8005026:	f7fe fd6c 	bl	8003b02 <vListInsertEnd>
 800502a:	e005      	b.n	8005038 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	3318      	adds	r3, #24
 8005030:	4619      	mov	r1, r3
 8005032:	480e      	ldr	r0, [pc, #56]	@ (800506c <xTaskRemoveFromEventList+0xbc>)
 8005034:	f7fe fd65 	bl	8003b02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800503c:	4b0c      	ldr	r3, [pc, #48]	@ (8005070 <xTaskRemoveFromEventList+0xc0>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005042:	429a      	cmp	r2, r3
 8005044:	d905      	bls.n	8005052 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005046:	2301      	movs	r3, #1
 8005048:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800504a:	4b0a      	ldr	r3, [pc, #40]	@ (8005074 <xTaskRemoveFromEventList+0xc4>)
 800504c:	2201      	movs	r2, #1
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	e001      	b.n	8005056 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005056:	697b      	ldr	r3, [r7, #20]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20001204 	.word	0x20001204
 8005064:	200011e4 	.word	0x200011e4
 8005068:	20000d0c 	.word	0x20000d0c
 800506c:	2000119c 	.word	0x2000119c
 8005070:	20000d08 	.word	0x20000d08
 8005074:	200011f0 	.word	0x200011f0

08005078 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005082:	4b2a      	ldr	r3, [pc, #168]	@ (800512c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10b      	bne.n	80050a2 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	613b      	str	r3, [r7, #16]
}
 800509c:	bf00      	nop
 800509e:	bf00      	nop
 80050a0:	e7fd      	b.n	800509e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10b      	bne.n	80050d0 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	60fb      	str	r3, [r7, #12]
}
 80050ca:	bf00      	nop
 80050cc:	bf00      	nop
 80050ce:	e7fd      	b.n	80050cc <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7fe fd73 	bl	8003bbc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	3304      	adds	r3, #4
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe fd6e 	bl	8003bbc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e4:	4b12      	ldr	r3, [pc, #72]	@ (8005130 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d903      	bls.n	80050f4 <vTaskRemoveFromUnorderedEventList+0x7c>
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f0:	4a0f      	ldr	r2, [pc, #60]	@ (8005130 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4a0c      	ldr	r2, [pc, #48]	@ (8005134 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005102:	441a      	add	r2, r3
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	3304      	adds	r3, #4
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f7fe fcf9 	bl	8003b02 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005114:	4b08      	ldr	r3, [pc, #32]	@ (8005138 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511a:	429a      	cmp	r2, r3
 800511c:	d902      	bls.n	8005124 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800511e:	4b07      	ldr	r3, [pc, #28]	@ (800513c <vTaskRemoveFromUnorderedEventList+0xc4>)
 8005120:	2201      	movs	r2, #1
 8005122:	601a      	str	r2, [r3, #0]
	}
}
 8005124:	bf00      	nop
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20001204 	.word	0x20001204
 8005130:	200011e4 	.word	0x200011e4
 8005134:	20000d0c 	.word	0x20000d0c
 8005138:	20000d08 	.word	0x20000d08
 800513c:	200011f0 	.word	0x200011f0

08005140 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005148:	4b06      	ldr	r3, [pc, #24]	@ (8005164 <vTaskInternalSetTimeOutState+0x24>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005150:	4b05      	ldr	r3, [pc, #20]	@ (8005168 <vTaskInternalSetTimeOutState+0x28>)
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	605a      	str	r2, [r3, #4]
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	200011f4 	.word	0x200011f4
 8005168:	200011e0 	.word	0x200011e0

0800516c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10b      	bne.n	8005194 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	613b      	str	r3, [r7, #16]
}
 800518e:	bf00      	nop
 8005190:	bf00      	nop
 8005192:	e7fd      	b.n	8005190 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10b      	bne.n	80051b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	60fb      	str	r3, [r7, #12]
}
 80051ac:	bf00      	nop
 80051ae:	bf00      	nop
 80051b0:	e7fd      	b.n	80051ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80051b2:	f000 fea9 	bl	8005f08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80051b6:	4b1d      	ldr	r3, [pc, #116]	@ (800522c <xTaskCheckForTimeOut+0xc0>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051ce:	d102      	bne.n	80051d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61fb      	str	r3, [r7, #28]
 80051d4:	e023      	b.n	800521e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	4b15      	ldr	r3, [pc, #84]	@ (8005230 <xTaskCheckForTimeOut+0xc4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d007      	beq.n	80051f2 <xTaskCheckForTimeOut+0x86>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d302      	bcc.n	80051f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80051ec:	2301      	movs	r3, #1
 80051ee:	61fb      	str	r3, [r7, #28]
 80051f0:	e015      	b.n	800521e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d20b      	bcs.n	8005214 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	1ad2      	subs	r2, r2, r3
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff ff99 	bl	8005140 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800520e:	2300      	movs	r3, #0
 8005210:	61fb      	str	r3, [r7, #28]
 8005212:	e004      	b.n	800521e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800521a:	2301      	movs	r3, #1
 800521c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800521e:	f000 fea5 	bl	8005f6c <vPortExitCritical>

	return xReturn;
 8005222:	69fb      	ldr	r3, [r7, #28]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3720      	adds	r7, #32
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	200011e0 	.word	0x200011e0
 8005230:	200011f4 	.word	0x200011f4

08005234 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005238:	4b03      	ldr	r3, [pc, #12]	@ (8005248 <vTaskMissedYield+0x14>)
 800523a:	2201      	movs	r2, #1
 800523c:	601a      	str	r2, [r3, #0]
}
 800523e:	bf00      	nop
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	200011f0 	.word	0x200011f0

0800524c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005254:	f000 f852 	bl	80052fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005258:	4b06      	ldr	r3, [pc, #24]	@ (8005274 <prvIdleTask+0x28>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d9f9      	bls.n	8005254 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005260:	4b05      	ldr	r3, [pc, #20]	@ (8005278 <prvIdleTask+0x2c>)
 8005262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005270:	e7f0      	b.n	8005254 <prvIdleTask+0x8>
 8005272:	bf00      	nop
 8005274:	20000d0c 	.word	0x20000d0c
 8005278:	e000ed04 	.word	0xe000ed04

0800527c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005282:	2300      	movs	r3, #0
 8005284:	607b      	str	r3, [r7, #4]
 8005286:	e00c      	b.n	80052a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4a12      	ldr	r2, [pc, #72]	@ (80052dc <prvInitialiseTaskLists+0x60>)
 8005294:	4413      	add	r3, r2
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe fc06 	bl	8003aa8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3301      	adds	r3, #1
 80052a0:	607b      	str	r3, [r7, #4]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b37      	cmp	r3, #55	@ 0x37
 80052a6:	d9ef      	bls.n	8005288 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052a8:	480d      	ldr	r0, [pc, #52]	@ (80052e0 <prvInitialiseTaskLists+0x64>)
 80052aa:	f7fe fbfd 	bl	8003aa8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052ae:	480d      	ldr	r0, [pc, #52]	@ (80052e4 <prvInitialiseTaskLists+0x68>)
 80052b0:	f7fe fbfa 	bl	8003aa8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052b4:	480c      	ldr	r0, [pc, #48]	@ (80052e8 <prvInitialiseTaskLists+0x6c>)
 80052b6:	f7fe fbf7 	bl	8003aa8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052ba:	480c      	ldr	r0, [pc, #48]	@ (80052ec <prvInitialiseTaskLists+0x70>)
 80052bc:	f7fe fbf4 	bl	8003aa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80052c0:	480b      	ldr	r0, [pc, #44]	@ (80052f0 <prvInitialiseTaskLists+0x74>)
 80052c2:	f7fe fbf1 	bl	8003aa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052c6:	4b0b      	ldr	r3, [pc, #44]	@ (80052f4 <prvInitialiseTaskLists+0x78>)
 80052c8:	4a05      	ldr	r2, [pc, #20]	@ (80052e0 <prvInitialiseTaskLists+0x64>)
 80052ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052cc:	4b0a      	ldr	r3, [pc, #40]	@ (80052f8 <prvInitialiseTaskLists+0x7c>)
 80052ce:	4a05      	ldr	r2, [pc, #20]	@ (80052e4 <prvInitialiseTaskLists+0x68>)
 80052d0:	601a      	str	r2, [r3, #0]
}
 80052d2:	bf00      	nop
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000d0c 	.word	0x20000d0c
 80052e0:	2000116c 	.word	0x2000116c
 80052e4:	20001180 	.word	0x20001180
 80052e8:	2000119c 	.word	0x2000119c
 80052ec:	200011b0 	.word	0x200011b0
 80052f0:	200011c8 	.word	0x200011c8
 80052f4:	20001194 	.word	0x20001194
 80052f8:	20001198 	.word	0x20001198

080052fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005302:	e019      	b.n	8005338 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005304:	f000 fe00 	bl	8005f08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005308:	4b10      	ldr	r3, [pc, #64]	@ (800534c <prvCheckTasksWaitingTermination+0x50>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3304      	adds	r3, #4
 8005314:	4618      	mov	r0, r3
 8005316:	f7fe fc51 	bl	8003bbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800531a:	4b0d      	ldr	r3, [pc, #52]	@ (8005350 <prvCheckTasksWaitingTermination+0x54>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3b01      	subs	r3, #1
 8005320:	4a0b      	ldr	r2, [pc, #44]	@ (8005350 <prvCheckTasksWaitingTermination+0x54>)
 8005322:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005324:	4b0b      	ldr	r3, [pc, #44]	@ (8005354 <prvCheckTasksWaitingTermination+0x58>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3b01      	subs	r3, #1
 800532a:	4a0a      	ldr	r2, [pc, #40]	@ (8005354 <prvCheckTasksWaitingTermination+0x58>)
 800532c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800532e:	f000 fe1d 	bl	8005f6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f810 	bl	8005358 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005338:	4b06      	ldr	r3, [pc, #24]	@ (8005354 <prvCheckTasksWaitingTermination+0x58>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e1      	bne.n	8005304 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005340:	bf00      	nop
 8005342:	bf00      	nop
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	200011b0 	.word	0x200011b0
 8005350:	200011dc 	.word	0x200011dc
 8005354:	200011c4 	.word	0x200011c4

08005358 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3354      	adds	r3, #84	@ 0x54
 8005364:	4618      	mov	r0, r3
 8005366:	f002 ff9f 	bl	80082a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005370:	2b00      	cmp	r3, #0
 8005372:	d108      	bne.n	8005386 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005378:	4618      	mov	r0, r3
 800537a:	f000 ffb5 	bl	80062e8 <vPortFree>
				vPortFree( pxTCB );
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 ffb2 	bl	80062e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005384:	e019      	b.n	80053ba <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800538c:	2b01      	cmp	r3, #1
 800538e:	d103      	bne.n	8005398 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 ffa9 	bl	80062e8 <vPortFree>
	}
 8005396:	e010      	b.n	80053ba <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d00b      	beq.n	80053ba <prvDeleteTCB+0x62>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	60fb      	str	r3, [r7, #12]
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop
 80053b8:	e7fd      	b.n	80053b6 <prvDeleteTCB+0x5e>
	}
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053ca:	4b0c      	ldr	r3, [pc, #48]	@ (80053fc <prvResetNextTaskUnblockTime+0x38>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d104      	bne.n	80053de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005400 <prvResetNextTaskUnblockTime+0x3c>)
 80053d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053dc:	e008      	b.n	80053f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053de:	4b07      	ldr	r3, [pc, #28]	@ (80053fc <prvResetNextTaskUnblockTime+0x38>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	4a04      	ldr	r2, [pc, #16]	@ (8005400 <prvResetNextTaskUnblockTime+0x3c>)
 80053ee:	6013      	str	r3, [r2, #0]
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	20001194 	.word	0x20001194
 8005400:	200011fc 	.word	0x200011fc

08005404 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800540a:	4b0b      	ldr	r3, [pc, #44]	@ (8005438 <xTaskGetSchedulerState+0x34>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d102      	bne.n	8005418 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005412:	2301      	movs	r3, #1
 8005414:	607b      	str	r3, [r7, #4]
 8005416:	e008      	b.n	800542a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005418:	4b08      	ldr	r3, [pc, #32]	@ (800543c <xTaskGetSchedulerState+0x38>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d102      	bne.n	8005426 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005420:	2302      	movs	r3, #2
 8005422:	607b      	str	r3, [r7, #4]
 8005424:	e001      	b.n	800542a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005426:	2300      	movs	r3, #0
 8005428:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800542a:	687b      	ldr	r3, [r7, #4]
	}
 800542c:	4618      	mov	r0, r3
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	200011e8 	.word	0x200011e8
 800543c:	20001204 	.word	0x20001204

08005440 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800544c:	2300      	movs	r3, #0
 800544e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d058      	beq.n	8005508 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005456:	4b2f      	ldr	r3, [pc, #188]	@ (8005514 <xTaskPriorityDisinherit+0xd4>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	429a      	cmp	r2, r3
 800545e:	d00b      	beq.n	8005478 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	60fb      	str	r3, [r7, #12]
}
 8005472:	bf00      	nop
 8005474:	bf00      	nop
 8005476:	e7fd      	b.n	8005474 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10b      	bne.n	8005498 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	60bb      	str	r3, [r7, #8]
}
 8005492:	bf00      	nop
 8005494:	bf00      	nop
 8005496:	e7fd      	b.n	8005494 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800549c:	1e5a      	subs	r2, r3, #1
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d02c      	beq.n	8005508 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d128      	bne.n	8005508 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	3304      	adds	r3, #4
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fe fb7e 	bl	8003bbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005518 <xTaskPriorityDisinherit+0xd8>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d903      	bls.n	80054e8 <xTaskPriorityDisinherit+0xa8>
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e4:	4a0c      	ldr	r2, [pc, #48]	@ (8005518 <xTaskPriorityDisinherit+0xd8>)
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4a09      	ldr	r2, [pc, #36]	@ (800551c <xTaskPriorityDisinherit+0xdc>)
 80054f6:	441a      	add	r2, r3
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	3304      	adds	r3, #4
 80054fc:	4619      	mov	r1, r3
 80054fe:	4610      	mov	r0, r2
 8005500:	f7fe faff 	bl	8003b02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005504:	2301      	movs	r3, #1
 8005506:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005508:	697b      	ldr	r3, [r7, #20]
	}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20000d08 	.word	0x20000d08
 8005518:	200011e4 	.word	0x200011e4
 800551c:	20000d0c 	.word	0x20000d0c

08005520 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005526:	4b09      	ldr	r3, [pc, #36]	@ (800554c <uxTaskResetEventItemValue+0x2c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800552e:	4b07      	ldr	r3, [pc, #28]	@ (800554c <uxTaskResetEventItemValue+0x2c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005534:	4b05      	ldr	r3, [pc, #20]	@ (800554c <uxTaskResetEventItemValue+0x2c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800553c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800553e:	687b      	ldr	r3, [r7, #4]
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	20000d08 	.word	0x20000d08

08005550 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800555a:	4b21      	ldr	r3, [pc, #132]	@ (80055e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005560:	4b20      	ldr	r3, [pc, #128]	@ (80055e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3304      	adds	r3, #4
 8005566:	4618      	mov	r0, r3
 8005568:	f7fe fb28 	bl	8003bbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005572:	d10a      	bne.n	800558a <prvAddCurrentTaskToDelayedList+0x3a>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d007      	beq.n	800558a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800557a:	4b1a      	ldr	r3, [pc, #104]	@ (80055e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3304      	adds	r3, #4
 8005580:	4619      	mov	r1, r3
 8005582:	4819      	ldr	r0, [pc, #100]	@ (80055e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005584:	f7fe fabd 	bl	8003b02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005588:	e026      	b.n	80055d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4413      	add	r3, r2
 8005590:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005592:	4b14      	ldr	r3, [pc, #80]	@ (80055e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d209      	bcs.n	80055b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055a2:	4b12      	ldr	r3, [pc, #72]	@ (80055ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4b0f      	ldr	r3, [pc, #60]	@ (80055e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3304      	adds	r3, #4
 80055ac:	4619      	mov	r1, r3
 80055ae:	4610      	mov	r0, r2
 80055b0:	f7fe facb 	bl	8003b4a <vListInsert>
}
 80055b4:	e010      	b.n	80055d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055b6:	4b0e      	ldr	r3, [pc, #56]	@ (80055f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4b0a      	ldr	r3, [pc, #40]	@ (80055e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3304      	adds	r3, #4
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f7fe fac1 	bl	8003b4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055c8:	4b0a      	ldr	r3, [pc, #40]	@ (80055f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d202      	bcs.n	80055d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80055d2:	4a08      	ldr	r2, [pc, #32]	@ (80055f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	6013      	str	r3, [r2, #0]
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	200011e0 	.word	0x200011e0
 80055e4:	20000d08 	.word	0x20000d08
 80055e8:	200011c8 	.word	0x200011c8
 80055ec:	20001198 	.word	0x20001198
 80055f0:	20001194 	.word	0x20001194
 80055f4:	200011fc 	.word	0x200011fc

080055f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08a      	sub	sp, #40	@ 0x28
 80055fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005602:	f000 fb13 	bl	8005c2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005606:	4b1d      	ldr	r3, [pc, #116]	@ (800567c <xTimerCreateTimerTask+0x84>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d021      	beq.n	8005652 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005612:	2300      	movs	r3, #0
 8005614:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005616:	1d3a      	adds	r2, r7, #4
 8005618:	f107 0108 	add.w	r1, r7, #8
 800561c:	f107 030c 	add.w	r3, r7, #12
 8005620:	4618      	mov	r0, r3
 8005622:	f7fe f88d 	bl	8003740 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	9202      	str	r2, [sp, #8]
 800562e:	9301      	str	r3, [sp, #4]
 8005630:	2302      	movs	r3, #2
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	2300      	movs	r3, #0
 8005636:	460a      	mov	r2, r1
 8005638:	4911      	ldr	r1, [pc, #68]	@ (8005680 <xTimerCreateTimerTask+0x88>)
 800563a:	4812      	ldr	r0, [pc, #72]	@ (8005684 <xTimerCreateTimerTask+0x8c>)
 800563c:	f7ff f81e 	bl	800467c <xTaskCreateStatic>
 8005640:	4603      	mov	r3, r0
 8005642:	4a11      	ldr	r2, [pc, #68]	@ (8005688 <xTimerCreateTimerTask+0x90>)
 8005644:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005646:	4b10      	ldr	r3, [pc, #64]	@ (8005688 <xTimerCreateTimerTask+0x90>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800564e:	2301      	movs	r3, #1
 8005650:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10b      	bne.n	8005670 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	613b      	str	r3, [r7, #16]
}
 800566a:	bf00      	nop
 800566c:	bf00      	nop
 800566e:	e7fd      	b.n	800566c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005670:	697b      	ldr	r3, [r7, #20]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20001238 	.word	0x20001238
 8005680:	0800ae40 	.word	0x0800ae40
 8005684:	080057c5 	.word	0x080057c5
 8005688:	2000123c 	.word	0x2000123c

0800568c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08a      	sub	sp, #40	@ 0x28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800569a:	2300      	movs	r3, #0
 800569c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10b      	bne.n	80056bc <xTimerGenericCommand+0x30>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	623b      	str	r3, [r7, #32]
}
 80056b6:	bf00      	nop
 80056b8:	bf00      	nop
 80056ba:	e7fd      	b.n	80056b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80056bc:	4b19      	ldr	r3, [pc, #100]	@ (8005724 <xTimerGenericCommand+0x98>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d02a      	beq.n	800571a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b05      	cmp	r3, #5
 80056d4:	dc18      	bgt.n	8005708 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80056d6:	f7ff fe95 	bl	8005404 <xTaskGetSchedulerState>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d109      	bne.n	80056f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80056e0:	4b10      	ldr	r3, [pc, #64]	@ (8005724 <xTimerGenericCommand+0x98>)
 80056e2:	6818      	ldr	r0, [r3, #0]
 80056e4:	f107 0110 	add.w	r1, r7, #16
 80056e8:	2300      	movs	r3, #0
 80056ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ec:	f7fe fbd6 	bl	8003e9c <xQueueGenericSend>
 80056f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80056f2:	e012      	b.n	800571a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80056f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005724 <xTimerGenericCommand+0x98>)
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	f107 0110 	add.w	r1, r7, #16
 80056fc:	2300      	movs	r3, #0
 80056fe:	2200      	movs	r2, #0
 8005700:	f7fe fbcc 	bl	8003e9c <xQueueGenericSend>
 8005704:	6278      	str	r0, [r7, #36]	@ 0x24
 8005706:	e008      	b.n	800571a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005708:	4b06      	ldr	r3, [pc, #24]	@ (8005724 <xTimerGenericCommand+0x98>)
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	f107 0110 	add.w	r1, r7, #16
 8005710:	2300      	movs	r3, #0
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	f7fe fcc4 	bl	80040a0 <xQueueGenericSendFromISR>
 8005718:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800571c:	4618      	mov	r0, r3
 800571e:	3728      	adds	r7, #40	@ 0x28
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	20001238 	.word	0x20001238

08005728 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af02      	add	r7, sp, #8
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005732:	4b23      	ldr	r3, [pc, #140]	@ (80057c0 <prvProcessExpiredTimer+0x98>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	3304      	adds	r3, #4
 8005740:	4618      	mov	r0, r3
 8005742:	f7fe fa3b 	bl	8003bbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d023      	beq.n	800579c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	699a      	ldr	r2, [r3, #24]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	18d1      	adds	r1, r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	6978      	ldr	r0, [r7, #20]
 8005762:	f000 f8d5 	bl	8005910 <prvInsertTimerInActiveList>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d020      	beq.n	80057ae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800576c:	2300      	movs	r3, #0
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	2300      	movs	r3, #0
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	2100      	movs	r1, #0
 8005776:	6978      	ldr	r0, [r7, #20]
 8005778:	f7ff ff88 	bl	800568c <xTimerGenericCommand>
 800577c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d114      	bne.n	80057ae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	60fb      	str	r3, [r7, #12]
}
 8005796:	bf00      	nop
 8005798:	bf00      	nop
 800579a:	e7fd      	b.n	8005798 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057a2:	f023 0301 	bic.w	r3, r3, #1
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	6978      	ldr	r0, [r7, #20]
 80057b4:	4798      	blx	r3
}
 80057b6:	bf00      	nop
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20001230 	.word	0x20001230

080057c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057cc:	f107 0308 	add.w	r3, r7, #8
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 f859 	bl	8005888 <prvGetNextExpireTime>
 80057d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4619      	mov	r1, r3
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 f805 	bl	80057ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80057e2:	f000 f8d7 	bl	8005994 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057e6:	bf00      	nop
 80057e8:	e7f0      	b.n	80057cc <prvTimerTask+0x8>
	...

080057ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80057f6:	f7ff f96f 	bl	8004ad8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057fa:	f107 0308 	add.w	r3, r7, #8
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 f866 	bl	80058d0 <prvSampleTimeNow>
 8005804:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d130      	bne.n	800586e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10a      	bne.n	8005828 <prvProcessTimerOrBlockTask+0x3c>
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	429a      	cmp	r2, r3
 8005818:	d806      	bhi.n	8005828 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800581a:	f7ff f96b 	bl	8004af4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800581e:	68f9      	ldr	r1, [r7, #12]
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff ff81 	bl	8005728 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005826:	e024      	b.n	8005872 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d008      	beq.n	8005840 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800582e:	4b13      	ldr	r3, [pc, #76]	@ (800587c <prvProcessTimerOrBlockTask+0x90>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <prvProcessTimerOrBlockTask+0x50>
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <prvProcessTimerOrBlockTask+0x52>
 800583c:	2300      	movs	r3, #0
 800583e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005840:	4b0f      	ldr	r3, [pc, #60]	@ (8005880 <prvProcessTimerOrBlockTask+0x94>)
 8005842:	6818      	ldr	r0, [r3, #0]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	4619      	mov	r1, r3
 800584e:	f7fe fee1 	bl	8004614 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005852:	f7ff f94f 	bl	8004af4 <xTaskResumeAll>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10a      	bne.n	8005872 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800585c:	4b09      	ldr	r3, [pc, #36]	@ (8005884 <prvProcessTimerOrBlockTask+0x98>)
 800585e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	f3bf 8f6f 	isb	sy
}
 800586c:	e001      	b.n	8005872 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800586e:	f7ff f941 	bl	8004af4 <xTaskResumeAll>
}
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20001234 	.word	0x20001234
 8005880:	20001238 	.word	0x20001238
 8005884:	e000ed04 	.word	0xe000ed04

08005888 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005890:	4b0e      	ldr	r3, [pc, #56]	@ (80058cc <prvGetNextExpireTime+0x44>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <prvGetNextExpireTime+0x16>
 800589a:	2201      	movs	r2, #1
 800589c:	e000      	b.n	80058a0 <prvGetNextExpireTime+0x18>
 800589e:	2200      	movs	r2, #0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d105      	bne.n	80058b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058ac:	4b07      	ldr	r3, [pc, #28]	@ (80058cc <prvGetNextExpireTime+0x44>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	e001      	b.n	80058bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80058bc:	68fb      	ldr	r3, [r7, #12]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	20001230 	.word	0x20001230

080058d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80058d8:	f7ff f9aa 	bl	8004c30 <xTaskGetTickCount>
 80058dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80058de:	4b0b      	ldr	r3, [pc, #44]	@ (800590c <prvSampleTimeNow+0x3c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d205      	bcs.n	80058f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80058e8:	f000 f93a 	bl	8005b60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e002      	b.n	80058fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80058fa:	4a04      	ldr	r2, [pc, #16]	@ (800590c <prvSampleTimeNow+0x3c>)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005900:	68fb      	ldr	r3, [r7, #12]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20001240 	.word	0x20001240

08005910 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	429a      	cmp	r2, r3
 8005934:	d812      	bhi.n	800595c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	1ad2      	subs	r2, r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	429a      	cmp	r2, r3
 8005942:	d302      	bcc.n	800594a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005944:	2301      	movs	r3, #1
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	e01b      	b.n	8005982 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800594a:	4b10      	ldr	r3, [pc, #64]	@ (800598c <prvInsertTimerInActiveList+0x7c>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3304      	adds	r3, #4
 8005952:	4619      	mov	r1, r3
 8005954:	4610      	mov	r0, r2
 8005956:	f7fe f8f8 	bl	8003b4a <vListInsert>
 800595a:	e012      	b.n	8005982 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	429a      	cmp	r2, r3
 8005962:	d206      	bcs.n	8005972 <prvInsertTimerInActiveList+0x62>
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	429a      	cmp	r2, r3
 800596a:	d302      	bcc.n	8005972 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800596c:	2301      	movs	r3, #1
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	e007      	b.n	8005982 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005972:	4b07      	ldr	r3, [pc, #28]	@ (8005990 <prvInsertTimerInActiveList+0x80>)
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3304      	adds	r3, #4
 800597a:	4619      	mov	r1, r3
 800597c:	4610      	mov	r0, r2
 800597e:	f7fe f8e4 	bl	8003b4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005982:	697b      	ldr	r3, [r7, #20]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	20001234 	.word	0x20001234
 8005990:	20001230 	.word	0x20001230

08005994 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08e      	sub	sp, #56	@ 0x38
 8005998:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800599a:	e0ce      	b.n	8005b3a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	da19      	bge.n	80059d6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80059a2:	1d3b      	adds	r3, r7, #4
 80059a4:	3304      	adds	r3, #4
 80059a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80059a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10b      	bne.n	80059c6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	61fb      	str	r3, [r7, #28]
}
 80059c0:	bf00      	nop
 80059c2:	bf00      	nop
 80059c4:	e7fd      	b.n	80059c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80059c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059cc:	6850      	ldr	r0, [r2, #4]
 80059ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059d0:	6892      	ldr	r2, [r2, #8]
 80059d2:	4611      	mov	r1, r2
 80059d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f2c0 80ae 	blt.w	8005b3a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80059e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d004      	beq.n	80059f4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ec:	3304      	adds	r3, #4
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fe f8e4 	bl	8003bbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059f4:	463b      	mov	r3, r7
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff ff6a 	bl	80058d0 <prvSampleTimeNow>
 80059fc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b09      	cmp	r3, #9
 8005a02:	f200 8097 	bhi.w	8005b34 <prvProcessReceivedCommands+0x1a0>
 8005a06:	a201      	add	r2, pc, #4	@ (adr r2, 8005a0c <prvProcessReceivedCommands+0x78>)
 8005a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0c:	08005a35 	.word	0x08005a35
 8005a10:	08005a35 	.word	0x08005a35
 8005a14:	08005a35 	.word	0x08005a35
 8005a18:	08005aab 	.word	0x08005aab
 8005a1c:	08005abf 	.word	0x08005abf
 8005a20:	08005b0b 	.word	0x08005b0b
 8005a24:	08005a35 	.word	0x08005a35
 8005a28:	08005a35 	.word	0x08005a35
 8005a2c:	08005aab 	.word	0x08005aab
 8005a30:	08005abf 	.word	0x08005abf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a3a:	f043 0301 	orr.w	r3, r3, #1
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	18d1      	adds	r1, r2, r3
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a54:	f7ff ff5c 	bl	8005910 <prvInsertTimerInActiveList>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d06c      	beq.n	8005b38 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d061      	beq.n	8005b38 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	441a      	add	r2, r3
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	2300      	movs	r3, #0
 8005a82:	2100      	movs	r1, #0
 8005a84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a86:	f7ff fe01 	bl	800568c <xTimerGenericCommand>
 8005a8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d152      	bne.n	8005b38 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	61bb      	str	r3, [r7, #24]
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
 8005aa8:	e7fd      	b.n	8005aa6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ab0:	f023 0301 	bic.w	r3, r3, #1
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005abc:	e03d      	b.n	8005b3a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ac4:	f043 0301 	orr.w	r3, r3, #1
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005acc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10b      	bne.n	8005af6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	617b      	str	r3, [r7, #20]
}
 8005af0:	bf00      	nop
 8005af2:	bf00      	nop
 8005af4:	e7fd      	b.n	8005af2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	18d1      	adds	r1, r2, r3
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b04:	f7ff ff04 	bl	8005910 <prvInsertTimerInActiveList>
					break;
 8005b08:	e017      	b.n	8005b3a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d103      	bne.n	8005b20 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005b18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b1a:	f000 fbe5 	bl	80062e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b1e:	e00c      	b.n	8005b3a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b26:	f023 0301 	bic.w	r3, r3, #1
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005b32:	e002      	b.n	8005b3a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005b34:	bf00      	nop
 8005b36:	e000      	b.n	8005b3a <prvProcessReceivedCommands+0x1a6>
					break;
 8005b38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b3a:	4b08      	ldr	r3, [pc, #32]	@ (8005b5c <prvProcessReceivedCommands+0x1c8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	1d39      	adds	r1, r7, #4
 8005b40:	2200      	movs	r2, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe fb4a 	bl	80041dc <xQueueReceive>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f47f af26 	bne.w	800599c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005b50:	bf00      	nop
 8005b52:	bf00      	nop
 8005b54:	3730      	adds	r7, #48	@ 0x30
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20001238 	.word	0x20001238

08005b60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b66:	e049      	b.n	8005bfc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b68:	4b2e      	ldr	r3, [pc, #184]	@ (8005c24 <prvSwitchTimerLists+0xc4>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b72:	4b2c      	ldr	r3, [pc, #176]	@ (8005c24 <prvSwitchTimerLists+0xc4>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fe f81b 	bl	8003bbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d02f      	beq.n	8005bfc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d90e      	bls.n	8005bcc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bba:	4b1a      	ldr	r3, [pc, #104]	@ (8005c24 <prvSwitchTimerLists+0xc4>)
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	f7fd ffc0 	bl	8003b4a <vListInsert>
 8005bca:	e017      	b.n	8005bfc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f7ff fd58 	bl	800568c <xTimerGenericCommand>
 8005bdc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10b      	bne.n	8005bfc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	603b      	str	r3, [r7, #0]
}
 8005bf6:	bf00      	nop
 8005bf8:	bf00      	nop
 8005bfa:	e7fd      	b.n	8005bf8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bfc:	4b09      	ldr	r3, [pc, #36]	@ (8005c24 <prvSwitchTimerLists+0xc4>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1b0      	bne.n	8005b68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c06:	4b07      	ldr	r3, [pc, #28]	@ (8005c24 <prvSwitchTimerLists+0xc4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c0c:	4b06      	ldr	r3, [pc, #24]	@ (8005c28 <prvSwitchTimerLists+0xc8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a04      	ldr	r2, [pc, #16]	@ (8005c24 <prvSwitchTimerLists+0xc4>)
 8005c12:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c14:	4a04      	ldr	r2, [pc, #16]	@ (8005c28 <prvSwitchTimerLists+0xc8>)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	6013      	str	r3, [r2, #0]
}
 8005c1a:	bf00      	nop
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	20001230 	.word	0x20001230
 8005c28:	20001234 	.word	0x20001234

08005c2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c32:	f000 f969 	bl	8005f08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c36:	4b15      	ldr	r3, [pc, #84]	@ (8005c8c <prvCheckForValidListAndQueue+0x60>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d120      	bne.n	8005c80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c3e:	4814      	ldr	r0, [pc, #80]	@ (8005c90 <prvCheckForValidListAndQueue+0x64>)
 8005c40:	f7fd ff32 	bl	8003aa8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c44:	4813      	ldr	r0, [pc, #76]	@ (8005c94 <prvCheckForValidListAndQueue+0x68>)
 8005c46:	f7fd ff2f 	bl	8003aa8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c4a:	4b13      	ldr	r3, [pc, #76]	@ (8005c98 <prvCheckForValidListAndQueue+0x6c>)
 8005c4c:	4a10      	ldr	r2, [pc, #64]	@ (8005c90 <prvCheckForValidListAndQueue+0x64>)
 8005c4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c50:	4b12      	ldr	r3, [pc, #72]	@ (8005c9c <prvCheckForValidListAndQueue+0x70>)
 8005c52:	4a10      	ldr	r2, [pc, #64]	@ (8005c94 <prvCheckForValidListAndQueue+0x68>)
 8005c54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c56:	2300      	movs	r3, #0
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	4b11      	ldr	r3, [pc, #68]	@ (8005ca0 <prvCheckForValidListAndQueue+0x74>)
 8005c5c:	4a11      	ldr	r2, [pc, #68]	@ (8005ca4 <prvCheckForValidListAndQueue+0x78>)
 8005c5e:	2110      	movs	r1, #16
 8005c60:	200a      	movs	r0, #10
 8005c62:	f7fe f83f 	bl	8003ce4 <xQueueGenericCreateStatic>
 8005c66:	4603      	mov	r3, r0
 8005c68:	4a08      	ldr	r2, [pc, #32]	@ (8005c8c <prvCheckForValidListAndQueue+0x60>)
 8005c6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005c6c:	4b07      	ldr	r3, [pc, #28]	@ (8005c8c <prvCheckForValidListAndQueue+0x60>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d005      	beq.n	8005c80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c74:	4b05      	ldr	r3, [pc, #20]	@ (8005c8c <prvCheckForValidListAndQueue+0x60>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	490b      	ldr	r1, [pc, #44]	@ (8005ca8 <prvCheckForValidListAndQueue+0x7c>)
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fe fca0 	bl	80045c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c80:	f000 f974 	bl	8005f6c <vPortExitCritical>
}
 8005c84:	bf00      	nop
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20001238 	.word	0x20001238
 8005c90:	20001208 	.word	0x20001208
 8005c94:	2000121c 	.word	0x2000121c
 8005c98:	20001230 	.word	0x20001230
 8005c9c:	20001234 	.word	0x20001234
 8005ca0:	200012e4 	.word	0x200012e4
 8005ca4:	20001244 	.word	0x20001244
 8005ca8:	0800ae48 	.word	0x0800ae48

08005cac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3b04      	subs	r3, #4
 8005cbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3b04      	subs	r3, #4
 8005cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f023 0201 	bic.w	r2, r3, #1
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	3b04      	subs	r3, #4
 8005cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8005d10 <pxPortInitialiseStack+0x64>)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3b14      	subs	r3, #20
 8005ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3b04      	subs	r3, #4
 8005cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f06f 0202 	mvn.w	r2, #2
 8005cfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	3b20      	subs	r3, #32
 8005d00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d02:	68fb      	ldr	r3, [r7, #12]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	08005d15 	.word	0x08005d15

08005d14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d1e:	4b13      	ldr	r3, [pc, #76]	@ (8005d6c <prvTaskExitError+0x58>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d26:	d00b      	beq.n	8005d40 <prvTaskExitError+0x2c>
	__asm volatile
 8005d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	60fb      	str	r3, [r7, #12]
}
 8005d3a:	bf00      	nop
 8005d3c:	bf00      	nop
 8005d3e:	e7fd      	b.n	8005d3c <prvTaskExitError+0x28>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	60bb      	str	r3, [r7, #8]
}
 8005d52:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d54:	bf00      	nop
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0fc      	beq.n	8005d56 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d5c:	bf00      	nop
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000008 	.word	0x20000008

08005d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d70:	4b07      	ldr	r3, [pc, #28]	@ (8005d90 <pxCurrentTCBConst2>)
 8005d72:	6819      	ldr	r1, [r3, #0]
 8005d74:	6808      	ldr	r0, [r1, #0]
 8005d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7a:	f380 8809 	msr	PSP, r0
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f04f 0000 	mov.w	r0, #0
 8005d86:	f380 8811 	msr	BASEPRI, r0
 8005d8a:	4770      	bx	lr
 8005d8c:	f3af 8000 	nop.w

08005d90 <pxCurrentTCBConst2>:
 8005d90:	20000d08 	.word	0x20000d08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop

08005d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d98:	4808      	ldr	r0, [pc, #32]	@ (8005dbc <prvPortStartFirstTask+0x24>)
 8005d9a:	6800      	ldr	r0, [r0, #0]
 8005d9c:	6800      	ldr	r0, [r0, #0]
 8005d9e:	f380 8808 	msr	MSP, r0
 8005da2:	f04f 0000 	mov.w	r0, #0
 8005da6:	f380 8814 	msr	CONTROL, r0
 8005daa:	b662      	cpsie	i
 8005dac:	b661      	cpsie	f
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	df00      	svc	0
 8005db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005dba:	bf00      	nop
 8005dbc:	e000ed08 	.word	0xe000ed08

08005dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005dc6:	4b47      	ldr	r3, [pc, #284]	@ (8005ee4 <xPortStartScheduler+0x124>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a47      	ldr	r2, [pc, #284]	@ (8005ee8 <xPortStartScheduler+0x128>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d10b      	bne.n	8005de8 <xPortStartScheduler+0x28>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	613b      	str	r3, [r7, #16]
}
 8005de2:	bf00      	nop
 8005de4:	bf00      	nop
 8005de6:	e7fd      	b.n	8005de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005de8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ee4 <xPortStartScheduler+0x124>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a3f      	ldr	r2, [pc, #252]	@ (8005eec <xPortStartScheduler+0x12c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d10b      	bne.n	8005e0a <xPortStartScheduler+0x4a>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	60fb      	str	r3, [r7, #12]
}
 8005e04:	bf00      	nop
 8005e06:	bf00      	nop
 8005e08:	e7fd      	b.n	8005e06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e0a:	4b39      	ldr	r3, [pc, #228]	@ (8005ef0 <xPortStartScheduler+0x130>)
 8005e0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	22ff      	movs	r2, #255	@ 0xff
 8005e1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	4b31      	ldr	r3, [pc, #196]	@ (8005ef4 <xPortStartScheduler+0x134>)
 8005e30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e32:	4b31      	ldr	r3, [pc, #196]	@ (8005ef8 <xPortStartScheduler+0x138>)
 8005e34:	2207      	movs	r2, #7
 8005e36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e38:	e009      	b.n	8005e4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8005ef8 <xPortStartScheduler+0x138>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	4a2d      	ldr	r2, [pc, #180]	@ (8005ef8 <xPortStartScheduler+0x138>)
 8005e42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e4e:	78fb      	ldrb	r3, [r7, #3]
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e56:	2b80      	cmp	r3, #128	@ 0x80
 8005e58:	d0ef      	beq.n	8005e3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e5a:	4b27      	ldr	r3, [pc, #156]	@ (8005ef8 <xPortStartScheduler+0x138>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f1c3 0307 	rsb	r3, r3, #7
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d00b      	beq.n	8005e7e <xPortStartScheduler+0xbe>
	__asm volatile
 8005e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	60bb      	str	r3, [r7, #8]
}
 8005e78:	bf00      	nop
 8005e7a:	bf00      	nop
 8005e7c:	e7fd      	b.n	8005e7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ef8 <xPortStartScheduler+0x138>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	021b      	lsls	r3, r3, #8
 8005e84:	4a1c      	ldr	r2, [pc, #112]	@ (8005ef8 <xPortStartScheduler+0x138>)
 8005e86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e88:	4b1b      	ldr	r3, [pc, #108]	@ (8005ef8 <xPortStartScheduler+0x138>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e90:	4a19      	ldr	r2, [pc, #100]	@ (8005ef8 <xPortStartScheduler+0x138>)
 8005e92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e9c:	4b17      	ldr	r3, [pc, #92]	@ (8005efc <xPortStartScheduler+0x13c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a16      	ldr	r2, [pc, #88]	@ (8005efc <xPortStartScheduler+0x13c>)
 8005ea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005ea6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ea8:	4b14      	ldr	r3, [pc, #80]	@ (8005efc <xPortStartScheduler+0x13c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a13      	ldr	r2, [pc, #76]	@ (8005efc <xPortStartScheduler+0x13c>)
 8005eae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005eb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005eb4:	f000 f8da 	bl	800606c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005eb8:	4b11      	ldr	r3, [pc, #68]	@ (8005f00 <xPortStartScheduler+0x140>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ebe:	f000 f8f9 	bl	80060b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ec2:	4b10      	ldr	r3, [pc, #64]	@ (8005f04 <xPortStartScheduler+0x144>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8005f04 <xPortStartScheduler+0x144>)
 8005ec8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005ecc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ece:	f7ff ff63 	bl	8005d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ed2:	f7fe ff77 	bl	8004dc4 <vTaskSwitchContext>
	prvTaskExitError();
 8005ed6:	f7ff ff1d 	bl	8005d14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	e000ed00 	.word	0xe000ed00
 8005ee8:	410fc271 	.word	0x410fc271
 8005eec:	410fc270 	.word	0x410fc270
 8005ef0:	e000e400 	.word	0xe000e400
 8005ef4:	20001334 	.word	0x20001334
 8005ef8:	20001338 	.word	0x20001338
 8005efc:	e000ed20 	.word	0xe000ed20
 8005f00:	20000008 	.word	0x20000008
 8005f04:	e000ef34 	.word	0xe000ef34

08005f08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	607b      	str	r3, [r7, #4]
}
 8005f20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f22:	4b10      	ldr	r3, [pc, #64]	@ (8005f64 <vPortEnterCritical+0x5c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3301      	adds	r3, #1
 8005f28:	4a0e      	ldr	r2, [pc, #56]	@ (8005f64 <vPortEnterCritical+0x5c>)
 8005f2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f64 <vPortEnterCritical+0x5c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d110      	bne.n	8005f56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f34:	4b0c      	ldr	r3, [pc, #48]	@ (8005f68 <vPortEnterCritical+0x60>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00b      	beq.n	8005f56 <vPortEnterCritical+0x4e>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	603b      	str	r3, [r7, #0]
}
 8005f50:	bf00      	nop
 8005f52:	bf00      	nop
 8005f54:	e7fd      	b.n	8005f52 <vPortEnterCritical+0x4a>
	}
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	20000008 	.word	0x20000008
 8005f68:	e000ed04 	.word	0xe000ed04

08005f6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f72:	4b12      	ldr	r3, [pc, #72]	@ (8005fbc <vPortExitCritical+0x50>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10b      	bne.n	8005f92 <vPortExitCritical+0x26>
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	607b      	str	r3, [r7, #4]
}
 8005f8c:	bf00      	nop
 8005f8e:	bf00      	nop
 8005f90:	e7fd      	b.n	8005f8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f92:	4b0a      	ldr	r3, [pc, #40]	@ (8005fbc <vPortExitCritical+0x50>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	4a08      	ldr	r2, [pc, #32]	@ (8005fbc <vPortExitCritical+0x50>)
 8005f9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f9c:	4b07      	ldr	r3, [pc, #28]	@ (8005fbc <vPortExitCritical+0x50>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d105      	bne.n	8005fb0 <vPortExitCritical+0x44>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	f383 8811 	msr	BASEPRI, r3
}
 8005fae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	20000008 	.word	0x20000008

08005fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fc0:	f3ef 8009 	mrs	r0, PSP
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	4b15      	ldr	r3, [pc, #84]	@ (8006020 <pxCurrentTCBConst>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	f01e 0f10 	tst.w	lr, #16
 8005fd0:	bf08      	it	eq
 8005fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fda:	6010      	str	r0, [r2, #0]
 8005fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005fe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005fe4:	f380 8811 	msr	BASEPRI, r0
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f7fe fee8 	bl	8004dc4 <vTaskSwitchContext>
 8005ff4:	f04f 0000 	mov.w	r0, #0
 8005ff8:	f380 8811 	msr	BASEPRI, r0
 8005ffc:	bc09      	pop	{r0, r3}
 8005ffe:	6819      	ldr	r1, [r3, #0]
 8006000:	6808      	ldr	r0, [r1, #0]
 8006002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006006:	f01e 0f10 	tst.w	lr, #16
 800600a:	bf08      	it	eq
 800600c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006010:	f380 8809 	msr	PSP, r0
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	f3af 8000 	nop.w

08006020 <pxCurrentTCBConst>:
 8006020:	20000d08 	.word	0x20000d08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop

08006028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	607b      	str	r3, [r7, #4]
}
 8006040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006042:	f7fe fe05 	bl	8004c50 <xTaskIncrementTick>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800604c:	4b06      	ldr	r3, [pc, #24]	@ (8006068 <xPortSysTickHandler+0x40>)
 800604e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	2300      	movs	r3, #0
 8006056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	f383 8811 	msr	BASEPRI, r3
}
 800605e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006060:	bf00      	nop
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006070:	4b0b      	ldr	r3, [pc, #44]	@ (80060a0 <vPortSetupTimerInterrupt+0x34>)
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006076:	4b0b      	ldr	r3, [pc, #44]	@ (80060a4 <vPortSetupTimerInterrupt+0x38>)
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800607c:	4b0a      	ldr	r3, [pc, #40]	@ (80060a8 <vPortSetupTimerInterrupt+0x3c>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a0a      	ldr	r2, [pc, #40]	@ (80060ac <vPortSetupTimerInterrupt+0x40>)
 8006082:	fba2 2303 	umull	r2, r3, r2, r3
 8006086:	099b      	lsrs	r3, r3, #6
 8006088:	4a09      	ldr	r2, [pc, #36]	@ (80060b0 <vPortSetupTimerInterrupt+0x44>)
 800608a:	3b01      	subs	r3, #1
 800608c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800608e:	4b04      	ldr	r3, [pc, #16]	@ (80060a0 <vPortSetupTimerInterrupt+0x34>)
 8006090:	2207      	movs	r2, #7
 8006092:	601a      	str	r2, [r3, #0]
}
 8006094:	bf00      	nop
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	e000e010 	.word	0xe000e010
 80060a4:	e000e018 	.word	0xe000e018
 80060a8:	20000000 	.word	0x20000000
 80060ac:	10624dd3 	.word	0x10624dd3
 80060b0:	e000e014 	.word	0xe000e014

080060b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80060c4 <vPortEnableVFP+0x10>
 80060b8:	6801      	ldr	r1, [r0, #0]
 80060ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80060be:	6001      	str	r1, [r0, #0]
 80060c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060c2:	bf00      	nop
 80060c4:	e000ed88 	.word	0xe000ed88

080060c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060ce:	f3ef 8305 	mrs	r3, IPSR
 80060d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b0f      	cmp	r3, #15
 80060d8:	d915      	bls.n	8006106 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060da:	4a18      	ldr	r2, [pc, #96]	@ (800613c <vPortValidateInterruptPriority+0x74>)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4413      	add	r3, r2
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80060e4:	4b16      	ldr	r3, [pc, #88]	@ (8006140 <vPortValidateInterruptPriority+0x78>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	7afa      	ldrb	r2, [r7, #11]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d20b      	bcs.n	8006106 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	607b      	str	r3, [r7, #4]
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	e7fd      	b.n	8006102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006106:	4b0f      	ldr	r3, [pc, #60]	@ (8006144 <vPortValidateInterruptPriority+0x7c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800610e:	4b0e      	ldr	r3, [pc, #56]	@ (8006148 <vPortValidateInterruptPriority+0x80>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	429a      	cmp	r2, r3
 8006114:	d90b      	bls.n	800612e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	603b      	str	r3, [r7, #0]
}
 8006128:	bf00      	nop
 800612a:	bf00      	nop
 800612c:	e7fd      	b.n	800612a <vPortValidateInterruptPriority+0x62>
	}
 800612e:	bf00      	nop
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	e000e3f0 	.word	0xe000e3f0
 8006140:	20001334 	.word	0x20001334
 8006144:	e000ed0c 	.word	0xe000ed0c
 8006148:	20001338 	.word	0x20001338

0800614c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08a      	sub	sp, #40	@ 0x28
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006154:	2300      	movs	r3, #0
 8006156:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006158:	f7fe fcbe 	bl	8004ad8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800615c:	4b5c      	ldr	r3, [pc, #368]	@ (80062d0 <pvPortMalloc+0x184>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006164:	f000 f924 	bl	80063b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006168:	4b5a      	ldr	r3, [pc, #360]	@ (80062d4 <pvPortMalloc+0x188>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4013      	ands	r3, r2
 8006170:	2b00      	cmp	r3, #0
 8006172:	f040 8095 	bne.w	80062a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01e      	beq.n	80061ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800617c:	2208      	movs	r2, #8
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4413      	add	r3, r2
 8006182:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	2b00      	cmp	r3, #0
 800618c:	d015      	beq.n	80061ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f023 0307 	bic.w	r3, r3, #7
 8006194:	3308      	adds	r3, #8
 8006196:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f003 0307 	and.w	r3, r3, #7
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00b      	beq.n	80061ba <pvPortMalloc+0x6e>
	__asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	617b      	str	r3, [r7, #20]
}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop
 80061b8:	e7fd      	b.n	80061b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d06f      	beq.n	80062a0 <pvPortMalloc+0x154>
 80061c0:	4b45      	ldr	r3, [pc, #276]	@ (80062d8 <pvPortMalloc+0x18c>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d86a      	bhi.n	80062a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061ca:	4b44      	ldr	r3, [pc, #272]	@ (80062dc <pvPortMalloc+0x190>)
 80061cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061ce:	4b43      	ldr	r3, [pc, #268]	@ (80062dc <pvPortMalloc+0x190>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061d4:	e004      	b.n	80061e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d903      	bls.n	80061f2 <pvPortMalloc+0xa6>
 80061ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1f1      	bne.n	80061d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061f2:	4b37      	ldr	r3, [pc, #220]	@ (80062d0 <pvPortMalloc+0x184>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d051      	beq.n	80062a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2208      	movs	r2, #8
 8006202:	4413      	add	r3, r2
 8006204:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	1ad2      	subs	r2, r2, r3
 8006216:	2308      	movs	r3, #8
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	429a      	cmp	r2, r3
 800621c:	d920      	bls.n	8006260 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800621e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4413      	add	r3, r2
 8006224:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00b      	beq.n	8006248 <pvPortMalloc+0xfc>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	613b      	str	r3, [r7, #16]
}
 8006242:	bf00      	nop
 8006244:	bf00      	nop
 8006246:	e7fd      	b.n	8006244 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	1ad2      	subs	r2, r2, r3
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800625a:	69b8      	ldr	r0, [r7, #24]
 800625c:	f000 f90a 	bl	8006474 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006260:	4b1d      	ldr	r3, [pc, #116]	@ (80062d8 <pvPortMalloc+0x18c>)
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	4a1b      	ldr	r2, [pc, #108]	@ (80062d8 <pvPortMalloc+0x18c>)
 800626c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800626e:	4b1a      	ldr	r3, [pc, #104]	@ (80062d8 <pvPortMalloc+0x18c>)
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	4b1b      	ldr	r3, [pc, #108]	@ (80062e0 <pvPortMalloc+0x194>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d203      	bcs.n	8006282 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800627a:	4b17      	ldr	r3, [pc, #92]	@ (80062d8 <pvPortMalloc+0x18c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a18      	ldr	r2, [pc, #96]	@ (80062e0 <pvPortMalloc+0x194>)
 8006280:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	4b13      	ldr	r3, [pc, #76]	@ (80062d4 <pvPortMalloc+0x188>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	431a      	orrs	r2, r3
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006296:	4b13      	ldr	r3, [pc, #76]	@ (80062e4 <pvPortMalloc+0x198>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3301      	adds	r3, #1
 800629c:	4a11      	ldr	r2, [pc, #68]	@ (80062e4 <pvPortMalloc+0x198>)
 800629e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062a0:	f7fe fc28 	bl	8004af4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00b      	beq.n	80062c6 <pvPortMalloc+0x17a>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	60fb      	str	r3, [r7, #12]
}
 80062c0:	bf00      	nop
 80062c2:	bf00      	nop
 80062c4:	e7fd      	b.n	80062c2 <pvPortMalloc+0x176>
	return pvReturn;
 80062c6:	69fb      	ldr	r3, [r7, #28]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3728      	adds	r7, #40	@ 0x28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20004f44 	.word	0x20004f44
 80062d4:	20004f58 	.word	0x20004f58
 80062d8:	20004f48 	.word	0x20004f48
 80062dc:	20004f3c 	.word	0x20004f3c
 80062e0:	20004f4c 	.word	0x20004f4c
 80062e4:	20004f50 	.word	0x20004f50

080062e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d04f      	beq.n	800639a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062fa:	2308      	movs	r3, #8
 80062fc:	425b      	negs	r3, r3
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4413      	add	r3, r2
 8006302:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	4b25      	ldr	r3, [pc, #148]	@ (80063a4 <vPortFree+0xbc>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4013      	ands	r3, r2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10b      	bne.n	800632e <vPortFree+0x46>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	60fb      	str	r3, [r7, #12]
}
 8006328:	bf00      	nop
 800632a:	bf00      	nop
 800632c:	e7fd      	b.n	800632a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00b      	beq.n	800634e <vPortFree+0x66>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	60bb      	str	r3, [r7, #8]
}
 8006348:	bf00      	nop
 800634a:	bf00      	nop
 800634c:	e7fd      	b.n	800634a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	4b14      	ldr	r3, [pc, #80]	@ (80063a4 <vPortFree+0xbc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4013      	ands	r3, r2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d01e      	beq.n	800639a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d11a      	bne.n	800639a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	4b0e      	ldr	r3, [pc, #56]	@ (80063a4 <vPortFree+0xbc>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	43db      	mvns	r3, r3
 800636e:	401a      	ands	r2, r3
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006374:	f7fe fbb0 	bl	8004ad8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	4b0a      	ldr	r3, [pc, #40]	@ (80063a8 <vPortFree+0xc0>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4413      	add	r3, r2
 8006382:	4a09      	ldr	r2, [pc, #36]	@ (80063a8 <vPortFree+0xc0>)
 8006384:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006386:	6938      	ldr	r0, [r7, #16]
 8006388:	f000 f874 	bl	8006474 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800638c:	4b07      	ldr	r3, [pc, #28]	@ (80063ac <vPortFree+0xc4>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3301      	adds	r3, #1
 8006392:	4a06      	ldr	r2, [pc, #24]	@ (80063ac <vPortFree+0xc4>)
 8006394:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006396:	f7fe fbad 	bl	8004af4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800639a:	bf00      	nop
 800639c:	3718      	adds	r7, #24
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20004f58 	.word	0x20004f58
 80063a8:	20004f48 	.word	0x20004f48
 80063ac:	20004f54 	.word	0x20004f54

080063b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80063ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063bc:	4b27      	ldr	r3, [pc, #156]	@ (800645c <prvHeapInit+0xac>)
 80063be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00c      	beq.n	80063e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3307      	adds	r3, #7
 80063ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0307 	bic.w	r3, r3, #7
 80063d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	4a1f      	ldr	r2, [pc, #124]	@ (800645c <prvHeapInit+0xac>)
 80063e0:	4413      	add	r3, r2
 80063e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006460 <prvHeapInit+0xb0>)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063ee:	4b1c      	ldr	r3, [pc, #112]	@ (8006460 <prvHeapInit+0xb0>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	4413      	add	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063fc:	2208      	movs	r2, #8
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	1a9b      	subs	r3, r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0307 	bic.w	r3, r3, #7
 800640a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4a15      	ldr	r2, [pc, #84]	@ (8006464 <prvHeapInit+0xb4>)
 8006410:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006412:	4b14      	ldr	r3, [pc, #80]	@ (8006464 <prvHeapInit+0xb4>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2200      	movs	r2, #0
 8006418:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800641a:	4b12      	ldr	r3, [pc, #72]	@ (8006464 <prvHeapInit+0xb4>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2200      	movs	r2, #0
 8006420:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	1ad2      	subs	r2, r2, r3
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006430:	4b0c      	ldr	r3, [pc, #48]	@ (8006464 <prvHeapInit+0xb4>)
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	4a0a      	ldr	r2, [pc, #40]	@ (8006468 <prvHeapInit+0xb8>)
 800643e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	4a09      	ldr	r2, [pc, #36]	@ (800646c <prvHeapInit+0xbc>)
 8006446:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006448:	4b09      	ldr	r3, [pc, #36]	@ (8006470 <prvHeapInit+0xc0>)
 800644a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800644e:	601a      	str	r2, [r3, #0]
}
 8006450:	bf00      	nop
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	2000133c 	.word	0x2000133c
 8006460:	20004f3c 	.word	0x20004f3c
 8006464:	20004f44 	.word	0x20004f44
 8006468:	20004f4c 	.word	0x20004f4c
 800646c:	20004f48 	.word	0x20004f48
 8006470:	20004f58 	.word	0x20004f58

08006474 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800647c:	4b28      	ldr	r3, [pc, #160]	@ (8006520 <prvInsertBlockIntoFreeList+0xac>)
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	e002      	b.n	8006488 <prvInsertBlockIntoFreeList+0x14>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	429a      	cmp	r2, r3
 8006490:	d8f7      	bhi.n	8006482 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	4413      	add	r3, r2
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d108      	bne.n	80064b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	441a      	add	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	441a      	add	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d118      	bne.n	80064fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	4b15      	ldr	r3, [pc, #84]	@ (8006524 <prvInsertBlockIntoFreeList+0xb0>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d00d      	beq.n	80064f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	441a      	add	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	e008      	b.n	8006504 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006524 <prvInsertBlockIntoFreeList+0xb0>)
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	e003      	b.n	8006504 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	429a      	cmp	r2, r3
 800650a:	d002      	beq.n	8006512 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006512:	bf00      	nop
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	20004f3c 	.word	0x20004f3c
 8006524:	20004f44 	.word	0x20004f44

08006528 <atof>:
 8006528:	2100      	movs	r1, #0
 800652a:	f000 be0f 	b.w	800714c <strtod>

0800652e <atoi>:
 800652e:	220a      	movs	r2, #10
 8006530:	2100      	movs	r1, #0
 8006532:	f000 be93 	b.w	800725c <strtol>

08006536 <sulp>:
 8006536:	b570      	push	{r4, r5, r6, lr}
 8006538:	4604      	mov	r4, r0
 800653a:	460d      	mov	r5, r1
 800653c:	ec45 4b10 	vmov	d0, r4, r5
 8006540:	4616      	mov	r6, r2
 8006542:	f003 fdb1 	bl	800a0a8 <__ulp>
 8006546:	ec51 0b10 	vmov	r0, r1, d0
 800654a:	b17e      	cbz	r6, 800656c <sulp+0x36>
 800654c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006550:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006554:	2b00      	cmp	r3, #0
 8006556:	dd09      	ble.n	800656c <sulp+0x36>
 8006558:	051b      	lsls	r3, r3, #20
 800655a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800655e:	2400      	movs	r4, #0
 8006560:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006564:	4622      	mov	r2, r4
 8006566:	462b      	mov	r3, r5
 8006568:	f7fa f856 	bl	8000618 <__aeabi_dmul>
 800656c:	ec41 0b10 	vmov	d0, r0, r1
 8006570:	bd70      	pop	{r4, r5, r6, pc}
 8006572:	0000      	movs	r0, r0
 8006574:	0000      	movs	r0, r0
	...

08006578 <_strtod_l>:
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	b09f      	sub	sp, #124	@ 0x7c
 800657e:	460c      	mov	r4, r1
 8006580:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006582:	2200      	movs	r2, #0
 8006584:	921a      	str	r2, [sp, #104]	@ 0x68
 8006586:	9005      	str	r0, [sp, #20]
 8006588:	f04f 0a00 	mov.w	sl, #0
 800658c:	f04f 0b00 	mov.w	fp, #0
 8006590:	460a      	mov	r2, r1
 8006592:	9219      	str	r2, [sp, #100]	@ 0x64
 8006594:	7811      	ldrb	r1, [r2, #0]
 8006596:	292b      	cmp	r1, #43	@ 0x2b
 8006598:	d04a      	beq.n	8006630 <_strtod_l+0xb8>
 800659a:	d838      	bhi.n	800660e <_strtod_l+0x96>
 800659c:	290d      	cmp	r1, #13
 800659e:	d832      	bhi.n	8006606 <_strtod_l+0x8e>
 80065a0:	2908      	cmp	r1, #8
 80065a2:	d832      	bhi.n	800660a <_strtod_l+0x92>
 80065a4:	2900      	cmp	r1, #0
 80065a6:	d03b      	beq.n	8006620 <_strtod_l+0xa8>
 80065a8:	2200      	movs	r2, #0
 80065aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80065ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80065ae:	782a      	ldrb	r2, [r5, #0]
 80065b0:	2a30      	cmp	r2, #48	@ 0x30
 80065b2:	f040 80b3 	bne.w	800671c <_strtod_l+0x1a4>
 80065b6:	786a      	ldrb	r2, [r5, #1]
 80065b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80065bc:	2a58      	cmp	r2, #88	@ 0x58
 80065be:	d16e      	bne.n	800669e <_strtod_l+0x126>
 80065c0:	9302      	str	r3, [sp, #8]
 80065c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065c4:	9301      	str	r3, [sp, #4]
 80065c6:	ab1a      	add	r3, sp, #104	@ 0x68
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	4a8e      	ldr	r2, [pc, #568]	@ (8006804 <_strtod_l+0x28c>)
 80065cc:	9805      	ldr	r0, [sp, #20]
 80065ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80065d0:	a919      	add	r1, sp, #100	@ 0x64
 80065d2:	f002 fe5b 	bl	800928c <__gethex>
 80065d6:	f010 060f 	ands.w	r6, r0, #15
 80065da:	4604      	mov	r4, r0
 80065dc:	d005      	beq.n	80065ea <_strtod_l+0x72>
 80065de:	2e06      	cmp	r6, #6
 80065e0:	d128      	bne.n	8006634 <_strtod_l+0xbc>
 80065e2:	3501      	adds	r5, #1
 80065e4:	2300      	movs	r3, #0
 80065e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80065e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f040 858e 	bne.w	800710e <_strtod_l+0xb96>
 80065f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065f4:	b1cb      	cbz	r3, 800662a <_strtod_l+0xb2>
 80065f6:	4652      	mov	r2, sl
 80065f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80065fc:	ec43 2b10 	vmov	d0, r2, r3
 8006600:	b01f      	add	sp, #124	@ 0x7c
 8006602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006606:	2920      	cmp	r1, #32
 8006608:	d1ce      	bne.n	80065a8 <_strtod_l+0x30>
 800660a:	3201      	adds	r2, #1
 800660c:	e7c1      	b.n	8006592 <_strtod_l+0x1a>
 800660e:	292d      	cmp	r1, #45	@ 0x2d
 8006610:	d1ca      	bne.n	80065a8 <_strtod_l+0x30>
 8006612:	2101      	movs	r1, #1
 8006614:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006616:	1c51      	adds	r1, r2, #1
 8006618:	9119      	str	r1, [sp, #100]	@ 0x64
 800661a:	7852      	ldrb	r2, [r2, #1]
 800661c:	2a00      	cmp	r2, #0
 800661e:	d1c5      	bne.n	80065ac <_strtod_l+0x34>
 8006620:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006622:	9419      	str	r4, [sp, #100]	@ 0x64
 8006624:	2b00      	cmp	r3, #0
 8006626:	f040 8570 	bne.w	800710a <_strtod_l+0xb92>
 800662a:	4652      	mov	r2, sl
 800662c:	465b      	mov	r3, fp
 800662e:	e7e5      	b.n	80065fc <_strtod_l+0x84>
 8006630:	2100      	movs	r1, #0
 8006632:	e7ef      	b.n	8006614 <_strtod_l+0x9c>
 8006634:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006636:	b13a      	cbz	r2, 8006648 <_strtod_l+0xd0>
 8006638:	2135      	movs	r1, #53	@ 0x35
 800663a:	a81c      	add	r0, sp, #112	@ 0x70
 800663c:	f003 fe2e 	bl	800a29c <__copybits>
 8006640:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006642:	9805      	ldr	r0, [sp, #20]
 8006644:	f003 f9fc 	bl	8009a40 <_Bfree>
 8006648:	3e01      	subs	r6, #1
 800664a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800664c:	2e04      	cmp	r6, #4
 800664e:	d806      	bhi.n	800665e <_strtod_l+0xe6>
 8006650:	e8df f006 	tbb	[pc, r6]
 8006654:	201d0314 	.word	0x201d0314
 8006658:	14          	.byte	0x14
 8006659:	00          	.byte	0x00
 800665a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800665e:	05e1      	lsls	r1, r4, #23
 8006660:	bf48      	it	mi
 8006662:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006666:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800666a:	0d1b      	lsrs	r3, r3, #20
 800666c:	051b      	lsls	r3, r3, #20
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1bb      	bne.n	80065ea <_strtod_l+0x72>
 8006672:	f001 fea5 	bl	80083c0 <__errno>
 8006676:	2322      	movs	r3, #34	@ 0x22
 8006678:	6003      	str	r3, [r0, #0]
 800667a:	e7b6      	b.n	80065ea <_strtod_l+0x72>
 800667c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006680:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006684:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006688:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800668c:	e7e7      	b.n	800665e <_strtod_l+0xe6>
 800668e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800680c <_strtod_l+0x294>
 8006692:	e7e4      	b.n	800665e <_strtod_l+0xe6>
 8006694:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006698:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800669c:	e7df      	b.n	800665e <_strtod_l+0xe6>
 800669e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80066a4:	785b      	ldrb	r3, [r3, #1]
 80066a6:	2b30      	cmp	r3, #48	@ 0x30
 80066a8:	d0f9      	beq.n	800669e <_strtod_l+0x126>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d09d      	beq.n	80065ea <_strtod_l+0x72>
 80066ae:	2301      	movs	r3, #1
 80066b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80066b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80066b6:	2300      	movs	r3, #0
 80066b8:	9308      	str	r3, [sp, #32]
 80066ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80066bc:	461f      	mov	r7, r3
 80066be:	220a      	movs	r2, #10
 80066c0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80066c2:	7805      	ldrb	r5, [r0, #0]
 80066c4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80066c8:	b2d9      	uxtb	r1, r3
 80066ca:	2909      	cmp	r1, #9
 80066cc:	d928      	bls.n	8006720 <_strtod_l+0x1a8>
 80066ce:	494e      	ldr	r1, [pc, #312]	@ (8006808 <_strtod_l+0x290>)
 80066d0:	2201      	movs	r2, #1
 80066d2:	f001 fd66 	bl	80081a2 <strncmp>
 80066d6:	2800      	cmp	r0, #0
 80066d8:	d032      	beq.n	8006740 <_strtod_l+0x1c8>
 80066da:	2000      	movs	r0, #0
 80066dc:	462a      	mov	r2, r5
 80066de:	4681      	mov	r9, r0
 80066e0:	463d      	mov	r5, r7
 80066e2:	4603      	mov	r3, r0
 80066e4:	2a65      	cmp	r2, #101	@ 0x65
 80066e6:	d001      	beq.n	80066ec <_strtod_l+0x174>
 80066e8:	2a45      	cmp	r2, #69	@ 0x45
 80066ea:	d114      	bne.n	8006716 <_strtod_l+0x19e>
 80066ec:	b91d      	cbnz	r5, 80066f6 <_strtod_l+0x17e>
 80066ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066f0:	4302      	orrs	r2, r0
 80066f2:	d095      	beq.n	8006620 <_strtod_l+0xa8>
 80066f4:	2500      	movs	r5, #0
 80066f6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80066f8:	1c62      	adds	r2, r4, #1
 80066fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80066fc:	7862      	ldrb	r2, [r4, #1]
 80066fe:	2a2b      	cmp	r2, #43	@ 0x2b
 8006700:	d077      	beq.n	80067f2 <_strtod_l+0x27a>
 8006702:	2a2d      	cmp	r2, #45	@ 0x2d
 8006704:	d07b      	beq.n	80067fe <_strtod_l+0x286>
 8006706:	f04f 0c00 	mov.w	ip, #0
 800670a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800670e:	2909      	cmp	r1, #9
 8006710:	f240 8082 	bls.w	8006818 <_strtod_l+0x2a0>
 8006714:	9419      	str	r4, [sp, #100]	@ 0x64
 8006716:	f04f 0800 	mov.w	r8, #0
 800671a:	e0a2      	b.n	8006862 <_strtod_l+0x2ea>
 800671c:	2300      	movs	r3, #0
 800671e:	e7c7      	b.n	80066b0 <_strtod_l+0x138>
 8006720:	2f08      	cmp	r7, #8
 8006722:	bfd5      	itete	le
 8006724:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006726:	9908      	ldrgt	r1, [sp, #32]
 8006728:	fb02 3301 	mlale	r3, r2, r1, r3
 800672c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006730:	f100 0001 	add.w	r0, r0, #1
 8006734:	bfd4      	ite	le
 8006736:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006738:	9308      	strgt	r3, [sp, #32]
 800673a:	3701      	adds	r7, #1
 800673c:	9019      	str	r0, [sp, #100]	@ 0x64
 800673e:	e7bf      	b.n	80066c0 <_strtod_l+0x148>
 8006740:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	9219      	str	r2, [sp, #100]	@ 0x64
 8006746:	785a      	ldrb	r2, [r3, #1]
 8006748:	b37f      	cbz	r7, 80067aa <_strtod_l+0x232>
 800674a:	4681      	mov	r9, r0
 800674c:	463d      	mov	r5, r7
 800674e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006752:	2b09      	cmp	r3, #9
 8006754:	d912      	bls.n	800677c <_strtod_l+0x204>
 8006756:	2301      	movs	r3, #1
 8006758:	e7c4      	b.n	80066e4 <_strtod_l+0x16c>
 800675a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006760:	785a      	ldrb	r2, [r3, #1]
 8006762:	3001      	adds	r0, #1
 8006764:	2a30      	cmp	r2, #48	@ 0x30
 8006766:	d0f8      	beq.n	800675a <_strtod_l+0x1e2>
 8006768:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800676c:	2b08      	cmp	r3, #8
 800676e:	f200 84d3 	bhi.w	8007118 <_strtod_l+0xba0>
 8006772:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006774:	930c      	str	r3, [sp, #48]	@ 0x30
 8006776:	4681      	mov	r9, r0
 8006778:	2000      	movs	r0, #0
 800677a:	4605      	mov	r5, r0
 800677c:	3a30      	subs	r2, #48	@ 0x30
 800677e:	f100 0301 	add.w	r3, r0, #1
 8006782:	d02a      	beq.n	80067da <_strtod_l+0x262>
 8006784:	4499      	add	r9, r3
 8006786:	eb00 0c05 	add.w	ip, r0, r5
 800678a:	462b      	mov	r3, r5
 800678c:	210a      	movs	r1, #10
 800678e:	4563      	cmp	r3, ip
 8006790:	d10d      	bne.n	80067ae <_strtod_l+0x236>
 8006792:	1c69      	adds	r1, r5, #1
 8006794:	4401      	add	r1, r0
 8006796:	4428      	add	r0, r5
 8006798:	2808      	cmp	r0, #8
 800679a:	dc16      	bgt.n	80067ca <_strtod_l+0x252>
 800679c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800679e:	230a      	movs	r3, #10
 80067a0:	fb03 2300 	mla	r3, r3, r0, r2
 80067a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80067a6:	2300      	movs	r3, #0
 80067a8:	e018      	b.n	80067dc <_strtod_l+0x264>
 80067aa:	4638      	mov	r0, r7
 80067ac:	e7da      	b.n	8006764 <_strtod_l+0x1ec>
 80067ae:	2b08      	cmp	r3, #8
 80067b0:	f103 0301 	add.w	r3, r3, #1
 80067b4:	dc03      	bgt.n	80067be <_strtod_l+0x246>
 80067b6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80067b8:	434e      	muls	r6, r1
 80067ba:	960a      	str	r6, [sp, #40]	@ 0x28
 80067bc:	e7e7      	b.n	800678e <_strtod_l+0x216>
 80067be:	2b10      	cmp	r3, #16
 80067c0:	bfde      	ittt	le
 80067c2:	9e08      	ldrle	r6, [sp, #32]
 80067c4:	434e      	mulle	r6, r1
 80067c6:	9608      	strle	r6, [sp, #32]
 80067c8:	e7e1      	b.n	800678e <_strtod_l+0x216>
 80067ca:	280f      	cmp	r0, #15
 80067cc:	dceb      	bgt.n	80067a6 <_strtod_l+0x22e>
 80067ce:	9808      	ldr	r0, [sp, #32]
 80067d0:	230a      	movs	r3, #10
 80067d2:	fb03 2300 	mla	r3, r3, r0, r2
 80067d6:	9308      	str	r3, [sp, #32]
 80067d8:	e7e5      	b.n	80067a6 <_strtod_l+0x22e>
 80067da:	4629      	mov	r1, r5
 80067dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80067de:	1c50      	adds	r0, r2, #1
 80067e0:	9019      	str	r0, [sp, #100]	@ 0x64
 80067e2:	7852      	ldrb	r2, [r2, #1]
 80067e4:	4618      	mov	r0, r3
 80067e6:	460d      	mov	r5, r1
 80067e8:	e7b1      	b.n	800674e <_strtod_l+0x1d6>
 80067ea:	f04f 0900 	mov.w	r9, #0
 80067ee:	2301      	movs	r3, #1
 80067f0:	e77d      	b.n	80066ee <_strtod_l+0x176>
 80067f2:	f04f 0c00 	mov.w	ip, #0
 80067f6:	1ca2      	adds	r2, r4, #2
 80067f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80067fa:	78a2      	ldrb	r2, [r4, #2]
 80067fc:	e785      	b.n	800670a <_strtod_l+0x192>
 80067fe:	f04f 0c01 	mov.w	ip, #1
 8006802:	e7f8      	b.n	80067f6 <_strtod_l+0x27e>
 8006804:	0800ae80 	.word	0x0800ae80
 8006808:	0800ae68 	.word	0x0800ae68
 800680c:	7ff00000 	.word	0x7ff00000
 8006810:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006812:	1c51      	adds	r1, r2, #1
 8006814:	9119      	str	r1, [sp, #100]	@ 0x64
 8006816:	7852      	ldrb	r2, [r2, #1]
 8006818:	2a30      	cmp	r2, #48	@ 0x30
 800681a:	d0f9      	beq.n	8006810 <_strtod_l+0x298>
 800681c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006820:	2908      	cmp	r1, #8
 8006822:	f63f af78 	bhi.w	8006716 <_strtod_l+0x19e>
 8006826:	3a30      	subs	r2, #48	@ 0x30
 8006828:	920e      	str	r2, [sp, #56]	@ 0x38
 800682a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800682c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800682e:	f04f 080a 	mov.w	r8, #10
 8006832:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006834:	1c56      	adds	r6, r2, #1
 8006836:	9619      	str	r6, [sp, #100]	@ 0x64
 8006838:	7852      	ldrb	r2, [r2, #1]
 800683a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800683e:	f1be 0f09 	cmp.w	lr, #9
 8006842:	d939      	bls.n	80068b8 <_strtod_l+0x340>
 8006844:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006846:	1a76      	subs	r6, r6, r1
 8006848:	2e08      	cmp	r6, #8
 800684a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800684e:	dc03      	bgt.n	8006858 <_strtod_l+0x2e0>
 8006850:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006852:	4588      	cmp	r8, r1
 8006854:	bfa8      	it	ge
 8006856:	4688      	movge	r8, r1
 8006858:	f1bc 0f00 	cmp.w	ip, #0
 800685c:	d001      	beq.n	8006862 <_strtod_l+0x2ea>
 800685e:	f1c8 0800 	rsb	r8, r8, #0
 8006862:	2d00      	cmp	r5, #0
 8006864:	d14e      	bne.n	8006904 <_strtod_l+0x38c>
 8006866:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006868:	4308      	orrs	r0, r1
 800686a:	f47f aebe 	bne.w	80065ea <_strtod_l+0x72>
 800686e:	2b00      	cmp	r3, #0
 8006870:	f47f aed6 	bne.w	8006620 <_strtod_l+0xa8>
 8006874:	2a69      	cmp	r2, #105	@ 0x69
 8006876:	d028      	beq.n	80068ca <_strtod_l+0x352>
 8006878:	dc25      	bgt.n	80068c6 <_strtod_l+0x34e>
 800687a:	2a49      	cmp	r2, #73	@ 0x49
 800687c:	d025      	beq.n	80068ca <_strtod_l+0x352>
 800687e:	2a4e      	cmp	r2, #78	@ 0x4e
 8006880:	f47f aece 	bne.w	8006620 <_strtod_l+0xa8>
 8006884:	499b      	ldr	r1, [pc, #620]	@ (8006af4 <_strtod_l+0x57c>)
 8006886:	a819      	add	r0, sp, #100	@ 0x64
 8006888:	f002 ff22 	bl	80096d0 <__match>
 800688c:	2800      	cmp	r0, #0
 800688e:	f43f aec7 	beq.w	8006620 <_strtod_l+0xa8>
 8006892:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b28      	cmp	r3, #40	@ 0x28
 8006898:	d12e      	bne.n	80068f8 <_strtod_l+0x380>
 800689a:	4997      	ldr	r1, [pc, #604]	@ (8006af8 <_strtod_l+0x580>)
 800689c:	aa1c      	add	r2, sp, #112	@ 0x70
 800689e:	a819      	add	r0, sp, #100	@ 0x64
 80068a0:	f002 ff2a 	bl	80096f8 <__hexnan>
 80068a4:	2805      	cmp	r0, #5
 80068a6:	d127      	bne.n	80068f8 <_strtod_l+0x380>
 80068a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80068aa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80068ae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80068b2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80068b6:	e698      	b.n	80065ea <_strtod_l+0x72>
 80068b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80068ba:	fb08 2101 	mla	r1, r8, r1, r2
 80068be:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80068c2:	920e      	str	r2, [sp, #56]	@ 0x38
 80068c4:	e7b5      	b.n	8006832 <_strtod_l+0x2ba>
 80068c6:	2a6e      	cmp	r2, #110	@ 0x6e
 80068c8:	e7da      	b.n	8006880 <_strtod_l+0x308>
 80068ca:	498c      	ldr	r1, [pc, #560]	@ (8006afc <_strtod_l+0x584>)
 80068cc:	a819      	add	r0, sp, #100	@ 0x64
 80068ce:	f002 feff 	bl	80096d0 <__match>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	f43f aea4 	beq.w	8006620 <_strtod_l+0xa8>
 80068d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068da:	4989      	ldr	r1, [pc, #548]	@ (8006b00 <_strtod_l+0x588>)
 80068dc:	3b01      	subs	r3, #1
 80068de:	a819      	add	r0, sp, #100	@ 0x64
 80068e0:	9319      	str	r3, [sp, #100]	@ 0x64
 80068e2:	f002 fef5 	bl	80096d0 <__match>
 80068e6:	b910      	cbnz	r0, 80068ee <_strtod_l+0x376>
 80068e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068ea:	3301      	adds	r3, #1
 80068ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80068ee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006b10 <_strtod_l+0x598>
 80068f2:	f04f 0a00 	mov.w	sl, #0
 80068f6:	e678      	b.n	80065ea <_strtod_l+0x72>
 80068f8:	4882      	ldr	r0, [pc, #520]	@ (8006b04 <_strtod_l+0x58c>)
 80068fa:	f001 fd9d 	bl	8008438 <nan>
 80068fe:	ec5b ab10 	vmov	sl, fp, d0
 8006902:	e672      	b.n	80065ea <_strtod_l+0x72>
 8006904:	eba8 0309 	sub.w	r3, r8, r9
 8006908:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800690a:	9309      	str	r3, [sp, #36]	@ 0x24
 800690c:	2f00      	cmp	r7, #0
 800690e:	bf08      	it	eq
 8006910:	462f      	moveq	r7, r5
 8006912:	2d10      	cmp	r5, #16
 8006914:	462c      	mov	r4, r5
 8006916:	bfa8      	it	ge
 8006918:	2410      	movge	r4, #16
 800691a:	f7f9 fe03 	bl	8000524 <__aeabi_ui2d>
 800691e:	2d09      	cmp	r5, #9
 8006920:	4682      	mov	sl, r0
 8006922:	468b      	mov	fp, r1
 8006924:	dc13      	bgt.n	800694e <_strtod_l+0x3d6>
 8006926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006928:	2b00      	cmp	r3, #0
 800692a:	f43f ae5e 	beq.w	80065ea <_strtod_l+0x72>
 800692e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006930:	dd78      	ble.n	8006a24 <_strtod_l+0x4ac>
 8006932:	2b16      	cmp	r3, #22
 8006934:	dc5f      	bgt.n	80069f6 <_strtod_l+0x47e>
 8006936:	4974      	ldr	r1, [pc, #464]	@ (8006b08 <_strtod_l+0x590>)
 8006938:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800693c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006940:	4652      	mov	r2, sl
 8006942:	465b      	mov	r3, fp
 8006944:	f7f9 fe68 	bl	8000618 <__aeabi_dmul>
 8006948:	4682      	mov	sl, r0
 800694a:	468b      	mov	fp, r1
 800694c:	e64d      	b.n	80065ea <_strtod_l+0x72>
 800694e:	4b6e      	ldr	r3, [pc, #440]	@ (8006b08 <_strtod_l+0x590>)
 8006950:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006954:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006958:	f7f9 fe5e 	bl	8000618 <__aeabi_dmul>
 800695c:	4682      	mov	sl, r0
 800695e:	9808      	ldr	r0, [sp, #32]
 8006960:	468b      	mov	fp, r1
 8006962:	f7f9 fddf 	bl	8000524 <__aeabi_ui2d>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	4650      	mov	r0, sl
 800696c:	4659      	mov	r1, fp
 800696e:	f7f9 fc9d 	bl	80002ac <__adddf3>
 8006972:	2d0f      	cmp	r5, #15
 8006974:	4682      	mov	sl, r0
 8006976:	468b      	mov	fp, r1
 8006978:	ddd5      	ble.n	8006926 <_strtod_l+0x3ae>
 800697a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800697c:	1b2c      	subs	r4, r5, r4
 800697e:	441c      	add	r4, r3
 8006980:	2c00      	cmp	r4, #0
 8006982:	f340 8096 	ble.w	8006ab2 <_strtod_l+0x53a>
 8006986:	f014 030f 	ands.w	r3, r4, #15
 800698a:	d00a      	beq.n	80069a2 <_strtod_l+0x42a>
 800698c:	495e      	ldr	r1, [pc, #376]	@ (8006b08 <_strtod_l+0x590>)
 800698e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006992:	4652      	mov	r2, sl
 8006994:	465b      	mov	r3, fp
 8006996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800699a:	f7f9 fe3d 	bl	8000618 <__aeabi_dmul>
 800699e:	4682      	mov	sl, r0
 80069a0:	468b      	mov	fp, r1
 80069a2:	f034 040f 	bics.w	r4, r4, #15
 80069a6:	d073      	beq.n	8006a90 <_strtod_l+0x518>
 80069a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80069ac:	dd48      	ble.n	8006a40 <_strtod_l+0x4c8>
 80069ae:	2400      	movs	r4, #0
 80069b0:	46a0      	mov	r8, r4
 80069b2:	940a      	str	r4, [sp, #40]	@ 0x28
 80069b4:	46a1      	mov	r9, r4
 80069b6:	9a05      	ldr	r2, [sp, #20]
 80069b8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006b10 <_strtod_l+0x598>
 80069bc:	2322      	movs	r3, #34	@ 0x22
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	f04f 0a00 	mov.w	sl, #0
 80069c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f43f ae0f 	beq.w	80065ea <_strtod_l+0x72>
 80069cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80069ce:	9805      	ldr	r0, [sp, #20]
 80069d0:	f003 f836 	bl	8009a40 <_Bfree>
 80069d4:	9805      	ldr	r0, [sp, #20]
 80069d6:	4649      	mov	r1, r9
 80069d8:	f003 f832 	bl	8009a40 <_Bfree>
 80069dc:	9805      	ldr	r0, [sp, #20]
 80069de:	4641      	mov	r1, r8
 80069e0:	f003 f82e 	bl	8009a40 <_Bfree>
 80069e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069e6:	9805      	ldr	r0, [sp, #20]
 80069e8:	f003 f82a 	bl	8009a40 <_Bfree>
 80069ec:	9805      	ldr	r0, [sp, #20]
 80069ee:	4621      	mov	r1, r4
 80069f0:	f003 f826 	bl	8009a40 <_Bfree>
 80069f4:	e5f9      	b.n	80065ea <_strtod_l+0x72>
 80069f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80069fc:	4293      	cmp	r3, r2
 80069fe:	dbbc      	blt.n	800697a <_strtod_l+0x402>
 8006a00:	4c41      	ldr	r4, [pc, #260]	@ (8006b08 <_strtod_l+0x590>)
 8006a02:	f1c5 050f 	rsb	r5, r5, #15
 8006a06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006a0a:	4652      	mov	r2, sl
 8006a0c:	465b      	mov	r3, fp
 8006a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a12:	f7f9 fe01 	bl	8000618 <__aeabi_dmul>
 8006a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a18:	1b5d      	subs	r5, r3, r5
 8006a1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006a1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a22:	e78f      	b.n	8006944 <_strtod_l+0x3cc>
 8006a24:	3316      	adds	r3, #22
 8006a26:	dba8      	blt.n	800697a <_strtod_l+0x402>
 8006a28:	4b37      	ldr	r3, [pc, #220]	@ (8006b08 <_strtod_l+0x590>)
 8006a2a:	eba9 0808 	sub.w	r8, r9, r8
 8006a2e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006a32:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006a36:	4650      	mov	r0, sl
 8006a38:	4659      	mov	r1, fp
 8006a3a:	f7f9 ff17 	bl	800086c <__aeabi_ddiv>
 8006a3e:	e783      	b.n	8006948 <_strtod_l+0x3d0>
 8006a40:	4b32      	ldr	r3, [pc, #200]	@ (8006b0c <_strtod_l+0x594>)
 8006a42:	9308      	str	r3, [sp, #32]
 8006a44:	2300      	movs	r3, #0
 8006a46:	1124      	asrs	r4, r4, #4
 8006a48:	4650      	mov	r0, sl
 8006a4a:	4659      	mov	r1, fp
 8006a4c:	461e      	mov	r6, r3
 8006a4e:	2c01      	cmp	r4, #1
 8006a50:	dc21      	bgt.n	8006a96 <_strtod_l+0x51e>
 8006a52:	b10b      	cbz	r3, 8006a58 <_strtod_l+0x4e0>
 8006a54:	4682      	mov	sl, r0
 8006a56:	468b      	mov	fp, r1
 8006a58:	492c      	ldr	r1, [pc, #176]	@ (8006b0c <_strtod_l+0x594>)
 8006a5a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006a5e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006a62:	4652      	mov	r2, sl
 8006a64:	465b      	mov	r3, fp
 8006a66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a6a:	f7f9 fdd5 	bl	8000618 <__aeabi_dmul>
 8006a6e:	4b28      	ldr	r3, [pc, #160]	@ (8006b10 <_strtod_l+0x598>)
 8006a70:	460a      	mov	r2, r1
 8006a72:	400b      	ands	r3, r1
 8006a74:	4927      	ldr	r1, [pc, #156]	@ (8006b14 <_strtod_l+0x59c>)
 8006a76:	428b      	cmp	r3, r1
 8006a78:	4682      	mov	sl, r0
 8006a7a:	d898      	bhi.n	80069ae <_strtod_l+0x436>
 8006a7c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006a80:	428b      	cmp	r3, r1
 8006a82:	bf86      	itte	hi
 8006a84:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006b18 <_strtod_l+0x5a0>
 8006a88:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8006a8c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006a90:	2300      	movs	r3, #0
 8006a92:	9308      	str	r3, [sp, #32]
 8006a94:	e07a      	b.n	8006b8c <_strtod_l+0x614>
 8006a96:	07e2      	lsls	r2, r4, #31
 8006a98:	d505      	bpl.n	8006aa6 <_strtod_l+0x52e>
 8006a9a:	9b08      	ldr	r3, [sp, #32]
 8006a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa0:	f7f9 fdba 	bl	8000618 <__aeabi_dmul>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	9a08      	ldr	r2, [sp, #32]
 8006aa8:	3208      	adds	r2, #8
 8006aaa:	3601      	adds	r6, #1
 8006aac:	1064      	asrs	r4, r4, #1
 8006aae:	9208      	str	r2, [sp, #32]
 8006ab0:	e7cd      	b.n	8006a4e <_strtod_l+0x4d6>
 8006ab2:	d0ed      	beq.n	8006a90 <_strtod_l+0x518>
 8006ab4:	4264      	negs	r4, r4
 8006ab6:	f014 020f 	ands.w	r2, r4, #15
 8006aba:	d00a      	beq.n	8006ad2 <_strtod_l+0x55a>
 8006abc:	4b12      	ldr	r3, [pc, #72]	@ (8006b08 <_strtod_l+0x590>)
 8006abe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ac2:	4650      	mov	r0, sl
 8006ac4:	4659      	mov	r1, fp
 8006ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aca:	f7f9 fecf 	bl	800086c <__aeabi_ddiv>
 8006ace:	4682      	mov	sl, r0
 8006ad0:	468b      	mov	fp, r1
 8006ad2:	1124      	asrs	r4, r4, #4
 8006ad4:	d0dc      	beq.n	8006a90 <_strtod_l+0x518>
 8006ad6:	2c1f      	cmp	r4, #31
 8006ad8:	dd20      	ble.n	8006b1c <_strtod_l+0x5a4>
 8006ada:	2400      	movs	r4, #0
 8006adc:	46a0      	mov	r8, r4
 8006ade:	940a      	str	r4, [sp, #40]	@ 0x28
 8006ae0:	46a1      	mov	r9, r4
 8006ae2:	9a05      	ldr	r2, [sp, #20]
 8006ae4:	2322      	movs	r3, #34	@ 0x22
 8006ae6:	f04f 0a00 	mov.w	sl, #0
 8006aea:	f04f 0b00 	mov.w	fp, #0
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	e768      	b.n	80069c4 <_strtod_l+0x44c>
 8006af2:	bf00      	nop
 8006af4:	0800afce 	.word	0x0800afce
 8006af8:	0800ae6c 	.word	0x0800ae6c
 8006afc:	0800afc6 	.word	0x0800afc6
 8006b00:	0800b0b2 	.word	0x0800b0b2
 8006b04:	0800b0ae 	.word	0x0800b0ae
 8006b08:	0800b218 	.word	0x0800b218
 8006b0c:	0800b1f0 	.word	0x0800b1f0
 8006b10:	7ff00000 	.word	0x7ff00000
 8006b14:	7ca00000 	.word	0x7ca00000
 8006b18:	7fefffff 	.word	0x7fefffff
 8006b1c:	f014 0310 	ands.w	r3, r4, #16
 8006b20:	bf18      	it	ne
 8006b22:	236a      	movne	r3, #106	@ 0x6a
 8006b24:	4ea9      	ldr	r6, [pc, #676]	@ (8006dcc <_strtod_l+0x854>)
 8006b26:	9308      	str	r3, [sp, #32]
 8006b28:	4650      	mov	r0, sl
 8006b2a:	4659      	mov	r1, fp
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	07e2      	lsls	r2, r4, #31
 8006b30:	d504      	bpl.n	8006b3c <_strtod_l+0x5c4>
 8006b32:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b36:	f7f9 fd6f 	bl	8000618 <__aeabi_dmul>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	1064      	asrs	r4, r4, #1
 8006b3e:	f106 0608 	add.w	r6, r6, #8
 8006b42:	d1f4      	bne.n	8006b2e <_strtod_l+0x5b6>
 8006b44:	b10b      	cbz	r3, 8006b4a <_strtod_l+0x5d2>
 8006b46:	4682      	mov	sl, r0
 8006b48:	468b      	mov	fp, r1
 8006b4a:	9b08      	ldr	r3, [sp, #32]
 8006b4c:	b1b3      	cbz	r3, 8006b7c <_strtod_l+0x604>
 8006b4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006b52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	4659      	mov	r1, fp
 8006b5a:	dd0f      	ble.n	8006b7c <_strtod_l+0x604>
 8006b5c:	2b1f      	cmp	r3, #31
 8006b5e:	dd55      	ble.n	8006c0c <_strtod_l+0x694>
 8006b60:	2b34      	cmp	r3, #52	@ 0x34
 8006b62:	bfde      	ittt	le
 8006b64:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8006b68:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006b6c:	4093      	lslle	r3, r2
 8006b6e:	f04f 0a00 	mov.w	sl, #0
 8006b72:	bfcc      	ite	gt
 8006b74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006b78:	ea03 0b01 	andle.w	fp, r3, r1
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	2300      	movs	r3, #0
 8006b80:	4650      	mov	r0, sl
 8006b82:	4659      	mov	r1, fp
 8006b84:	f7f9 ffb0 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	d1a6      	bne.n	8006ada <_strtod_l+0x562>
 8006b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006b92:	9805      	ldr	r0, [sp, #20]
 8006b94:	462b      	mov	r3, r5
 8006b96:	463a      	mov	r2, r7
 8006b98:	f002 ffba 	bl	8009b10 <__s2b>
 8006b9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	f43f af05 	beq.w	80069ae <_strtod_l+0x436>
 8006ba4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ba6:	2a00      	cmp	r2, #0
 8006ba8:	eba9 0308 	sub.w	r3, r9, r8
 8006bac:	bfa8      	it	ge
 8006bae:	2300      	movge	r3, #0
 8006bb0:	9312      	str	r3, [sp, #72]	@ 0x48
 8006bb2:	2400      	movs	r4, #0
 8006bb4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006bb8:	9316      	str	r3, [sp, #88]	@ 0x58
 8006bba:	46a0      	mov	r8, r4
 8006bbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bbe:	9805      	ldr	r0, [sp, #20]
 8006bc0:	6859      	ldr	r1, [r3, #4]
 8006bc2:	f002 fefd 	bl	80099c0 <_Balloc>
 8006bc6:	4681      	mov	r9, r0
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	f43f aef4 	beq.w	80069b6 <_strtod_l+0x43e>
 8006bce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bd0:	691a      	ldr	r2, [r3, #16]
 8006bd2:	3202      	adds	r2, #2
 8006bd4:	f103 010c 	add.w	r1, r3, #12
 8006bd8:	0092      	lsls	r2, r2, #2
 8006bda:	300c      	adds	r0, #12
 8006bdc:	f001 fc1d 	bl	800841a <memcpy>
 8006be0:	ec4b ab10 	vmov	d0, sl, fp
 8006be4:	9805      	ldr	r0, [sp, #20]
 8006be6:	aa1c      	add	r2, sp, #112	@ 0x70
 8006be8:	a91b      	add	r1, sp, #108	@ 0x6c
 8006bea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006bee:	f003 facb 	bl	800a188 <__d2b>
 8006bf2:	901a      	str	r0, [sp, #104]	@ 0x68
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	f43f aede 	beq.w	80069b6 <_strtod_l+0x43e>
 8006bfa:	9805      	ldr	r0, [sp, #20]
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	f003 f81d 	bl	8009c3c <__i2b>
 8006c02:	4680      	mov	r8, r0
 8006c04:	b948      	cbnz	r0, 8006c1a <_strtod_l+0x6a2>
 8006c06:	f04f 0800 	mov.w	r8, #0
 8006c0a:	e6d4      	b.n	80069b6 <_strtod_l+0x43e>
 8006c0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c10:	fa02 f303 	lsl.w	r3, r2, r3
 8006c14:	ea03 0a0a 	and.w	sl, r3, sl
 8006c18:	e7b0      	b.n	8006b7c <_strtod_l+0x604>
 8006c1a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006c1c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006c1e:	2d00      	cmp	r5, #0
 8006c20:	bfab      	itete	ge
 8006c22:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006c24:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006c26:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006c28:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006c2a:	bfac      	ite	ge
 8006c2c:	18ef      	addge	r7, r5, r3
 8006c2e:	1b5e      	sublt	r6, r3, r5
 8006c30:	9b08      	ldr	r3, [sp, #32]
 8006c32:	1aed      	subs	r5, r5, r3
 8006c34:	4415      	add	r5, r2
 8006c36:	4b66      	ldr	r3, [pc, #408]	@ (8006dd0 <_strtod_l+0x858>)
 8006c38:	3d01      	subs	r5, #1
 8006c3a:	429d      	cmp	r5, r3
 8006c3c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006c40:	da50      	bge.n	8006ce4 <_strtod_l+0x76c>
 8006c42:	1b5b      	subs	r3, r3, r5
 8006c44:	2b1f      	cmp	r3, #31
 8006c46:	eba2 0203 	sub.w	r2, r2, r3
 8006c4a:	f04f 0101 	mov.w	r1, #1
 8006c4e:	dc3d      	bgt.n	8006ccc <_strtod_l+0x754>
 8006c50:	fa01 f303 	lsl.w	r3, r1, r3
 8006c54:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c56:	2300      	movs	r3, #0
 8006c58:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c5a:	18bd      	adds	r5, r7, r2
 8006c5c:	9b08      	ldr	r3, [sp, #32]
 8006c5e:	42af      	cmp	r7, r5
 8006c60:	4416      	add	r6, r2
 8006c62:	441e      	add	r6, r3
 8006c64:	463b      	mov	r3, r7
 8006c66:	bfa8      	it	ge
 8006c68:	462b      	movge	r3, r5
 8006c6a:	42b3      	cmp	r3, r6
 8006c6c:	bfa8      	it	ge
 8006c6e:	4633      	movge	r3, r6
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	bfc2      	ittt	gt
 8006c74:	1aed      	subgt	r5, r5, r3
 8006c76:	1af6      	subgt	r6, r6, r3
 8006c78:	1aff      	subgt	r7, r7, r3
 8006c7a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	dd16      	ble.n	8006cae <_strtod_l+0x736>
 8006c80:	4641      	mov	r1, r8
 8006c82:	9805      	ldr	r0, [sp, #20]
 8006c84:	461a      	mov	r2, r3
 8006c86:	f003 f899 	bl	8009dbc <__pow5mult>
 8006c8a:	4680      	mov	r8, r0
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d0ba      	beq.n	8006c06 <_strtod_l+0x68e>
 8006c90:	4601      	mov	r1, r0
 8006c92:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006c94:	9805      	ldr	r0, [sp, #20]
 8006c96:	f002 ffe7 	bl	8009c68 <__multiply>
 8006c9a:	900e      	str	r0, [sp, #56]	@ 0x38
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	f43f ae8a 	beq.w	80069b6 <_strtod_l+0x43e>
 8006ca2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ca4:	9805      	ldr	r0, [sp, #20]
 8006ca6:	f002 fecb 	bl	8009a40 <_Bfree>
 8006caa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cac:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cae:	2d00      	cmp	r5, #0
 8006cb0:	dc1d      	bgt.n	8006cee <_strtod_l+0x776>
 8006cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	dd23      	ble.n	8006d00 <_strtod_l+0x788>
 8006cb8:	4649      	mov	r1, r9
 8006cba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006cbc:	9805      	ldr	r0, [sp, #20]
 8006cbe:	f003 f87d 	bl	8009dbc <__pow5mult>
 8006cc2:	4681      	mov	r9, r0
 8006cc4:	b9e0      	cbnz	r0, 8006d00 <_strtod_l+0x788>
 8006cc6:	f04f 0900 	mov.w	r9, #0
 8006cca:	e674      	b.n	80069b6 <_strtod_l+0x43e>
 8006ccc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006cd0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006cd4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006cd8:	35e2      	adds	r5, #226	@ 0xe2
 8006cda:	fa01 f305 	lsl.w	r3, r1, r5
 8006cde:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ce0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006ce2:	e7ba      	b.n	8006c5a <_strtod_l+0x6e2>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ce8:	2301      	movs	r3, #1
 8006cea:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006cec:	e7b5      	b.n	8006c5a <_strtod_l+0x6e2>
 8006cee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006cf0:	9805      	ldr	r0, [sp, #20]
 8006cf2:	462a      	mov	r2, r5
 8006cf4:	f003 f8bc 	bl	8009e70 <__lshift>
 8006cf8:	901a      	str	r0, [sp, #104]	@ 0x68
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d1d9      	bne.n	8006cb2 <_strtod_l+0x73a>
 8006cfe:	e65a      	b.n	80069b6 <_strtod_l+0x43e>
 8006d00:	2e00      	cmp	r6, #0
 8006d02:	dd07      	ble.n	8006d14 <_strtod_l+0x79c>
 8006d04:	4649      	mov	r1, r9
 8006d06:	9805      	ldr	r0, [sp, #20]
 8006d08:	4632      	mov	r2, r6
 8006d0a:	f003 f8b1 	bl	8009e70 <__lshift>
 8006d0e:	4681      	mov	r9, r0
 8006d10:	2800      	cmp	r0, #0
 8006d12:	d0d8      	beq.n	8006cc6 <_strtod_l+0x74e>
 8006d14:	2f00      	cmp	r7, #0
 8006d16:	dd08      	ble.n	8006d2a <_strtod_l+0x7b2>
 8006d18:	4641      	mov	r1, r8
 8006d1a:	9805      	ldr	r0, [sp, #20]
 8006d1c:	463a      	mov	r2, r7
 8006d1e:	f003 f8a7 	bl	8009e70 <__lshift>
 8006d22:	4680      	mov	r8, r0
 8006d24:	2800      	cmp	r0, #0
 8006d26:	f43f ae46 	beq.w	80069b6 <_strtod_l+0x43e>
 8006d2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d2c:	9805      	ldr	r0, [sp, #20]
 8006d2e:	464a      	mov	r2, r9
 8006d30:	f003 f926 	bl	8009f80 <__mdiff>
 8006d34:	4604      	mov	r4, r0
 8006d36:	2800      	cmp	r0, #0
 8006d38:	f43f ae3d 	beq.w	80069b6 <_strtod_l+0x43e>
 8006d3c:	68c3      	ldr	r3, [r0, #12]
 8006d3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d40:	2300      	movs	r3, #0
 8006d42:	60c3      	str	r3, [r0, #12]
 8006d44:	4641      	mov	r1, r8
 8006d46:	f003 f8ff 	bl	8009f48 <__mcmp>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	da46      	bge.n	8006ddc <_strtod_l+0x864>
 8006d4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d50:	ea53 030a 	orrs.w	r3, r3, sl
 8006d54:	d16c      	bne.n	8006e30 <_strtod_l+0x8b8>
 8006d56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d168      	bne.n	8006e30 <_strtod_l+0x8b8>
 8006d5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d62:	0d1b      	lsrs	r3, r3, #20
 8006d64:	051b      	lsls	r3, r3, #20
 8006d66:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006d6a:	d961      	bls.n	8006e30 <_strtod_l+0x8b8>
 8006d6c:	6963      	ldr	r3, [r4, #20]
 8006d6e:	b913      	cbnz	r3, 8006d76 <_strtod_l+0x7fe>
 8006d70:	6923      	ldr	r3, [r4, #16]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	dd5c      	ble.n	8006e30 <_strtod_l+0x8b8>
 8006d76:	4621      	mov	r1, r4
 8006d78:	2201      	movs	r2, #1
 8006d7a:	9805      	ldr	r0, [sp, #20]
 8006d7c:	f003 f878 	bl	8009e70 <__lshift>
 8006d80:	4641      	mov	r1, r8
 8006d82:	4604      	mov	r4, r0
 8006d84:	f003 f8e0 	bl	8009f48 <__mcmp>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	dd51      	ble.n	8006e30 <_strtod_l+0x8b8>
 8006d8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d90:	9a08      	ldr	r2, [sp, #32]
 8006d92:	0d1b      	lsrs	r3, r3, #20
 8006d94:	051b      	lsls	r3, r3, #20
 8006d96:	2a00      	cmp	r2, #0
 8006d98:	d06b      	beq.n	8006e72 <_strtod_l+0x8fa>
 8006d9a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006d9e:	d868      	bhi.n	8006e72 <_strtod_l+0x8fa>
 8006da0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006da4:	f67f ae9d 	bls.w	8006ae2 <_strtod_l+0x56a>
 8006da8:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd4 <_strtod_l+0x85c>)
 8006daa:	4650      	mov	r0, sl
 8006dac:	4659      	mov	r1, fp
 8006dae:	2200      	movs	r2, #0
 8006db0:	f7f9 fc32 	bl	8000618 <__aeabi_dmul>
 8006db4:	4b08      	ldr	r3, [pc, #32]	@ (8006dd8 <_strtod_l+0x860>)
 8006db6:	400b      	ands	r3, r1
 8006db8:	4682      	mov	sl, r0
 8006dba:	468b      	mov	fp, r1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f47f ae05 	bne.w	80069cc <_strtod_l+0x454>
 8006dc2:	9a05      	ldr	r2, [sp, #20]
 8006dc4:	2322      	movs	r3, #34	@ 0x22
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	e600      	b.n	80069cc <_strtod_l+0x454>
 8006dca:	bf00      	nop
 8006dcc:	0800ae98 	.word	0x0800ae98
 8006dd0:	fffffc02 	.word	0xfffffc02
 8006dd4:	39500000 	.word	0x39500000
 8006dd8:	7ff00000 	.word	0x7ff00000
 8006ddc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006de0:	d165      	bne.n	8006eae <_strtod_l+0x936>
 8006de2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006de4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006de8:	b35a      	cbz	r2, 8006e42 <_strtod_l+0x8ca>
 8006dea:	4a9f      	ldr	r2, [pc, #636]	@ (8007068 <_strtod_l+0xaf0>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d12b      	bne.n	8006e48 <_strtod_l+0x8d0>
 8006df0:	9b08      	ldr	r3, [sp, #32]
 8006df2:	4651      	mov	r1, sl
 8006df4:	b303      	cbz	r3, 8006e38 <_strtod_l+0x8c0>
 8006df6:	4b9d      	ldr	r3, [pc, #628]	@ (800706c <_strtod_l+0xaf4>)
 8006df8:	465a      	mov	r2, fp
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006e00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e04:	d81b      	bhi.n	8006e3e <_strtod_l+0x8c6>
 8006e06:	0d1b      	lsrs	r3, r3, #20
 8006e08:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e10:	4299      	cmp	r1, r3
 8006e12:	d119      	bne.n	8006e48 <_strtod_l+0x8d0>
 8006e14:	4b96      	ldr	r3, [pc, #600]	@ (8007070 <_strtod_l+0xaf8>)
 8006e16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d102      	bne.n	8006e22 <_strtod_l+0x8aa>
 8006e1c:	3101      	adds	r1, #1
 8006e1e:	f43f adca 	beq.w	80069b6 <_strtod_l+0x43e>
 8006e22:	4b92      	ldr	r3, [pc, #584]	@ (800706c <_strtod_l+0xaf4>)
 8006e24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e26:	401a      	ands	r2, r3
 8006e28:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006e2c:	f04f 0a00 	mov.w	sl, #0
 8006e30:	9b08      	ldr	r3, [sp, #32]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1b8      	bne.n	8006da8 <_strtod_l+0x830>
 8006e36:	e5c9      	b.n	80069cc <_strtod_l+0x454>
 8006e38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e3c:	e7e8      	b.n	8006e10 <_strtod_l+0x898>
 8006e3e:	4613      	mov	r3, r2
 8006e40:	e7e6      	b.n	8006e10 <_strtod_l+0x898>
 8006e42:	ea53 030a 	orrs.w	r3, r3, sl
 8006e46:	d0a1      	beq.n	8006d8c <_strtod_l+0x814>
 8006e48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006e4a:	b1db      	cbz	r3, 8006e84 <_strtod_l+0x90c>
 8006e4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e4e:	4213      	tst	r3, r2
 8006e50:	d0ee      	beq.n	8006e30 <_strtod_l+0x8b8>
 8006e52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e54:	9a08      	ldr	r2, [sp, #32]
 8006e56:	4650      	mov	r0, sl
 8006e58:	4659      	mov	r1, fp
 8006e5a:	b1bb      	cbz	r3, 8006e8c <_strtod_l+0x914>
 8006e5c:	f7ff fb6b 	bl	8006536 <sulp>
 8006e60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e64:	ec53 2b10 	vmov	r2, r3, d0
 8006e68:	f7f9 fa20 	bl	80002ac <__adddf3>
 8006e6c:	4682      	mov	sl, r0
 8006e6e:	468b      	mov	fp, r1
 8006e70:	e7de      	b.n	8006e30 <_strtod_l+0x8b8>
 8006e72:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006e76:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006e7a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006e7e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006e82:	e7d5      	b.n	8006e30 <_strtod_l+0x8b8>
 8006e84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e86:	ea13 0f0a 	tst.w	r3, sl
 8006e8a:	e7e1      	b.n	8006e50 <_strtod_l+0x8d8>
 8006e8c:	f7ff fb53 	bl	8006536 <sulp>
 8006e90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e94:	ec53 2b10 	vmov	r2, r3, d0
 8006e98:	f7f9 fa06 	bl	80002a8 <__aeabi_dsub>
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	4682      	mov	sl, r0
 8006ea2:	468b      	mov	fp, r1
 8006ea4:	f7f9 fe20 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d0c1      	beq.n	8006e30 <_strtod_l+0x8b8>
 8006eac:	e619      	b.n	8006ae2 <_strtod_l+0x56a>
 8006eae:	4641      	mov	r1, r8
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f003 f9c1 	bl	800a238 <__ratio>
 8006eb6:	ec57 6b10 	vmov	r6, r7, d0
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	4639      	mov	r1, r7
 8006ec4:	f7f9 fe24 	bl	8000b10 <__aeabi_dcmple>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	d06f      	beq.n	8006fac <_strtod_l+0xa34>
 8006ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d17a      	bne.n	8006fc8 <_strtod_l+0xa50>
 8006ed2:	f1ba 0f00 	cmp.w	sl, #0
 8006ed6:	d158      	bne.n	8006f8a <_strtod_l+0xa12>
 8006ed8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006eda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d15a      	bne.n	8006f98 <_strtod_l+0xa20>
 8006ee2:	4b64      	ldr	r3, [pc, #400]	@ (8007074 <_strtod_l+0xafc>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	4639      	mov	r1, r7
 8006eea:	f7f9 fe07 	bl	8000afc <__aeabi_dcmplt>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d159      	bne.n	8006fa6 <_strtod_l+0xa2e>
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	4639      	mov	r1, r7
 8006ef6:	4b60      	ldr	r3, [pc, #384]	@ (8007078 <_strtod_l+0xb00>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f7f9 fb8d 	bl	8000618 <__aeabi_dmul>
 8006efe:	4606      	mov	r6, r0
 8006f00:	460f      	mov	r7, r1
 8006f02:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006f06:	9606      	str	r6, [sp, #24]
 8006f08:	9307      	str	r3, [sp, #28]
 8006f0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f0e:	4d57      	ldr	r5, [pc, #348]	@ (800706c <_strtod_l+0xaf4>)
 8006f10:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006f14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f16:	401d      	ands	r5, r3
 8006f18:	4b58      	ldr	r3, [pc, #352]	@ (800707c <_strtod_l+0xb04>)
 8006f1a:	429d      	cmp	r5, r3
 8006f1c:	f040 80b2 	bne.w	8007084 <_strtod_l+0xb0c>
 8006f20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f22:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006f26:	ec4b ab10 	vmov	d0, sl, fp
 8006f2a:	f003 f8bd 	bl	800a0a8 <__ulp>
 8006f2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f32:	ec51 0b10 	vmov	r0, r1, d0
 8006f36:	f7f9 fb6f 	bl	8000618 <__aeabi_dmul>
 8006f3a:	4652      	mov	r2, sl
 8006f3c:	465b      	mov	r3, fp
 8006f3e:	f7f9 f9b5 	bl	80002ac <__adddf3>
 8006f42:	460b      	mov	r3, r1
 8006f44:	4949      	ldr	r1, [pc, #292]	@ (800706c <_strtod_l+0xaf4>)
 8006f46:	4a4e      	ldr	r2, [pc, #312]	@ (8007080 <_strtod_l+0xb08>)
 8006f48:	4019      	ands	r1, r3
 8006f4a:	4291      	cmp	r1, r2
 8006f4c:	4682      	mov	sl, r0
 8006f4e:	d942      	bls.n	8006fd6 <_strtod_l+0xa5e>
 8006f50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006f52:	4b47      	ldr	r3, [pc, #284]	@ (8007070 <_strtod_l+0xaf8>)
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d103      	bne.n	8006f60 <_strtod_l+0x9e8>
 8006f58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	f43f ad2b 	beq.w	80069b6 <_strtod_l+0x43e>
 8006f60:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007070 <_strtod_l+0xaf8>
 8006f64:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006f68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f6a:	9805      	ldr	r0, [sp, #20]
 8006f6c:	f002 fd68 	bl	8009a40 <_Bfree>
 8006f70:	9805      	ldr	r0, [sp, #20]
 8006f72:	4649      	mov	r1, r9
 8006f74:	f002 fd64 	bl	8009a40 <_Bfree>
 8006f78:	9805      	ldr	r0, [sp, #20]
 8006f7a:	4641      	mov	r1, r8
 8006f7c:	f002 fd60 	bl	8009a40 <_Bfree>
 8006f80:	9805      	ldr	r0, [sp, #20]
 8006f82:	4621      	mov	r1, r4
 8006f84:	f002 fd5c 	bl	8009a40 <_Bfree>
 8006f88:	e618      	b.n	8006bbc <_strtod_l+0x644>
 8006f8a:	f1ba 0f01 	cmp.w	sl, #1
 8006f8e:	d103      	bne.n	8006f98 <_strtod_l+0xa20>
 8006f90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f43f ada5 	beq.w	8006ae2 <_strtod_l+0x56a>
 8006f98:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007048 <_strtod_l+0xad0>
 8006f9c:	4f35      	ldr	r7, [pc, #212]	@ (8007074 <_strtod_l+0xafc>)
 8006f9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006fa2:	2600      	movs	r6, #0
 8006fa4:	e7b1      	b.n	8006f0a <_strtod_l+0x992>
 8006fa6:	4f34      	ldr	r7, [pc, #208]	@ (8007078 <_strtod_l+0xb00>)
 8006fa8:	2600      	movs	r6, #0
 8006faa:	e7aa      	b.n	8006f02 <_strtod_l+0x98a>
 8006fac:	4b32      	ldr	r3, [pc, #200]	@ (8007078 <_strtod_l+0xb00>)
 8006fae:	4630      	mov	r0, r6
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f7f9 fb30 	bl	8000618 <__aeabi_dmul>
 8006fb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fba:	4606      	mov	r6, r0
 8006fbc:	460f      	mov	r7, r1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d09f      	beq.n	8006f02 <_strtod_l+0x98a>
 8006fc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006fc6:	e7a0      	b.n	8006f0a <_strtod_l+0x992>
 8006fc8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007050 <_strtod_l+0xad8>
 8006fcc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006fd0:	ec57 6b17 	vmov	r6, r7, d7
 8006fd4:	e799      	b.n	8006f0a <_strtod_l+0x992>
 8006fd6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006fda:	9b08      	ldr	r3, [sp, #32]
 8006fdc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1c1      	bne.n	8006f68 <_strtod_l+0x9f0>
 8006fe4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fe8:	0d1b      	lsrs	r3, r3, #20
 8006fea:	051b      	lsls	r3, r3, #20
 8006fec:	429d      	cmp	r5, r3
 8006fee:	d1bb      	bne.n	8006f68 <_strtod_l+0x9f0>
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	4639      	mov	r1, r7
 8006ff4:	f7f9 fe70 	bl	8000cd8 <__aeabi_d2lz>
 8006ff8:	f7f9 fae0 	bl	80005bc <__aeabi_l2d>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4630      	mov	r0, r6
 8007002:	4639      	mov	r1, r7
 8007004:	f7f9 f950 	bl	80002a8 <__aeabi_dsub>
 8007008:	460b      	mov	r3, r1
 800700a:	4602      	mov	r2, r0
 800700c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007010:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007016:	ea46 060a 	orr.w	r6, r6, sl
 800701a:	431e      	orrs	r6, r3
 800701c:	d06f      	beq.n	80070fe <_strtod_l+0xb86>
 800701e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007058 <_strtod_l+0xae0>)
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	f7f9 fd6a 	bl	8000afc <__aeabi_dcmplt>
 8007028:	2800      	cmp	r0, #0
 800702a:	f47f accf 	bne.w	80069cc <_strtod_l+0x454>
 800702e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007060 <_strtod_l+0xae8>)
 8007030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007034:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007038:	f7f9 fd7e 	bl	8000b38 <__aeabi_dcmpgt>
 800703c:	2800      	cmp	r0, #0
 800703e:	d093      	beq.n	8006f68 <_strtod_l+0x9f0>
 8007040:	e4c4      	b.n	80069cc <_strtod_l+0x454>
 8007042:	bf00      	nop
 8007044:	f3af 8000 	nop.w
 8007048:	00000000 	.word	0x00000000
 800704c:	bff00000 	.word	0xbff00000
 8007050:	00000000 	.word	0x00000000
 8007054:	3ff00000 	.word	0x3ff00000
 8007058:	94a03595 	.word	0x94a03595
 800705c:	3fdfffff 	.word	0x3fdfffff
 8007060:	35afe535 	.word	0x35afe535
 8007064:	3fe00000 	.word	0x3fe00000
 8007068:	000fffff 	.word	0x000fffff
 800706c:	7ff00000 	.word	0x7ff00000
 8007070:	7fefffff 	.word	0x7fefffff
 8007074:	3ff00000 	.word	0x3ff00000
 8007078:	3fe00000 	.word	0x3fe00000
 800707c:	7fe00000 	.word	0x7fe00000
 8007080:	7c9fffff 	.word	0x7c9fffff
 8007084:	9b08      	ldr	r3, [sp, #32]
 8007086:	b323      	cbz	r3, 80070d2 <_strtod_l+0xb5a>
 8007088:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800708c:	d821      	bhi.n	80070d2 <_strtod_l+0xb5a>
 800708e:	a328      	add	r3, pc, #160	@ (adr r3, 8007130 <_strtod_l+0xbb8>)
 8007090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007094:	4630      	mov	r0, r6
 8007096:	4639      	mov	r1, r7
 8007098:	f7f9 fd3a 	bl	8000b10 <__aeabi_dcmple>
 800709c:	b1a0      	cbz	r0, 80070c8 <_strtod_l+0xb50>
 800709e:	4639      	mov	r1, r7
 80070a0:	4630      	mov	r0, r6
 80070a2:	f7f9 fd91 	bl	8000bc8 <__aeabi_d2uiz>
 80070a6:	2801      	cmp	r0, #1
 80070a8:	bf38      	it	cc
 80070aa:	2001      	movcc	r0, #1
 80070ac:	f7f9 fa3a 	bl	8000524 <__aeabi_ui2d>
 80070b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070b2:	4606      	mov	r6, r0
 80070b4:	460f      	mov	r7, r1
 80070b6:	b9fb      	cbnz	r3, 80070f8 <_strtod_l+0xb80>
 80070b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80070bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80070be:	9315      	str	r3, [sp, #84]	@ 0x54
 80070c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80070c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80070c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80070ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80070ce:	1b5b      	subs	r3, r3, r5
 80070d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80070d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80070d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80070da:	f002 ffe5 	bl	800a0a8 <__ulp>
 80070de:	4650      	mov	r0, sl
 80070e0:	ec53 2b10 	vmov	r2, r3, d0
 80070e4:	4659      	mov	r1, fp
 80070e6:	f7f9 fa97 	bl	8000618 <__aeabi_dmul>
 80070ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80070ee:	f7f9 f8dd 	bl	80002ac <__adddf3>
 80070f2:	4682      	mov	sl, r0
 80070f4:	468b      	mov	fp, r1
 80070f6:	e770      	b.n	8006fda <_strtod_l+0xa62>
 80070f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80070fc:	e7e0      	b.n	80070c0 <_strtod_l+0xb48>
 80070fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8007138 <_strtod_l+0xbc0>)
 8007100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007104:	f7f9 fcfa 	bl	8000afc <__aeabi_dcmplt>
 8007108:	e798      	b.n	800703c <_strtod_l+0xac4>
 800710a:	2300      	movs	r3, #0
 800710c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800710e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007110:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	f7ff ba6d 	b.w	80065f2 <_strtod_l+0x7a>
 8007118:	2a65      	cmp	r2, #101	@ 0x65
 800711a:	f43f ab66 	beq.w	80067ea <_strtod_l+0x272>
 800711e:	2a45      	cmp	r2, #69	@ 0x45
 8007120:	f43f ab63 	beq.w	80067ea <_strtod_l+0x272>
 8007124:	2301      	movs	r3, #1
 8007126:	f7ff bb9e 	b.w	8006866 <_strtod_l+0x2ee>
 800712a:	bf00      	nop
 800712c:	f3af 8000 	nop.w
 8007130:	ffc00000 	.word	0xffc00000
 8007134:	41dfffff 	.word	0x41dfffff
 8007138:	94a03595 	.word	0x94a03595
 800713c:	3fcfffff 	.word	0x3fcfffff

08007140 <_strtod_r>:
 8007140:	4b01      	ldr	r3, [pc, #4]	@ (8007148 <_strtod_r+0x8>)
 8007142:	f7ff ba19 	b.w	8006578 <_strtod_l>
 8007146:	bf00      	nop
 8007148:	20000018 	.word	0x20000018

0800714c <strtod>:
 800714c:	460a      	mov	r2, r1
 800714e:	4601      	mov	r1, r0
 8007150:	4802      	ldr	r0, [pc, #8]	@ (800715c <strtod+0x10>)
 8007152:	4b03      	ldr	r3, [pc, #12]	@ (8007160 <strtod+0x14>)
 8007154:	6800      	ldr	r0, [r0, #0]
 8007156:	f7ff ba0f 	b.w	8006578 <_strtod_l>
 800715a:	bf00      	nop
 800715c:	20000184 	.word	0x20000184
 8007160:	20000018 	.word	0x20000018

08007164 <_strtol_l.constprop.0>:
 8007164:	2b24      	cmp	r3, #36	@ 0x24
 8007166:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800716a:	4686      	mov	lr, r0
 800716c:	4690      	mov	r8, r2
 800716e:	d801      	bhi.n	8007174 <_strtol_l.constprop.0+0x10>
 8007170:	2b01      	cmp	r3, #1
 8007172:	d106      	bne.n	8007182 <_strtol_l.constprop.0+0x1e>
 8007174:	f001 f924 	bl	80083c0 <__errno>
 8007178:	2316      	movs	r3, #22
 800717a:	6003      	str	r3, [r0, #0]
 800717c:	2000      	movs	r0, #0
 800717e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007182:	4834      	ldr	r0, [pc, #208]	@ (8007254 <_strtol_l.constprop.0+0xf0>)
 8007184:	460d      	mov	r5, r1
 8007186:	462a      	mov	r2, r5
 8007188:	f815 4b01 	ldrb.w	r4, [r5], #1
 800718c:	5d06      	ldrb	r6, [r0, r4]
 800718e:	f016 0608 	ands.w	r6, r6, #8
 8007192:	d1f8      	bne.n	8007186 <_strtol_l.constprop.0+0x22>
 8007194:	2c2d      	cmp	r4, #45	@ 0x2d
 8007196:	d12d      	bne.n	80071f4 <_strtol_l.constprop.0+0x90>
 8007198:	782c      	ldrb	r4, [r5, #0]
 800719a:	2601      	movs	r6, #1
 800719c:	1c95      	adds	r5, r2, #2
 800719e:	f033 0210 	bics.w	r2, r3, #16
 80071a2:	d109      	bne.n	80071b8 <_strtol_l.constprop.0+0x54>
 80071a4:	2c30      	cmp	r4, #48	@ 0x30
 80071a6:	d12a      	bne.n	80071fe <_strtol_l.constprop.0+0x9a>
 80071a8:	782a      	ldrb	r2, [r5, #0]
 80071aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80071ae:	2a58      	cmp	r2, #88	@ 0x58
 80071b0:	d125      	bne.n	80071fe <_strtol_l.constprop.0+0x9a>
 80071b2:	786c      	ldrb	r4, [r5, #1]
 80071b4:	2310      	movs	r3, #16
 80071b6:	3502      	adds	r5, #2
 80071b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80071bc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80071c0:	2200      	movs	r2, #0
 80071c2:	fbbc f9f3 	udiv	r9, ip, r3
 80071c6:	4610      	mov	r0, r2
 80071c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80071cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80071d0:	2f09      	cmp	r7, #9
 80071d2:	d81b      	bhi.n	800720c <_strtol_l.constprop.0+0xa8>
 80071d4:	463c      	mov	r4, r7
 80071d6:	42a3      	cmp	r3, r4
 80071d8:	dd27      	ble.n	800722a <_strtol_l.constprop.0+0xc6>
 80071da:	1c57      	adds	r7, r2, #1
 80071dc:	d007      	beq.n	80071ee <_strtol_l.constprop.0+0x8a>
 80071de:	4581      	cmp	r9, r0
 80071e0:	d320      	bcc.n	8007224 <_strtol_l.constprop.0+0xc0>
 80071e2:	d101      	bne.n	80071e8 <_strtol_l.constprop.0+0x84>
 80071e4:	45a2      	cmp	sl, r4
 80071e6:	db1d      	blt.n	8007224 <_strtol_l.constprop.0+0xc0>
 80071e8:	fb00 4003 	mla	r0, r0, r3, r4
 80071ec:	2201      	movs	r2, #1
 80071ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071f2:	e7eb      	b.n	80071cc <_strtol_l.constprop.0+0x68>
 80071f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80071f6:	bf04      	itt	eq
 80071f8:	782c      	ldrbeq	r4, [r5, #0]
 80071fa:	1c95      	addeq	r5, r2, #2
 80071fc:	e7cf      	b.n	800719e <_strtol_l.constprop.0+0x3a>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1da      	bne.n	80071b8 <_strtol_l.constprop.0+0x54>
 8007202:	2c30      	cmp	r4, #48	@ 0x30
 8007204:	bf0c      	ite	eq
 8007206:	2308      	moveq	r3, #8
 8007208:	230a      	movne	r3, #10
 800720a:	e7d5      	b.n	80071b8 <_strtol_l.constprop.0+0x54>
 800720c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007210:	2f19      	cmp	r7, #25
 8007212:	d801      	bhi.n	8007218 <_strtol_l.constprop.0+0xb4>
 8007214:	3c37      	subs	r4, #55	@ 0x37
 8007216:	e7de      	b.n	80071d6 <_strtol_l.constprop.0+0x72>
 8007218:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800721c:	2f19      	cmp	r7, #25
 800721e:	d804      	bhi.n	800722a <_strtol_l.constprop.0+0xc6>
 8007220:	3c57      	subs	r4, #87	@ 0x57
 8007222:	e7d8      	b.n	80071d6 <_strtol_l.constprop.0+0x72>
 8007224:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007228:	e7e1      	b.n	80071ee <_strtol_l.constprop.0+0x8a>
 800722a:	1c53      	adds	r3, r2, #1
 800722c:	d108      	bne.n	8007240 <_strtol_l.constprop.0+0xdc>
 800722e:	2322      	movs	r3, #34	@ 0x22
 8007230:	f8ce 3000 	str.w	r3, [lr]
 8007234:	4660      	mov	r0, ip
 8007236:	f1b8 0f00 	cmp.w	r8, #0
 800723a:	d0a0      	beq.n	800717e <_strtol_l.constprop.0+0x1a>
 800723c:	1e69      	subs	r1, r5, #1
 800723e:	e006      	b.n	800724e <_strtol_l.constprop.0+0xea>
 8007240:	b106      	cbz	r6, 8007244 <_strtol_l.constprop.0+0xe0>
 8007242:	4240      	negs	r0, r0
 8007244:	f1b8 0f00 	cmp.w	r8, #0
 8007248:	d099      	beq.n	800717e <_strtol_l.constprop.0+0x1a>
 800724a:	2a00      	cmp	r2, #0
 800724c:	d1f6      	bne.n	800723c <_strtol_l.constprop.0+0xd8>
 800724e:	f8c8 1000 	str.w	r1, [r8]
 8007252:	e794      	b.n	800717e <_strtol_l.constprop.0+0x1a>
 8007254:	0800aec1 	.word	0x0800aec1

08007258 <_strtol_r>:
 8007258:	f7ff bf84 	b.w	8007164 <_strtol_l.constprop.0>

0800725c <strtol>:
 800725c:	4613      	mov	r3, r2
 800725e:	460a      	mov	r2, r1
 8007260:	4601      	mov	r1, r0
 8007262:	4802      	ldr	r0, [pc, #8]	@ (800726c <strtol+0x10>)
 8007264:	6800      	ldr	r0, [r0, #0]
 8007266:	f7ff bf7d 	b.w	8007164 <_strtol_l.constprop.0>
 800726a:	bf00      	nop
 800726c:	20000184 	.word	0x20000184

08007270 <__cvt>:
 8007270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007274:	ec57 6b10 	vmov	r6, r7, d0
 8007278:	2f00      	cmp	r7, #0
 800727a:	460c      	mov	r4, r1
 800727c:	4619      	mov	r1, r3
 800727e:	463b      	mov	r3, r7
 8007280:	bfbb      	ittet	lt
 8007282:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007286:	461f      	movlt	r7, r3
 8007288:	2300      	movge	r3, #0
 800728a:	232d      	movlt	r3, #45	@ 0x2d
 800728c:	700b      	strb	r3, [r1, #0]
 800728e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007290:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007294:	4691      	mov	r9, r2
 8007296:	f023 0820 	bic.w	r8, r3, #32
 800729a:	bfbc      	itt	lt
 800729c:	4632      	movlt	r2, r6
 800729e:	4616      	movlt	r6, r2
 80072a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80072a4:	d005      	beq.n	80072b2 <__cvt+0x42>
 80072a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80072aa:	d100      	bne.n	80072ae <__cvt+0x3e>
 80072ac:	3401      	adds	r4, #1
 80072ae:	2102      	movs	r1, #2
 80072b0:	e000      	b.n	80072b4 <__cvt+0x44>
 80072b2:	2103      	movs	r1, #3
 80072b4:	ab03      	add	r3, sp, #12
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	ab02      	add	r3, sp, #8
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	ec47 6b10 	vmov	d0, r6, r7
 80072c0:	4653      	mov	r3, sl
 80072c2:	4622      	mov	r2, r4
 80072c4:	f001 f96c 	bl	80085a0 <_dtoa_r>
 80072c8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80072cc:	4605      	mov	r5, r0
 80072ce:	d119      	bne.n	8007304 <__cvt+0x94>
 80072d0:	f019 0f01 	tst.w	r9, #1
 80072d4:	d00e      	beq.n	80072f4 <__cvt+0x84>
 80072d6:	eb00 0904 	add.w	r9, r0, r4
 80072da:	2200      	movs	r2, #0
 80072dc:	2300      	movs	r3, #0
 80072de:	4630      	mov	r0, r6
 80072e0:	4639      	mov	r1, r7
 80072e2:	f7f9 fc01 	bl	8000ae8 <__aeabi_dcmpeq>
 80072e6:	b108      	cbz	r0, 80072ec <__cvt+0x7c>
 80072e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80072ec:	2230      	movs	r2, #48	@ 0x30
 80072ee:	9b03      	ldr	r3, [sp, #12]
 80072f0:	454b      	cmp	r3, r9
 80072f2:	d31e      	bcc.n	8007332 <__cvt+0xc2>
 80072f4:	9b03      	ldr	r3, [sp, #12]
 80072f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072f8:	1b5b      	subs	r3, r3, r5
 80072fa:	4628      	mov	r0, r5
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	b004      	add	sp, #16
 8007300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007304:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007308:	eb00 0904 	add.w	r9, r0, r4
 800730c:	d1e5      	bne.n	80072da <__cvt+0x6a>
 800730e:	7803      	ldrb	r3, [r0, #0]
 8007310:	2b30      	cmp	r3, #48	@ 0x30
 8007312:	d10a      	bne.n	800732a <__cvt+0xba>
 8007314:	2200      	movs	r2, #0
 8007316:	2300      	movs	r3, #0
 8007318:	4630      	mov	r0, r6
 800731a:	4639      	mov	r1, r7
 800731c:	f7f9 fbe4 	bl	8000ae8 <__aeabi_dcmpeq>
 8007320:	b918      	cbnz	r0, 800732a <__cvt+0xba>
 8007322:	f1c4 0401 	rsb	r4, r4, #1
 8007326:	f8ca 4000 	str.w	r4, [sl]
 800732a:	f8da 3000 	ldr.w	r3, [sl]
 800732e:	4499      	add	r9, r3
 8007330:	e7d3      	b.n	80072da <__cvt+0x6a>
 8007332:	1c59      	adds	r1, r3, #1
 8007334:	9103      	str	r1, [sp, #12]
 8007336:	701a      	strb	r2, [r3, #0]
 8007338:	e7d9      	b.n	80072ee <__cvt+0x7e>

0800733a <__exponent>:
 800733a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800733c:	2900      	cmp	r1, #0
 800733e:	bfba      	itte	lt
 8007340:	4249      	neglt	r1, r1
 8007342:	232d      	movlt	r3, #45	@ 0x2d
 8007344:	232b      	movge	r3, #43	@ 0x2b
 8007346:	2909      	cmp	r1, #9
 8007348:	7002      	strb	r2, [r0, #0]
 800734a:	7043      	strb	r3, [r0, #1]
 800734c:	dd29      	ble.n	80073a2 <__exponent+0x68>
 800734e:	f10d 0307 	add.w	r3, sp, #7
 8007352:	461d      	mov	r5, r3
 8007354:	270a      	movs	r7, #10
 8007356:	461a      	mov	r2, r3
 8007358:	fbb1 f6f7 	udiv	r6, r1, r7
 800735c:	fb07 1416 	mls	r4, r7, r6, r1
 8007360:	3430      	adds	r4, #48	@ 0x30
 8007362:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007366:	460c      	mov	r4, r1
 8007368:	2c63      	cmp	r4, #99	@ 0x63
 800736a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800736e:	4631      	mov	r1, r6
 8007370:	dcf1      	bgt.n	8007356 <__exponent+0x1c>
 8007372:	3130      	adds	r1, #48	@ 0x30
 8007374:	1e94      	subs	r4, r2, #2
 8007376:	f803 1c01 	strb.w	r1, [r3, #-1]
 800737a:	1c41      	adds	r1, r0, #1
 800737c:	4623      	mov	r3, r4
 800737e:	42ab      	cmp	r3, r5
 8007380:	d30a      	bcc.n	8007398 <__exponent+0x5e>
 8007382:	f10d 0309 	add.w	r3, sp, #9
 8007386:	1a9b      	subs	r3, r3, r2
 8007388:	42ac      	cmp	r4, r5
 800738a:	bf88      	it	hi
 800738c:	2300      	movhi	r3, #0
 800738e:	3302      	adds	r3, #2
 8007390:	4403      	add	r3, r0
 8007392:	1a18      	subs	r0, r3, r0
 8007394:	b003      	add	sp, #12
 8007396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007398:	f813 6b01 	ldrb.w	r6, [r3], #1
 800739c:	f801 6f01 	strb.w	r6, [r1, #1]!
 80073a0:	e7ed      	b.n	800737e <__exponent+0x44>
 80073a2:	2330      	movs	r3, #48	@ 0x30
 80073a4:	3130      	adds	r1, #48	@ 0x30
 80073a6:	7083      	strb	r3, [r0, #2]
 80073a8:	70c1      	strb	r1, [r0, #3]
 80073aa:	1d03      	adds	r3, r0, #4
 80073ac:	e7f1      	b.n	8007392 <__exponent+0x58>
	...

080073b0 <_printf_float>:
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	b08d      	sub	sp, #52	@ 0x34
 80073b6:	460c      	mov	r4, r1
 80073b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80073bc:	4616      	mov	r6, r2
 80073be:	461f      	mov	r7, r3
 80073c0:	4605      	mov	r5, r0
 80073c2:	f000 ff5d 	bl	8008280 <_localeconv_r>
 80073c6:	6803      	ldr	r3, [r0, #0]
 80073c8:	9304      	str	r3, [sp, #16]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7f8 ff60 	bl	8000290 <strlen>
 80073d0:	2300      	movs	r3, #0
 80073d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80073d4:	f8d8 3000 	ldr.w	r3, [r8]
 80073d8:	9005      	str	r0, [sp, #20]
 80073da:	3307      	adds	r3, #7
 80073dc:	f023 0307 	bic.w	r3, r3, #7
 80073e0:	f103 0208 	add.w	r2, r3, #8
 80073e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80073e8:	f8d4 b000 	ldr.w	fp, [r4]
 80073ec:	f8c8 2000 	str.w	r2, [r8]
 80073f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80073f8:	9307      	str	r3, [sp, #28]
 80073fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80073fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007402:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007406:	4b9c      	ldr	r3, [pc, #624]	@ (8007678 <_printf_float+0x2c8>)
 8007408:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800740c:	f7f9 fb9e 	bl	8000b4c <__aeabi_dcmpun>
 8007410:	bb70      	cbnz	r0, 8007470 <_printf_float+0xc0>
 8007412:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007416:	4b98      	ldr	r3, [pc, #608]	@ (8007678 <_printf_float+0x2c8>)
 8007418:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800741c:	f7f9 fb78 	bl	8000b10 <__aeabi_dcmple>
 8007420:	bb30      	cbnz	r0, 8007470 <_printf_float+0xc0>
 8007422:	2200      	movs	r2, #0
 8007424:	2300      	movs	r3, #0
 8007426:	4640      	mov	r0, r8
 8007428:	4649      	mov	r1, r9
 800742a:	f7f9 fb67 	bl	8000afc <__aeabi_dcmplt>
 800742e:	b110      	cbz	r0, 8007436 <_printf_float+0x86>
 8007430:	232d      	movs	r3, #45	@ 0x2d
 8007432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007436:	4a91      	ldr	r2, [pc, #580]	@ (800767c <_printf_float+0x2cc>)
 8007438:	4b91      	ldr	r3, [pc, #580]	@ (8007680 <_printf_float+0x2d0>)
 800743a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800743e:	bf94      	ite	ls
 8007440:	4690      	movls	r8, r2
 8007442:	4698      	movhi	r8, r3
 8007444:	2303      	movs	r3, #3
 8007446:	6123      	str	r3, [r4, #16]
 8007448:	f02b 0304 	bic.w	r3, fp, #4
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	f04f 0900 	mov.w	r9, #0
 8007452:	9700      	str	r7, [sp, #0]
 8007454:	4633      	mov	r3, r6
 8007456:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007458:	4621      	mov	r1, r4
 800745a:	4628      	mov	r0, r5
 800745c:	f000 f9d2 	bl	8007804 <_printf_common>
 8007460:	3001      	adds	r0, #1
 8007462:	f040 808d 	bne.w	8007580 <_printf_float+0x1d0>
 8007466:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800746a:	b00d      	add	sp, #52	@ 0x34
 800746c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007470:	4642      	mov	r2, r8
 8007472:	464b      	mov	r3, r9
 8007474:	4640      	mov	r0, r8
 8007476:	4649      	mov	r1, r9
 8007478:	f7f9 fb68 	bl	8000b4c <__aeabi_dcmpun>
 800747c:	b140      	cbz	r0, 8007490 <_printf_float+0xe0>
 800747e:	464b      	mov	r3, r9
 8007480:	2b00      	cmp	r3, #0
 8007482:	bfbc      	itt	lt
 8007484:	232d      	movlt	r3, #45	@ 0x2d
 8007486:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800748a:	4a7e      	ldr	r2, [pc, #504]	@ (8007684 <_printf_float+0x2d4>)
 800748c:	4b7e      	ldr	r3, [pc, #504]	@ (8007688 <_printf_float+0x2d8>)
 800748e:	e7d4      	b.n	800743a <_printf_float+0x8a>
 8007490:	6863      	ldr	r3, [r4, #4]
 8007492:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007496:	9206      	str	r2, [sp, #24]
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	d13b      	bne.n	8007514 <_printf_float+0x164>
 800749c:	2306      	movs	r3, #6
 800749e:	6063      	str	r3, [r4, #4]
 80074a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80074a4:	2300      	movs	r3, #0
 80074a6:	6022      	str	r2, [r4, #0]
 80074a8:	9303      	str	r3, [sp, #12]
 80074aa:	ab0a      	add	r3, sp, #40	@ 0x28
 80074ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 80074b0:	ab09      	add	r3, sp, #36	@ 0x24
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	6861      	ldr	r1, [r4, #4]
 80074b6:	ec49 8b10 	vmov	d0, r8, r9
 80074ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80074be:	4628      	mov	r0, r5
 80074c0:	f7ff fed6 	bl	8007270 <__cvt>
 80074c4:	9b06      	ldr	r3, [sp, #24]
 80074c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80074c8:	2b47      	cmp	r3, #71	@ 0x47
 80074ca:	4680      	mov	r8, r0
 80074cc:	d129      	bne.n	8007522 <_printf_float+0x172>
 80074ce:	1cc8      	adds	r0, r1, #3
 80074d0:	db02      	blt.n	80074d8 <_printf_float+0x128>
 80074d2:	6863      	ldr	r3, [r4, #4]
 80074d4:	4299      	cmp	r1, r3
 80074d6:	dd41      	ble.n	800755c <_printf_float+0x1ac>
 80074d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80074dc:	fa5f fa8a 	uxtb.w	sl, sl
 80074e0:	3901      	subs	r1, #1
 80074e2:	4652      	mov	r2, sl
 80074e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80074e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80074ea:	f7ff ff26 	bl	800733a <__exponent>
 80074ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074f0:	1813      	adds	r3, r2, r0
 80074f2:	2a01      	cmp	r2, #1
 80074f4:	4681      	mov	r9, r0
 80074f6:	6123      	str	r3, [r4, #16]
 80074f8:	dc02      	bgt.n	8007500 <_printf_float+0x150>
 80074fa:	6822      	ldr	r2, [r4, #0]
 80074fc:	07d2      	lsls	r2, r2, #31
 80074fe:	d501      	bpl.n	8007504 <_printf_float+0x154>
 8007500:	3301      	adds	r3, #1
 8007502:	6123      	str	r3, [r4, #16]
 8007504:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007508:	2b00      	cmp	r3, #0
 800750a:	d0a2      	beq.n	8007452 <_printf_float+0xa2>
 800750c:	232d      	movs	r3, #45	@ 0x2d
 800750e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007512:	e79e      	b.n	8007452 <_printf_float+0xa2>
 8007514:	9a06      	ldr	r2, [sp, #24]
 8007516:	2a47      	cmp	r2, #71	@ 0x47
 8007518:	d1c2      	bne.n	80074a0 <_printf_float+0xf0>
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1c0      	bne.n	80074a0 <_printf_float+0xf0>
 800751e:	2301      	movs	r3, #1
 8007520:	e7bd      	b.n	800749e <_printf_float+0xee>
 8007522:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007526:	d9db      	bls.n	80074e0 <_printf_float+0x130>
 8007528:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800752c:	d118      	bne.n	8007560 <_printf_float+0x1b0>
 800752e:	2900      	cmp	r1, #0
 8007530:	6863      	ldr	r3, [r4, #4]
 8007532:	dd0b      	ble.n	800754c <_printf_float+0x19c>
 8007534:	6121      	str	r1, [r4, #16]
 8007536:	b913      	cbnz	r3, 800753e <_printf_float+0x18e>
 8007538:	6822      	ldr	r2, [r4, #0]
 800753a:	07d0      	lsls	r0, r2, #31
 800753c:	d502      	bpl.n	8007544 <_printf_float+0x194>
 800753e:	3301      	adds	r3, #1
 8007540:	440b      	add	r3, r1
 8007542:	6123      	str	r3, [r4, #16]
 8007544:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007546:	f04f 0900 	mov.w	r9, #0
 800754a:	e7db      	b.n	8007504 <_printf_float+0x154>
 800754c:	b913      	cbnz	r3, 8007554 <_printf_float+0x1a4>
 800754e:	6822      	ldr	r2, [r4, #0]
 8007550:	07d2      	lsls	r2, r2, #31
 8007552:	d501      	bpl.n	8007558 <_printf_float+0x1a8>
 8007554:	3302      	adds	r3, #2
 8007556:	e7f4      	b.n	8007542 <_printf_float+0x192>
 8007558:	2301      	movs	r3, #1
 800755a:	e7f2      	b.n	8007542 <_printf_float+0x192>
 800755c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007560:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007562:	4299      	cmp	r1, r3
 8007564:	db05      	blt.n	8007572 <_printf_float+0x1c2>
 8007566:	6823      	ldr	r3, [r4, #0]
 8007568:	6121      	str	r1, [r4, #16]
 800756a:	07d8      	lsls	r0, r3, #31
 800756c:	d5ea      	bpl.n	8007544 <_printf_float+0x194>
 800756e:	1c4b      	adds	r3, r1, #1
 8007570:	e7e7      	b.n	8007542 <_printf_float+0x192>
 8007572:	2900      	cmp	r1, #0
 8007574:	bfd4      	ite	le
 8007576:	f1c1 0202 	rsble	r2, r1, #2
 800757a:	2201      	movgt	r2, #1
 800757c:	4413      	add	r3, r2
 800757e:	e7e0      	b.n	8007542 <_printf_float+0x192>
 8007580:	6823      	ldr	r3, [r4, #0]
 8007582:	055a      	lsls	r2, r3, #21
 8007584:	d407      	bmi.n	8007596 <_printf_float+0x1e6>
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	4642      	mov	r2, r8
 800758a:	4631      	mov	r1, r6
 800758c:	4628      	mov	r0, r5
 800758e:	47b8      	blx	r7
 8007590:	3001      	adds	r0, #1
 8007592:	d12b      	bne.n	80075ec <_printf_float+0x23c>
 8007594:	e767      	b.n	8007466 <_printf_float+0xb6>
 8007596:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800759a:	f240 80dd 	bls.w	8007758 <_printf_float+0x3a8>
 800759e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80075a2:	2200      	movs	r2, #0
 80075a4:	2300      	movs	r3, #0
 80075a6:	f7f9 fa9f 	bl	8000ae8 <__aeabi_dcmpeq>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d033      	beq.n	8007616 <_printf_float+0x266>
 80075ae:	4a37      	ldr	r2, [pc, #220]	@ (800768c <_printf_float+0x2dc>)
 80075b0:	2301      	movs	r3, #1
 80075b2:	4631      	mov	r1, r6
 80075b4:	4628      	mov	r0, r5
 80075b6:	47b8      	blx	r7
 80075b8:	3001      	adds	r0, #1
 80075ba:	f43f af54 	beq.w	8007466 <_printf_float+0xb6>
 80075be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80075c2:	4543      	cmp	r3, r8
 80075c4:	db02      	blt.n	80075cc <_printf_float+0x21c>
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	07d8      	lsls	r0, r3, #31
 80075ca:	d50f      	bpl.n	80075ec <_printf_float+0x23c>
 80075cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075d0:	4631      	mov	r1, r6
 80075d2:	4628      	mov	r0, r5
 80075d4:	47b8      	blx	r7
 80075d6:	3001      	adds	r0, #1
 80075d8:	f43f af45 	beq.w	8007466 <_printf_float+0xb6>
 80075dc:	f04f 0900 	mov.w	r9, #0
 80075e0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80075e4:	f104 0a1a 	add.w	sl, r4, #26
 80075e8:	45c8      	cmp	r8, r9
 80075ea:	dc09      	bgt.n	8007600 <_printf_float+0x250>
 80075ec:	6823      	ldr	r3, [r4, #0]
 80075ee:	079b      	lsls	r3, r3, #30
 80075f0:	f100 8103 	bmi.w	80077fa <_printf_float+0x44a>
 80075f4:	68e0      	ldr	r0, [r4, #12]
 80075f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075f8:	4298      	cmp	r0, r3
 80075fa:	bfb8      	it	lt
 80075fc:	4618      	movlt	r0, r3
 80075fe:	e734      	b.n	800746a <_printf_float+0xba>
 8007600:	2301      	movs	r3, #1
 8007602:	4652      	mov	r2, sl
 8007604:	4631      	mov	r1, r6
 8007606:	4628      	mov	r0, r5
 8007608:	47b8      	blx	r7
 800760a:	3001      	adds	r0, #1
 800760c:	f43f af2b 	beq.w	8007466 <_printf_float+0xb6>
 8007610:	f109 0901 	add.w	r9, r9, #1
 8007614:	e7e8      	b.n	80075e8 <_printf_float+0x238>
 8007616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007618:	2b00      	cmp	r3, #0
 800761a:	dc39      	bgt.n	8007690 <_printf_float+0x2e0>
 800761c:	4a1b      	ldr	r2, [pc, #108]	@ (800768c <_printf_float+0x2dc>)
 800761e:	2301      	movs	r3, #1
 8007620:	4631      	mov	r1, r6
 8007622:	4628      	mov	r0, r5
 8007624:	47b8      	blx	r7
 8007626:	3001      	adds	r0, #1
 8007628:	f43f af1d 	beq.w	8007466 <_printf_float+0xb6>
 800762c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007630:	ea59 0303 	orrs.w	r3, r9, r3
 8007634:	d102      	bne.n	800763c <_printf_float+0x28c>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	07d9      	lsls	r1, r3, #31
 800763a:	d5d7      	bpl.n	80075ec <_printf_float+0x23c>
 800763c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007640:	4631      	mov	r1, r6
 8007642:	4628      	mov	r0, r5
 8007644:	47b8      	blx	r7
 8007646:	3001      	adds	r0, #1
 8007648:	f43f af0d 	beq.w	8007466 <_printf_float+0xb6>
 800764c:	f04f 0a00 	mov.w	sl, #0
 8007650:	f104 0b1a 	add.w	fp, r4, #26
 8007654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007656:	425b      	negs	r3, r3
 8007658:	4553      	cmp	r3, sl
 800765a:	dc01      	bgt.n	8007660 <_printf_float+0x2b0>
 800765c:	464b      	mov	r3, r9
 800765e:	e793      	b.n	8007588 <_printf_float+0x1d8>
 8007660:	2301      	movs	r3, #1
 8007662:	465a      	mov	r2, fp
 8007664:	4631      	mov	r1, r6
 8007666:	4628      	mov	r0, r5
 8007668:	47b8      	blx	r7
 800766a:	3001      	adds	r0, #1
 800766c:	f43f aefb 	beq.w	8007466 <_printf_float+0xb6>
 8007670:	f10a 0a01 	add.w	sl, sl, #1
 8007674:	e7ee      	b.n	8007654 <_printf_float+0x2a4>
 8007676:	bf00      	nop
 8007678:	7fefffff 	.word	0x7fefffff
 800767c:	0800afc1 	.word	0x0800afc1
 8007680:	0800afc5 	.word	0x0800afc5
 8007684:	0800afc9 	.word	0x0800afc9
 8007688:	0800afcd 	.word	0x0800afcd
 800768c:	0800afd1 	.word	0x0800afd1
 8007690:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007692:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007696:	4553      	cmp	r3, sl
 8007698:	bfa8      	it	ge
 800769a:	4653      	movge	r3, sl
 800769c:	2b00      	cmp	r3, #0
 800769e:	4699      	mov	r9, r3
 80076a0:	dc36      	bgt.n	8007710 <_printf_float+0x360>
 80076a2:	f04f 0b00 	mov.w	fp, #0
 80076a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076aa:	f104 021a 	add.w	r2, r4, #26
 80076ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076b0:	9306      	str	r3, [sp, #24]
 80076b2:	eba3 0309 	sub.w	r3, r3, r9
 80076b6:	455b      	cmp	r3, fp
 80076b8:	dc31      	bgt.n	800771e <_printf_float+0x36e>
 80076ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076bc:	459a      	cmp	sl, r3
 80076be:	dc3a      	bgt.n	8007736 <_printf_float+0x386>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	07da      	lsls	r2, r3, #31
 80076c4:	d437      	bmi.n	8007736 <_printf_float+0x386>
 80076c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c8:	ebaa 0903 	sub.w	r9, sl, r3
 80076cc:	9b06      	ldr	r3, [sp, #24]
 80076ce:	ebaa 0303 	sub.w	r3, sl, r3
 80076d2:	4599      	cmp	r9, r3
 80076d4:	bfa8      	it	ge
 80076d6:	4699      	movge	r9, r3
 80076d8:	f1b9 0f00 	cmp.w	r9, #0
 80076dc:	dc33      	bgt.n	8007746 <_printf_float+0x396>
 80076de:	f04f 0800 	mov.w	r8, #0
 80076e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076e6:	f104 0b1a 	add.w	fp, r4, #26
 80076ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076ec:	ebaa 0303 	sub.w	r3, sl, r3
 80076f0:	eba3 0309 	sub.w	r3, r3, r9
 80076f4:	4543      	cmp	r3, r8
 80076f6:	f77f af79 	ble.w	80075ec <_printf_float+0x23c>
 80076fa:	2301      	movs	r3, #1
 80076fc:	465a      	mov	r2, fp
 80076fe:	4631      	mov	r1, r6
 8007700:	4628      	mov	r0, r5
 8007702:	47b8      	blx	r7
 8007704:	3001      	adds	r0, #1
 8007706:	f43f aeae 	beq.w	8007466 <_printf_float+0xb6>
 800770a:	f108 0801 	add.w	r8, r8, #1
 800770e:	e7ec      	b.n	80076ea <_printf_float+0x33a>
 8007710:	4642      	mov	r2, r8
 8007712:	4631      	mov	r1, r6
 8007714:	4628      	mov	r0, r5
 8007716:	47b8      	blx	r7
 8007718:	3001      	adds	r0, #1
 800771a:	d1c2      	bne.n	80076a2 <_printf_float+0x2f2>
 800771c:	e6a3      	b.n	8007466 <_printf_float+0xb6>
 800771e:	2301      	movs	r3, #1
 8007720:	4631      	mov	r1, r6
 8007722:	4628      	mov	r0, r5
 8007724:	9206      	str	r2, [sp, #24]
 8007726:	47b8      	blx	r7
 8007728:	3001      	adds	r0, #1
 800772a:	f43f ae9c 	beq.w	8007466 <_printf_float+0xb6>
 800772e:	9a06      	ldr	r2, [sp, #24]
 8007730:	f10b 0b01 	add.w	fp, fp, #1
 8007734:	e7bb      	b.n	80076ae <_printf_float+0x2fe>
 8007736:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800773a:	4631      	mov	r1, r6
 800773c:	4628      	mov	r0, r5
 800773e:	47b8      	blx	r7
 8007740:	3001      	adds	r0, #1
 8007742:	d1c0      	bne.n	80076c6 <_printf_float+0x316>
 8007744:	e68f      	b.n	8007466 <_printf_float+0xb6>
 8007746:	9a06      	ldr	r2, [sp, #24]
 8007748:	464b      	mov	r3, r9
 800774a:	4442      	add	r2, r8
 800774c:	4631      	mov	r1, r6
 800774e:	4628      	mov	r0, r5
 8007750:	47b8      	blx	r7
 8007752:	3001      	adds	r0, #1
 8007754:	d1c3      	bne.n	80076de <_printf_float+0x32e>
 8007756:	e686      	b.n	8007466 <_printf_float+0xb6>
 8007758:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800775c:	f1ba 0f01 	cmp.w	sl, #1
 8007760:	dc01      	bgt.n	8007766 <_printf_float+0x3b6>
 8007762:	07db      	lsls	r3, r3, #31
 8007764:	d536      	bpl.n	80077d4 <_printf_float+0x424>
 8007766:	2301      	movs	r3, #1
 8007768:	4642      	mov	r2, r8
 800776a:	4631      	mov	r1, r6
 800776c:	4628      	mov	r0, r5
 800776e:	47b8      	blx	r7
 8007770:	3001      	adds	r0, #1
 8007772:	f43f ae78 	beq.w	8007466 <_printf_float+0xb6>
 8007776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800777a:	4631      	mov	r1, r6
 800777c:	4628      	mov	r0, r5
 800777e:	47b8      	blx	r7
 8007780:	3001      	adds	r0, #1
 8007782:	f43f ae70 	beq.w	8007466 <_printf_float+0xb6>
 8007786:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800778a:	2200      	movs	r2, #0
 800778c:	2300      	movs	r3, #0
 800778e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007792:	f7f9 f9a9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007796:	b9c0      	cbnz	r0, 80077ca <_printf_float+0x41a>
 8007798:	4653      	mov	r3, sl
 800779a:	f108 0201 	add.w	r2, r8, #1
 800779e:	4631      	mov	r1, r6
 80077a0:	4628      	mov	r0, r5
 80077a2:	47b8      	blx	r7
 80077a4:	3001      	adds	r0, #1
 80077a6:	d10c      	bne.n	80077c2 <_printf_float+0x412>
 80077a8:	e65d      	b.n	8007466 <_printf_float+0xb6>
 80077aa:	2301      	movs	r3, #1
 80077ac:	465a      	mov	r2, fp
 80077ae:	4631      	mov	r1, r6
 80077b0:	4628      	mov	r0, r5
 80077b2:	47b8      	blx	r7
 80077b4:	3001      	adds	r0, #1
 80077b6:	f43f ae56 	beq.w	8007466 <_printf_float+0xb6>
 80077ba:	f108 0801 	add.w	r8, r8, #1
 80077be:	45d0      	cmp	r8, sl
 80077c0:	dbf3      	blt.n	80077aa <_printf_float+0x3fa>
 80077c2:	464b      	mov	r3, r9
 80077c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80077c8:	e6df      	b.n	800758a <_printf_float+0x1da>
 80077ca:	f04f 0800 	mov.w	r8, #0
 80077ce:	f104 0b1a 	add.w	fp, r4, #26
 80077d2:	e7f4      	b.n	80077be <_printf_float+0x40e>
 80077d4:	2301      	movs	r3, #1
 80077d6:	4642      	mov	r2, r8
 80077d8:	e7e1      	b.n	800779e <_printf_float+0x3ee>
 80077da:	2301      	movs	r3, #1
 80077dc:	464a      	mov	r2, r9
 80077de:	4631      	mov	r1, r6
 80077e0:	4628      	mov	r0, r5
 80077e2:	47b8      	blx	r7
 80077e4:	3001      	adds	r0, #1
 80077e6:	f43f ae3e 	beq.w	8007466 <_printf_float+0xb6>
 80077ea:	f108 0801 	add.w	r8, r8, #1
 80077ee:	68e3      	ldr	r3, [r4, #12]
 80077f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077f2:	1a5b      	subs	r3, r3, r1
 80077f4:	4543      	cmp	r3, r8
 80077f6:	dcf0      	bgt.n	80077da <_printf_float+0x42a>
 80077f8:	e6fc      	b.n	80075f4 <_printf_float+0x244>
 80077fa:	f04f 0800 	mov.w	r8, #0
 80077fe:	f104 0919 	add.w	r9, r4, #25
 8007802:	e7f4      	b.n	80077ee <_printf_float+0x43e>

08007804 <_printf_common>:
 8007804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007808:	4616      	mov	r6, r2
 800780a:	4698      	mov	r8, r3
 800780c:	688a      	ldr	r2, [r1, #8]
 800780e:	690b      	ldr	r3, [r1, #16]
 8007810:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007814:	4293      	cmp	r3, r2
 8007816:	bfb8      	it	lt
 8007818:	4613      	movlt	r3, r2
 800781a:	6033      	str	r3, [r6, #0]
 800781c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007820:	4607      	mov	r7, r0
 8007822:	460c      	mov	r4, r1
 8007824:	b10a      	cbz	r2, 800782a <_printf_common+0x26>
 8007826:	3301      	adds	r3, #1
 8007828:	6033      	str	r3, [r6, #0]
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	0699      	lsls	r1, r3, #26
 800782e:	bf42      	ittt	mi
 8007830:	6833      	ldrmi	r3, [r6, #0]
 8007832:	3302      	addmi	r3, #2
 8007834:	6033      	strmi	r3, [r6, #0]
 8007836:	6825      	ldr	r5, [r4, #0]
 8007838:	f015 0506 	ands.w	r5, r5, #6
 800783c:	d106      	bne.n	800784c <_printf_common+0x48>
 800783e:	f104 0a19 	add.w	sl, r4, #25
 8007842:	68e3      	ldr	r3, [r4, #12]
 8007844:	6832      	ldr	r2, [r6, #0]
 8007846:	1a9b      	subs	r3, r3, r2
 8007848:	42ab      	cmp	r3, r5
 800784a:	dc26      	bgt.n	800789a <_printf_common+0x96>
 800784c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007850:	6822      	ldr	r2, [r4, #0]
 8007852:	3b00      	subs	r3, #0
 8007854:	bf18      	it	ne
 8007856:	2301      	movne	r3, #1
 8007858:	0692      	lsls	r2, r2, #26
 800785a:	d42b      	bmi.n	80078b4 <_printf_common+0xb0>
 800785c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007860:	4641      	mov	r1, r8
 8007862:	4638      	mov	r0, r7
 8007864:	47c8      	blx	r9
 8007866:	3001      	adds	r0, #1
 8007868:	d01e      	beq.n	80078a8 <_printf_common+0xa4>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	6922      	ldr	r2, [r4, #16]
 800786e:	f003 0306 	and.w	r3, r3, #6
 8007872:	2b04      	cmp	r3, #4
 8007874:	bf02      	ittt	eq
 8007876:	68e5      	ldreq	r5, [r4, #12]
 8007878:	6833      	ldreq	r3, [r6, #0]
 800787a:	1aed      	subeq	r5, r5, r3
 800787c:	68a3      	ldr	r3, [r4, #8]
 800787e:	bf0c      	ite	eq
 8007880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007884:	2500      	movne	r5, #0
 8007886:	4293      	cmp	r3, r2
 8007888:	bfc4      	itt	gt
 800788a:	1a9b      	subgt	r3, r3, r2
 800788c:	18ed      	addgt	r5, r5, r3
 800788e:	2600      	movs	r6, #0
 8007890:	341a      	adds	r4, #26
 8007892:	42b5      	cmp	r5, r6
 8007894:	d11a      	bne.n	80078cc <_printf_common+0xc8>
 8007896:	2000      	movs	r0, #0
 8007898:	e008      	b.n	80078ac <_printf_common+0xa8>
 800789a:	2301      	movs	r3, #1
 800789c:	4652      	mov	r2, sl
 800789e:	4641      	mov	r1, r8
 80078a0:	4638      	mov	r0, r7
 80078a2:	47c8      	blx	r9
 80078a4:	3001      	adds	r0, #1
 80078a6:	d103      	bne.n	80078b0 <_printf_common+0xac>
 80078a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b0:	3501      	adds	r5, #1
 80078b2:	e7c6      	b.n	8007842 <_printf_common+0x3e>
 80078b4:	18e1      	adds	r1, r4, r3
 80078b6:	1c5a      	adds	r2, r3, #1
 80078b8:	2030      	movs	r0, #48	@ 0x30
 80078ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078be:	4422      	add	r2, r4
 80078c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078c8:	3302      	adds	r3, #2
 80078ca:	e7c7      	b.n	800785c <_printf_common+0x58>
 80078cc:	2301      	movs	r3, #1
 80078ce:	4622      	mov	r2, r4
 80078d0:	4641      	mov	r1, r8
 80078d2:	4638      	mov	r0, r7
 80078d4:	47c8      	blx	r9
 80078d6:	3001      	adds	r0, #1
 80078d8:	d0e6      	beq.n	80078a8 <_printf_common+0xa4>
 80078da:	3601      	adds	r6, #1
 80078dc:	e7d9      	b.n	8007892 <_printf_common+0x8e>
	...

080078e0 <_printf_i>:
 80078e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078e4:	7e0f      	ldrb	r7, [r1, #24]
 80078e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80078e8:	2f78      	cmp	r7, #120	@ 0x78
 80078ea:	4691      	mov	r9, r2
 80078ec:	4680      	mov	r8, r0
 80078ee:	460c      	mov	r4, r1
 80078f0:	469a      	mov	sl, r3
 80078f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80078f6:	d807      	bhi.n	8007908 <_printf_i+0x28>
 80078f8:	2f62      	cmp	r7, #98	@ 0x62
 80078fa:	d80a      	bhi.n	8007912 <_printf_i+0x32>
 80078fc:	2f00      	cmp	r7, #0
 80078fe:	f000 80d2 	beq.w	8007aa6 <_printf_i+0x1c6>
 8007902:	2f58      	cmp	r7, #88	@ 0x58
 8007904:	f000 80b9 	beq.w	8007a7a <_printf_i+0x19a>
 8007908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800790c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007910:	e03a      	b.n	8007988 <_printf_i+0xa8>
 8007912:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007916:	2b15      	cmp	r3, #21
 8007918:	d8f6      	bhi.n	8007908 <_printf_i+0x28>
 800791a:	a101      	add	r1, pc, #4	@ (adr r1, 8007920 <_printf_i+0x40>)
 800791c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007920:	08007979 	.word	0x08007979
 8007924:	0800798d 	.word	0x0800798d
 8007928:	08007909 	.word	0x08007909
 800792c:	08007909 	.word	0x08007909
 8007930:	08007909 	.word	0x08007909
 8007934:	08007909 	.word	0x08007909
 8007938:	0800798d 	.word	0x0800798d
 800793c:	08007909 	.word	0x08007909
 8007940:	08007909 	.word	0x08007909
 8007944:	08007909 	.word	0x08007909
 8007948:	08007909 	.word	0x08007909
 800794c:	08007a8d 	.word	0x08007a8d
 8007950:	080079b7 	.word	0x080079b7
 8007954:	08007a47 	.word	0x08007a47
 8007958:	08007909 	.word	0x08007909
 800795c:	08007909 	.word	0x08007909
 8007960:	08007aaf 	.word	0x08007aaf
 8007964:	08007909 	.word	0x08007909
 8007968:	080079b7 	.word	0x080079b7
 800796c:	08007909 	.word	0x08007909
 8007970:	08007909 	.word	0x08007909
 8007974:	08007a4f 	.word	0x08007a4f
 8007978:	6833      	ldr	r3, [r6, #0]
 800797a:	1d1a      	adds	r2, r3, #4
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6032      	str	r2, [r6, #0]
 8007980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007984:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007988:	2301      	movs	r3, #1
 800798a:	e09d      	b.n	8007ac8 <_printf_i+0x1e8>
 800798c:	6833      	ldr	r3, [r6, #0]
 800798e:	6820      	ldr	r0, [r4, #0]
 8007990:	1d19      	adds	r1, r3, #4
 8007992:	6031      	str	r1, [r6, #0]
 8007994:	0606      	lsls	r6, r0, #24
 8007996:	d501      	bpl.n	800799c <_printf_i+0xbc>
 8007998:	681d      	ldr	r5, [r3, #0]
 800799a:	e003      	b.n	80079a4 <_printf_i+0xc4>
 800799c:	0645      	lsls	r5, r0, #25
 800799e:	d5fb      	bpl.n	8007998 <_printf_i+0xb8>
 80079a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079a4:	2d00      	cmp	r5, #0
 80079a6:	da03      	bge.n	80079b0 <_printf_i+0xd0>
 80079a8:	232d      	movs	r3, #45	@ 0x2d
 80079aa:	426d      	negs	r5, r5
 80079ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079b0:	4859      	ldr	r0, [pc, #356]	@ (8007b18 <_printf_i+0x238>)
 80079b2:	230a      	movs	r3, #10
 80079b4:	e011      	b.n	80079da <_printf_i+0xfa>
 80079b6:	6821      	ldr	r1, [r4, #0]
 80079b8:	6833      	ldr	r3, [r6, #0]
 80079ba:	0608      	lsls	r0, r1, #24
 80079bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80079c0:	d402      	bmi.n	80079c8 <_printf_i+0xe8>
 80079c2:	0649      	lsls	r1, r1, #25
 80079c4:	bf48      	it	mi
 80079c6:	b2ad      	uxthmi	r5, r5
 80079c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80079ca:	4853      	ldr	r0, [pc, #332]	@ (8007b18 <_printf_i+0x238>)
 80079cc:	6033      	str	r3, [r6, #0]
 80079ce:	bf14      	ite	ne
 80079d0:	230a      	movne	r3, #10
 80079d2:	2308      	moveq	r3, #8
 80079d4:	2100      	movs	r1, #0
 80079d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079da:	6866      	ldr	r6, [r4, #4]
 80079dc:	60a6      	str	r6, [r4, #8]
 80079de:	2e00      	cmp	r6, #0
 80079e0:	bfa2      	ittt	ge
 80079e2:	6821      	ldrge	r1, [r4, #0]
 80079e4:	f021 0104 	bicge.w	r1, r1, #4
 80079e8:	6021      	strge	r1, [r4, #0]
 80079ea:	b90d      	cbnz	r5, 80079f0 <_printf_i+0x110>
 80079ec:	2e00      	cmp	r6, #0
 80079ee:	d04b      	beq.n	8007a88 <_printf_i+0x1a8>
 80079f0:	4616      	mov	r6, r2
 80079f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80079f6:	fb03 5711 	mls	r7, r3, r1, r5
 80079fa:	5dc7      	ldrb	r7, [r0, r7]
 80079fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a00:	462f      	mov	r7, r5
 8007a02:	42bb      	cmp	r3, r7
 8007a04:	460d      	mov	r5, r1
 8007a06:	d9f4      	bls.n	80079f2 <_printf_i+0x112>
 8007a08:	2b08      	cmp	r3, #8
 8007a0a:	d10b      	bne.n	8007a24 <_printf_i+0x144>
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	07df      	lsls	r7, r3, #31
 8007a10:	d508      	bpl.n	8007a24 <_printf_i+0x144>
 8007a12:	6923      	ldr	r3, [r4, #16]
 8007a14:	6861      	ldr	r1, [r4, #4]
 8007a16:	4299      	cmp	r1, r3
 8007a18:	bfde      	ittt	le
 8007a1a:	2330      	movle	r3, #48	@ 0x30
 8007a1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a20:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007a24:	1b92      	subs	r2, r2, r6
 8007a26:	6122      	str	r2, [r4, #16]
 8007a28:	f8cd a000 	str.w	sl, [sp]
 8007a2c:	464b      	mov	r3, r9
 8007a2e:	aa03      	add	r2, sp, #12
 8007a30:	4621      	mov	r1, r4
 8007a32:	4640      	mov	r0, r8
 8007a34:	f7ff fee6 	bl	8007804 <_printf_common>
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d14a      	bne.n	8007ad2 <_printf_i+0x1f2>
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a40:	b004      	add	sp, #16
 8007a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	f043 0320 	orr.w	r3, r3, #32
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	4833      	ldr	r0, [pc, #204]	@ (8007b1c <_printf_i+0x23c>)
 8007a50:	2778      	movs	r7, #120	@ 0x78
 8007a52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	6831      	ldr	r1, [r6, #0]
 8007a5a:	061f      	lsls	r7, r3, #24
 8007a5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a60:	d402      	bmi.n	8007a68 <_printf_i+0x188>
 8007a62:	065f      	lsls	r7, r3, #25
 8007a64:	bf48      	it	mi
 8007a66:	b2ad      	uxthmi	r5, r5
 8007a68:	6031      	str	r1, [r6, #0]
 8007a6a:	07d9      	lsls	r1, r3, #31
 8007a6c:	bf44      	itt	mi
 8007a6e:	f043 0320 	orrmi.w	r3, r3, #32
 8007a72:	6023      	strmi	r3, [r4, #0]
 8007a74:	b11d      	cbz	r5, 8007a7e <_printf_i+0x19e>
 8007a76:	2310      	movs	r3, #16
 8007a78:	e7ac      	b.n	80079d4 <_printf_i+0xf4>
 8007a7a:	4827      	ldr	r0, [pc, #156]	@ (8007b18 <_printf_i+0x238>)
 8007a7c:	e7e9      	b.n	8007a52 <_printf_i+0x172>
 8007a7e:	6823      	ldr	r3, [r4, #0]
 8007a80:	f023 0320 	bic.w	r3, r3, #32
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	e7f6      	b.n	8007a76 <_printf_i+0x196>
 8007a88:	4616      	mov	r6, r2
 8007a8a:	e7bd      	b.n	8007a08 <_printf_i+0x128>
 8007a8c:	6833      	ldr	r3, [r6, #0]
 8007a8e:	6825      	ldr	r5, [r4, #0]
 8007a90:	6961      	ldr	r1, [r4, #20]
 8007a92:	1d18      	adds	r0, r3, #4
 8007a94:	6030      	str	r0, [r6, #0]
 8007a96:	062e      	lsls	r6, r5, #24
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	d501      	bpl.n	8007aa0 <_printf_i+0x1c0>
 8007a9c:	6019      	str	r1, [r3, #0]
 8007a9e:	e002      	b.n	8007aa6 <_printf_i+0x1c6>
 8007aa0:	0668      	lsls	r0, r5, #25
 8007aa2:	d5fb      	bpl.n	8007a9c <_printf_i+0x1bc>
 8007aa4:	8019      	strh	r1, [r3, #0]
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	6123      	str	r3, [r4, #16]
 8007aaa:	4616      	mov	r6, r2
 8007aac:	e7bc      	b.n	8007a28 <_printf_i+0x148>
 8007aae:	6833      	ldr	r3, [r6, #0]
 8007ab0:	1d1a      	adds	r2, r3, #4
 8007ab2:	6032      	str	r2, [r6, #0]
 8007ab4:	681e      	ldr	r6, [r3, #0]
 8007ab6:	6862      	ldr	r2, [r4, #4]
 8007ab8:	2100      	movs	r1, #0
 8007aba:	4630      	mov	r0, r6
 8007abc:	f7f8 fb98 	bl	80001f0 <memchr>
 8007ac0:	b108      	cbz	r0, 8007ac6 <_printf_i+0x1e6>
 8007ac2:	1b80      	subs	r0, r0, r6
 8007ac4:	6060      	str	r0, [r4, #4]
 8007ac6:	6863      	ldr	r3, [r4, #4]
 8007ac8:	6123      	str	r3, [r4, #16]
 8007aca:	2300      	movs	r3, #0
 8007acc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ad0:	e7aa      	b.n	8007a28 <_printf_i+0x148>
 8007ad2:	6923      	ldr	r3, [r4, #16]
 8007ad4:	4632      	mov	r2, r6
 8007ad6:	4649      	mov	r1, r9
 8007ad8:	4640      	mov	r0, r8
 8007ada:	47d0      	blx	sl
 8007adc:	3001      	adds	r0, #1
 8007ade:	d0ad      	beq.n	8007a3c <_printf_i+0x15c>
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	079b      	lsls	r3, r3, #30
 8007ae4:	d413      	bmi.n	8007b0e <_printf_i+0x22e>
 8007ae6:	68e0      	ldr	r0, [r4, #12]
 8007ae8:	9b03      	ldr	r3, [sp, #12]
 8007aea:	4298      	cmp	r0, r3
 8007aec:	bfb8      	it	lt
 8007aee:	4618      	movlt	r0, r3
 8007af0:	e7a6      	b.n	8007a40 <_printf_i+0x160>
 8007af2:	2301      	movs	r3, #1
 8007af4:	4632      	mov	r2, r6
 8007af6:	4649      	mov	r1, r9
 8007af8:	4640      	mov	r0, r8
 8007afa:	47d0      	blx	sl
 8007afc:	3001      	adds	r0, #1
 8007afe:	d09d      	beq.n	8007a3c <_printf_i+0x15c>
 8007b00:	3501      	adds	r5, #1
 8007b02:	68e3      	ldr	r3, [r4, #12]
 8007b04:	9903      	ldr	r1, [sp, #12]
 8007b06:	1a5b      	subs	r3, r3, r1
 8007b08:	42ab      	cmp	r3, r5
 8007b0a:	dcf2      	bgt.n	8007af2 <_printf_i+0x212>
 8007b0c:	e7eb      	b.n	8007ae6 <_printf_i+0x206>
 8007b0e:	2500      	movs	r5, #0
 8007b10:	f104 0619 	add.w	r6, r4, #25
 8007b14:	e7f5      	b.n	8007b02 <_printf_i+0x222>
 8007b16:	bf00      	nop
 8007b18:	0800afd3 	.word	0x0800afd3
 8007b1c:	0800afe4 	.word	0x0800afe4

08007b20 <_scanf_float>:
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	b087      	sub	sp, #28
 8007b26:	4617      	mov	r7, r2
 8007b28:	9303      	str	r3, [sp, #12]
 8007b2a:	688b      	ldr	r3, [r1, #8]
 8007b2c:	1e5a      	subs	r2, r3, #1
 8007b2e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007b32:	bf81      	itttt	hi
 8007b34:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007b38:	eb03 0b05 	addhi.w	fp, r3, r5
 8007b3c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007b40:	608b      	strhi	r3, [r1, #8]
 8007b42:	680b      	ldr	r3, [r1, #0]
 8007b44:	460a      	mov	r2, r1
 8007b46:	f04f 0500 	mov.w	r5, #0
 8007b4a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007b4e:	f842 3b1c 	str.w	r3, [r2], #28
 8007b52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007b56:	4680      	mov	r8, r0
 8007b58:	460c      	mov	r4, r1
 8007b5a:	bf98      	it	ls
 8007b5c:	f04f 0b00 	movls.w	fp, #0
 8007b60:	9201      	str	r2, [sp, #4]
 8007b62:	4616      	mov	r6, r2
 8007b64:	46aa      	mov	sl, r5
 8007b66:	46a9      	mov	r9, r5
 8007b68:	9502      	str	r5, [sp, #8]
 8007b6a:	68a2      	ldr	r2, [r4, #8]
 8007b6c:	b152      	cbz	r2, 8007b84 <_scanf_float+0x64>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	2b4e      	cmp	r3, #78	@ 0x4e
 8007b74:	d864      	bhi.n	8007c40 <_scanf_float+0x120>
 8007b76:	2b40      	cmp	r3, #64	@ 0x40
 8007b78:	d83c      	bhi.n	8007bf4 <_scanf_float+0xd4>
 8007b7a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007b7e:	b2c8      	uxtb	r0, r1
 8007b80:	280e      	cmp	r0, #14
 8007b82:	d93a      	bls.n	8007bfa <_scanf_float+0xda>
 8007b84:	f1b9 0f00 	cmp.w	r9, #0
 8007b88:	d003      	beq.n	8007b92 <_scanf_float+0x72>
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007b96:	f1ba 0f01 	cmp.w	sl, #1
 8007b9a:	f200 8117 	bhi.w	8007dcc <_scanf_float+0x2ac>
 8007b9e:	9b01      	ldr	r3, [sp, #4]
 8007ba0:	429e      	cmp	r6, r3
 8007ba2:	f200 8108 	bhi.w	8007db6 <_scanf_float+0x296>
 8007ba6:	2001      	movs	r0, #1
 8007ba8:	b007      	add	sp, #28
 8007baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bae:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007bb2:	2a0d      	cmp	r2, #13
 8007bb4:	d8e6      	bhi.n	8007b84 <_scanf_float+0x64>
 8007bb6:	a101      	add	r1, pc, #4	@ (adr r1, 8007bbc <_scanf_float+0x9c>)
 8007bb8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007bbc:	08007d03 	.word	0x08007d03
 8007bc0:	08007b85 	.word	0x08007b85
 8007bc4:	08007b85 	.word	0x08007b85
 8007bc8:	08007b85 	.word	0x08007b85
 8007bcc:	08007d63 	.word	0x08007d63
 8007bd0:	08007d3b 	.word	0x08007d3b
 8007bd4:	08007b85 	.word	0x08007b85
 8007bd8:	08007b85 	.word	0x08007b85
 8007bdc:	08007d11 	.word	0x08007d11
 8007be0:	08007b85 	.word	0x08007b85
 8007be4:	08007b85 	.word	0x08007b85
 8007be8:	08007b85 	.word	0x08007b85
 8007bec:	08007b85 	.word	0x08007b85
 8007bf0:	08007cc9 	.word	0x08007cc9
 8007bf4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007bf8:	e7db      	b.n	8007bb2 <_scanf_float+0x92>
 8007bfa:	290e      	cmp	r1, #14
 8007bfc:	d8c2      	bhi.n	8007b84 <_scanf_float+0x64>
 8007bfe:	a001      	add	r0, pc, #4	@ (adr r0, 8007c04 <_scanf_float+0xe4>)
 8007c00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007c04:	08007cb9 	.word	0x08007cb9
 8007c08:	08007b85 	.word	0x08007b85
 8007c0c:	08007cb9 	.word	0x08007cb9
 8007c10:	08007d4f 	.word	0x08007d4f
 8007c14:	08007b85 	.word	0x08007b85
 8007c18:	08007c61 	.word	0x08007c61
 8007c1c:	08007c9f 	.word	0x08007c9f
 8007c20:	08007c9f 	.word	0x08007c9f
 8007c24:	08007c9f 	.word	0x08007c9f
 8007c28:	08007c9f 	.word	0x08007c9f
 8007c2c:	08007c9f 	.word	0x08007c9f
 8007c30:	08007c9f 	.word	0x08007c9f
 8007c34:	08007c9f 	.word	0x08007c9f
 8007c38:	08007c9f 	.word	0x08007c9f
 8007c3c:	08007c9f 	.word	0x08007c9f
 8007c40:	2b6e      	cmp	r3, #110	@ 0x6e
 8007c42:	d809      	bhi.n	8007c58 <_scanf_float+0x138>
 8007c44:	2b60      	cmp	r3, #96	@ 0x60
 8007c46:	d8b2      	bhi.n	8007bae <_scanf_float+0x8e>
 8007c48:	2b54      	cmp	r3, #84	@ 0x54
 8007c4a:	d07b      	beq.n	8007d44 <_scanf_float+0x224>
 8007c4c:	2b59      	cmp	r3, #89	@ 0x59
 8007c4e:	d199      	bne.n	8007b84 <_scanf_float+0x64>
 8007c50:	2d07      	cmp	r5, #7
 8007c52:	d197      	bne.n	8007b84 <_scanf_float+0x64>
 8007c54:	2508      	movs	r5, #8
 8007c56:	e02c      	b.n	8007cb2 <_scanf_float+0x192>
 8007c58:	2b74      	cmp	r3, #116	@ 0x74
 8007c5a:	d073      	beq.n	8007d44 <_scanf_float+0x224>
 8007c5c:	2b79      	cmp	r3, #121	@ 0x79
 8007c5e:	e7f6      	b.n	8007c4e <_scanf_float+0x12e>
 8007c60:	6821      	ldr	r1, [r4, #0]
 8007c62:	05c8      	lsls	r0, r1, #23
 8007c64:	d51b      	bpl.n	8007c9e <_scanf_float+0x17e>
 8007c66:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007c6a:	6021      	str	r1, [r4, #0]
 8007c6c:	f109 0901 	add.w	r9, r9, #1
 8007c70:	f1bb 0f00 	cmp.w	fp, #0
 8007c74:	d003      	beq.n	8007c7e <_scanf_float+0x15e>
 8007c76:	3201      	adds	r2, #1
 8007c78:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8007c7c:	60a2      	str	r2, [r4, #8]
 8007c7e:	68a3      	ldr	r3, [r4, #8]
 8007c80:	3b01      	subs	r3, #1
 8007c82:	60a3      	str	r3, [r4, #8]
 8007c84:	6923      	ldr	r3, [r4, #16]
 8007c86:	3301      	adds	r3, #1
 8007c88:	6123      	str	r3, [r4, #16]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	607b      	str	r3, [r7, #4]
 8007c92:	f340 8087 	ble.w	8007da4 <_scanf_float+0x284>
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	603b      	str	r3, [r7, #0]
 8007c9c:	e765      	b.n	8007b6a <_scanf_float+0x4a>
 8007c9e:	eb1a 0105 	adds.w	r1, sl, r5
 8007ca2:	f47f af6f 	bne.w	8007b84 <_scanf_float+0x64>
 8007ca6:	6822      	ldr	r2, [r4, #0]
 8007ca8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007cac:	6022      	str	r2, [r4, #0]
 8007cae:	460d      	mov	r5, r1
 8007cb0:	468a      	mov	sl, r1
 8007cb2:	f806 3b01 	strb.w	r3, [r6], #1
 8007cb6:	e7e2      	b.n	8007c7e <_scanf_float+0x15e>
 8007cb8:	6822      	ldr	r2, [r4, #0]
 8007cba:	0610      	lsls	r0, r2, #24
 8007cbc:	f57f af62 	bpl.w	8007b84 <_scanf_float+0x64>
 8007cc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007cc4:	6022      	str	r2, [r4, #0]
 8007cc6:	e7f4      	b.n	8007cb2 <_scanf_float+0x192>
 8007cc8:	f1ba 0f00 	cmp.w	sl, #0
 8007ccc:	d10e      	bne.n	8007cec <_scanf_float+0x1cc>
 8007cce:	f1b9 0f00 	cmp.w	r9, #0
 8007cd2:	d10e      	bne.n	8007cf2 <_scanf_float+0x1d2>
 8007cd4:	6822      	ldr	r2, [r4, #0]
 8007cd6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007cda:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007cde:	d108      	bne.n	8007cf2 <_scanf_float+0x1d2>
 8007ce0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007ce4:	6022      	str	r2, [r4, #0]
 8007ce6:	f04f 0a01 	mov.w	sl, #1
 8007cea:	e7e2      	b.n	8007cb2 <_scanf_float+0x192>
 8007cec:	f1ba 0f02 	cmp.w	sl, #2
 8007cf0:	d055      	beq.n	8007d9e <_scanf_float+0x27e>
 8007cf2:	2d01      	cmp	r5, #1
 8007cf4:	d002      	beq.n	8007cfc <_scanf_float+0x1dc>
 8007cf6:	2d04      	cmp	r5, #4
 8007cf8:	f47f af44 	bne.w	8007b84 <_scanf_float+0x64>
 8007cfc:	3501      	adds	r5, #1
 8007cfe:	b2ed      	uxtb	r5, r5
 8007d00:	e7d7      	b.n	8007cb2 <_scanf_float+0x192>
 8007d02:	f1ba 0f01 	cmp.w	sl, #1
 8007d06:	f47f af3d 	bne.w	8007b84 <_scanf_float+0x64>
 8007d0a:	f04f 0a02 	mov.w	sl, #2
 8007d0e:	e7d0      	b.n	8007cb2 <_scanf_float+0x192>
 8007d10:	b97d      	cbnz	r5, 8007d32 <_scanf_float+0x212>
 8007d12:	f1b9 0f00 	cmp.w	r9, #0
 8007d16:	f47f af38 	bne.w	8007b8a <_scanf_float+0x6a>
 8007d1a:	6822      	ldr	r2, [r4, #0]
 8007d1c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007d20:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007d24:	f040 8108 	bne.w	8007f38 <_scanf_float+0x418>
 8007d28:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007d2c:	6022      	str	r2, [r4, #0]
 8007d2e:	2501      	movs	r5, #1
 8007d30:	e7bf      	b.n	8007cb2 <_scanf_float+0x192>
 8007d32:	2d03      	cmp	r5, #3
 8007d34:	d0e2      	beq.n	8007cfc <_scanf_float+0x1dc>
 8007d36:	2d05      	cmp	r5, #5
 8007d38:	e7de      	b.n	8007cf8 <_scanf_float+0x1d8>
 8007d3a:	2d02      	cmp	r5, #2
 8007d3c:	f47f af22 	bne.w	8007b84 <_scanf_float+0x64>
 8007d40:	2503      	movs	r5, #3
 8007d42:	e7b6      	b.n	8007cb2 <_scanf_float+0x192>
 8007d44:	2d06      	cmp	r5, #6
 8007d46:	f47f af1d 	bne.w	8007b84 <_scanf_float+0x64>
 8007d4a:	2507      	movs	r5, #7
 8007d4c:	e7b1      	b.n	8007cb2 <_scanf_float+0x192>
 8007d4e:	6822      	ldr	r2, [r4, #0]
 8007d50:	0591      	lsls	r1, r2, #22
 8007d52:	f57f af17 	bpl.w	8007b84 <_scanf_float+0x64>
 8007d56:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007d5a:	6022      	str	r2, [r4, #0]
 8007d5c:	f8cd 9008 	str.w	r9, [sp, #8]
 8007d60:	e7a7      	b.n	8007cb2 <_scanf_float+0x192>
 8007d62:	6822      	ldr	r2, [r4, #0]
 8007d64:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007d68:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007d6c:	d006      	beq.n	8007d7c <_scanf_float+0x25c>
 8007d6e:	0550      	lsls	r0, r2, #21
 8007d70:	f57f af08 	bpl.w	8007b84 <_scanf_float+0x64>
 8007d74:	f1b9 0f00 	cmp.w	r9, #0
 8007d78:	f000 80de 	beq.w	8007f38 <_scanf_float+0x418>
 8007d7c:	0591      	lsls	r1, r2, #22
 8007d7e:	bf58      	it	pl
 8007d80:	9902      	ldrpl	r1, [sp, #8]
 8007d82:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007d86:	bf58      	it	pl
 8007d88:	eba9 0101 	subpl.w	r1, r9, r1
 8007d8c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007d90:	bf58      	it	pl
 8007d92:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007d96:	6022      	str	r2, [r4, #0]
 8007d98:	f04f 0900 	mov.w	r9, #0
 8007d9c:	e789      	b.n	8007cb2 <_scanf_float+0x192>
 8007d9e:	f04f 0a03 	mov.w	sl, #3
 8007da2:	e786      	b.n	8007cb2 <_scanf_float+0x192>
 8007da4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007da8:	4639      	mov	r1, r7
 8007daa:	4640      	mov	r0, r8
 8007dac:	4798      	blx	r3
 8007dae:	2800      	cmp	r0, #0
 8007db0:	f43f aedb 	beq.w	8007b6a <_scanf_float+0x4a>
 8007db4:	e6e6      	b.n	8007b84 <_scanf_float+0x64>
 8007db6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007dba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007dbe:	463a      	mov	r2, r7
 8007dc0:	4640      	mov	r0, r8
 8007dc2:	4798      	blx	r3
 8007dc4:	6923      	ldr	r3, [r4, #16]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	6123      	str	r3, [r4, #16]
 8007dca:	e6e8      	b.n	8007b9e <_scanf_float+0x7e>
 8007dcc:	1e6b      	subs	r3, r5, #1
 8007dce:	2b06      	cmp	r3, #6
 8007dd0:	d824      	bhi.n	8007e1c <_scanf_float+0x2fc>
 8007dd2:	2d02      	cmp	r5, #2
 8007dd4:	d836      	bhi.n	8007e44 <_scanf_float+0x324>
 8007dd6:	9b01      	ldr	r3, [sp, #4]
 8007dd8:	429e      	cmp	r6, r3
 8007dda:	f67f aee4 	bls.w	8007ba6 <_scanf_float+0x86>
 8007dde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007de2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007de6:	463a      	mov	r2, r7
 8007de8:	4640      	mov	r0, r8
 8007dea:	4798      	blx	r3
 8007dec:	6923      	ldr	r3, [r4, #16]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	6123      	str	r3, [r4, #16]
 8007df2:	e7f0      	b.n	8007dd6 <_scanf_float+0x2b6>
 8007df4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007df8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007dfc:	463a      	mov	r2, r7
 8007dfe:	4640      	mov	r0, r8
 8007e00:	4798      	blx	r3
 8007e02:	6923      	ldr	r3, [r4, #16]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	6123      	str	r3, [r4, #16]
 8007e08:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007e0c:	fa5f fa8a 	uxtb.w	sl, sl
 8007e10:	f1ba 0f02 	cmp.w	sl, #2
 8007e14:	d1ee      	bne.n	8007df4 <_scanf_float+0x2d4>
 8007e16:	3d03      	subs	r5, #3
 8007e18:	b2ed      	uxtb	r5, r5
 8007e1a:	1b76      	subs	r6, r6, r5
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	05da      	lsls	r2, r3, #23
 8007e20:	d530      	bpl.n	8007e84 <_scanf_float+0x364>
 8007e22:	055b      	lsls	r3, r3, #21
 8007e24:	d511      	bpl.n	8007e4a <_scanf_float+0x32a>
 8007e26:	9b01      	ldr	r3, [sp, #4]
 8007e28:	429e      	cmp	r6, r3
 8007e2a:	f67f aebc 	bls.w	8007ba6 <_scanf_float+0x86>
 8007e2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e36:	463a      	mov	r2, r7
 8007e38:	4640      	mov	r0, r8
 8007e3a:	4798      	blx	r3
 8007e3c:	6923      	ldr	r3, [r4, #16]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	6123      	str	r3, [r4, #16]
 8007e42:	e7f0      	b.n	8007e26 <_scanf_float+0x306>
 8007e44:	46aa      	mov	sl, r5
 8007e46:	46b3      	mov	fp, r6
 8007e48:	e7de      	b.n	8007e08 <_scanf_float+0x2e8>
 8007e4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007e4e:	6923      	ldr	r3, [r4, #16]
 8007e50:	2965      	cmp	r1, #101	@ 0x65
 8007e52:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007e56:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8007e5a:	6123      	str	r3, [r4, #16]
 8007e5c:	d00c      	beq.n	8007e78 <_scanf_float+0x358>
 8007e5e:	2945      	cmp	r1, #69	@ 0x45
 8007e60:	d00a      	beq.n	8007e78 <_scanf_float+0x358>
 8007e62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e66:	463a      	mov	r2, r7
 8007e68:	4640      	mov	r0, r8
 8007e6a:	4798      	blx	r3
 8007e6c:	6923      	ldr	r3, [r4, #16]
 8007e6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007e72:	3b01      	subs	r3, #1
 8007e74:	1eb5      	subs	r5, r6, #2
 8007e76:	6123      	str	r3, [r4, #16]
 8007e78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e7c:	463a      	mov	r2, r7
 8007e7e:	4640      	mov	r0, r8
 8007e80:	4798      	blx	r3
 8007e82:	462e      	mov	r6, r5
 8007e84:	6822      	ldr	r2, [r4, #0]
 8007e86:	f012 0210 	ands.w	r2, r2, #16
 8007e8a:	d001      	beq.n	8007e90 <_scanf_float+0x370>
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	e68b      	b.n	8007ba8 <_scanf_float+0x88>
 8007e90:	7032      	strb	r2, [r6, #0]
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e9c:	d11c      	bne.n	8007ed8 <_scanf_float+0x3b8>
 8007e9e:	9b02      	ldr	r3, [sp, #8]
 8007ea0:	454b      	cmp	r3, r9
 8007ea2:	eba3 0209 	sub.w	r2, r3, r9
 8007ea6:	d123      	bne.n	8007ef0 <_scanf_float+0x3d0>
 8007ea8:	9901      	ldr	r1, [sp, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	4640      	mov	r0, r8
 8007eae:	f7ff f947 	bl	8007140 <_strtod_r>
 8007eb2:	9b03      	ldr	r3, [sp, #12]
 8007eb4:	6821      	ldr	r1, [r4, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f011 0f02 	tst.w	r1, #2
 8007ebc:	ec57 6b10 	vmov	r6, r7, d0
 8007ec0:	f103 0204 	add.w	r2, r3, #4
 8007ec4:	d01f      	beq.n	8007f06 <_scanf_float+0x3e6>
 8007ec6:	9903      	ldr	r1, [sp, #12]
 8007ec8:	600a      	str	r2, [r1, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	e9c3 6700 	strd	r6, r7, [r3]
 8007ed0:	68e3      	ldr	r3, [r4, #12]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	60e3      	str	r3, [r4, #12]
 8007ed6:	e7d9      	b.n	8007e8c <_scanf_float+0x36c>
 8007ed8:	9b04      	ldr	r3, [sp, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0e4      	beq.n	8007ea8 <_scanf_float+0x388>
 8007ede:	9905      	ldr	r1, [sp, #20]
 8007ee0:	230a      	movs	r3, #10
 8007ee2:	3101      	adds	r1, #1
 8007ee4:	4640      	mov	r0, r8
 8007ee6:	f7ff f9b7 	bl	8007258 <_strtol_r>
 8007eea:	9b04      	ldr	r3, [sp, #16]
 8007eec:	9e05      	ldr	r6, [sp, #20]
 8007eee:	1ac2      	subs	r2, r0, r3
 8007ef0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007ef4:	429e      	cmp	r6, r3
 8007ef6:	bf28      	it	cs
 8007ef8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007efc:	4910      	ldr	r1, [pc, #64]	@ (8007f40 <_scanf_float+0x420>)
 8007efe:	4630      	mov	r0, r6
 8007f00:	f000 f8e4 	bl	80080cc <siprintf>
 8007f04:	e7d0      	b.n	8007ea8 <_scanf_float+0x388>
 8007f06:	f011 0f04 	tst.w	r1, #4
 8007f0a:	9903      	ldr	r1, [sp, #12]
 8007f0c:	600a      	str	r2, [r1, #0]
 8007f0e:	d1dc      	bne.n	8007eca <_scanf_float+0x3aa>
 8007f10:	681d      	ldr	r5, [r3, #0]
 8007f12:	4632      	mov	r2, r6
 8007f14:	463b      	mov	r3, r7
 8007f16:	4630      	mov	r0, r6
 8007f18:	4639      	mov	r1, r7
 8007f1a:	f7f8 fe17 	bl	8000b4c <__aeabi_dcmpun>
 8007f1e:	b128      	cbz	r0, 8007f2c <_scanf_float+0x40c>
 8007f20:	4808      	ldr	r0, [pc, #32]	@ (8007f44 <_scanf_float+0x424>)
 8007f22:	f000 fa91 	bl	8008448 <nanf>
 8007f26:	ed85 0a00 	vstr	s0, [r5]
 8007f2a:	e7d1      	b.n	8007ed0 <_scanf_float+0x3b0>
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	4639      	mov	r1, r7
 8007f30:	f7f8 fe6a 	bl	8000c08 <__aeabi_d2f>
 8007f34:	6028      	str	r0, [r5, #0]
 8007f36:	e7cb      	b.n	8007ed0 <_scanf_float+0x3b0>
 8007f38:	f04f 0900 	mov.w	r9, #0
 8007f3c:	e629      	b.n	8007b92 <_scanf_float+0x72>
 8007f3e:	bf00      	nop
 8007f40:	0800aff5 	.word	0x0800aff5
 8007f44:	0800b0ae 	.word	0x0800b0ae

08007f48 <std>:
 8007f48:	2300      	movs	r3, #0
 8007f4a:	b510      	push	{r4, lr}
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	e9c0 3300 	strd	r3, r3, [r0]
 8007f52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f56:	6083      	str	r3, [r0, #8]
 8007f58:	8181      	strh	r1, [r0, #12]
 8007f5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f5c:	81c2      	strh	r2, [r0, #14]
 8007f5e:	6183      	str	r3, [r0, #24]
 8007f60:	4619      	mov	r1, r3
 8007f62:	2208      	movs	r2, #8
 8007f64:	305c      	adds	r0, #92	@ 0x5c
 8007f66:	f000 f914 	bl	8008192 <memset>
 8007f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fa0 <std+0x58>)
 8007f6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fa4 <std+0x5c>)
 8007f70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f72:	4b0d      	ldr	r3, [pc, #52]	@ (8007fa8 <std+0x60>)
 8007f74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f76:	4b0d      	ldr	r3, [pc, #52]	@ (8007fac <std+0x64>)
 8007f78:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb0 <std+0x68>)
 8007f7c:	6224      	str	r4, [r4, #32]
 8007f7e:	429c      	cmp	r4, r3
 8007f80:	d006      	beq.n	8007f90 <std+0x48>
 8007f82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f86:	4294      	cmp	r4, r2
 8007f88:	d002      	beq.n	8007f90 <std+0x48>
 8007f8a:	33d0      	adds	r3, #208	@ 0xd0
 8007f8c:	429c      	cmp	r4, r3
 8007f8e:	d105      	bne.n	8007f9c <std+0x54>
 8007f90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f98:	f000 ba3c 	b.w	8008414 <__retarget_lock_init_recursive>
 8007f9c:	bd10      	pop	{r4, pc}
 8007f9e:	bf00      	nop
 8007fa0:	0800810d 	.word	0x0800810d
 8007fa4:	0800812f 	.word	0x0800812f
 8007fa8:	08008167 	.word	0x08008167
 8007fac:	0800818b 	.word	0x0800818b
 8007fb0:	20004f5c 	.word	0x20004f5c

08007fb4 <stdio_exit_handler>:
 8007fb4:	4a02      	ldr	r2, [pc, #8]	@ (8007fc0 <stdio_exit_handler+0xc>)
 8007fb6:	4903      	ldr	r1, [pc, #12]	@ (8007fc4 <stdio_exit_handler+0x10>)
 8007fb8:	4803      	ldr	r0, [pc, #12]	@ (8007fc8 <stdio_exit_handler+0x14>)
 8007fba:	f000 b869 	b.w	8008090 <_fwalk_sglue>
 8007fbe:	bf00      	nop
 8007fc0:	2000000c 	.word	0x2000000c
 8007fc4:	0800a6f5 	.word	0x0800a6f5
 8007fc8:	20000188 	.word	0x20000188

08007fcc <cleanup_stdio>:
 8007fcc:	6841      	ldr	r1, [r0, #4]
 8007fce:	4b0c      	ldr	r3, [pc, #48]	@ (8008000 <cleanup_stdio+0x34>)
 8007fd0:	4299      	cmp	r1, r3
 8007fd2:	b510      	push	{r4, lr}
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	d001      	beq.n	8007fdc <cleanup_stdio+0x10>
 8007fd8:	f002 fb8c 	bl	800a6f4 <_fflush_r>
 8007fdc:	68a1      	ldr	r1, [r4, #8]
 8007fde:	4b09      	ldr	r3, [pc, #36]	@ (8008004 <cleanup_stdio+0x38>)
 8007fe0:	4299      	cmp	r1, r3
 8007fe2:	d002      	beq.n	8007fea <cleanup_stdio+0x1e>
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f002 fb85 	bl	800a6f4 <_fflush_r>
 8007fea:	68e1      	ldr	r1, [r4, #12]
 8007fec:	4b06      	ldr	r3, [pc, #24]	@ (8008008 <cleanup_stdio+0x3c>)
 8007fee:	4299      	cmp	r1, r3
 8007ff0:	d004      	beq.n	8007ffc <cleanup_stdio+0x30>
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff8:	f002 bb7c 	b.w	800a6f4 <_fflush_r>
 8007ffc:	bd10      	pop	{r4, pc}
 8007ffe:	bf00      	nop
 8008000:	20004f5c 	.word	0x20004f5c
 8008004:	20004fc4 	.word	0x20004fc4
 8008008:	2000502c 	.word	0x2000502c

0800800c <global_stdio_init.part.0>:
 800800c:	b510      	push	{r4, lr}
 800800e:	4b0b      	ldr	r3, [pc, #44]	@ (800803c <global_stdio_init.part.0+0x30>)
 8008010:	4c0b      	ldr	r4, [pc, #44]	@ (8008040 <global_stdio_init.part.0+0x34>)
 8008012:	4a0c      	ldr	r2, [pc, #48]	@ (8008044 <global_stdio_init.part.0+0x38>)
 8008014:	601a      	str	r2, [r3, #0]
 8008016:	4620      	mov	r0, r4
 8008018:	2200      	movs	r2, #0
 800801a:	2104      	movs	r1, #4
 800801c:	f7ff ff94 	bl	8007f48 <std>
 8008020:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008024:	2201      	movs	r2, #1
 8008026:	2109      	movs	r1, #9
 8008028:	f7ff ff8e 	bl	8007f48 <std>
 800802c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008030:	2202      	movs	r2, #2
 8008032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008036:	2112      	movs	r1, #18
 8008038:	f7ff bf86 	b.w	8007f48 <std>
 800803c:	20005094 	.word	0x20005094
 8008040:	20004f5c 	.word	0x20004f5c
 8008044:	08007fb5 	.word	0x08007fb5

08008048 <__sfp_lock_acquire>:
 8008048:	4801      	ldr	r0, [pc, #4]	@ (8008050 <__sfp_lock_acquire+0x8>)
 800804a:	f000 b9e4 	b.w	8008416 <__retarget_lock_acquire_recursive>
 800804e:	bf00      	nop
 8008050:	2000509d 	.word	0x2000509d

08008054 <__sfp_lock_release>:
 8008054:	4801      	ldr	r0, [pc, #4]	@ (800805c <__sfp_lock_release+0x8>)
 8008056:	f000 b9df 	b.w	8008418 <__retarget_lock_release_recursive>
 800805a:	bf00      	nop
 800805c:	2000509d 	.word	0x2000509d

08008060 <__sinit>:
 8008060:	b510      	push	{r4, lr}
 8008062:	4604      	mov	r4, r0
 8008064:	f7ff fff0 	bl	8008048 <__sfp_lock_acquire>
 8008068:	6a23      	ldr	r3, [r4, #32]
 800806a:	b11b      	cbz	r3, 8008074 <__sinit+0x14>
 800806c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008070:	f7ff bff0 	b.w	8008054 <__sfp_lock_release>
 8008074:	4b04      	ldr	r3, [pc, #16]	@ (8008088 <__sinit+0x28>)
 8008076:	6223      	str	r3, [r4, #32]
 8008078:	4b04      	ldr	r3, [pc, #16]	@ (800808c <__sinit+0x2c>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1f5      	bne.n	800806c <__sinit+0xc>
 8008080:	f7ff ffc4 	bl	800800c <global_stdio_init.part.0>
 8008084:	e7f2      	b.n	800806c <__sinit+0xc>
 8008086:	bf00      	nop
 8008088:	08007fcd 	.word	0x08007fcd
 800808c:	20005094 	.word	0x20005094

08008090 <_fwalk_sglue>:
 8008090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008094:	4607      	mov	r7, r0
 8008096:	4688      	mov	r8, r1
 8008098:	4614      	mov	r4, r2
 800809a:	2600      	movs	r6, #0
 800809c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080a0:	f1b9 0901 	subs.w	r9, r9, #1
 80080a4:	d505      	bpl.n	80080b2 <_fwalk_sglue+0x22>
 80080a6:	6824      	ldr	r4, [r4, #0]
 80080a8:	2c00      	cmp	r4, #0
 80080aa:	d1f7      	bne.n	800809c <_fwalk_sglue+0xc>
 80080ac:	4630      	mov	r0, r6
 80080ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080b2:	89ab      	ldrh	r3, [r5, #12]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d907      	bls.n	80080c8 <_fwalk_sglue+0x38>
 80080b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080bc:	3301      	adds	r3, #1
 80080be:	d003      	beq.n	80080c8 <_fwalk_sglue+0x38>
 80080c0:	4629      	mov	r1, r5
 80080c2:	4638      	mov	r0, r7
 80080c4:	47c0      	blx	r8
 80080c6:	4306      	orrs	r6, r0
 80080c8:	3568      	adds	r5, #104	@ 0x68
 80080ca:	e7e9      	b.n	80080a0 <_fwalk_sglue+0x10>

080080cc <siprintf>:
 80080cc:	b40e      	push	{r1, r2, r3}
 80080ce:	b500      	push	{lr}
 80080d0:	b09c      	sub	sp, #112	@ 0x70
 80080d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80080d4:	9002      	str	r0, [sp, #8]
 80080d6:	9006      	str	r0, [sp, #24]
 80080d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80080dc:	4809      	ldr	r0, [pc, #36]	@ (8008104 <siprintf+0x38>)
 80080de:	9107      	str	r1, [sp, #28]
 80080e0:	9104      	str	r1, [sp, #16]
 80080e2:	4909      	ldr	r1, [pc, #36]	@ (8008108 <siprintf+0x3c>)
 80080e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80080e8:	9105      	str	r1, [sp, #20]
 80080ea:	6800      	ldr	r0, [r0, #0]
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	a902      	add	r1, sp, #8
 80080f0:	f002 f980 	bl	800a3f4 <_svfiprintf_r>
 80080f4:	9b02      	ldr	r3, [sp, #8]
 80080f6:	2200      	movs	r2, #0
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	b01c      	add	sp, #112	@ 0x70
 80080fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008100:	b003      	add	sp, #12
 8008102:	4770      	bx	lr
 8008104:	20000184 	.word	0x20000184
 8008108:	ffff0208 	.word	0xffff0208

0800810c <__sread>:
 800810c:	b510      	push	{r4, lr}
 800810e:	460c      	mov	r4, r1
 8008110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008114:	f000 f930 	bl	8008378 <_read_r>
 8008118:	2800      	cmp	r0, #0
 800811a:	bfab      	itete	ge
 800811c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800811e:	89a3      	ldrhlt	r3, [r4, #12]
 8008120:	181b      	addge	r3, r3, r0
 8008122:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008126:	bfac      	ite	ge
 8008128:	6563      	strge	r3, [r4, #84]	@ 0x54
 800812a:	81a3      	strhlt	r3, [r4, #12]
 800812c:	bd10      	pop	{r4, pc}

0800812e <__swrite>:
 800812e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008132:	461f      	mov	r7, r3
 8008134:	898b      	ldrh	r3, [r1, #12]
 8008136:	05db      	lsls	r3, r3, #23
 8008138:	4605      	mov	r5, r0
 800813a:	460c      	mov	r4, r1
 800813c:	4616      	mov	r6, r2
 800813e:	d505      	bpl.n	800814c <__swrite+0x1e>
 8008140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008144:	2302      	movs	r3, #2
 8008146:	2200      	movs	r2, #0
 8008148:	f000 f904 	bl	8008354 <_lseek_r>
 800814c:	89a3      	ldrh	r3, [r4, #12]
 800814e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008152:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008156:	81a3      	strh	r3, [r4, #12]
 8008158:	4632      	mov	r2, r6
 800815a:	463b      	mov	r3, r7
 800815c:	4628      	mov	r0, r5
 800815e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008162:	f000 b91b 	b.w	800839c <_write_r>

08008166 <__sseek>:
 8008166:	b510      	push	{r4, lr}
 8008168:	460c      	mov	r4, r1
 800816a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800816e:	f000 f8f1 	bl	8008354 <_lseek_r>
 8008172:	1c43      	adds	r3, r0, #1
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	bf15      	itete	ne
 8008178:	6560      	strne	r0, [r4, #84]	@ 0x54
 800817a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800817e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008182:	81a3      	strheq	r3, [r4, #12]
 8008184:	bf18      	it	ne
 8008186:	81a3      	strhne	r3, [r4, #12]
 8008188:	bd10      	pop	{r4, pc}

0800818a <__sclose>:
 800818a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818e:	f000 b87b 	b.w	8008288 <_close_r>

08008192 <memset>:
 8008192:	4402      	add	r2, r0
 8008194:	4603      	mov	r3, r0
 8008196:	4293      	cmp	r3, r2
 8008198:	d100      	bne.n	800819c <memset+0xa>
 800819a:	4770      	bx	lr
 800819c:	f803 1b01 	strb.w	r1, [r3], #1
 80081a0:	e7f9      	b.n	8008196 <memset+0x4>

080081a2 <strncmp>:
 80081a2:	b510      	push	{r4, lr}
 80081a4:	b16a      	cbz	r2, 80081c2 <strncmp+0x20>
 80081a6:	3901      	subs	r1, #1
 80081a8:	1884      	adds	r4, r0, r2
 80081aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d103      	bne.n	80081be <strncmp+0x1c>
 80081b6:	42a0      	cmp	r0, r4
 80081b8:	d001      	beq.n	80081be <strncmp+0x1c>
 80081ba:	2a00      	cmp	r2, #0
 80081bc:	d1f5      	bne.n	80081aa <strncmp+0x8>
 80081be:	1ad0      	subs	r0, r2, r3
 80081c0:	bd10      	pop	{r4, pc}
 80081c2:	4610      	mov	r0, r2
 80081c4:	e7fc      	b.n	80081c0 <strncmp+0x1e>
	...

080081c8 <strtok>:
 80081c8:	4b16      	ldr	r3, [pc, #88]	@ (8008224 <strtok+0x5c>)
 80081ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ce:	681f      	ldr	r7, [r3, #0]
 80081d0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80081d2:	4605      	mov	r5, r0
 80081d4:	460e      	mov	r6, r1
 80081d6:	b9ec      	cbnz	r4, 8008214 <strtok+0x4c>
 80081d8:	2050      	movs	r0, #80	@ 0x50
 80081da:	f001 fb29 	bl	8009830 <malloc>
 80081de:	4602      	mov	r2, r0
 80081e0:	6478      	str	r0, [r7, #68]	@ 0x44
 80081e2:	b920      	cbnz	r0, 80081ee <strtok+0x26>
 80081e4:	4b10      	ldr	r3, [pc, #64]	@ (8008228 <strtok+0x60>)
 80081e6:	4811      	ldr	r0, [pc, #68]	@ (800822c <strtok+0x64>)
 80081e8:	215b      	movs	r1, #91	@ 0x5b
 80081ea:	f000 f933 	bl	8008454 <__assert_func>
 80081ee:	e9c0 4400 	strd	r4, r4, [r0]
 80081f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80081f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80081fa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80081fe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008202:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008206:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800820a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800820e:	6184      	str	r4, [r0, #24]
 8008210:	7704      	strb	r4, [r0, #28]
 8008212:	6244      	str	r4, [r0, #36]	@ 0x24
 8008214:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008216:	4631      	mov	r1, r6
 8008218:	4628      	mov	r0, r5
 800821a:	2301      	movs	r3, #1
 800821c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008220:	f000 b806 	b.w	8008230 <__strtok_r>
 8008224:	20000184 	.word	0x20000184
 8008228:	0800affa 	.word	0x0800affa
 800822c:	0800b011 	.word	0x0800b011

08008230 <__strtok_r>:
 8008230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008232:	4604      	mov	r4, r0
 8008234:	b908      	cbnz	r0, 800823a <__strtok_r+0xa>
 8008236:	6814      	ldr	r4, [r2, #0]
 8008238:	b144      	cbz	r4, 800824c <__strtok_r+0x1c>
 800823a:	4620      	mov	r0, r4
 800823c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008240:	460f      	mov	r7, r1
 8008242:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008246:	b91e      	cbnz	r6, 8008250 <__strtok_r+0x20>
 8008248:	b965      	cbnz	r5, 8008264 <__strtok_r+0x34>
 800824a:	6015      	str	r5, [r2, #0]
 800824c:	2000      	movs	r0, #0
 800824e:	e005      	b.n	800825c <__strtok_r+0x2c>
 8008250:	42b5      	cmp	r5, r6
 8008252:	d1f6      	bne.n	8008242 <__strtok_r+0x12>
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1f0      	bne.n	800823a <__strtok_r+0xa>
 8008258:	6014      	str	r4, [r2, #0]
 800825a:	7003      	strb	r3, [r0, #0]
 800825c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800825e:	461c      	mov	r4, r3
 8008260:	e00c      	b.n	800827c <__strtok_r+0x4c>
 8008262:	b915      	cbnz	r5, 800826a <__strtok_r+0x3a>
 8008264:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008268:	460e      	mov	r6, r1
 800826a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800826e:	42ab      	cmp	r3, r5
 8008270:	d1f7      	bne.n	8008262 <__strtok_r+0x32>
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0f3      	beq.n	800825e <__strtok_r+0x2e>
 8008276:	2300      	movs	r3, #0
 8008278:	f804 3c01 	strb.w	r3, [r4, #-1]
 800827c:	6014      	str	r4, [r2, #0]
 800827e:	e7ed      	b.n	800825c <__strtok_r+0x2c>

08008280 <_localeconv_r>:
 8008280:	4800      	ldr	r0, [pc, #0]	@ (8008284 <_localeconv_r+0x4>)
 8008282:	4770      	bx	lr
 8008284:	20000108 	.word	0x20000108

08008288 <_close_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4d06      	ldr	r5, [pc, #24]	@ (80082a4 <_close_r+0x1c>)
 800828c:	2300      	movs	r3, #0
 800828e:	4604      	mov	r4, r0
 8008290:	4608      	mov	r0, r1
 8008292:	602b      	str	r3, [r5, #0]
 8008294:	f7fa f912 	bl	80024bc <_close>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_close_r+0x1a>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_close_r+0x1a>
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	20005098 	.word	0x20005098

080082a8 <_reclaim_reent>:
 80082a8:	4b29      	ldr	r3, [pc, #164]	@ (8008350 <_reclaim_reent+0xa8>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4283      	cmp	r3, r0
 80082ae:	b570      	push	{r4, r5, r6, lr}
 80082b0:	4604      	mov	r4, r0
 80082b2:	d04b      	beq.n	800834c <_reclaim_reent+0xa4>
 80082b4:	69c3      	ldr	r3, [r0, #28]
 80082b6:	b1ab      	cbz	r3, 80082e4 <_reclaim_reent+0x3c>
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	b16b      	cbz	r3, 80082d8 <_reclaim_reent+0x30>
 80082bc:	2500      	movs	r5, #0
 80082be:	69e3      	ldr	r3, [r4, #28]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	5959      	ldr	r1, [r3, r5]
 80082c4:	2900      	cmp	r1, #0
 80082c6:	d13b      	bne.n	8008340 <_reclaim_reent+0x98>
 80082c8:	3504      	adds	r5, #4
 80082ca:	2d80      	cmp	r5, #128	@ 0x80
 80082cc:	d1f7      	bne.n	80082be <_reclaim_reent+0x16>
 80082ce:	69e3      	ldr	r3, [r4, #28]
 80082d0:	4620      	mov	r0, r4
 80082d2:	68d9      	ldr	r1, [r3, #12]
 80082d4:	f000 ff28 	bl	8009128 <_free_r>
 80082d8:	69e3      	ldr	r3, [r4, #28]
 80082da:	6819      	ldr	r1, [r3, #0]
 80082dc:	b111      	cbz	r1, 80082e4 <_reclaim_reent+0x3c>
 80082de:	4620      	mov	r0, r4
 80082e0:	f000 ff22 	bl	8009128 <_free_r>
 80082e4:	6961      	ldr	r1, [r4, #20]
 80082e6:	b111      	cbz	r1, 80082ee <_reclaim_reent+0x46>
 80082e8:	4620      	mov	r0, r4
 80082ea:	f000 ff1d 	bl	8009128 <_free_r>
 80082ee:	69e1      	ldr	r1, [r4, #28]
 80082f0:	b111      	cbz	r1, 80082f8 <_reclaim_reent+0x50>
 80082f2:	4620      	mov	r0, r4
 80082f4:	f000 ff18 	bl	8009128 <_free_r>
 80082f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80082fa:	b111      	cbz	r1, 8008302 <_reclaim_reent+0x5a>
 80082fc:	4620      	mov	r0, r4
 80082fe:	f000 ff13 	bl	8009128 <_free_r>
 8008302:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008304:	b111      	cbz	r1, 800830c <_reclaim_reent+0x64>
 8008306:	4620      	mov	r0, r4
 8008308:	f000 ff0e 	bl	8009128 <_free_r>
 800830c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800830e:	b111      	cbz	r1, 8008316 <_reclaim_reent+0x6e>
 8008310:	4620      	mov	r0, r4
 8008312:	f000 ff09 	bl	8009128 <_free_r>
 8008316:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008318:	b111      	cbz	r1, 8008320 <_reclaim_reent+0x78>
 800831a:	4620      	mov	r0, r4
 800831c:	f000 ff04 	bl	8009128 <_free_r>
 8008320:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008322:	b111      	cbz	r1, 800832a <_reclaim_reent+0x82>
 8008324:	4620      	mov	r0, r4
 8008326:	f000 feff 	bl	8009128 <_free_r>
 800832a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800832c:	b111      	cbz	r1, 8008334 <_reclaim_reent+0x8c>
 800832e:	4620      	mov	r0, r4
 8008330:	f000 fefa 	bl	8009128 <_free_r>
 8008334:	6a23      	ldr	r3, [r4, #32]
 8008336:	b14b      	cbz	r3, 800834c <_reclaim_reent+0xa4>
 8008338:	4620      	mov	r0, r4
 800833a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800833e:	4718      	bx	r3
 8008340:	680e      	ldr	r6, [r1, #0]
 8008342:	4620      	mov	r0, r4
 8008344:	f000 fef0 	bl	8009128 <_free_r>
 8008348:	4631      	mov	r1, r6
 800834a:	e7bb      	b.n	80082c4 <_reclaim_reent+0x1c>
 800834c:	bd70      	pop	{r4, r5, r6, pc}
 800834e:	bf00      	nop
 8008350:	20000184 	.word	0x20000184

08008354 <_lseek_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4d07      	ldr	r5, [pc, #28]	@ (8008374 <_lseek_r+0x20>)
 8008358:	4604      	mov	r4, r0
 800835a:	4608      	mov	r0, r1
 800835c:	4611      	mov	r1, r2
 800835e:	2200      	movs	r2, #0
 8008360:	602a      	str	r2, [r5, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	f7fa f8d1 	bl	800250a <_lseek>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d102      	bne.n	8008372 <_lseek_r+0x1e>
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	b103      	cbz	r3, 8008372 <_lseek_r+0x1e>
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	bd38      	pop	{r3, r4, r5, pc}
 8008374:	20005098 	.word	0x20005098

08008378 <_read_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4d07      	ldr	r5, [pc, #28]	@ (8008398 <_read_r+0x20>)
 800837c:	4604      	mov	r4, r0
 800837e:	4608      	mov	r0, r1
 8008380:	4611      	mov	r1, r2
 8008382:	2200      	movs	r2, #0
 8008384:	602a      	str	r2, [r5, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	f7fa f85f 	bl	800244a <_read>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	d102      	bne.n	8008396 <_read_r+0x1e>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	b103      	cbz	r3, 8008396 <_read_r+0x1e>
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	bd38      	pop	{r3, r4, r5, pc}
 8008398:	20005098 	.word	0x20005098

0800839c <_write_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	4d07      	ldr	r5, [pc, #28]	@ (80083bc <_write_r+0x20>)
 80083a0:	4604      	mov	r4, r0
 80083a2:	4608      	mov	r0, r1
 80083a4:	4611      	mov	r1, r2
 80083a6:	2200      	movs	r2, #0
 80083a8:	602a      	str	r2, [r5, #0]
 80083aa:	461a      	mov	r2, r3
 80083ac:	f7fa f86a 	bl	8002484 <_write>
 80083b0:	1c43      	adds	r3, r0, #1
 80083b2:	d102      	bne.n	80083ba <_write_r+0x1e>
 80083b4:	682b      	ldr	r3, [r5, #0]
 80083b6:	b103      	cbz	r3, 80083ba <_write_r+0x1e>
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	bd38      	pop	{r3, r4, r5, pc}
 80083bc:	20005098 	.word	0x20005098

080083c0 <__errno>:
 80083c0:	4b01      	ldr	r3, [pc, #4]	@ (80083c8 <__errno+0x8>)
 80083c2:	6818      	ldr	r0, [r3, #0]
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	20000184 	.word	0x20000184

080083cc <__libc_init_array>:
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	4d0d      	ldr	r5, [pc, #52]	@ (8008404 <__libc_init_array+0x38>)
 80083d0:	4c0d      	ldr	r4, [pc, #52]	@ (8008408 <__libc_init_array+0x3c>)
 80083d2:	1b64      	subs	r4, r4, r5
 80083d4:	10a4      	asrs	r4, r4, #2
 80083d6:	2600      	movs	r6, #0
 80083d8:	42a6      	cmp	r6, r4
 80083da:	d109      	bne.n	80083f0 <__libc_init_array+0x24>
 80083dc:	4d0b      	ldr	r5, [pc, #44]	@ (800840c <__libc_init_array+0x40>)
 80083de:	4c0c      	ldr	r4, [pc, #48]	@ (8008410 <__libc_init_array+0x44>)
 80083e0:	f002 fcda 	bl	800ad98 <_init>
 80083e4:	1b64      	subs	r4, r4, r5
 80083e6:	10a4      	asrs	r4, r4, #2
 80083e8:	2600      	movs	r6, #0
 80083ea:	42a6      	cmp	r6, r4
 80083ec:	d105      	bne.n	80083fa <__libc_init_array+0x2e>
 80083ee:	bd70      	pop	{r4, r5, r6, pc}
 80083f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f4:	4798      	blx	r3
 80083f6:	3601      	adds	r6, #1
 80083f8:	e7ee      	b.n	80083d8 <__libc_init_array+0xc>
 80083fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80083fe:	4798      	blx	r3
 8008400:	3601      	adds	r6, #1
 8008402:	e7f2      	b.n	80083ea <__libc_init_array+0x1e>
 8008404:	0800b2fc 	.word	0x0800b2fc
 8008408:	0800b2fc 	.word	0x0800b2fc
 800840c:	0800b2fc 	.word	0x0800b2fc
 8008410:	0800b300 	.word	0x0800b300

08008414 <__retarget_lock_init_recursive>:
 8008414:	4770      	bx	lr

08008416 <__retarget_lock_acquire_recursive>:
 8008416:	4770      	bx	lr

08008418 <__retarget_lock_release_recursive>:
 8008418:	4770      	bx	lr

0800841a <memcpy>:
 800841a:	440a      	add	r2, r1
 800841c:	4291      	cmp	r1, r2
 800841e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008422:	d100      	bne.n	8008426 <memcpy+0xc>
 8008424:	4770      	bx	lr
 8008426:	b510      	push	{r4, lr}
 8008428:	f811 4b01 	ldrb.w	r4, [r1], #1
 800842c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008430:	4291      	cmp	r1, r2
 8008432:	d1f9      	bne.n	8008428 <memcpy+0xe>
 8008434:	bd10      	pop	{r4, pc}
	...

08008438 <nan>:
 8008438:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008440 <nan+0x8>
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	00000000 	.word	0x00000000
 8008444:	7ff80000 	.word	0x7ff80000

08008448 <nanf>:
 8008448:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008450 <nanf+0x8>
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	7fc00000 	.word	0x7fc00000

08008454 <__assert_func>:
 8008454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008456:	4614      	mov	r4, r2
 8008458:	461a      	mov	r2, r3
 800845a:	4b09      	ldr	r3, [pc, #36]	@ (8008480 <__assert_func+0x2c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4605      	mov	r5, r0
 8008460:	68d8      	ldr	r0, [r3, #12]
 8008462:	b954      	cbnz	r4, 800847a <__assert_func+0x26>
 8008464:	4b07      	ldr	r3, [pc, #28]	@ (8008484 <__assert_func+0x30>)
 8008466:	461c      	mov	r4, r3
 8008468:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800846c:	9100      	str	r1, [sp, #0]
 800846e:	462b      	mov	r3, r5
 8008470:	4905      	ldr	r1, [pc, #20]	@ (8008488 <__assert_func+0x34>)
 8008472:	f002 f967 	bl	800a744 <fiprintf>
 8008476:	f002 f9a1 	bl	800a7bc <abort>
 800847a:	4b04      	ldr	r3, [pc, #16]	@ (800848c <__assert_func+0x38>)
 800847c:	e7f4      	b.n	8008468 <__assert_func+0x14>
 800847e:	bf00      	nop
 8008480:	20000184 	.word	0x20000184
 8008484:	0800b0ae 	.word	0x0800b0ae
 8008488:	0800b080 	.word	0x0800b080
 800848c:	0800b073 	.word	0x0800b073

08008490 <quorem>:
 8008490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008494:	6903      	ldr	r3, [r0, #16]
 8008496:	690c      	ldr	r4, [r1, #16]
 8008498:	42a3      	cmp	r3, r4
 800849a:	4607      	mov	r7, r0
 800849c:	db7e      	blt.n	800859c <quorem+0x10c>
 800849e:	3c01      	subs	r4, #1
 80084a0:	f101 0814 	add.w	r8, r1, #20
 80084a4:	00a3      	lsls	r3, r4, #2
 80084a6:	f100 0514 	add.w	r5, r0, #20
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084ba:	3301      	adds	r3, #1
 80084bc:	429a      	cmp	r2, r3
 80084be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80084c6:	d32e      	bcc.n	8008526 <quorem+0x96>
 80084c8:	f04f 0a00 	mov.w	sl, #0
 80084cc:	46c4      	mov	ip, r8
 80084ce:	46ae      	mov	lr, r5
 80084d0:	46d3      	mov	fp, sl
 80084d2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80084d6:	b298      	uxth	r0, r3
 80084d8:	fb06 a000 	mla	r0, r6, r0, sl
 80084dc:	0c02      	lsrs	r2, r0, #16
 80084de:	0c1b      	lsrs	r3, r3, #16
 80084e0:	fb06 2303 	mla	r3, r6, r3, r2
 80084e4:	f8de 2000 	ldr.w	r2, [lr]
 80084e8:	b280      	uxth	r0, r0
 80084ea:	b292      	uxth	r2, r2
 80084ec:	1a12      	subs	r2, r2, r0
 80084ee:	445a      	add	r2, fp
 80084f0:	f8de 0000 	ldr.w	r0, [lr]
 80084f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80084fe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008502:	b292      	uxth	r2, r2
 8008504:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008508:	45e1      	cmp	r9, ip
 800850a:	f84e 2b04 	str.w	r2, [lr], #4
 800850e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008512:	d2de      	bcs.n	80084d2 <quorem+0x42>
 8008514:	9b00      	ldr	r3, [sp, #0]
 8008516:	58eb      	ldr	r3, [r5, r3]
 8008518:	b92b      	cbnz	r3, 8008526 <quorem+0x96>
 800851a:	9b01      	ldr	r3, [sp, #4]
 800851c:	3b04      	subs	r3, #4
 800851e:	429d      	cmp	r5, r3
 8008520:	461a      	mov	r2, r3
 8008522:	d32f      	bcc.n	8008584 <quorem+0xf4>
 8008524:	613c      	str	r4, [r7, #16]
 8008526:	4638      	mov	r0, r7
 8008528:	f001 fd0e 	bl	8009f48 <__mcmp>
 800852c:	2800      	cmp	r0, #0
 800852e:	db25      	blt.n	800857c <quorem+0xec>
 8008530:	4629      	mov	r1, r5
 8008532:	2000      	movs	r0, #0
 8008534:	f858 2b04 	ldr.w	r2, [r8], #4
 8008538:	f8d1 c000 	ldr.w	ip, [r1]
 800853c:	fa1f fe82 	uxth.w	lr, r2
 8008540:	fa1f f38c 	uxth.w	r3, ip
 8008544:	eba3 030e 	sub.w	r3, r3, lr
 8008548:	4403      	add	r3, r0
 800854a:	0c12      	lsrs	r2, r2, #16
 800854c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008550:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008554:	b29b      	uxth	r3, r3
 8008556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800855a:	45c1      	cmp	r9, r8
 800855c:	f841 3b04 	str.w	r3, [r1], #4
 8008560:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008564:	d2e6      	bcs.n	8008534 <quorem+0xa4>
 8008566:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800856a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800856e:	b922      	cbnz	r2, 800857a <quorem+0xea>
 8008570:	3b04      	subs	r3, #4
 8008572:	429d      	cmp	r5, r3
 8008574:	461a      	mov	r2, r3
 8008576:	d30b      	bcc.n	8008590 <quorem+0x100>
 8008578:	613c      	str	r4, [r7, #16]
 800857a:	3601      	adds	r6, #1
 800857c:	4630      	mov	r0, r6
 800857e:	b003      	add	sp, #12
 8008580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008584:	6812      	ldr	r2, [r2, #0]
 8008586:	3b04      	subs	r3, #4
 8008588:	2a00      	cmp	r2, #0
 800858a:	d1cb      	bne.n	8008524 <quorem+0x94>
 800858c:	3c01      	subs	r4, #1
 800858e:	e7c6      	b.n	800851e <quorem+0x8e>
 8008590:	6812      	ldr	r2, [r2, #0]
 8008592:	3b04      	subs	r3, #4
 8008594:	2a00      	cmp	r2, #0
 8008596:	d1ef      	bne.n	8008578 <quorem+0xe8>
 8008598:	3c01      	subs	r4, #1
 800859a:	e7ea      	b.n	8008572 <quorem+0xe2>
 800859c:	2000      	movs	r0, #0
 800859e:	e7ee      	b.n	800857e <quorem+0xee>

080085a0 <_dtoa_r>:
 80085a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a4:	69c7      	ldr	r7, [r0, #28]
 80085a6:	b099      	sub	sp, #100	@ 0x64
 80085a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80085ac:	ec55 4b10 	vmov	r4, r5, d0
 80085b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80085b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80085b4:	4683      	mov	fp, r0
 80085b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80085b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80085ba:	b97f      	cbnz	r7, 80085dc <_dtoa_r+0x3c>
 80085bc:	2010      	movs	r0, #16
 80085be:	f001 f937 	bl	8009830 <malloc>
 80085c2:	4602      	mov	r2, r0
 80085c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80085c8:	b920      	cbnz	r0, 80085d4 <_dtoa_r+0x34>
 80085ca:	4ba7      	ldr	r3, [pc, #668]	@ (8008868 <_dtoa_r+0x2c8>)
 80085cc:	21ef      	movs	r1, #239	@ 0xef
 80085ce:	48a7      	ldr	r0, [pc, #668]	@ (800886c <_dtoa_r+0x2cc>)
 80085d0:	f7ff ff40 	bl	8008454 <__assert_func>
 80085d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80085d8:	6007      	str	r7, [r0, #0]
 80085da:	60c7      	str	r7, [r0, #12]
 80085dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80085e0:	6819      	ldr	r1, [r3, #0]
 80085e2:	b159      	cbz	r1, 80085fc <_dtoa_r+0x5c>
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	604a      	str	r2, [r1, #4]
 80085e8:	2301      	movs	r3, #1
 80085ea:	4093      	lsls	r3, r2
 80085ec:	608b      	str	r3, [r1, #8]
 80085ee:	4658      	mov	r0, fp
 80085f0:	f001 fa26 	bl	8009a40 <_Bfree>
 80085f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80085f8:	2200      	movs	r2, #0
 80085fa:	601a      	str	r2, [r3, #0]
 80085fc:	1e2b      	subs	r3, r5, #0
 80085fe:	bfb9      	ittee	lt
 8008600:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008604:	9303      	strlt	r3, [sp, #12]
 8008606:	2300      	movge	r3, #0
 8008608:	6033      	strge	r3, [r6, #0]
 800860a:	9f03      	ldr	r7, [sp, #12]
 800860c:	4b98      	ldr	r3, [pc, #608]	@ (8008870 <_dtoa_r+0x2d0>)
 800860e:	bfbc      	itt	lt
 8008610:	2201      	movlt	r2, #1
 8008612:	6032      	strlt	r2, [r6, #0]
 8008614:	43bb      	bics	r3, r7
 8008616:	d112      	bne.n	800863e <_dtoa_r+0x9e>
 8008618:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800861a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800861e:	6013      	str	r3, [r2, #0]
 8008620:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008624:	4323      	orrs	r3, r4
 8008626:	f000 854d 	beq.w	80090c4 <_dtoa_r+0xb24>
 800862a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800862c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008884 <_dtoa_r+0x2e4>
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 854f 	beq.w	80090d4 <_dtoa_r+0xb34>
 8008636:	f10a 0303 	add.w	r3, sl, #3
 800863a:	f000 bd49 	b.w	80090d0 <_dtoa_r+0xb30>
 800863e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008642:	2200      	movs	r2, #0
 8008644:	ec51 0b17 	vmov	r0, r1, d7
 8008648:	2300      	movs	r3, #0
 800864a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800864e:	f7f8 fa4b 	bl	8000ae8 <__aeabi_dcmpeq>
 8008652:	4680      	mov	r8, r0
 8008654:	b158      	cbz	r0, 800866e <_dtoa_r+0xce>
 8008656:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008658:	2301      	movs	r3, #1
 800865a:	6013      	str	r3, [r2, #0]
 800865c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800865e:	b113      	cbz	r3, 8008666 <_dtoa_r+0xc6>
 8008660:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008662:	4b84      	ldr	r3, [pc, #528]	@ (8008874 <_dtoa_r+0x2d4>)
 8008664:	6013      	str	r3, [r2, #0]
 8008666:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008888 <_dtoa_r+0x2e8>
 800866a:	f000 bd33 	b.w	80090d4 <_dtoa_r+0xb34>
 800866e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008672:	aa16      	add	r2, sp, #88	@ 0x58
 8008674:	a917      	add	r1, sp, #92	@ 0x5c
 8008676:	4658      	mov	r0, fp
 8008678:	f001 fd86 	bl	800a188 <__d2b>
 800867c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008680:	4681      	mov	r9, r0
 8008682:	2e00      	cmp	r6, #0
 8008684:	d077      	beq.n	8008776 <_dtoa_r+0x1d6>
 8008686:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008688:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800868c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008690:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008694:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008698:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800869c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80086a0:	4619      	mov	r1, r3
 80086a2:	2200      	movs	r2, #0
 80086a4:	4b74      	ldr	r3, [pc, #464]	@ (8008878 <_dtoa_r+0x2d8>)
 80086a6:	f7f7 fdff 	bl	80002a8 <__aeabi_dsub>
 80086aa:	a369      	add	r3, pc, #420	@ (adr r3, 8008850 <_dtoa_r+0x2b0>)
 80086ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b0:	f7f7 ffb2 	bl	8000618 <__aeabi_dmul>
 80086b4:	a368      	add	r3, pc, #416	@ (adr r3, 8008858 <_dtoa_r+0x2b8>)
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	f7f7 fdf7 	bl	80002ac <__adddf3>
 80086be:	4604      	mov	r4, r0
 80086c0:	4630      	mov	r0, r6
 80086c2:	460d      	mov	r5, r1
 80086c4:	f7f7 ff3e 	bl	8000544 <__aeabi_i2d>
 80086c8:	a365      	add	r3, pc, #404	@ (adr r3, 8008860 <_dtoa_r+0x2c0>)
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	f7f7 ffa3 	bl	8000618 <__aeabi_dmul>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4620      	mov	r0, r4
 80086d8:	4629      	mov	r1, r5
 80086da:	f7f7 fde7 	bl	80002ac <__adddf3>
 80086de:	4604      	mov	r4, r0
 80086e0:	460d      	mov	r5, r1
 80086e2:	f7f8 fa49 	bl	8000b78 <__aeabi_d2iz>
 80086e6:	2200      	movs	r2, #0
 80086e8:	4607      	mov	r7, r0
 80086ea:	2300      	movs	r3, #0
 80086ec:	4620      	mov	r0, r4
 80086ee:	4629      	mov	r1, r5
 80086f0:	f7f8 fa04 	bl	8000afc <__aeabi_dcmplt>
 80086f4:	b140      	cbz	r0, 8008708 <_dtoa_r+0x168>
 80086f6:	4638      	mov	r0, r7
 80086f8:	f7f7 ff24 	bl	8000544 <__aeabi_i2d>
 80086fc:	4622      	mov	r2, r4
 80086fe:	462b      	mov	r3, r5
 8008700:	f7f8 f9f2 	bl	8000ae8 <__aeabi_dcmpeq>
 8008704:	b900      	cbnz	r0, 8008708 <_dtoa_r+0x168>
 8008706:	3f01      	subs	r7, #1
 8008708:	2f16      	cmp	r7, #22
 800870a:	d851      	bhi.n	80087b0 <_dtoa_r+0x210>
 800870c:	4b5b      	ldr	r3, [pc, #364]	@ (800887c <_dtoa_r+0x2dc>)
 800870e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008716:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800871a:	f7f8 f9ef 	bl	8000afc <__aeabi_dcmplt>
 800871e:	2800      	cmp	r0, #0
 8008720:	d048      	beq.n	80087b4 <_dtoa_r+0x214>
 8008722:	3f01      	subs	r7, #1
 8008724:	2300      	movs	r3, #0
 8008726:	9312      	str	r3, [sp, #72]	@ 0x48
 8008728:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800872a:	1b9b      	subs	r3, r3, r6
 800872c:	1e5a      	subs	r2, r3, #1
 800872e:	bf44      	itt	mi
 8008730:	f1c3 0801 	rsbmi	r8, r3, #1
 8008734:	2300      	movmi	r3, #0
 8008736:	9208      	str	r2, [sp, #32]
 8008738:	bf54      	ite	pl
 800873a:	f04f 0800 	movpl.w	r8, #0
 800873e:	9308      	strmi	r3, [sp, #32]
 8008740:	2f00      	cmp	r7, #0
 8008742:	db39      	blt.n	80087b8 <_dtoa_r+0x218>
 8008744:	9b08      	ldr	r3, [sp, #32]
 8008746:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008748:	443b      	add	r3, r7
 800874a:	9308      	str	r3, [sp, #32]
 800874c:	2300      	movs	r3, #0
 800874e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008752:	2b09      	cmp	r3, #9
 8008754:	d864      	bhi.n	8008820 <_dtoa_r+0x280>
 8008756:	2b05      	cmp	r3, #5
 8008758:	bfc4      	itt	gt
 800875a:	3b04      	subgt	r3, #4
 800875c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800875e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008760:	f1a3 0302 	sub.w	r3, r3, #2
 8008764:	bfcc      	ite	gt
 8008766:	2400      	movgt	r4, #0
 8008768:	2401      	movle	r4, #1
 800876a:	2b03      	cmp	r3, #3
 800876c:	d863      	bhi.n	8008836 <_dtoa_r+0x296>
 800876e:	e8df f003 	tbb	[pc, r3]
 8008772:	372a      	.short	0x372a
 8008774:	5535      	.short	0x5535
 8008776:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800877a:	441e      	add	r6, r3
 800877c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008780:	2b20      	cmp	r3, #32
 8008782:	bfc1      	itttt	gt
 8008784:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008788:	409f      	lslgt	r7, r3
 800878a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800878e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008792:	bfd6      	itet	le
 8008794:	f1c3 0320 	rsble	r3, r3, #32
 8008798:	ea47 0003 	orrgt.w	r0, r7, r3
 800879c:	fa04 f003 	lslle.w	r0, r4, r3
 80087a0:	f7f7 fec0 	bl	8000524 <__aeabi_ui2d>
 80087a4:	2201      	movs	r2, #1
 80087a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80087aa:	3e01      	subs	r6, #1
 80087ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80087ae:	e777      	b.n	80086a0 <_dtoa_r+0x100>
 80087b0:	2301      	movs	r3, #1
 80087b2:	e7b8      	b.n	8008726 <_dtoa_r+0x186>
 80087b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80087b6:	e7b7      	b.n	8008728 <_dtoa_r+0x188>
 80087b8:	427b      	negs	r3, r7
 80087ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80087bc:	2300      	movs	r3, #0
 80087be:	eba8 0807 	sub.w	r8, r8, r7
 80087c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80087c4:	e7c4      	b.n	8008750 <_dtoa_r+0x1b0>
 80087c6:	2300      	movs	r3, #0
 80087c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dc35      	bgt.n	800883c <_dtoa_r+0x29c>
 80087d0:	2301      	movs	r3, #1
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	9307      	str	r3, [sp, #28]
 80087d6:	461a      	mov	r2, r3
 80087d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80087da:	e00b      	b.n	80087f4 <_dtoa_r+0x254>
 80087dc:	2301      	movs	r3, #1
 80087de:	e7f3      	b.n	80087c8 <_dtoa_r+0x228>
 80087e0:	2300      	movs	r3, #0
 80087e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087e6:	18fb      	adds	r3, r7, r3
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	3301      	adds	r3, #1
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	9307      	str	r3, [sp, #28]
 80087f0:	bfb8      	it	lt
 80087f2:	2301      	movlt	r3, #1
 80087f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80087f8:	2100      	movs	r1, #0
 80087fa:	2204      	movs	r2, #4
 80087fc:	f102 0514 	add.w	r5, r2, #20
 8008800:	429d      	cmp	r5, r3
 8008802:	d91f      	bls.n	8008844 <_dtoa_r+0x2a4>
 8008804:	6041      	str	r1, [r0, #4]
 8008806:	4658      	mov	r0, fp
 8008808:	f001 f8da 	bl	80099c0 <_Balloc>
 800880c:	4682      	mov	sl, r0
 800880e:	2800      	cmp	r0, #0
 8008810:	d13c      	bne.n	800888c <_dtoa_r+0x2ec>
 8008812:	4b1b      	ldr	r3, [pc, #108]	@ (8008880 <_dtoa_r+0x2e0>)
 8008814:	4602      	mov	r2, r0
 8008816:	f240 11af 	movw	r1, #431	@ 0x1af
 800881a:	e6d8      	b.n	80085ce <_dtoa_r+0x2e>
 800881c:	2301      	movs	r3, #1
 800881e:	e7e0      	b.n	80087e2 <_dtoa_r+0x242>
 8008820:	2401      	movs	r4, #1
 8008822:	2300      	movs	r3, #0
 8008824:	9309      	str	r3, [sp, #36]	@ 0x24
 8008826:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008828:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	9307      	str	r3, [sp, #28]
 8008830:	2200      	movs	r2, #0
 8008832:	2312      	movs	r3, #18
 8008834:	e7d0      	b.n	80087d8 <_dtoa_r+0x238>
 8008836:	2301      	movs	r3, #1
 8008838:	930b      	str	r3, [sp, #44]	@ 0x2c
 800883a:	e7f5      	b.n	8008828 <_dtoa_r+0x288>
 800883c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	9307      	str	r3, [sp, #28]
 8008842:	e7d7      	b.n	80087f4 <_dtoa_r+0x254>
 8008844:	3101      	adds	r1, #1
 8008846:	0052      	lsls	r2, r2, #1
 8008848:	e7d8      	b.n	80087fc <_dtoa_r+0x25c>
 800884a:	bf00      	nop
 800884c:	f3af 8000 	nop.w
 8008850:	636f4361 	.word	0x636f4361
 8008854:	3fd287a7 	.word	0x3fd287a7
 8008858:	8b60c8b3 	.word	0x8b60c8b3
 800885c:	3fc68a28 	.word	0x3fc68a28
 8008860:	509f79fb 	.word	0x509f79fb
 8008864:	3fd34413 	.word	0x3fd34413
 8008868:	0800affa 	.word	0x0800affa
 800886c:	0800b0bc 	.word	0x0800b0bc
 8008870:	7ff00000 	.word	0x7ff00000
 8008874:	0800afd2 	.word	0x0800afd2
 8008878:	3ff80000 	.word	0x3ff80000
 800887c:	0800b218 	.word	0x0800b218
 8008880:	0800b114 	.word	0x0800b114
 8008884:	0800b0b8 	.word	0x0800b0b8
 8008888:	0800afd1 	.word	0x0800afd1
 800888c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008890:	6018      	str	r0, [r3, #0]
 8008892:	9b07      	ldr	r3, [sp, #28]
 8008894:	2b0e      	cmp	r3, #14
 8008896:	f200 80a4 	bhi.w	80089e2 <_dtoa_r+0x442>
 800889a:	2c00      	cmp	r4, #0
 800889c:	f000 80a1 	beq.w	80089e2 <_dtoa_r+0x442>
 80088a0:	2f00      	cmp	r7, #0
 80088a2:	dd33      	ble.n	800890c <_dtoa_r+0x36c>
 80088a4:	4bad      	ldr	r3, [pc, #692]	@ (8008b5c <_dtoa_r+0x5bc>)
 80088a6:	f007 020f 	and.w	r2, r7, #15
 80088aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088ae:	ed93 7b00 	vldr	d7, [r3]
 80088b2:	05f8      	lsls	r0, r7, #23
 80088b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80088b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80088bc:	d516      	bpl.n	80088ec <_dtoa_r+0x34c>
 80088be:	4ba8      	ldr	r3, [pc, #672]	@ (8008b60 <_dtoa_r+0x5c0>)
 80088c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088c8:	f7f7 ffd0 	bl	800086c <__aeabi_ddiv>
 80088cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088d0:	f004 040f 	and.w	r4, r4, #15
 80088d4:	2603      	movs	r6, #3
 80088d6:	4da2      	ldr	r5, [pc, #648]	@ (8008b60 <_dtoa_r+0x5c0>)
 80088d8:	b954      	cbnz	r4, 80088f0 <_dtoa_r+0x350>
 80088da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088e2:	f7f7 ffc3 	bl	800086c <__aeabi_ddiv>
 80088e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088ea:	e028      	b.n	800893e <_dtoa_r+0x39e>
 80088ec:	2602      	movs	r6, #2
 80088ee:	e7f2      	b.n	80088d6 <_dtoa_r+0x336>
 80088f0:	07e1      	lsls	r1, r4, #31
 80088f2:	d508      	bpl.n	8008906 <_dtoa_r+0x366>
 80088f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088fc:	f7f7 fe8c 	bl	8000618 <__aeabi_dmul>
 8008900:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008904:	3601      	adds	r6, #1
 8008906:	1064      	asrs	r4, r4, #1
 8008908:	3508      	adds	r5, #8
 800890a:	e7e5      	b.n	80088d8 <_dtoa_r+0x338>
 800890c:	f000 80d2 	beq.w	8008ab4 <_dtoa_r+0x514>
 8008910:	427c      	negs	r4, r7
 8008912:	4b92      	ldr	r3, [pc, #584]	@ (8008b5c <_dtoa_r+0x5bc>)
 8008914:	4d92      	ldr	r5, [pc, #584]	@ (8008b60 <_dtoa_r+0x5c0>)
 8008916:	f004 020f 	and.w	r2, r4, #15
 800891a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008926:	f7f7 fe77 	bl	8000618 <__aeabi_dmul>
 800892a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800892e:	1124      	asrs	r4, r4, #4
 8008930:	2300      	movs	r3, #0
 8008932:	2602      	movs	r6, #2
 8008934:	2c00      	cmp	r4, #0
 8008936:	f040 80b2 	bne.w	8008a9e <_dtoa_r+0x4fe>
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1d3      	bne.n	80088e6 <_dtoa_r+0x346>
 800893e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008940:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008944:	2b00      	cmp	r3, #0
 8008946:	f000 80b7 	beq.w	8008ab8 <_dtoa_r+0x518>
 800894a:	4b86      	ldr	r3, [pc, #536]	@ (8008b64 <_dtoa_r+0x5c4>)
 800894c:	2200      	movs	r2, #0
 800894e:	4620      	mov	r0, r4
 8008950:	4629      	mov	r1, r5
 8008952:	f7f8 f8d3 	bl	8000afc <__aeabi_dcmplt>
 8008956:	2800      	cmp	r0, #0
 8008958:	f000 80ae 	beq.w	8008ab8 <_dtoa_r+0x518>
 800895c:	9b07      	ldr	r3, [sp, #28]
 800895e:	2b00      	cmp	r3, #0
 8008960:	f000 80aa 	beq.w	8008ab8 <_dtoa_r+0x518>
 8008964:	9b00      	ldr	r3, [sp, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	dd37      	ble.n	80089da <_dtoa_r+0x43a>
 800896a:	1e7b      	subs	r3, r7, #1
 800896c:	9304      	str	r3, [sp, #16]
 800896e:	4620      	mov	r0, r4
 8008970:	4b7d      	ldr	r3, [pc, #500]	@ (8008b68 <_dtoa_r+0x5c8>)
 8008972:	2200      	movs	r2, #0
 8008974:	4629      	mov	r1, r5
 8008976:	f7f7 fe4f 	bl	8000618 <__aeabi_dmul>
 800897a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800897e:	9c00      	ldr	r4, [sp, #0]
 8008980:	3601      	adds	r6, #1
 8008982:	4630      	mov	r0, r6
 8008984:	f7f7 fdde 	bl	8000544 <__aeabi_i2d>
 8008988:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800898c:	f7f7 fe44 	bl	8000618 <__aeabi_dmul>
 8008990:	4b76      	ldr	r3, [pc, #472]	@ (8008b6c <_dtoa_r+0x5cc>)
 8008992:	2200      	movs	r2, #0
 8008994:	f7f7 fc8a 	bl	80002ac <__adddf3>
 8008998:	4605      	mov	r5, r0
 800899a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800899e:	2c00      	cmp	r4, #0
 80089a0:	f040 808d 	bne.w	8008abe <_dtoa_r+0x51e>
 80089a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089a8:	4b71      	ldr	r3, [pc, #452]	@ (8008b70 <_dtoa_r+0x5d0>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	f7f7 fc7c 	bl	80002a8 <__aeabi_dsub>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089b8:	462a      	mov	r2, r5
 80089ba:	4633      	mov	r3, r6
 80089bc:	f7f8 f8bc 	bl	8000b38 <__aeabi_dcmpgt>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	f040 828b 	bne.w	8008edc <_dtoa_r+0x93c>
 80089c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089ca:	462a      	mov	r2, r5
 80089cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80089d0:	f7f8 f894 	bl	8000afc <__aeabi_dcmplt>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	f040 8128 	bne.w	8008c2a <_dtoa_r+0x68a>
 80089da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80089de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80089e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f2c0 815a 	blt.w	8008c9e <_dtoa_r+0x6fe>
 80089ea:	2f0e      	cmp	r7, #14
 80089ec:	f300 8157 	bgt.w	8008c9e <_dtoa_r+0x6fe>
 80089f0:	4b5a      	ldr	r3, [pc, #360]	@ (8008b5c <_dtoa_r+0x5bc>)
 80089f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089f6:	ed93 7b00 	vldr	d7, [r3]
 80089fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	ed8d 7b00 	vstr	d7, [sp]
 8008a02:	da03      	bge.n	8008a0c <_dtoa_r+0x46c>
 8008a04:	9b07      	ldr	r3, [sp, #28]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f340 8101 	ble.w	8008c0e <_dtoa_r+0x66e>
 8008a0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a10:	4656      	mov	r6, sl
 8008a12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a16:	4620      	mov	r0, r4
 8008a18:	4629      	mov	r1, r5
 8008a1a:	f7f7 ff27 	bl	800086c <__aeabi_ddiv>
 8008a1e:	f7f8 f8ab 	bl	8000b78 <__aeabi_d2iz>
 8008a22:	4680      	mov	r8, r0
 8008a24:	f7f7 fd8e 	bl	8000544 <__aeabi_i2d>
 8008a28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a2c:	f7f7 fdf4 	bl	8000618 <__aeabi_dmul>
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	4620      	mov	r0, r4
 8008a36:	4629      	mov	r1, r5
 8008a38:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008a3c:	f7f7 fc34 	bl	80002a8 <__aeabi_dsub>
 8008a40:	f806 4b01 	strb.w	r4, [r6], #1
 8008a44:	9d07      	ldr	r5, [sp, #28]
 8008a46:	eba6 040a 	sub.w	r4, r6, sl
 8008a4a:	42a5      	cmp	r5, r4
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	460b      	mov	r3, r1
 8008a50:	f040 8117 	bne.w	8008c82 <_dtoa_r+0x6e2>
 8008a54:	f7f7 fc2a 	bl	80002ac <__adddf3>
 8008a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	460d      	mov	r5, r1
 8008a60:	f7f8 f86a 	bl	8000b38 <__aeabi_dcmpgt>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	f040 80f9 	bne.w	8008c5c <_dtoa_r+0x6bc>
 8008a6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a6e:	4620      	mov	r0, r4
 8008a70:	4629      	mov	r1, r5
 8008a72:	f7f8 f839 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a76:	b118      	cbz	r0, 8008a80 <_dtoa_r+0x4e0>
 8008a78:	f018 0f01 	tst.w	r8, #1
 8008a7c:	f040 80ee 	bne.w	8008c5c <_dtoa_r+0x6bc>
 8008a80:	4649      	mov	r1, r9
 8008a82:	4658      	mov	r0, fp
 8008a84:	f000 ffdc 	bl	8009a40 <_Bfree>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	7033      	strb	r3, [r6, #0]
 8008a8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a8e:	3701      	adds	r7, #1
 8008a90:	601f      	str	r7, [r3, #0]
 8008a92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f000 831d 	beq.w	80090d4 <_dtoa_r+0xb34>
 8008a9a:	601e      	str	r6, [r3, #0]
 8008a9c:	e31a      	b.n	80090d4 <_dtoa_r+0xb34>
 8008a9e:	07e2      	lsls	r2, r4, #31
 8008aa0:	d505      	bpl.n	8008aae <_dtoa_r+0x50e>
 8008aa2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008aa6:	f7f7 fdb7 	bl	8000618 <__aeabi_dmul>
 8008aaa:	3601      	adds	r6, #1
 8008aac:	2301      	movs	r3, #1
 8008aae:	1064      	asrs	r4, r4, #1
 8008ab0:	3508      	adds	r5, #8
 8008ab2:	e73f      	b.n	8008934 <_dtoa_r+0x394>
 8008ab4:	2602      	movs	r6, #2
 8008ab6:	e742      	b.n	800893e <_dtoa_r+0x39e>
 8008ab8:	9c07      	ldr	r4, [sp, #28]
 8008aba:	9704      	str	r7, [sp, #16]
 8008abc:	e761      	b.n	8008982 <_dtoa_r+0x3e2>
 8008abe:	4b27      	ldr	r3, [pc, #156]	@ (8008b5c <_dtoa_r+0x5bc>)
 8008ac0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ac2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ac6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008aca:	4454      	add	r4, sl
 8008acc:	2900      	cmp	r1, #0
 8008ace:	d053      	beq.n	8008b78 <_dtoa_r+0x5d8>
 8008ad0:	4928      	ldr	r1, [pc, #160]	@ (8008b74 <_dtoa_r+0x5d4>)
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	f7f7 feca 	bl	800086c <__aeabi_ddiv>
 8008ad8:	4633      	mov	r3, r6
 8008ada:	462a      	mov	r2, r5
 8008adc:	f7f7 fbe4 	bl	80002a8 <__aeabi_dsub>
 8008ae0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ae4:	4656      	mov	r6, sl
 8008ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aea:	f7f8 f845 	bl	8000b78 <__aeabi_d2iz>
 8008aee:	4605      	mov	r5, r0
 8008af0:	f7f7 fd28 	bl	8000544 <__aeabi_i2d>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008afc:	f7f7 fbd4 	bl	80002a8 <__aeabi_dsub>
 8008b00:	3530      	adds	r5, #48	@ 0x30
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b0a:	f806 5b01 	strb.w	r5, [r6], #1
 8008b0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b12:	f7f7 fff3 	bl	8000afc <__aeabi_dcmplt>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d171      	bne.n	8008bfe <_dtoa_r+0x65e>
 8008b1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b1e:	4911      	ldr	r1, [pc, #68]	@ (8008b64 <_dtoa_r+0x5c4>)
 8008b20:	2000      	movs	r0, #0
 8008b22:	f7f7 fbc1 	bl	80002a8 <__aeabi_dsub>
 8008b26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b2a:	f7f7 ffe7 	bl	8000afc <__aeabi_dcmplt>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	f040 8095 	bne.w	8008c5e <_dtoa_r+0x6be>
 8008b34:	42a6      	cmp	r6, r4
 8008b36:	f43f af50 	beq.w	80089da <_dtoa_r+0x43a>
 8008b3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8008b68 <_dtoa_r+0x5c8>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	f7f7 fd69 	bl	8000618 <__aeabi_dmul>
 8008b46:	4b08      	ldr	r3, [pc, #32]	@ (8008b68 <_dtoa_r+0x5c8>)
 8008b48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b52:	f7f7 fd61 	bl	8000618 <__aeabi_dmul>
 8008b56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b5a:	e7c4      	b.n	8008ae6 <_dtoa_r+0x546>
 8008b5c:	0800b218 	.word	0x0800b218
 8008b60:	0800b1f0 	.word	0x0800b1f0
 8008b64:	3ff00000 	.word	0x3ff00000
 8008b68:	40240000 	.word	0x40240000
 8008b6c:	401c0000 	.word	0x401c0000
 8008b70:	40140000 	.word	0x40140000
 8008b74:	3fe00000 	.word	0x3fe00000
 8008b78:	4631      	mov	r1, r6
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f7f7 fd4c 	bl	8000618 <__aeabi_dmul>
 8008b80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b84:	9415      	str	r4, [sp, #84]	@ 0x54
 8008b86:	4656      	mov	r6, sl
 8008b88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b8c:	f7f7 fff4 	bl	8000b78 <__aeabi_d2iz>
 8008b90:	4605      	mov	r5, r0
 8008b92:	f7f7 fcd7 	bl	8000544 <__aeabi_i2d>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b9e:	f7f7 fb83 	bl	80002a8 <__aeabi_dsub>
 8008ba2:	3530      	adds	r5, #48	@ 0x30
 8008ba4:	f806 5b01 	strb.w	r5, [r6], #1
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	42a6      	cmp	r6, r4
 8008bae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008bb2:	f04f 0200 	mov.w	r2, #0
 8008bb6:	d124      	bne.n	8008c02 <_dtoa_r+0x662>
 8008bb8:	4bac      	ldr	r3, [pc, #688]	@ (8008e6c <_dtoa_r+0x8cc>)
 8008bba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008bbe:	f7f7 fb75 	bl	80002ac <__adddf3>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bca:	f7f7 ffb5 	bl	8000b38 <__aeabi_dcmpgt>
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	d145      	bne.n	8008c5e <_dtoa_r+0x6be>
 8008bd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008bd6:	49a5      	ldr	r1, [pc, #660]	@ (8008e6c <_dtoa_r+0x8cc>)
 8008bd8:	2000      	movs	r0, #0
 8008bda:	f7f7 fb65 	bl	80002a8 <__aeabi_dsub>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008be6:	f7f7 ff89 	bl	8000afc <__aeabi_dcmplt>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	f43f aef5 	beq.w	80089da <_dtoa_r+0x43a>
 8008bf0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008bf2:	1e73      	subs	r3, r6, #1
 8008bf4:	9315      	str	r3, [sp, #84]	@ 0x54
 8008bf6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008bfa:	2b30      	cmp	r3, #48	@ 0x30
 8008bfc:	d0f8      	beq.n	8008bf0 <_dtoa_r+0x650>
 8008bfe:	9f04      	ldr	r7, [sp, #16]
 8008c00:	e73e      	b.n	8008a80 <_dtoa_r+0x4e0>
 8008c02:	4b9b      	ldr	r3, [pc, #620]	@ (8008e70 <_dtoa_r+0x8d0>)
 8008c04:	f7f7 fd08 	bl	8000618 <__aeabi_dmul>
 8008c08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c0c:	e7bc      	b.n	8008b88 <_dtoa_r+0x5e8>
 8008c0e:	d10c      	bne.n	8008c2a <_dtoa_r+0x68a>
 8008c10:	4b98      	ldr	r3, [pc, #608]	@ (8008e74 <_dtoa_r+0x8d4>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c18:	f7f7 fcfe 	bl	8000618 <__aeabi_dmul>
 8008c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c20:	f7f7 ff80 	bl	8000b24 <__aeabi_dcmpge>
 8008c24:	2800      	cmp	r0, #0
 8008c26:	f000 8157 	beq.w	8008ed8 <_dtoa_r+0x938>
 8008c2a:	2400      	movs	r4, #0
 8008c2c:	4625      	mov	r5, r4
 8008c2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c30:	43db      	mvns	r3, r3
 8008c32:	9304      	str	r3, [sp, #16]
 8008c34:	4656      	mov	r6, sl
 8008c36:	2700      	movs	r7, #0
 8008c38:	4621      	mov	r1, r4
 8008c3a:	4658      	mov	r0, fp
 8008c3c:	f000 ff00 	bl	8009a40 <_Bfree>
 8008c40:	2d00      	cmp	r5, #0
 8008c42:	d0dc      	beq.n	8008bfe <_dtoa_r+0x65e>
 8008c44:	b12f      	cbz	r7, 8008c52 <_dtoa_r+0x6b2>
 8008c46:	42af      	cmp	r7, r5
 8008c48:	d003      	beq.n	8008c52 <_dtoa_r+0x6b2>
 8008c4a:	4639      	mov	r1, r7
 8008c4c:	4658      	mov	r0, fp
 8008c4e:	f000 fef7 	bl	8009a40 <_Bfree>
 8008c52:	4629      	mov	r1, r5
 8008c54:	4658      	mov	r0, fp
 8008c56:	f000 fef3 	bl	8009a40 <_Bfree>
 8008c5a:	e7d0      	b.n	8008bfe <_dtoa_r+0x65e>
 8008c5c:	9704      	str	r7, [sp, #16]
 8008c5e:	4633      	mov	r3, r6
 8008c60:	461e      	mov	r6, r3
 8008c62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c66:	2a39      	cmp	r2, #57	@ 0x39
 8008c68:	d107      	bne.n	8008c7a <_dtoa_r+0x6da>
 8008c6a:	459a      	cmp	sl, r3
 8008c6c:	d1f8      	bne.n	8008c60 <_dtoa_r+0x6c0>
 8008c6e:	9a04      	ldr	r2, [sp, #16]
 8008c70:	3201      	adds	r2, #1
 8008c72:	9204      	str	r2, [sp, #16]
 8008c74:	2230      	movs	r2, #48	@ 0x30
 8008c76:	f88a 2000 	strb.w	r2, [sl]
 8008c7a:	781a      	ldrb	r2, [r3, #0]
 8008c7c:	3201      	adds	r2, #1
 8008c7e:	701a      	strb	r2, [r3, #0]
 8008c80:	e7bd      	b.n	8008bfe <_dtoa_r+0x65e>
 8008c82:	4b7b      	ldr	r3, [pc, #492]	@ (8008e70 <_dtoa_r+0x8d0>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	f7f7 fcc7 	bl	8000618 <__aeabi_dmul>
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	4604      	mov	r4, r0
 8008c90:	460d      	mov	r5, r1
 8008c92:	f7f7 ff29 	bl	8000ae8 <__aeabi_dcmpeq>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	f43f aebb 	beq.w	8008a12 <_dtoa_r+0x472>
 8008c9c:	e6f0      	b.n	8008a80 <_dtoa_r+0x4e0>
 8008c9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ca0:	2a00      	cmp	r2, #0
 8008ca2:	f000 80db 	beq.w	8008e5c <_dtoa_r+0x8bc>
 8008ca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ca8:	2a01      	cmp	r2, #1
 8008caa:	f300 80bf 	bgt.w	8008e2c <_dtoa_r+0x88c>
 8008cae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008cb0:	2a00      	cmp	r2, #0
 8008cb2:	f000 80b7 	beq.w	8008e24 <_dtoa_r+0x884>
 8008cb6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008cba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008cbc:	4646      	mov	r6, r8
 8008cbe:	9a08      	ldr	r2, [sp, #32]
 8008cc0:	2101      	movs	r1, #1
 8008cc2:	441a      	add	r2, r3
 8008cc4:	4658      	mov	r0, fp
 8008cc6:	4498      	add	r8, r3
 8008cc8:	9208      	str	r2, [sp, #32]
 8008cca:	f000 ffb7 	bl	8009c3c <__i2b>
 8008cce:	4605      	mov	r5, r0
 8008cd0:	b15e      	cbz	r6, 8008cea <_dtoa_r+0x74a>
 8008cd2:	9b08      	ldr	r3, [sp, #32]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	dd08      	ble.n	8008cea <_dtoa_r+0x74a>
 8008cd8:	42b3      	cmp	r3, r6
 8008cda:	9a08      	ldr	r2, [sp, #32]
 8008cdc:	bfa8      	it	ge
 8008cde:	4633      	movge	r3, r6
 8008ce0:	eba8 0803 	sub.w	r8, r8, r3
 8008ce4:	1af6      	subs	r6, r6, r3
 8008ce6:	1ad3      	subs	r3, r2, r3
 8008ce8:	9308      	str	r3, [sp, #32]
 8008cea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cec:	b1f3      	cbz	r3, 8008d2c <_dtoa_r+0x78c>
 8008cee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 80b7 	beq.w	8008e64 <_dtoa_r+0x8c4>
 8008cf6:	b18c      	cbz	r4, 8008d1c <_dtoa_r+0x77c>
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	4622      	mov	r2, r4
 8008cfc:	4658      	mov	r0, fp
 8008cfe:	f001 f85d 	bl	8009dbc <__pow5mult>
 8008d02:	464a      	mov	r2, r9
 8008d04:	4601      	mov	r1, r0
 8008d06:	4605      	mov	r5, r0
 8008d08:	4658      	mov	r0, fp
 8008d0a:	f000 ffad 	bl	8009c68 <__multiply>
 8008d0e:	4649      	mov	r1, r9
 8008d10:	9004      	str	r0, [sp, #16]
 8008d12:	4658      	mov	r0, fp
 8008d14:	f000 fe94 	bl	8009a40 <_Bfree>
 8008d18:	9b04      	ldr	r3, [sp, #16]
 8008d1a:	4699      	mov	r9, r3
 8008d1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d1e:	1b1a      	subs	r2, r3, r4
 8008d20:	d004      	beq.n	8008d2c <_dtoa_r+0x78c>
 8008d22:	4649      	mov	r1, r9
 8008d24:	4658      	mov	r0, fp
 8008d26:	f001 f849 	bl	8009dbc <__pow5mult>
 8008d2a:	4681      	mov	r9, r0
 8008d2c:	2101      	movs	r1, #1
 8008d2e:	4658      	mov	r0, fp
 8008d30:	f000 ff84 	bl	8009c3c <__i2b>
 8008d34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d36:	4604      	mov	r4, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 81cf 	beq.w	80090dc <_dtoa_r+0xb3c>
 8008d3e:	461a      	mov	r2, r3
 8008d40:	4601      	mov	r1, r0
 8008d42:	4658      	mov	r0, fp
 8008d44:	f001 f83a 	bl	8009dbc <__pow5mult>
 8008d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	f300 8095 	bgt.w	8008e7c <_dtoa_r+0x8dc>
 8008d52:	9b02      	ldr	r3, [sp, #8]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f040 8087 	bne.w	8008e68 <_dtoa_r+0x8c8>
 8008d5a:	9b03      	ldr	r3, [sp, #12]
 8008d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f040 8089 	bne.w	8008e78 <_dtoa_r+0x8d8>
 8008d66:	9b03      	ldr	r3, [sp, #12]
 8008d68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d6c:	0d1b      	lsrs	r3, r3, #20
 8008d6e:	051b      	lsls	r3, r3, #20
 8008d70:	b12b      	cbz	r3, 8008d7e <_dtoa_r+0x7de>
 8008d72:	9b08      	ldr	r3, [sp, #32]
 8008d74:	3301      	adds	r3, #1
 8008d76:	9308      	str	r3, [sp, #32]
 8008d78:	f108 0801 	add.w	r8, r8, #1
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 81b0 	beq.w	80090e8 <_dtoa_r+0xb48>
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d8e:	6918      	ldr	r0, [r3, #16]
 8008d90:	f000 ff08 	bl	8009ba4 <__hi0bits>
 8008d94:	f1c0 0020 	rsb	r0, r0, #32
 8008d98:	9b08      	ldr	r3, [sp, #32]
 8008d9a:	4418      	add	r0, r3
 8008d9c:	f010 001f 	ands.w	r0, r0, #31
 8008da0:	d077      	beq.n	8008e92 <_dtoa_r+0x8f2>
 8008da2:	f1c0 0320 	rsb	r3, r0, #32
 8008da6:	2b04      	cmp	r3, #4
 8008da8:	dd6b      	ble.n	8008e82 <_dtoa_r+0x8e2>
 8008daa:	9b08      	ldr	r3, [sp, #32]
 8008dac:	f1c0 001c 	rsb	r0, r0, #28
 8008db0:	4403      	add	r3, r0
 8008db2:	4480      	add	r8, r0
 8008db4:	4406      	add	r6, r0
 8008db6:	9308      	str	r3, [sp, #32]
 8008db8:	f1b8 0f00 	cmp.w	r8, #0
 8008dbc:	dd05      	ble.n	8008dca <_dtoa_r+0x82a>
 8008dbe:	4649      	mov	r1, r9
 8008dc0:	4642      	mov	r2, r8
 8008dc2:	4658      	mov	r0, fp
 8008dc4:	f001 f854 	bl	8009e70 <__lshift>
 8008dc8:	4681      	mov	r9, r0
 8008dca:	9b08      	ldr	r3, [sp, #32]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	dd05      	ble.n	8008ddc <_dtoa_r+0x83c>
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	4658      	mov	r0, fp
 8008dd6:	f001 f84b 	bl	8009e70 <__lshift>
 8008dda:	4604      	mov	r4, r0
 8008ddc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d059      	beq.n	8008e96 <_dtoa_r+0x8f6>
 8008de2:	4621      	mov	r1, r4
 8008de4:	4648      	mov	r0, r9
 8008de6:	f001 f8af 	bl	8009f48 <__mcmp>
 8008dea:	2800      	cmp	r0, #0
 8008dec:	da53      	bge.n	8008e96 <_dtoa_r+0x8f6>
 8008dee:	1e7b      	subs	r3, r7, #1
 8008df0:	9304      	str	r3, [sp, #16]
 8008df2:	4649      	mov	r1, r9
 8008df4:	2300      	movs	r3, #0
 8008df6:	220a      	movs	r2, #10
 8008df8:	4658      	mov	r0, fp
 8008dfa:	f000 fe43 	bl	8009a84 <__multadd>
 8008dfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e00:	4681      	mov	r9, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f000 8172 	beq.w	80090ec <_dtoa_r+0xb4c>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	220a      	movs	r2, #10
 8008e0e:	4658      	mov	r0, fp
 8008e10:	f000 fe38 	bl	8009a84 <__multadd>
 8008e14:	9b00      	ldr	r3, [sp, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	4605      	mov	r5, r0
 8008e1a:	dc67      	bgt.n	8008eec <_dtoa_r+0x94c>
 8008e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	dc41      	bgt.n	8008ea6 <_dtoa_r+0x906>
 8008e22:	e063      	b.n	8008eec <_dtoa_r+0x94c>
 8008e24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008e26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008e2a:	e746      	b.n	8008cba <_dtoa_r+0x71a>
 8008e2c:	9b07      	ldr	r3, [sp, #28]
 8008e2e:	1e5c      	subs	r4, r3, #1
 8008e30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e32:	42a3      	cmp	r3, r4
 8008e34:	bfbf      	itttt	lt
 8008e36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008e38:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008e3a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008e3c:	1ae3      	sublt	r3, r4, r3
 8008e3e:	bfb4      	ite	lt
 8008e40:	18d2      	addlt	r2, r2, r3
 8008e42:	1b1c      	subge	r4, r3, r4
 8008e44:	9b07      	ldr	r3, [sp, #28]
 8008e46:	bfbc      	itt	lt
 8008e48:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008e4a:	2400      	movlt	r4, #0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	bfb5      	itete	lt
 8008e50:	eba8 0603 	sublt.w	r6, r8, r3
 8008e54:	9b07      	ldrge	r3, [sp, #28]
 8008e56:	2300      	movlt	r3, #0
 8008e58:	4646      	movge	r6, r8
 8008e5a:	e730      	b.n	8008cbe <_dtoa_r+0x71e>
 8008e5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008e5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008e60:	4646      	mov	r6, r8
 8008e62:	e735      	b.n	8008cd0 <_dtoa_r+0x730>
 8008e64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e66:	e75c      	b.n	8008d22 <_dtoa_r+0x782>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	e788      	b.n	8008d7e <_dtoa_r+0x7de>
 8008e6c:	3fe00000 	.word	0x3fe00000
 8008e70:	40240000 	.word	0x40240000
 8008e74:	40140000 	.word	0x40140000
 8008e78:	9b02      	ldr	r3, [sp, #8]
 8008e7a:	e780      	b.n	8008d7e <_dtoa_r+0x7de>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e80:	e782      	b.n	8008d88 <_dtoa_r+0x7e8>
 8008e82:	d099      	beq.n	8008db8 <_dtoa_r+0x818>
 8008e84:	9a08      	ldr	r2, [sp, #32]
 8008e86:	331c      	adds	r3, #28
 8008e88:	441a      	add	r2, r3
 8008e8a:	4498      	add	r8, r3
 8008e8c:	441e      	add	r6, r3
 8008e8e:	9208      	str	r2, [sp, #32]
 8008e90:	e792      	b.n	8008db8 <_dtoa_r+0x818>
 8008e92:	4603      	mov	r3, r0
 8008e94:	e7f6      	b.n	8008e84 <_dtoa_r+0x8e4>
 8008e96:	9b07      	ldr	r3, [sp, #28]
 8008e98:	9704      	str	r7, [sp, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	dc20      	bgt.n	8008ee0 <_dtoa_r+0x940>
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	dd1e      	ble.n	8008ee4 <_dtoa_r+0x944>
 8008ea6:	9b00      	ldr	r3, [sp, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f47f aec0 	bne.w	8008c2e <_dtoa_r+0x68e>
 8008eae:	4621      	mov	r1, r4
 8008eb0:	2205      	movs	r2, #5
 8008eb2:	4658      	mov	r0, fp
 8008eb4:	f000 fde6 	bl	8009a84 <__multadd>
 8008eb8:	4601      	mov	r1, r0
 8008eba:	4604      	mov	r4, r0
 8008ebc:	4648      	mov	r0, r9
 8008ebe:	f001 f843 	bl	8009f48 <__mcmp>
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	f77f aeb3 	ble.w	8008c2e <_dtoa_r+0x68e>
 8008ec8:	4656      	mov	r6, sl
 8008eca:	2331      	movs	r3, #49	@ 0x31
 8008ecc:	f806 3b01 	strb.w	r3, [r6], #1
 8008ed0:	9b04      	ldr	r3, [sp, #16]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	9304      	str	r3, [sp, #16]
 8008ed6:	e6ae      	b.n	8008c36 <_dtoa_r+0x696>
 8008ed8:	9c07      	ldr	r4, [sp, #28]
 8008eda:	9704      	str	r7, [sp, #16]
 8008edc:	4625      	mov	r5, r4
 8008ede:	e7f3      	b.n	8008ec8 <_dtoa_r+0x928>
 8008ee0:	9b07      	ldr	r3, [sp, #28]
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 8104 	beq.w	80090f4 <_dtoa_r+0xb54>
 8008eec:	2e00      	cmp	r6, #0
 8008eee:	dd05      	ble.n	8008efc <_dtoa_r+0x95c>
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	4632      	mov	r2, r6
 8008ef4:	4658      	mov	r0, fp
 8008ef6:	f000 ffbb 	bl	8009e70 <__lshift>
 8008efa:	4605      	mov	r5, r0
 8008efc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d05a      	beq.n	8008fb8 <_dtoa_r+0xa18>
 8008f02:	6869      	ldr	r1, [r5, #4]
 8008f04:	4658      	mov	r0, fp
 8008f06:	f000 fd5b 	bl	80099c0 <_Balloc>
 8008f0a:	4606      	mov	r6, r0
 8008f0c:	b928      	cbnz	r0, 8008f1a <_dtoa_r+0x97a>
 8008f0e:	4b84      	ldr	r3, [pc, #528]	@ (8009120 <_dtoa_r+0xb80>)
 8008f10:	4602      	mov	r2, r0
 8008f12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008f16:	f7ff bb5a 	b.w	80085ce <_dtoa_r+0x2e>
 8008f1a:	692a      	ldr	r2, [r5, #16]
 8008f1c:	3202      	adds	r2, #2
 8008f1e:	0092      	lsls	r2, r2, #2
 8008f20:	f105 010c 	add.w	r1, r5, #12
 8008f24:	300c      	adds	r0, #12
 8008f26:	f7ff fa78 	bl	800841a <memcpy>
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	4631      	mov	r1, r6
 8008f2e:	4658      	mov	r0, fp
 8008f30:	f000 ff9e 	bl	8009e70 <__lshift>
 8008f34:	f10a 0301 	add.w	r3, sl, #1
 8008f38:	9307      	str	r3, [sp, #28]
 8008f3a:	9b00      	ldr	r3, [sp, #0]
 8008f3c:	4453      	add	r3, sl
 8008f3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f40:	9b02      	ldr	r3, [sp, #8]
 8008f42:	f003 0301 	and.w	r3, r3, #1
 8008f46:	462f      	mov	r7, r5
 8008f48:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f4a:	4605      	mov	r5, r0
 8008f4c:	9b07      	ldr	r3, [sp, #28]
 8008f4e:	4621      	mov	r1, r4
 8008f50:	3b01      	subs	r3, #1
 8008f52:	4648      	mov	r0, r9
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	f7ff fa9b 	bl	8008490 <quorem>
 8008f5a:	4639      	mov	r1, r7
 8008f5c:	9002      	str	r0, [sp, #8]
 8008f5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008f62:	4648      	mov	r0, r9
 8008f64:	f000 fff0 	bl	8009f48 <__mcmp>
 8008f68:	462a      	mov	r2, r5
 8008f6a:	9008      	str	r0, [sp, #32]
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	4658      	mov	r0, fp
 8008f70:	f001 f806 	bl	8009f80 <__mdiff>
 8008f74:	68c2      	ldr	r2, [r0, #12]
 8008f76:	4606      	mov	r6, r0
 8008f78:	bb02      	cbnz	r2, 8008fbc <_dtoa_r+0xa1c>
 8008f7a:	4601      	mov	r1, r0
 8008f7c:	4648      	mov	r0, r9
 8008f7e:	f000 ffe3 	bl	8009f48 <__mcmp>
 8008f82:	4602      	mov	r2, r0
 8008f84:	4631      	mov	r1, r6
 8008f86:	4658      	mov	r0, fp
 8008f88:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f8a:	f000 fd59 	bl	8009a40 <_Bfree>
 8008f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f92:	9e07      	ldr	r6, [sp, #28]
 8008f94:	ea43 0102 	orr.w	r1, r3, r2
 8008f98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f9a:	4319      	orrs	r1, r3
 8008f9c:	d110      	bne.n	8008fc0 <_dtoa_r+0xa20>
 8008f9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008fa2:	d029      	beq.n	8008ff8 <_dtoa_r+0xa58>
 8008fa4:	9b08      	ldr	r3, [sp, #32]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	dd02      	ble.n	8008fb0 <_dtoa_r+0xa10>
 8008faa:	9b02      	ldr	r3, [sp, #8]
 8008fac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008fb0:	9b00      	ldr	r3, [sp, #0]
 8008fb2:	f883 8000 	strb.w	r8, [r3]
 8008fb6:	e63f      	b.n	8008c38 <_dtoa_r+0x698>
 8008fb8:	4628      	mov	r0, r5
 8008fba:	e7bb      	b.n	8008f34 <_dtoa_r+0x994>
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	e7e1      	b.n	8008f84 <_dtoa_r+0x9e4>
 8008fc0:	9b08      	ldr	r3, [sp, #32]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	db04      	blt.n	8008fd0 <_dtoa_r+0xa30>
 8008fc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008fc8:	430b      	orrs	r3, r1
 8008fca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008fcc:	430b      	orrs	r3, r1
 8008fce:	d120      	bne.n	8009012 <_dtoa_r+0xa72>
 8008fd0:	2a00      	cmp	r2, #0
 8008fd2:	dded      	ble.n	8008fb0 <_dtoa_r+0xa10>
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	4658      	mov	r0, fp
 8008fda:	f000 ff49 	bl	8009e70 <__lshift>
 8008fde:	4621      	mov	r1, r4
 8008fe0:	4681      	mov	r9, r0
 8008fe2:	f000 ffb1 	bl	8009f48 <__mcmp>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	dc03      	bgt.n	8008ff2 <_dtoa_r+0xa52>
 8008fea:	d1e1      	bne.n	8008fb0 <_dtoa_r+0xa10>
 8008fec:	f018 0f01 	tst.w	r8, #1
 8008ff0:	d0de      	beq.n	8008fb0 <_dtoa_r+0xa10>
 8008ff2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ff6:	d1d8      	bne.n	8008faa <_dtoa_r+0xa0a>
 8008ff8:	9a00      	ldr	r2, [sp, #0]
 8008ffa:	2339      	movs	r3, #57	@ 0x39
 8008ffc:	7013      	strb	r3, [r2, #0]
 8008ffe:	4633      	mov	r3, r6
 8009000:	461e      	mov	r6, r3
 8009002:	3b01      	subs	r3, #1
 8009004:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009008:	2a39      	cmp	r2, #57	@ 0x39
 800900a:	d052      	beq.n	80090b2 <_dtoa_r+0xb12>
 800900c:	3201      	adds	r2, #1
 800900e:	701a      	strb	r2, [r3, #0]
 8009010:	e612      	b.n	8008c38 <_dtoa_r+0x698>
 8009012:	2a00      	cmp	r2, #0
 8009014:	dd07      	ble.n	8009026 <_dtoa_r+0xa86>
 8009016:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800901a:	d0ed      	beq.n	8008ff8 <_dtoa_r+0xa58>
 800901c:	9a00      	ldr	r2, [sp, #0]
 800901e:	f108 0301 	add.w	r3, r8, #1
 8009022:	7013      	strb	r3, [r2, #0]
 8009024:	e608      	b.n	8008c38 <_dtoa_r+0x698>
 8009026:	9b07      	ldr	r3, [sp, #28]
 8009028:	9a07      	ldr	r2, [sp, #28]
 800902a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800902e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009030:	4293      	cmp	r3, r2
 8009032:	d028      	beq.n	8009086 <_dtoa_r+0xae6>
 8009034:	4649      	mov	r1, r9
 8009036:	2300      	movs	r3, #0
 8009038:	220a      	movs	r2, #10
 800903a:	4658      	mov	r0, fp
 800903c:	f000 fd22 	bl	8009a84 <__multadd>
 8009040:	42af      	cmp	r7, r5
 8009042:	4681      	mov	r9, r0
 8009044:	f04f 0300 	mov.w	r3, #0
 8009048:	f04f 020a 	mov.w	r2, #10
 800904c:	4639      	mov	r1, r7
 800904e:	4658      	mov	r0, fp
 8009050:	d107      	bne.n	8009062 <_dtoa_r+0xac2>
 8009052:	f000 fd17 	bl	8009a84 <__multadd>
 8009056:	4607      	mov	r7, r0
 8009058:	4605      	mov	r5, r0
 800905a:	9b07      	ldr	r3, [sp, #28]
 800905c:	3301      	adds	r3, #1
 800905e:	9307      	str	r3, [sp, #28]
 8009060:	e774      	b.n	8008f4c <_dtoa_r+0x9ac>
 8009062:	f000 fd0f 	bl	8009a84 <__multadd>
 8009066:	4629      	mov	r1, r5
 8009068:	4607      	mov	r7, r0
 800906a:	2300      	movs	r3, #0
 800906c:	220a      	movs	r2, #10
 800906e:	4658      	mov	r0, fp
 8009070:	f000 fd08 	bl	8009a84 <__multadd>
 8009074:	4605      	mov	r5, r0
 8009076:	e7f0      	b.n	800905a <_dtoa_r+0xaba>
 8009078:	9b00      	ldr	r3, [sp, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	bfcc      	ite	gt
 800907e:	461e      	movgt	r6, r3
 8009080:	2601      	movle	r6, #1
 8009082:	4456      	add	r6, sl
 8009084:	2700      	movs	r7, #0
 8009086:	4649      	mov	r1, r9
 8009088:	2201      	movs	r2, #1
 800908a:	4658      	mov	r0, fp
 800908c:	f000 fef0 	bl	8009e70 <__lshift>
 8009090:	4621      	mov	r1, r4
 8009092:	4681      	mov	r9, r0
 8009094:	f000 ff58 	bl	8009f48 <__mcmp>
 8009098:	2800      	cmp	r0, #0
 800909a:	dcb0      	bgt.n	8008ffe <_dtoa_r+0xa5e>
 800909c:	d102      	bne.n	80090a4 <_dtoa_r+0xb04>
 800909e:	f018 0f01 	tst.w	r8, #1
 80090a2:	d1ac      	bne.n	8008ffe <_dtoa_r+0xa5e>
 80090a4:	4633      	mov	r3, r6
 80090a6:	461e      	mov	r6, r3
 80090a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090ac:	2a30      	cmp	r2, #48	@ 0x30
 80090ae:	d0fa      	beq.n	80090a6 <_dtoa_r+0xb06>
 80090b0:	e5c2      	b.n	8008c38 <_dtoa_r+0x698>
 80090b2:	459a      	cmp	sl, r3
 80090b4:	d1a4      	bne.n	8009000 <_dtoa_r+0xa60>
 80090b6:	9b04      	ldr	r3, [sp, #16]
 80090b8:	3301      	adds	r3, #1
 80090ba:	9304      	str	r3, [sp, #16]
 80090bc:	2331      	movs	r3, #49	@ 0x31
 80090be:	f88a 3000 	strb.w	r3, [sl]
 80090c2:	e5b9      	b.n	8008c38 <_dtoa_r+0x698>
 80090c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80090c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009124 <_dtoa_r+0xb84>
 80090ca:	b11b      	cbz	r3, 80090d4 <_dtoa_r+0xb34>
 80090cc:	f10a 0308 	add.w	r3, sl, #8
 80090d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80090d2:	6013      	str	r3, [r2, #0]
 80090d4:	4650      	mov	r0, sl
 80090d6:	b019      	add	sp, #100	@ 0x64
 80090d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090de:	2b01      	cmp	r3, #1
 80090e0:	f77f ae37 	ble.w	8008d52 <_dtoa_r+0x7b2>
 80090e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80090e8:	2001      	movs	r0, #1
 80090ea:	e655      	b.n	8008d98 <_dtoa_r+0x7f8>
 80090ec:	9b00      	ldr	r3, [sp, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f77f aed6 	ble.w	8008ea0 <_dtoa_r+0x900>
 80090f4:	4656      	mov	r6, sl
 80090f6:	4621      	mov	r1, r4
 80090f8:	4648      	mov	r0, r9
 80090fa:	f7ff f9c9 	bl	8008490 <quorem>
 80090fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009102:	f806 8b01 	strb.w	r8, [r6], #1
 8009106:	9b00      	ldr	r3, [sp, #0]
 8009108:	eba6 020a 	sub.w	r2, r6, sl
 800910c:	4293      	cmp	r3, r2
 800910e:	ddb3      	ble.n	8009078 <_dtoa_r+0xad8>
 8009110:	4649      	mov	r1, r9
 8009112:	2300      	movs	r3, #0
 8009114:	220a      	movs	r2, #10
 8009116:	4658      	mov	r0, fp
 8009118:	f000 fcb4 	bl	8009a84 <__multadd>
 800911c:	4681      	mov	r9, r0
 800911e:	e7ea      	b.n	80090f6 <_dtoa_r+0xb56>
 8009120:	0800b114 	.word	0x0800b114
 8009124:	0800b0af 	.word	0x0800b0af

08009128 <_free_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	4605      	mov	r5, r0
 800912c:	2900      	cmp	r1, #0
 800912e:	d041      	beq.n	80091b4 <_free_r+0x8c>
 8009130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009134:	1f0c      	subs	r4, r1, #4
 8009136:	2b00      	cmp	r3, #0
 8009138:	bfb8      	it	lt
 800913a:	18e4      	addlt	r4, r4, r3
 800913c:	f000 fc34 	bl	80099a8 <__malloc_lock>
 8009140:	4a1d      	ldr	r2, [pc, #116]	@ (80091b8 <_free_r+0x90>)
 8009142:	6813      	ldr	r3, [r2, #0]
 8009144:	b933      	cbnz	r3, 8009154 <_free_r+0x2c>
 8009146:	6063      	str	r3, [r4, #4]
 8009148:	6014      	str	r4, [r2, #0]
 800914a:	4628      	mov	r0, r5
 800914c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009150:	f000 bc30 	b.w	80099b4 <__malloc_unlock>
 8009154:	42a3      	cmp	r3, r4
 8009156:	d908      	bls.n	800916a <_free_r+0x42>
 8009158:	6820      	ldr	r0, [r4, #0]
 800915a:	1821      	adds	r1, r4, r0
 800915c:	428b      	cmp	r3, r1
 800915e:	bf01      	itttt	eq
 8009160:	6819      	ldreq	r1, [r3, #0]
 8009162:	685b      	ldreq	r3, [r3, #4]
 8009164:	1809      	addeq	r1, r1, r0
 8009166:	6021      	streq	r1, [r4, #0]
 8009168:	e7ed      	b.n	8009146 <_free_r+0x1e>
 800916a:	461a      	mov	r2, r3
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	b10b      	cbz	r3, 8009174 <_free_r+0x4c>
 8009170:	42a3      	cmp	r3, r4
 8009172:	d9fa      	bls.n	800916a <_free_r+0x42>
 8009174:	6811      	ldr	r1, [r2, #0]
 8009176:	1850      	adds	r0, r2, r1
 8009178:	42a0      	cmp	r0, r4
 800917a:	d10b      	bne.n	8009194 <_free_r+0x6c>
 800917c:	6820      	ldr	r0, [r4, #0]
 800917e:	4401      	add	r1, r0
 8009180:	1850      	adds	r0, r2, r1
 8009182:	4283      	cmp	r3, r0
 8009184:	6011      	str	r1, [r2, #0]
 8009186:	d1e0      	bne.n	800914a <_free_r+0x22>
 8009188:	6818      	ldr	r0, [r3, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	6053      	str	r3, [r2, #4]
 800918e:	4408      	add	r0, r1
 8009190:	6010      	str	r0, [r2, #0]
 8009192:	e7da      	b.n	800914a <_free_r+0x22>
 8009194:	d902      	bls.n	800919c <_free_r+0x74>
 8009196:	230c      	movs	r3, #12
 8009198:	602b      	str	r3, [r5, #0]
 800919a:	e7d6      	b.n	800914a <_free_r+0x22>
 800919c:	6820      	ldr	r0, [r4, #0]
 800919e:	1821      	adds	r1, r4, r0
 80091a0:	428b      	cmp	r3, r1
 80091a2:	bf04      	itt	eq
 80091a4:	6819      	ldreq	r1, [r3, #0]
 80091a6:	685b      	ldreq	r3, [r3, #4]
 80091a8:	6063      	str	r3, [r4, #4]
 80091aa:	bf04      	itt	eq
 80091ac:	1809      	addeq	r1, r1, r0
 80091ae:	6021      	streq	r1, [r4, #0]
 80091b0:	6054      	str	r4, [r2, #4]
 80091b2:	e7ca      	b.n	800914a <_free_r+0x22>
 80091b4:	bd38      	pop	{r3, r4, r5, pc}
 80091b6:	bf00      	nop
 80091b8:	200050a4 	.word	0x200050a4

080091bc <rshift>:
 80091bc:	6903      	ldr	r3, [r0, #16]
 80091be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80091c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80091ca:	f100 0414 	add.w	r4, r0, #20
 80091ce:	dd45      	ble.n	800925c <rshift+0xa0>
 80091d0:	f011 011f 	ands.w	r1, r1, #31
 80091d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80091d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80091dc:	d10c      	bne.n	80091f8 <rshift+0x3c>
 80091de:	f100 0710 	add.w	r7, r0, #16
 80091e2:	4629      	mov	r1, r5
 80091e4:	42b1      	cmp	r1, r6
 80091e6:	d334      	bcc.n	8009252 <rshift+0x96>
 80091e8:	1a9b      	subs	r3, r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	1eea      	subs	r2, r5, #3
 80091ee:	4296      	cmp	r6, r2
 80091f0:	bf38      	it	cc
 80091f2:	2300      	movcc	r3, #0
 80091f4:	4423      	add	r3, r4
 80091f6:	e015      	b.n	8009224 <rshift+0x68>
 80091f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80091fc:	f1c1 0820 	rsb	r8, r1, #32
 8009200:	40cf      	lsrs	r7, r1
 8009202:	f105 0e04 	add.w	lr, r5, #4
 8009206:	46a1      	mov	r9, r4
 8009208:	4576      	cmp	r6, lr
 800920a:	46f4      	mov	ip, lr
 800920c:	d815      	bhi.n	800923a <rshift+0x7e>
 800920e:	1a9a      	subs	r2, r3, r2
 8009210:	0092      	lsls	r2, r2, #2
 8009212:	3a04      	subs	r2, #4
 8009214:	3501      	adds	r5, #1
 8009216:	42ae      	cmp	r6, r5
 8009218:	bf38      	it	cc
 800921a:	2200      	movcc	r2, #0
 800921c:	18a3      	adds	r3, r4, r2
 800921e:	50a7      	str	r7, [r4, r2]
 8009220:	b107      	cbz	r7, 8009224 <rshift+0x68>
 8009222:	3304      	adds	r3, #4
 8009224:	1b1a      	subs	r2, r3, r4
 8009226:	42a3      	cmp	r3, r4
 8009228:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800922c:	bf08      	it	eq
 800922e:	2300      	moveq	r3, #0
 8009230:	6102      	str	r2, [r0, #16]
 8009232:	bf08      	it	eq
 8009234:	6143      	streq	r3, [r0, #20]
 8009236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800923a:	f8dc c000 	ldr.w	ip, [ip]
 800923e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009242:	ea4c 0707 	orr.w	r7, ip, r7
 8009246:	f849 7b04 	str.w	r7, [r9], #4
 800924a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800924e:	40cf      	lsrs	r7, r1
 8009250:	e7da      	b.n	8009208 <rshift+0x4c>
 8009252:	f851 cb04 	ldr.w	ip, [r1], #4
 8009256:	f847 cf04 	str.w	ip, [r7, #4]!
 800925a:	e7c3      	b.n	80091e4 <rshift+0x28>
 800925c:	4623      	mov	r3, r4
 800925e:	e7e1      	b.n	8009224 <rshift+0x68>

08009260 <__hexdig_fun>:
 8009260:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009264:	2b09      	cmp	r3, #9
 8009266:	d802      	bhi.n	800926e <__hexdig_fun+0xe>
 8009268:	3820      	subs	r0, #32
 800926a:	b2c0      	uxtb	r0, r0
 800926c:	4770      	bx	lr
 800926e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009272:	2b05      	cmp	r3, #5
 8009274:	d801      	bhi.n	800927a <__hexdig_fun+0x1a>
 8009276:	3847      	subs	r0, #71	@ 0x47
 8009278:	e7f7      	b.n	800926a <__hexdig_fun+0xa>
 800927a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800927e:	2b05      	cmp	r3, #5
 8009280:	d801      	bhi.n	8009286 <__hexdig_fun+0x26>
 8009282:	3827      	subs	r0, #39	@ 0x27
 8009284:	e7f1      	b.n	800926a <__hexdig_fun+0xa>
 8009286:	2000      	movs	r0, #0
 8009288:	4770      	bx	lr
	...

0800928c <__gethex>:
 800928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009290:	b085      	sub	sp, #20
 8009292:	468a      	mov	sl, r1
 8009294:	9302      	str	r3, [sp, #8]
 8009296:	680b      	ldr	r3, [r1, #0]
 8009298:	9001      	str	r0, [sp, #4]
 800929a:	4690      	mov	r8, r2
 800929c:	1c9c      	adds	r4, r3, #2
 800929e:	46a1      	mov	r9, r4
 80092a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80092a4:	2830      	cmp	r0, #48	@ 0x30
 80092a6:	d0fa      	beq.n	800929e <__gethex+0x12>
 80092a8:	eba9 0303 	sub.w	r3, r9, r3
 80092ac:	f1a3 0b02 	sub.w	fp, r3, #2
 80092b0:	f7ff ffd6 	bl	8009260 <__hexdig_fun>
 80092b4:	4605      	mov	r5, r0
 80092b6:	2800      	cmp	r0, #0
 80092b8:	d168      	bne.n	800938c <__gethex+0x100>
 80092ba:	49a0      	ldr	r1, [pc, #640]	@ (800953c <__gethex+0x2b0>)
 80092bc:	2201      	movs	r2, #1
 80092be:	4648      	mov	r0, r9
 80092c0:	f7fe ff6f 	bl	80081a2 <strncmp>
 80092c4:	4607      	mov	r7, r0
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d167      	bne.n	800939a <__gethex+0x10e>
 80092ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 80092ce:	4626      	mov	r6, r4
 80092d0:	f7ff ffc6 	bl	8009260 <__hexdig_fun>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d062      	beq.n	800939e <__gethex+0x112>
 80092d8:	4623      	mov	r3, r4
 80092da:	7818      	ldrb	r0, [r3, #0]
 80092dc:	2830      	cmp	r0, #48	@ 0x30
 80092de:	4699      	mov	r9, r3
 80092e0:	f103 0301 	add.w	r3, r3, #1
 80092e4:	d0f9      	beq.n	80092da <__gethex+0x4e>
 80092e6:	f7ff ffbb 	bl	8009260 <__hexdig_fun>
 80092ea:	fab0 f580 	clz	r5, r0
 80092ee:	096d      	lsrs	r5, r5, #5
 80092f0:	f04f 0b01 	mov.w	fp, #1
 80092f4:	464a      	mov	r2, r9
 80092f6:	4616      	mov	r6, r2
 80092f8:	3201      	adds	r2, #1
 80092fa:	7830      	ldrb	r0, [r6, #0]
 80092fc:	f7ff ffb0 	bl	8009260 <__hexdig_fun>
 8009300:	2800      	cmp	r0, #0
 8009302:	d1f8      	bne.n	80092f6 <__gethex+0x6a>
 8009304:	498d      	ldr	r1, [pc, #564]	@ (800953c <__gethex+0x2b0>)
 8009306:	2201      	movs	r2, #1
 8009308:	4630      	mov	r0, r6
 800930a:	f7fe ff4a 	bl	80081a2 <strncmp>
 800930e:	2800      	cmp	r0, #0
 8009310:	d13f      	bne.n	8009392 <__gethex+0x106>
 8009312:	b944      	cbnz	r4, 8009326 <__gethex+0x9a>
 8009314:	1c74      	adds	r4, r6, #1
 8009316:	4622      	mov	r2, r4
 8009318:	4616      	mov	r6, r2
 800931a:	3201      	adds	r2, #1
 800931c:	7830      	ldrb	r0, [r6, #0]
 800931e:	f7ff ff9f 	bl	8009260 <__hexdig_fun>
 8009322:	2800      	cmp	r0, #0
 8009324:	d1f8      	bne.n	8009318 <__gethex+0x8c>
 8009326:	1ba4      	subs	r4, r4, r6
 8009328:	00a7      	lsls	r7, r4, #2
 800932a:	7833      	ldrb	r3, [r6, #0]
 800932c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009330:	2b50      	cmp	r3, #80	@ 0x50
 8009332:	d13e      	bne.n	80093b2 <__gethex+0x126>
 8009334:	7873      	ldrb	r3, [r6, #1]
 8009336:	2b2b      	cmp	r3, #43	@ 0x2b
 8009338:	d033      	beq.n	80093a2 <__gethex+0x116>
 800933a:	2b2d      	cmp	r3, #45	@ 0x2d
 800933c:	d034      	beq.n	80093a8 <__gethex+0x11c>
 800933e:	1c71      	adds	r1, r6, #1
 8009340:	2400      	movs	r4, #0
 8009342:	7808      	ldrb	r0, [r1, #0]
 8009344:	f7ff ff8c 	bl	8009260 <__hexdig_fun>
 8009348:	1e43      	subs	r3, r0, #1
 800934a:	b2db      	uxtb	r3, r3
 800934c:	2b18      	cmp	r3, #24
 800934e:	d830      	bhi.n	80093b2 <__gethex+0x126>
 8009350:	f1a0 0210 	sub.w	r2, r0, #16
 8009354:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009358:	f7ff ff82 	bl	8009260 <__hexdig_fun>
 800935c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009360:	fa5f fc8c 	uxtb.w	ip, ip
 8009364:	f1bc 0f18 	cmp.w	ip, #24
 8009368:	f04f 030a 	mov.w	r3, #10
 800936c:	d91e      	bls.n	80093ac <__gethex+0x120>
 800936e:	b104      	cbz	r4, 8009372 <__gethex+0xe6>
 8009370:	4252      	negs	r2, r2
 8009372:	4417      	add	r7, r2
 8009374:	f8ca 1000 	str.w	r1, [sl]
 8009378:	b1ed      	cbz	r5, 80093b6 <__gethex+0x12a>
 800937a:	f1bb 0f00 	cmp.w	fp, #0
 800937e:	bf0c      	ite	eq
 8009380:	2506      	moveq	r5, #6
 8009382:	2500      	movne	r5, #0
 8009384:	4628      	mov	r0, r5
 8009386:	b005      	add	sp, #20
 8009388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800938c:	2500      	movs	r5, #0
 800938e:	462c      	mov	r4, r5
 8009390:	e7b0      	b.n	80092f4 <__gethex+0x68>
 8009392:	2c00      	cmp	r4, #0
 8009394:	d1c7      	bne.n	8009326 <__gethex+0x9a>
 8009396:	4627      	mov	r7, r4
 8009398:	e7c7      	b.n	800932a <__gethex+0x9e>
 800939a:	464e      	mov	r6, r9
 800939c:	462f      	mov	r7, r5
 800939e:	2501      	movs	r5, #1
 80093a0:	e7c3      	b.n	800932a <__gethex+0x9e>
 80093a2:	2400      	movs	r4, #0
 80093a4:	1cb1      	adds	r1, r6, #2
 80093a6:	e7cc      	b.n	8009342 <__gethex+0xb6>
 80093a8:	2401      	movs	r4, #1
 80093aa:	e7fb      	b.n	80093a4 <__gethex+0x118>
 80093ac:	fb03 0002 	mla	r0, r3, r2, r0
 80093b0:	e7ce      	b.n	8009350 <__gethex+0xc4>
 80093b2:	4631      	mov	r1, r6
 80093b4:	e7de      	b.n	8009374 <__gethex+0xe8>
 80093b6:	eba6 0309 	sub.w	r3, r6, r9
 80093ba:	3b01      	subs	r3, #1
 80093bc:	4629      	mov	r1, r5
 80093be:	2b07      	cmp	r3, #7
 80093c0:	dc0a      	bgt.n	80093d8 <__gethex+0x14c>
 80093c2:	9801      	ldr	r0, [sp, #4]
 80093c4:	f000 fafc 	bl	80099c0 <_Balloc>
 80093c8:	4604      	mov	r4, r0
 80093ca:	b940      	cbnz	r0, 80093de <__gethex+0x152>
 80093cc:	4b5c      	ldr	r3, [pc, #368]	@ (8009540 <__gethex+0x2b4>)
 80093ce:	4602      	mov	r2, r0
 80093d0:	21e4      	movs	r1, #228	@ 0xe4
 80093d2:	485c      	ldr	r0, [pc, #368]	@ (8009544 <__gethex+0x2b8>)
 80093d4:	f7ff f83e 	bl	8008454 <__assert_func>
 80093d8:	3101      	adds	r1, #1
 80093da:	105b      	asrs	r3, r3, #1
 80093dc:	e7ef      	b.n	80093be <__gethex+0x132>
 80093de:	f100 0a14 	add.w	sl, r0, #20
 80093e2:	2300      	movs	r3, #0
 80093e4:	4655      	mov	r5, sl
 80093e6:	469b      	mov	fp, r3
 80093e8:	45b1      	cmp	r9, r6
 80093ea:	d337      	bcc.n	800945c <__gethex+0x1d0>
 80093ec:	f845 bb04 	str.w	fp, [r5], #4
 80093f0:	eba5 050a 	sub.w	r5, r5, sl
 80093f4:	10ad      	asrs	r5, r5, #2
 80093f6:	6125      	str	r5, [r4, #16]
 80093f8:	4658      	mov	r0, fp
 80093fa:	f000 fbd3 	bl	8009ba4 <__hi0bits>
 80093fe:	016d      	lsls	r5, r5, #5
 8009400:	f8d8 6000 	ldr.w	r6, [r8]
 8009404:	1a2d      	subs	r5, r5, r0
 8009406:	42b5      	cmp	r5, r6
 8009408:	dd54      	ble.n	80094b4 <__gethex+0x228>
 800940a:	1bad      	subs	r5, r5, r6
 800940c:	4629      	mov	r1, r5
 800940e:	4620      	mov	r0, r4
 8009410:	f000 ff67 	bl	800a2e2 <__any_on>
 8009414:	4681      	mov	r9, r0
 8009416:	b178      	cbz	r0, 8009438 <__gethex+0x1ac>
 8009418:	1e6b      	subs	r3, r5, #1
 800941a:	1159      	asrs	r1, r3, #5
 800941c:	f003 021f 	and.w	r2, r3, #31
 8009420:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009424:	f04f 0901 	mov.w	r9, #1
 8009428:	fa09 f202 	lsl.w	r2, r9, r2
 800942c:	420a      	tst	r2, r1
 800942e:	d003      	beq.n	8009438 <__gethex+0x1ac>
 8009430:	454b      	cmp	r3, r9
 8009432:	dc36      	bgt.n	80094a2 <__gethex+0x216>
 8009434:	f04f 0902 	mov.w	r9, #2
 8009438:	4629      	mov	r1, r5
 800943a:	4620      	mov	r0, r4
 800943c:	f7ff febe 	bl	80091bc <rshift>
 8009440:	442f      	add	r7, r5
 8009442:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009446:	42bb      	cmp	r3, r7
 8009448:	da42      	bge.n	80094d0 <__gethex+0x244>
 800944a:	9801      	ldr	r0, [sp, #4]
 800944c:	4621      	mov	r1, r4
 800944e:	f000 faf7 	bl	8009a40 <_Bfree>
 8009452:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009454:	2300      	movs	r3, #0
 8009456:	6013      	str	r3, [r2, #0]
 8009458:	25a3      	movs	r5, #163	@ 0xa3
 800945a:	e793      	b.n	8009384 <__gethex+0xf8>
 800945c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009460:	2a2e      	cmp	r2, #46	@ 0x2e
 8009462:	d012      	beq.n	800948a <__gethex+0x1fe>
 8009464:	2b20      	cmp	r3, #32
 8009466:	d104      	bne.n	8009472 <__gethex+0x1e6>
 8009468:	f845 bb04 	str.w	fp, [r5], #4
 800946c:	f04f 0b00 	mov.w	fp, #0
 8009470:	465b      	mov	r3, fp
 8009472:	7830      	ldrb	r0, [r6, #0]
 8009474:	9303      	str	r3, [sp, #12]
 8009476:	f7ff fef3 	bl	8009260 <__hexdig_fun>
 800947a:	9b03      	ldr	r3, [sp, #12]
 800947c:	f000 000f 	and.w	r0, r0, #15
 8009480:	4098      	lsls	r0, r3
 8009482:	ea4b 0b00 	orr.w	fp, fp, r0
 8009486:	3304      	adds	r3, #4
 8009488:	e7ae      	b.n	80093e8 <__gethex+0x15c>
 800948a:	45b1      	cmp	r9, r6
 800948c:	d8ea      	bhi.n	8009464 <__gethex+0x1d8>
 800948e:	492b      	ldr	r1, [pc, #172]	@ (800953c <__gethex+0x2b0>)
 8009490:	9303      	str	r3, [sp, #12]
 8009492:	2201      	movs	r2, #1
 8009494:	4630      	mov	r0, r6
 8009496:	f7fe fe84 	bl	80081a2 <strncmp>
 800949a:	9b03      	ldr	r3, [sp, #12]
 800949c:	2800      	cmp	r0, #0
 800949e:	d1e1      	bne.n	8009464 <__gethex+0x1d8>
 80094a0:	e7a2      	b.n	80093e8 <__gethex+0x15c>
 80094a2:	1ea9      	subs	r1, r5, #2
 80094a4:	4620      	mov	r0, r4
 80094a6:	f000 ff1c 	bl	800a2e2 <__any_on>
 80094aa:	2800      	cmp	r0, #0
 80094ac:	d0c2      	beq.n	8009434 <__gethex+0x1a8>
 80094ae:	f04f 0903 	mov.w	r9, #3
 80094b2:	e7c1      	b.n	8009438 <__gethex+0x1ac>
 80094b4:	da09      	bge.n	80094ca <__gethex+0x23e>
 80094b6:	1b75      	subs	r5, r6, r5
 80094b8:	4621      	mov	r1, r4
 80094ba:	9801      	ldr	r0, [sp, #4]
 80094bc:	462a      	mov	r2, r5
 80094be:	f000 fcd7 	bl	8009e70 <__lshift>
 80094c2:	1b7f      	subs	r7, r7, r5
 80094c4:	4604      	mov	r4, r0
 80094c6:	f100 0a14 	add.w	sl, r0, #20
 80094ca:	f04f 0900 	mov.w	r9, #0
 80094ce:	e7b8      	b.n	8009442 <__gethex+0x1b6>
 80094d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80094d4:	42bd      	cmp	r5, r7
 80094d6:	dd6f      	ble.n	80095b8 <__gethex+0x32c>
 80094d8:	1bed      	subs	r5, r5, r7
 80094da:	42ae      	cmp	r6, r5
 80094dc:	dc34      	bgt.n	8009548 <__gethex+0x2bc>
 80094de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d022      	beq.n	800952c <__gethex+0x2a0>
 80094e6:	2b03      	cmp	r3, #3
 80094e8:	d024      	beq.n	8009534 <__gethex+0x2a8>
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d115      	bne.n	800951a <__gethex+0x28e>
 80094ee:	42ae      	cmp	r6, r5
 80094f0:	d113      	bne.n	800951a <__gethex+0x28e>
 80094f2:	2e01      	cmp	r6, #1
 80094f4:	d10b      	bne.n	800950e <__gethex+0x282>
 80094f6:	9a02      	ldr	r2, [sp, #8]
 80094f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094fc:	6013      	str	r3, [r2, #0]
 80094fe:	2301      	movs	r3, #1
 8009500:	6123      	str	r3, [r4, #16]
 8009502:	f8ca 3000 	str.w	r3, [sl]
 8009506:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009508:	2562      	movs	r5, #98	@ 0x62
 800950a:	601c      	str	r4, [r3, #0]
 800950c:	e73a      	b.n	8009384 <__gethex+0xf8>
 800950e:	1e71      	subs	r1, r6, #1
 8009510:	4620      	mov	r0, r4
 8009512:	f000 fee6 	bl	800a2e2 <__any_on>
 8009516:	2800      	cmp	r0, #0
 8009518:	d1ed      	bne.n	80094f6 <__gethex+0x26a>
 800951a:	9801      	ldr	r0, [sp, #4]
 800951c:	4621      	mov	r1, r4
 800951e:	f000 fa8f 	bl	8009a40 <_Bfree>
 8009522:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009524:	2300      	movs	r3, #0
 8009526:	6013      	str	r3, [r2, #0]
 8009528:	2550      	movs	r5, #80	@ 0x50
 800952a:	e72b      	b.n	8009384 <__gethex+0xf8>
 800952c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1f3      	bne.n	800951a <__gethex+0x28e>
 8009532:	e7e0      	b.n	80094f6 <__gethex+0x26a>
 8009534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1dd      	bne.n	80094f6 <__gethex+0x26a>
 800953a:	e7ee      	b.n	800951a <__gethex+0x28e>
 800953c:	0800ae68 	.word	0x0800ae68
 8009540:	0800b114 	.word	0x0800b114
 8009544:	0800b125 	.word	0x0800b125
 8009548:	1e6f      	subs	r7, r5, #1
 800954a:	f1b9 0f00 	cmp.w	r9, #0
 800954e:	d130      	bne.n	80095b2 <__gethex+0x326>
 8009550:	b127      	cbz	r7, 800955c <__gethex+0x2d0>
 8009552:	4639      	mov	r1, r7
 8009554:	4620      	mov	r0, r4
 8009556:	f000 fec4 	bl	800a2e2 <__any_on>
 800955a:	4681      	mov	r9, r0
 800955c:	117a      	asrs	r2, r7, #5
 800955e:	2301      	movs	r3, #1
 8009560:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009564:	f007 071f 	and.w	r7, r7, #31
 8009568:	40bb      	lsls	r3, r7
 800956a:	4213      	tst	r3, r2
 800956c:	4629      	mov	r1, r5
 800956e:	4620      	mov	r0, r4
 8009570:	bf18      	it	ne
 8009572:	f049 0902 	orrne.w	r9, r9, #2
 8009576:	f7ff fe21 	bl	80091bc <rshift>
 800957a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800957e:	1b76      	subs	r6, r6, r5
 8009580:	2502      	movs	r5, #2
 8009582:	f1b9 0f00 	cmp.w	r9, #0
 8009586:	d047      	beq.n	8009618 <__gethex+0x38c>
 8009588:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800958c:	2b02      	cmp	r3, #2
 800958e:	d015      	beq.n	80095bc <__gethex+0x330>
 8009590:	2b03      	cmp	r3, #3
 8009592:	d017      	beq.n	80095c4 <__gethex+0x338>
 8009594:	2b01      	cmp	r3, #1
 8009596:	d109      	bne.n	80095ac <__gethex+0x320>
 8009598:	f019 0f02 	tst.w	r9, #2
 800959c:	d006      	beq.n	80095ac <__gethex+0x320>
 800959e:	f8da 3000 	ldr.w	r3, [sl]
 80095a2:	ea49 0903 	orr.w	r9, r9, r3
 80095a6:	f019 0f01 	tst.w	r9, #1
 80095aa:	d10e      	bne.n	80095ca <__gethex+0x33e>
 80095ac:	f045 0510 	orr.w	r5, r5, #16
 80095b0:	e032      	b.n	8009618 <__gethex+0x38c>
 80095b2:	f04f 0901 	mov.w	r9, #1
 80095b6:	e7d1      	b.n	800955c <__gethex+0x2d0>
 80095b8:	2501      	movs	r5, #1
 80095ba:	e7e2      	b.n	8009582 <__gethex+0x2f6>
 80095bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095be:	f1c3 0301 	rsb	r3, r3, #1
 80095c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d0f0      	beq.n	80095ac <__gethex+0x320>
 80095ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80095ce:	f104 0314 	add.w	r3, r4, #20
 80095d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80095d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80095da:	f04f 0c00 	mov.w	ip, #0
 80095de:	4618      	mov	r0, r3
 80095e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80095e4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80095e8:	d01b      	beq.n	8009622 <__gethex+0x396>
 80095ea:	3201      	adds	r2, #1
 80095ec:	6002      	str	r2, [r0, #0]
 80095ee:	2d02      	cmp	r5, #2
 80095f0:	f104 0314 	add.w	r3, r4, #20
 80095f4:	d13c      	bne.n	8009670 <__gethex+0x3e4>
 80095f6:	f8d8 2000 	ldr.w	r2, [r8]
 80095fa:	3a01      	subs	r2, #1
 80095fc:	42b2      	cmp	r2, r6
 80095fe:	d109      	bne.n	8009614 <__gethex+0x388>
 8009600:	1171      	asrs	r1, r6, #5
 8009602:	2201      	movs	r2, #1
 8009604:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009608:	f006 061f 	and.w	r6, r6, #31
 800960c:	fa02 f606 	lsl.w	r6, r2, r6
 8009610:	421e      	tst	r6, r3
 8009612:	d13a      	bne.n	800968a <__gethex+0x3fe>
 8009614:	f045 0520 	orr.w	r5, r5, #32
 8009618:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800961a:	601c      	str	r4, [r3, #0]
 800961c:	9b02      	ldr	r3, [sp, #8]
 800961e:	601f      	str	r7, [r3, #0]
 8009620:	e6b0      	b.n	8009384 <__gethex+0xf8>
 8009622:	4299      	cmp	r1, r3
 8009624:	f843 cc04 	str.w	ip, [r3, #-4]
 8009628:	d8d9      	bhi.n	80095de <__gethex+0x352>
 800962a:	68a3      	ldr	r3, [r4, #8]
 800962c:	459b      	cmp	fp, r3
 800962e:	db17      	blt.n	8009660 <__gethex+0x3d4>
 8009630:	6861      	ldr	r1, [r4, #4]
 8009632:	9801      	ldr	r0, [sp, #4]
 8009634:	3101      	adds	r1, #1
 8009636:	f000 f9c3 	bl	80099c0 <_Balloc>
 800963a:	4681      	mov	r9, r0
 800963c:	b918      	cbnz	r0, 8009646 <__gethex+0x3ba>
 800963e:	4b1a      	ldr	r3, [pc, #104]	@ (80096a8 <__gethex+0x41c>)
 8009640:	4602      	mov	r2, r0
 8009642:	2184      	movs	r1, #132	@ 0x84
 8009644:	e6c5      	b.n	80093d2 <__gethex+0x146>
 8009646:	6922      	ldr	r2, [r4, #16]
 8009648:	3202      	adds	r2, #2
 800964a:	f104 010c 	add.w	r1, r4, #12
 800964e:	0092      	lsls	r2, r2, #2
 8009650:	300c      	adds	r0, #12
 8009652:	f7fe fee2 	bl	800841a <memcpy>
 8009656:	4621      	mov	r1, r4
 8009658:	9801      	ldr	r0, [sp, #4]
 800965a:	f000 f9f1 	bl	8009a40 <_Bfree>
 800965e:	464c      	mov	r4, r9
 8009660:	6923      	ldr	r3, [r4, #16]
 8009662:	1c5a      	adds	r2, r3, #1
 8009664:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009668:	6122      	str	r2, [r4, #16]
 800966a:	2201      	movs	r2, #1
 800966c:	615a      	str	r2, [r3, #20]
 800966e:	e7be      	b.n	80095ee <__gethex+0x362>
 8009670:	6922      	ldr	r2, [r4, #16]
 8009672:	455a      	cmp	r2, fp
 8009674:	dd0b      	ble.n	800968e <__gethex+0x402>
 8009676:	2101      	movs	r1, #1
 8009678:	4620      	mov	r0, r4
 800967a:	f7ff fd9f 	bl	80091bc <rshift>
 800967e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009682:	3701      	adds	r7, #1
 8009684:	42bb      	cmp	r3, r7
 8009686:	f6ff aee0 	blt.w	800944a <__gethex+0x1be>
 800968a:	2501      	movs	r5, #1
 800968c:	e7c2      	b.n	8009614 <__gethex+0x388>
 800968e:	f016 061f 	ands.w	r6, r6, #31
 8009692:	d0fa      	beq.n	800968a <__gethex+0x3fe>
 8009694:	4453      	add	r3, sl
 8009696:	f1c6 0620 	rsb	r6, r6, #32
 800969a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800969e:	f000 fa81 	bl	8009ba4 <__hi0bits>
 80096a2:	42b0      	cmp	r0, r6
 80096a4:	dbe7      	blt.n	8009676 <__gethex+0x3ea>
 80096a6:	e7f0      	b.n	800968a <__gethex+0x3fe>
 80096a8:	0800b114 	.word	0x0800b114

080096ac <L_shift>:
 80096ac:	f1c2 0208 	rsb	r2, r2, #8
 80096b0:	0092      	lsls	r2, r2, #2
 80096b2:	b570      	push	{r4, r5, r6, lr}
 80096b4:	f1c2 0620 	rsb	r6, r2, #32
 80096b8:	6843      	ldr	r3, [r0, #4]
 80096ba:	6804      	ldr	r4, [r0, #0]
 80096bc:	fa03 f506 	lsl.w	r5, r3, r6
 80096c0:	432c      	orrs	r4, r5
 80096c2:	40d3      	lsrs	r3, r2
 80096c4:	6004      	str	r4, [r0, #0]
 80096c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80096ca:	4288      	cmp	r0, r1
 80096cc:	d3f4      	bcc.n	80096b8 <L_shift+0xc>
 80096ce:	bd70      	pop	{r4, r5, r6, pc}

080096d0 <__match>:
 80096d0:	b530      	push	{r4, r5, lr}
 80096d2:	6803      	ldr	r3, [r0, #0]
 80096d4:	3301      	adds	r3, #1
 80096d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096da:	b914      	cbnz	r4, 80096e2 <__match+0x12>
 80096dc:	6003      	str	r3, [r0, #0]
 80096de:	2001      	movs	r0, #1
 80096e0:	bd30      	pop	{r4, r5, pc}
 80096e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80096ea:	2d19      	cmp	r5, #25
 80096ec:	bf98      	it	ls
 80096ee:	3220      	addls	r2, #32
 80096f0:	42a2      	cmp	r2, r4
 80096f2:	d0f0      	beq.n	80096d6 <__match+0x6>
 80096f4:	2000      	movs	r0, #0
 80096f6:	e7f3      	b.n	80096e0 <__match+0x10>

080096f8 <__hexnan>:
 80096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	680b      	ldr	r3, [r1, #0]
 80096fe:	6801      	ldr	r1, [r0, #0]
 8009700:	115e      	asrs	r6, r3, #5
 8009702:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009706:	f013 031f 	ands.w	r3, r3, #31
 800970a:	b087      	sub	sp, #28
 800970c:	bf18      	it	ne
 800970e:	3604      	addne	r6, #4
 8009710:	2500      	movs	r5, #0
 8009712:	1f37      	subs	r7, r6, #4
 8009714:	4682      	mov	sl, r0
 8009716:	4690      	mov	r8, r2
 8009718:	9301      	str	r3, [sp, #4]
 800971a:	f846 5c04 	str.w	r5, [r6, #-4]
 800971e:	46b9      	mov	r9, r7
 8009720:	463c      	mov	r4, r7
 8009722:	9502      	str	r5, [sp, #8]
 8009724:	46ab      	mov	fp, r5
 8009726:	784a      	ldrb	r2, [r1, #1]
 8009728:	1c4b      	adds	r3, r1, #1
 800972a:	9303      	str	r3, [sp, #12]
 800972c:	b342      	cbz	r2, 8009780 <__hexnan+0x88>
 800972e:	4610      	mov	r0, r2
 8009730:	9105      	str	r1, [sp, #20]
 8009732:	9204      	str	r2, [sp, #16]
 8009734:	f7ff fd94 	bl	8009260 <__hexdig_fun>
 8009738:	2800      	cmp	r0, #0
 800973a:	d151      	bne.n	80097e0 <__hexnan+0xe8>
 800973c:	9a04      	ldr	r2, [sp, #16]
 800973e:	9905      	ldr	r1, [sp, #20]
 8009740:	2a20      	cmp	r2, #32
 8009742:	d818      	bhi.n	8009776 <__hexnan+0x7e>
 8009744:	9b02      	ldr	r3, [sp, #8]
 8009746:	459b      	cmp	fp, r3
 8009748:	dd13      	ble.n	8009772 <__hexnan+0x7a>
 800974a:	454c      	cmp	r4, r9
 800974c:	d206      	bcs.n	800975c <__hexnan+0x64>
 800974e:	2d07      	cmp	r5, #7
 8009750:	dc04      	bgt.n	800975c <__hexnan+0x64>
 8009752:	462a      	mov	r2, r5
 8009754:	4649      	mov	r1, r9
 8009756:	4620      	mov	r0, r4
 8009758:	f7ff ffa8 	bl	80096ac <L_shift>
 800975c:	4544      	cmp	r4, r8
 800975e:	d952      	bls.n	8009806 <__hexnan+0x10e>
 8009760:	2300      	movs	r3, #0
 8009762:	f1a4 0904 	sub.w	r9, r4, #4
 8009766:	f844 3c04 	str.w	r3, [r4, #-4]
 800976a:	f8cd b008 	str.w	fp, [sp, #8]
 800976e:	464c      	mov	r4, r9
 8009770:	461d      	mov	r5, r3
 8009772:	9903      	ldr	r1, [sp, #12]
 8009774:	e7d7      	b.n	8009726 <__hexnan+0x2e>
 8009776:	2a29      	cmp	r2, #41	@ 0x29
 8009778:	d157      	bne.n	800982a <__hexnan+0x132>
 800977a:	3102      	adds	r1, #2
 800977c:	f8ca 1000 	str.w	r1, [sl]
 8009780:	f1bb 0f00 	cmp.w	fp, #0
 8009784:	d051      	beq.n	800982a <__hexnan+0x132>
 8009786:	454c      	cmp	r4, r9
 8009788:	d206      	bcs.n	8009798 <__hexnan+0xa0>
 800978a:	2d07      	cmp	r5, #7
 800978c:	dc04      	bgt.n	8009798 <__hexnan+0xa0>
 800978e:	462a      	mov	r2, r5
 8009790:	4649      	mov	r1, r9
 8009792:	4620      	mov	r0, r4
 8009794:	f7ff ff8a 	bl	80096ac <L_shift>
 8009798:	4544      	cmp	r4, r8
 800979a:	d936      	bls.n	800980a <__hexnan+0x112>
 800979c:	f1a8 0204 	sub.w	r2, r8, #4
 80097a0:	4623      	mov	r3, r4
 80097a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80097a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80097aa:	429f      	cmp	r7, r3
 80097ac:	d2f9      	bcs.n	80097a2 <__hexnan+0xaa>
 80097ae:	1b3b      	subs	r3, r7, r4
 80097b0:	f023 0303 	bic.w	r3, r3, #3
 80097b4:	3304      	adds	r3, #4
 80097b6:	3401      	adds	r4, #1
 80097b8:	3e03      	subs	r6, #3
 80097ba:	42b4      	cmp	r4, r6
 80097bc:	bf88      	it	hi
 80097be:	2304      	movhi	r3, #4
 80097c0:	4443      	add	r3, r8
 80097c2:	2200      	movs	r2, #0
 80097c4:	f843 2b04 	str.w	r2, [r3], #4
 80097c8:	429f      	cmp	r7, r3
 80097ca:	d2fb      	bcs.n	80097c4 <__hexnan+0xcc>
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	b91b      	cbnz	r3, 80097d8 <__hexnan+0xe0>
 80097d0:	4547      	cmp	r7, r8
 80097d2:	d128      	bne.n	8009826 <__hexnan+0x12e>
 80097d4:	2301      	movs	r3, #1
 80097d6:	603b      	str	r3, [r7, #0]
 80097d8:	2005      	movs	r0, #5
 80097da:	b007      	add	sp, #28
 80097dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e0:	3501      	adds	r5, #1
 80097e2:	2d08      	cmp	r5, #8
 80097e4:	f10b 0b01 	add.w	fp, fp, #1
 80097e8:	dd06      	ble.n	80097f8 <__hexnan+0x100>
 80097ea:	4544      	cmp	r4, r8
 80097ec:	d9c1      	bls.n	8009772 <__hexnan+0x7a>
 80097ee:	2300      	movs	r3, #0
 80097f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80097f4:	2501      	movs	r5, #1
 80097f6:	3c04      	subs	r4, #4
 80097f8:	6822      	ldr	r2, [r4, #0]
 80097fa:	f000 000f 	and.w	r0, r0, #15
 80097fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009802:	6020      	str	r0, [r4, #0]
 8009804:	e7b5      	b.n	8009772 <__hexnan+0x7a>
 8009806:	2508      	movs	r5, #8
 8009808:	e7b3      	b.n	8009772 <__hexnan+0x7a>
 800980a:	9b01      	ldr	r3, [sp, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d0dd      	beq.n	80097cc <__hexnan+0xd4>
 8009810:	f1c3 0320 	rsb	r3, r3, #32
 8009814:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009818:	40da      	lsrs	r2, r3
 800981a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800981e:	4013      	ands	r3, r2
 8009820:	f846 3c04 	str.w	r3, [r6, #-4]
 8009824:	e7d2      	b.n	80097cc <__hexnan+0xd4>
 8009826:	3f04      	subs	r7, #4
 8009828:	e7d0      	b.n	80097cc <__hexnan+0xd4>
 800982a:	2004      	movs	r0, #4
 800982c:	e7d5      	b.n	80097da <__hexnan+0xe2>
	...

08009830 <malloc>:
 8009830:	4b02      	ldr	r3, [pc, #8]	@ (800983c <malloc+0xc>)
 8009832:	4601      	mov	r1, r0
 8009834:	6818      	ldr	r0, [r3, #0]
 8009836:	f000 b825 	b.w	8009884 <_malloc_r>
 800983a:	bf00      	nop
 800983c:	20000184 	.word	0x20000184

08009840 <sbrk_aligned>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	4e0f      	ldr	r6, [pc, #60]	@ (8009880 <sbrk_aligned+0x40>)
 8009844:	460c      	mov	r4, r1
 8009846:	6831      	ldr	r1, [r6, #0]
 8009848:	4605      	mov	r5, r0
 800984a:	b911      	cbnz	r1, 8009852 <sbrk_aligned+0x12>
 800984c:	f000 ffa6 	bl	800a79c <_sbrk_r>
 8009850:	6030      	str	r0, [r6, #0]
 8009852:	4621      	mov	r1, r4
 8009854:	4628      	mov	r0, r5
 8009856:	f000 ffa1 	bl	800a79c <_sbrk_r>
 800985a:	1c43      	adds	r3, r0, #1
 800985c:	d103      	bne.n	8009866 <sbrk_aligned+0x26>
 800985e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009862:	4620      	mov	r0, r4
 8009864:	bd70      	pop	{r4, r5, r6, pc}
 8009866:	1cc4      	adds	r4, r0, #3
 8009868:	f024 0403 	bic.w	r4, r4, #3
 800986c:	42a0      	cmp	r0, r4
 800986e:	d0f8      	beq.n	8009862 <sbrk_aligned+0x22>
 8009870:	1a21      	subs	r1, r4, r0
 8009872:	4628      	mov	r0, r5
 8009874:	f000 ff92 	bl	800a79c <_sbrk_r>
 8009878:	3001      	adds	r0, #1
 800987a:	d1f2      	bne.n	8009862 <sbrk_aligned+0x22>
 800987c:	e7ef      	b.n	800985e <sbrk_aligned+0x1e>
 800987e:	bf00      	nop
 8009880:	200050a0 	.word	0x200050a0

08009884 <_malloc_r>:
 8009884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009888:	1ccd      	adds	r5, r1, #3
 800988a:	f025 0503 	bic.w	r5, r5, #3
 800988e:	3508      	adds	r5, #8
 8009890:	2d0c      	cmp	r5, #12
 8009892:	bf38      	it	cc
 8009894:	250c      	movcc	r5, #12
 8009896:	2d00      	cmp	r5, #0
 8009898:	4606      	mov	r6, r0
 800989a:	db01      	blt.n	80098a0 <_malloc_r+0x1c>
 800989c:	42a9      	cmp	r1, r5
 800989e:	d904      	bls.n	80098aa <_malloc_r+0x26>
 80098a0:	230c      	movs	r3, #12
 80098a2:	6033      	str	r3, [r6, #0]
 80098a4:	2000      	movs	r0, #0
 80098a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009980 <_malloc_r+0xfc>
 80098ae:	f000 f87b 	bl	80099a8 <__malloc_lock>
 80098b2:	f8d8 3000 	ldr.w	r3, [r8]
 80098b6:	461c      	mov	r4, r3
 80098b8:	bb44      	cbnz	r4, 800990c <_malloc_r+0x88>
 80098ba:	4629      	mov	r1, r5
 80098bc:	4630      	mov	r0, r6
 80098be:	f7ff ffbf 	bl	8009840 <sbrk_aligned>
 80098c2:	1c43      	adds	r3, r0, #1
 80098c4:	4604      	mov	r4, r0
 80098c6:	d158      	bne.n	800997a <_malloc_r+0xf6>
 80098c8:	f8d8 4000 	ldr.w	r4, [r8]
 80098cc:	4627      	mov	r7, r4
 80098ce:	2f00      	cmp	r7, #0
 80098d0:	d143      	bne.n	800995a <_malloc_r+0xd6>
 80098d2:	2c00      	cmp	r4, #0
 80098d4:	d04b      	beq.n	800996e <_malloc_r+0xea>
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	4639      	mov	r1, r7
 80098da:	4630      	mov	r0, r6
 80098dc:	eb04 0903 	add.w	r9, r4, r3
 80098e0:	f000 ff5c 	bl	800a79c <_sbrk_r>
 80098e4:	4581      	cmp	r9, r0
 80098e6:	d142      	bne.n	800996e <_malloc_r+0xea>
 80098e8:	6821      	ldr	r1, [r4, #0]
 80098ea:	1a6d      	subs	r5, r5, r1
 80098ec:	4629      	mov	r1, r5
 80098ee:	4630      	mov	r0, r6
 80098f0:	f7ff ffa6 	bl	8009840 <sbrk_aligned>
 80098f4:	3001      	adds	r0, #1
 80098f6:	d03a      	beq.n	800996e <_malloc_r+0xea>
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	442b      	add	r3, r5
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	f8d8 3000 	ldr.w	r3, [r8]
 8009902:	685a      	ldr	r2, [r3, #4]
 8009904:	bb62      	cbnz	r2, 8009960 <_malloc_r+0xdc>
 8009906:	f8c8 7000 	str.w	r7, [r8]
 800990a:	e00f      	b.n	800992c <_malloc_r+0xa8>
 800990c:	6822      	ldr	r2, [r4, #0]
 800990e:	1b52      	subs	r2, r2, r5
 8009910:	d420      	bmi.n	8009954 <_malloc_r+0xd0>
 8009912:	2a0b      	cmp	r2, #11
 8009914:	d917      	bls.n	8009946 <_malloc_r+0xc2>
 8009916:	1961      	adds	r1, r4, r5
 8009918:	42a3      	cmp	r3, r4
 800991a:	6025      	str	r5, [r4, #0]
 800991c:	bf18      	it	ne
 800991e:	6059      	strne	r1, [r3, #4]
 8009920:	6863      	ldr	r3, [r4, #4]
 8009922:	bf08      	it	eq
 8009924:	f8c8 1000 	streq.w	r1, [r8]
 8009928:	5162      	str	r2, [r4, r5]
 800992a:	604b      	str	r3, [r1, #4]
 800992c:	4630      	mov	r0, r6
 800992e:	f000 f841 	bl	80099b4 <__malloc_unlock>
 8009932:	f104 000b 	add.w	r0, r4, #11
 8009936:	1d23      	adds	r3, r4, #4
 8009938:	f020 0007 	bic.w	r0, r0, #7
 800993c:	1ac2      	subs	r2, r0, r3
 800993e:	bf1c      	itt	ne
 8009940:	1a1b      	subne	r3, r3, r0
 8009942:	50a3      	strne	r3, [r4, r2]
 8009944:	e7af      	b.n	80098a6 <_malloc_r+0x22>
 8009946:	6862      	ldr	r2, [r4, #4]
 8009948:	42a3      	cmp	r3, r4
 800994a:	bf0c      	ite	eq
 800994c:	f8c8 2000 	streq.w	r2, [r8]
 8009950:	605a      	strne	r2, [r3, #4]
 8009952:	e7eb      	b.n	800992c <_malloc_r+0xa8>
 8009954:	4623      	mov	r3, r4
 8009956:	6864      	ldr	r4, [r4, #4]
 8009958:	e7ae      	b.n	80098b8 <_malloc_r+0x34>
 800995a:	463c      	mov	r4, r7
 800995c:	687f      	ldr	r7, [r7, #4]
 800995e:	e7b6      	b.n	80098ce <_malloc_r+0x4a>
 8009960:	461a      	mov	r2, r3
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	42a3      	cmp	r3, r4
 8009966:	d1fb      	bne.n	8009960 <_malloc_r+0xdc>
 8009968:	2300      	movs	r3, #0
 800996a:	6053      	str	r3, [r2, #4]
 800996c:	e7de      	b.n	800992c <_malloc_r+0xa8>
 800996e:	230c      	movs	r3, #12
 8009970:	6033      	str	r3, [r6, #0]
 8009972:	4630      	mov	r0, r6
 8009974:	f000 f81e 	bl	80099b4 <__malloc_unlock>
 8009978:	e794      	b.n	80098a4 <_malloc_r+0x20>
 800997a:	6005      	str	r5, [r0, #0]
 800997c:	e7d6      	b.n	800992c <_malloc_r+0xa8>
 800997e:	bf00      	nop
 8009980:	200050a4 	.word	0x200050a4

08009984 <__ascii_mbtowc>:
 8009984:	b082      	sub	sp, #8
 8009986:	b901      	cbnz	r1, 800998a <__ascii_mbtowc+0x6>
 8009988:	a901      	add	r1, sp, #4
 800998a:	b142      	cbz	r2, 800999e <__ascii_mbtowc+0x1a>
 800998c:	b14b      	cbz	r3, 80099a2 <__ascii_mbtowc+0x1e>
 800998e:	7813      	ldrb	r3, [r2, #0]
 8009990:	600b      	str	r3, [r1, #0]
 8009992:	7812      	ldrb	r2, [r2, #0]
 8009994:	1e10      	subs	r0, r2, #0
 8009996:	bf18      	it	ne
 8009998:	2001      	movne	r0, #1
 800999a:	b002      	add	sp, #8
 800999c:	4770      	bx	lr
 800999e:	4610      	mov	r0, r2
 80099a0:	e7fb      	b.n	800999a <__ascii_mbtowc+0x16>
 80099a2:	f06f 0001 	mvn.w	r0, #1
 80099a6:	e7f8      	b.n	800999a <__ascii_mbtowc+0x16>

080099a8 <__malloc_lock>:
 80099a8:	4801      	ldr	r0, [pc, #4]	@ (80099b0 <__malloc_lock+0x8>)
 80099aa:	f7fe bd34 	b.w	8008416 <__retarget_lock_acquire_recursive>
 80099ae:	bf00      	nop
 80099b0:	2000509c 	.word	0x2000509c

080099b4 <__malloc_unlock>:
 80099b4:	4801      	ldr	r0, [pc, #4]	@ (80099bc <__malloc_unlock+0x8>)
 80099b6:	f7fe bd2f 	b.w	8008418 <__retarget_lock_release_recursive>
 80099ba:	bf00      	nop
 80099bc:	2000509c 	.word	0x2000509c

080099c0 <_Balloc>:
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	69c6      	ldr	r6, [r0, #28]
 80099c4:	4604      	mov	r4, r0
 80099c6:	460d      	mov	r5, r1
 80099c8:	b976      	cbnz	r6, 80099e8 <_Balloc+0x28>
 80099ca:	2010      	movs	r0, #16
 80099cc:	f7ff ff30 	bl	8009830 <malloc>
 80099d0:	4602      	mov	r2, r0
 80099d2:	61e0      	str	r0, [r4, #28]
 80099d4:	b920      	cbnz	r0, 80099e0 <_Balloc+0x20>
 80099d6:	4b18      	ldr	r3, [pc, #96]	@ (8009a38 <_Balloc+0x78>)
 80099d8:	4818      	ldr	r0, [pc, #96]	@ (8009a3c <_Balloc+0x7c>)
 80099da:	216b      	movs	r1, #107	@ 0x6b
 80099dc:	f7fe fd3a 	bl	8008454 <__assert_func>
 80099e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099e4:	6006      	str	r6, [r0, #0]
 80099e6:	60c6      	str	r6, [r0, #12]
 80099e8:	69e6      	ldr	r6, [r4, #28]
 80099ea:	68f3      	ldr	r3, [r6, #12]
 80099ec:	b183      	cbz	r3, 8009a10 <_Balloc+0x50>
 80099ee:	69e3      	ldr	r3, [r4, #28]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099f6:	b9b8      	cbnz	r0, 8009a28 <_Balloc+0x68>
 80099f8:	2101      	movs	r1, #1
 80099fa:	fa01 f605 	lsl.w	r6, r1, r5
 80099fe:	1d72      	adds	r2, r6, #5
 8009a00:	0092      	lsls	r2, r2, #2
 8009a02:	4620      	mov	r0, r4
 8009a04:	f000 fee1 	bl	800a7ca <_calloc_r>
 8009a08:	b160      	cbz	r0, 8009a24 <_Balloc+0x64>
 8009a0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a0e:	e00e      	b.n	8009a2e <_Balloc+0x6e>
 8009a10:	2221      	movs	r2, #33	@ 0x21
 8009a12:	2104      	movs	r1, #4
 8009a14:	4620      	mov	r0, r4
 8009a16:	f000 fed8 	bl	800a7ca <_calloc_r>
 8009a1a:	69e3      	ldr	r3, [r4, #28]
 8009a1c:	60f0      	str	r0, [r6, #12]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1e4      	bne.n	80099ee <_Balloc+0x2e>
 8009a24:	2000      	movs	r0, #0
 8009a26:	bd70      	pop	{r4, r5, r6, pc}
 8009a28:	6802      	ldr	r2, [r0, #0]
 8009a2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a2e:	2300      	movs	r3, #0
 8009a30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a34:	e7f7      	b.n	8009a26 <_Balloc+0x66>
 8009a36:	bf00      	nop
 8009a38:	0800affa 	.word	0x0800affa
 8009a3c:	0800b185 	.word	0x0800b185

08009a40 <_Bfree>:
 8009a40:	b570      	push	{r4, r5, r6, lr}
 8009a42:	69c6      	ldr	r6, [r0, #28]
 8009a44:	4605      	mov	r5, r0
 8009a46:	460c      	mov	r4, r1
 8009a48:	b976      	cbnz	r6, 8009a68 <_Bfree+0x28>
 8009a4a:	2010      	movs	r0, #16
 8009a4c:	f7ff fef0 	bl	8009830 <malloc>
 8009a50:	4602      	mov	r2, r0
 8009a52:	61e8      	str	r0, [r5, #28]
 8009a54:	b920      	cbnz	r0, 8009a60 <_Bfree+0x20>
 8009a56:	4b09      	ldr	r3, [pc, #36]	@ (8009a7c <_Bfree+0x3c>)
 8009a58:	4809      	ldr	r0, [pc, #36]	@ (8009a80 <_Bfree+0x40>)
 8009a5a:	218f      	movs	r1, #143	@ 0x8f
 8009a5c:	f7fe fcfa 	bl	8008454 <__assert_func>
 8009a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a64:	6006      	str	r6, [r0, #0]
 8009a66:	60c6      	str	r6, [r0, #12]
 8009a68:	b13c      	cbz	r4, 8009a7a <_Bfree+0x3a>
 8009a6a:	69eb      	ldr	r3, [r5, #28]
 8009a6c:	6862      	ldr	r2, [r4, #4]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a74:	6021      	str	r1, [r4, #0]
 8009a76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a7a:	bd70      	pop	{r4, r5, r6, pc}
 8009a7c:	0800affa 	.word	0x0800affa
 8009a80:	0800b185 	.word	0x0800b185

08009a84 <__multadd>:
 8009a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a88:	690d      	ldr	r5, [r1, #16]
 8009a8a:	4607      	mov	r7, r0
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	461e      	mov	r6, r3
 8009a90:	f101 0c14 	add.w	ip, r1, #20
 8009a94:	2000      	movs	r0, #0
 8009a96:	f8dc 3000 	ldr.w	r3, [ip]
 8009a9a:	b299      	uxth	r1, r3
 8009a9c:	fb02 6101 	mla	r1, r2, r1, r6
 8009aa0:	0c1e      	lsrs	r6, r3, #16
 8009aa2:	0c0b      	lsrs	r3, r1, #16
 8009aa4:	fb02 3306 	mla	r3, r2, r6, r3
 8009aa8:	b289      	uxth	r1, r1
 8009aaa:	3001      	adds	r0, #1
 8009aac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ab0:	4285      	cmp	r5, r0
 8009ab2:	f84c 1b04 	str.w	r1, [ip], #4
 8009ab6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009aba:	dcec      	bgt.n	8009a96 <__multadd+0x12>
 8009abc:	b30e      	cbz	r6, 8009b02 <__multadd+0x7e>
 8009abe:	68a3      	ldr	r3, [r4, #8]
 8009ac0:	42ab      	cmp	r3, r5
 8009ac2:	dc19      	bgt.n	8009af8 <__multadd+0x74>
 8009ac4:	6861      	ldr	r1, [r4, #4]
 8009ac6:	4638      	mov	r0, r7
 8009ac8:	3101      	adds	r1, #1
 8009aca:	f7ff ff79 	bl	80099c0 <_Balloc>
 8009ace:	4680      	mov	r8, r0
 8009ad0:	b928      	cbnz	r0, 8009ade <__multadd+0x5a>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8009b08 <__multadd+0x84>)
 8009ad6:	480d      	ldr	r0, [pc, #52]	@ (8009b0c <__multadd+0x88>)
 8009ad8:	21ba      	movs	r1, #186	@ 0xba
 8009ada:	f7fe fcbb 	bl	8008454 <__assert_func>
 8009ade:	6922      	ldr	r2, [r4, #16]
 8009ae0:	3202      	adds	r2, #2
 8009ae2:	f104 010c 	add.w	r1, r4, #12
 8009ae6:	0092      	lsls	r2, r2, #2
 8009ae8:	300c      	adds	r0, #12
 8009aea:	f7fe fc96 	bl	800841a <memcpy>
 8009aee:	4621      	mov	r1, r4
 8009af0:	4638      	mov	r0, r7
 8009af2:	f7ff ffa5 	bl	8009a40 <_Bfree>
 8009af6:	4644      	mov	r4, r8
 8009af8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009afc:	3501      	adds	r5, #1
 8009afe:	615e      	str	r6, [r3, #20]
 8009b00:	6125      	str	r5, [r4, #16]
 8009b02:	4620      	mov	r0, r4
 8009b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b08:	0800b114 	.word	0x0800b114
 8009b0c:	0800b185 	.word	0x0800b185

08009b10 <__s2b>:
 8009b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b14:	460c      	mov	r4, r1
 8009b16:	4615      	mov	r5, r2
 8009b18:	461f      	mov	r7, r3
 8009b1a:	2209      	movs	r2, #9
 8009b1c:	3308      	adds	r3, #8
 8009b1e:	4606      	mov	r6, r0
 8009b20:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b24:	2100      	movs	r1, #0
 8009b26:	2201      	movs	r2, #1
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	db09      	blt.n	8009b40 <__s2b+0x30>
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	f7ff ff47 	bl	80099c0 <_Balloc>
 8009b32:	b940      	cbnz	r0, 8009b46 <__s2b+0x36>
 8009b34:	4602      	mov	r2, r0
 8009b36:	4b19      	ldr	r3, [pc, #100]	@ (8009b9c <__s2b+0x8c>)
 8009b38:	4819      	ldr	r0, [pc, #100]	@ (8009ba0 <__s2b+0x90>)
 8009b3a:	21d3      	movs	r1, #211	@ 0xd3
 8009b3c:	f7fe fc8a 	bl	8008454 <__assert_func>
 8009b40:	0052      	lsls	r2, r2, #1
 8009b42:	3101      	adds	r1, #1
 8009b44:	e7f0      	b.n	8009b28 <__s2b+0x18>
 8009b46:	9b08      	ldr	r3, [sp, #32]
 8009b48:	6143      	str	r3, [r0, #20]
 8009b4a:	2d09      	cmp	r5, #9
 8009b4c:	f04f 0301 	mov.w	r3, #1
 8009b50:	6103      	str	r3, [r0, #16]
 8009b52:	dd16      	ble.n	8009b82 <__s2b+0x72>
 8009b54:	f104 0909 	add.w	r9, r4, #9
 8009b58:	46c8      	mov	r8, r9
 8009b5a:	442c      	add	r4, r5
 8009b5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009b60:	4601      	mov	r1, r0
 8009b62:	3b30      	subs	r3, #48	@ 0x30
 8009b64:	220a      	movs	r2, #10
 8009b66:	4630      	mov	r0, r6
 8009b68:	f7ff ff8c 	bl	8009a84 <__multadd>
 8009b6c:	45a0      	cmp	r8, r4
 8009b6e:	d1f5      	bne.n	8009b5c <__s2b+0x4c>
 8009b70:	f1a5 0408 	sub.w	r4, r5, #8
 8009b74:	444c      	add	r4, r9
 8009b76:	1b2d      	subs	r5, r5, r4
 8009b78:	1963      	adds	r3, r4, r5
 8009b7a:	42bb      	cmp	r3, r7
 8009b7c:	db04      	blt.n	8009b88 <__s2b+0x78>
 8009b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b82:	340a      	adds	r4, #10
 8009b84:	2509      	movs	r5, #9
 8009b86:	e7f6      	b.n	8009b76 <__s2b+0x66>
 8009b88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b8c:	4601      	mov	r1, r0
 8009b8e:	3b30      	subs	r3, #48	@ 0x30
 8009b90:	220a      	movs	r2, #10
 8009b92:	4630      	mov	r0, r6
 8009b94:	f7ff ff76 	bl	8009a84 <__multadd>
 8009b98:	e7ee      	b.n	8009b78 <__s2b+0x68>
 8009b9a:	bf00      	nop
 8009b9c:	0800b114 	.word	0x0800b114
 8009ba0:	0800b185 	.word	0x0800b185

08009ba4 <__hi0bits>:
 8009ba4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009ba8:	4603      	mov	r3, r0
 8009baa:	bf36      	itet	cc
 8009bac:	0403      	lslcc	r3, r0, #16
 8009bae:	2000      	movcs	r0, #0
 8009bb0:	2010      	movcc	r0, #16
 8009bb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009bb6:	bf3c      	itt	cc
 8009bb8:	021b      	lslcc	r3, r3, #8
 8009bba:	3008      	addcc	r0, #8
 8009bbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bc0:	bf3c      	itt	cc
 8009bc2:	011b      	lslcc	r3, r3, #4
 8009bc4:	3004      	addcc	r0, #4
 8009bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bca:	bf3c      	itt	cc
 8009bcc:	009b      	lslcc	r3, r3, #2
 8009bce:	3002      	addcc	r0, #2
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	db05      	blt.n	8009be0 <__hi0bits+0x3c>
 8009bd4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009bd8:	f100 0001 	add.w	r0, r0, #1
 8009bdc:	bf08      	it	eq
 8009bde:	2020      	moveq	r0, #32
 8009be0:	4770      	bx	lr

08009be2 <__lo0bits>:
 8009be2:	6803      	ldr	r3, [r0, #0]
 8009be4:	4602      	mov	r2, r0
 8009be6:	f013 0007 	ands.w	r0, r3, #7
 8009bea:	d00b      	beq.n	8009c04 <__lo0bits+0x22>
 8009bec:	07d9      	lsls	r1, r3, #31
 8009bee:	d421      	bmi.n	8009c34 <__lo0bits+0x52>
 8009bf0:	0798      	lsls	r0, r3, #30
 8009bf2:	bf49      	itett	mi
 8009bf4:	085b      	lsrmi	r3, r3, #1
 8009bf6:	089b      	lsrpl	r3, r3, #2
 8009bf8:	2001      	movmi	r0, #1
 8009bfa:	6013      	strmi	r3, [r2, #0]
 8009bfc:	bf5c      	itt	pl
 8009bfe:	6013      	strpl	r3, [r2, #0]
 8009c00:	2002      	movpl	r0, #2
 8009c02:	4770      	bx	lr
 8009c04:	b299      	uxth	r1, r3
 8009c06:	b909      	cbnz	r1, 8009c0c <__lo0bits+0x2a>
 8009c08:	0c1b      	lsrs	r3, r3, #16
 8009c0a:	2010      	movs	r0, #16
 8009c0c:	b2d9      	uxtb	r1, r3
 8009c0e:	b909      	cbnz	r1, 8009c14 <__lo0bits+0x32>
 8009c10:	3008      	adds	r0, #8
 8009c12:	0a1b      	lsrs	r3, r3, #8
 8009c14:	0719      	lsls	r1, r3, #28
 8009c16:	bf04      	itt	eq
 8009c18:	091b      	lsreq	r3, r3, #4
 8009c1a:	3004      	addeq	r0, #4
 8009c1c:	0799      	lsls	r1, r3, #30
 8009c1e:	bf04      	itt	eq
 8009c20:	089b      	lsreq	r3, r3, #2
 8009c22:	3002      	addeq	r0, #2
 8009c24:	07d9      	lsls	r1, r3, #31
 8009c26:	d403      	bmi.n	8009c30 <__lo0bits+0x4e>
 8009c28:	085b      	lsrs	r3, r3, #1
 8009c2a:	f100 0001 	add.w	r0, r0, #1
 8009c2e:	d003      	beq.n	8009c38 <__lo0bits+0x56>
 8009c30:	6013      	str	r3, [r2, #0]
 8009c32:	4770      	bx	lr
 8009c34:	2000      	movs	r0, #0
 8009c36:	4770      	bx	lr
 8009c38:	2020      	movs	r0, #32
 8009c3a:	4770      	bx	lr

08009c3c <__i2b>:
 8009c3c:	b510      	push	{r4, lr}
 8009c3e:	460c      	mov	r4, r1
 8009c40:	2101      	movs	r1, #1
 8009c42:	f7ff febd 	bl	80099c0 <_Balloc>
 8009c46:	4602      	mov	r2, r0
 8009c48:	b928      	cbnz	r0, 8009c56 <__i2b+0x1a>
 8009c4a:	4b05      	ldr	r3, [pc, #20]	@ (8009c60 <__i2b+0x24>)
 8009c4c:	4805      	ldr	r0, [pc, #20]	@ (8009c64 <__i2b+0x28>)
 8009c4e:	f240 1145 	movw	r1, #325	@ 0x145
 8009c52:	f7fe fbff 	bl	8008454 <__assert_func>
 8009c56:	2301      	movs	r3, #1
 8009c58:	6144      	str	r4, [r0, #20]
 8009c5a:	6103      	str	r3, [r0, #16]
 8009c5c:	bd10      	pop	{r4, pc}
 8009c5e:	bf00      	nop
 8009c60:	0800b114 	.word	0x0800b114
 8009c64:	0800b185 	.word	0x0800b185

08009c68 <__multiply>:
 8009c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6c:	4614      	mov	r4, r2
 8009c6e:	690a      	ldr	r2, [r1, #16]
 8009c70:	6923      	ldr	r3, [r4, #16]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	bfa8      	it	ge
 8009c76:	4623      	movge	r3, r4
 8009c78:	460f      	mov	r7, r1
 8009c7a:	bfa4      	itt	ge
 8009c7c:	460c      	movge	r4, r1
 8009c7e:	461f      	movge	r7, r3
 8009c80:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009c84:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009c88:	68a3      	ldr	r3, [r4, #8]
 8009c8a:	6861      	ldr	r1, [r4, #4]
 8009c8c:	eb0a 0609 	add.w	r6, sl, r9
 8009c90:	42b3      	cmp	r3, r6
 8009c92:	b085      	sub	sp, #20
 8009c94:	bfb8      	it	lt
 8009c96:	3101      	addlt	r1, #1
 8009c98:	f7ff fe92 	bl	80099c0 <_Balloc>
 8009c9c:	b930      	cbnz	r0, 8009cac <__multiply+0x44>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	4b44      	ldr	r3, [pc, #272]	@ (8009db4 <__multiply+0x14c>)
 8009ca2:	4845      	ldr	r0, [pc, #276]	@ (8009db8 <__multiply+0x150>)
 8009ca4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009ca8:	f7fe fbd4 	bl	8008454 <__assert_func>
 8009cac:	f100 0514 	add.w	r5, r0, #20
 8009cb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009cb4:	462b      	mov	r3, r5
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	4543      	cmp	r3, r8
 8009cba:	d321      	bcc.n	8009d00 <__multiply+0x98>
 8009cbc:	f107 0114 	add.w	r1, r7, #20
 8009cc0:	f104 0214 	add.w	r2, r4, #20
 8009cc4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009cc8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009ccc:	9302      	str	r3, [sp, #8]
 8009cce:	1b13      	subs	r3, r2, r4
 8009cd0:	3b15      	subs	r3, #21
 8009cd2:	f023 0303 	bic.w	r3, r3, #3
 8009cd6:	3304      	adds	r3, #4
 8009cd8:	f104 0715 	add.w	r7, r4, #21
 8009cdc:	42ba      	cmp	r2, r7
 8009cde:	bf38      	it	cc
 8009ce0:	2304      	movcc	r3, #4
 8009ce2:	9301      	str	r3, [sp, #4]
 8009ce4:	9b02      	ldr	r3, [sp, #8]
 8009ce6:	9103      	str	r1, [sp, #12]
 8009ce8:	428b      	cmp	r3, r1
 8009cea:	d80c      	bhi.n	8009d06 <__multiply+0x9e>
 8009cec:	2e00      	cmp	r6, #0
 8009cee:	dd03      	ble.n	8009cf8 <__multiply+0x90>
 8009cf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d05b      	beq.n	8009db0 <__multiply+0x148>
 8009cf8:	6106      	str	r6, [r0, #16]
 8009cfa:	b005      	add	sp, #20
 8009cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d00:	f843 2b04 	str.w	r2, [r3], #4
 8009d04:	e7d8      	b.n	8009cb8 <__multiply+0x50>
 8009d06:	f8b1 a000 	ldrh.w	sl, [r1]
 8009d0a:	f1ba 0f00 	cmp.w	sl, #0
 8009d0e:	d024      	beq.n	8009d5a <__multiply+0xf2>
 8009d10:	f104 0e14 	add.w	lr, r4, #20
 8009d14:	46a9      	mov	r9, r5
 8009d16:	f04f 0c00 	mov.w	ip, #0
 8009d1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d1e:	f8d9 3000 	ldr.w	r3, [r9]
 8009d22:	fa1f fb87 	uxth.w	fp, r7
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	fb0a 330b 	mla	r3, sl, fp, r3
 8009d2c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009d30:	f8d9 7000 	ldr.w	r7, [r9]
 8009d34:	4463      	add	r3, ip
 8009d36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009d3a:	fb0a c70b 	mla	r7, sl, fp, ip
 8009d3e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d48:	4572      	cmp	r2, lr
 8009d4a:	f849 3b04 	str.w	r3, [r9], #4
 8009d4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009d52:	d8e2      	bhi.n	8009d1a <__multiply+0xb2>
 8009d54:	9b01      	ldr	r3, [sp, #4]
 8009d56:	f845 c003 	str.w	ip, [r5, r3]
 8009d5a:	9b03      	ldr	r3, [sp, #12]
 8009d5c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009d60:	3104      	adds	r1, #4
 8009d62:	f1b9 0f00 	cmp.w	r9, #0
 8009d66:	d021      	beq.n	8009dac <__multiply+0x144>
 8009d68:	682b      	ldr	r3, [r5, #0]
 8009d6a:	f104 0c14 	add.w	ip, r4, #20
 8009d6e:	46ae      	mov	lr, r5
 8009d70:	f04f 0a00 	mov.w	sl, #0
 8009d74:	f8bc b000 	ldrh.w	fp, [ip]
 8009d78:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009d7c:	fb09 770b 	mla	r7, r9, fp, r7
 8009d80:	4457      	add	r7, sl
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d88:	f84e 3b04 	str.w	r3, [lr], #4
 8009d8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d94:	f8be 3000 	ldrh.w	r3, [lr]
 8009d98:	fb09 330a 	mla	r3, r9, sl, r3
 8009d9c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009da0:	4562      	cmp	r2, ip
 8009da2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009da6:	d8e5      	bhi.n	8009d74 <__multiply+0x10c>
 8009da8:	9f01      	ldr	r7, [sp, #4]
 8009daa:	51eb      	str	r3, [r5, r7]
 8009dac:	3504      	adds	r5, #4
 8009dae:	e799      	b.n	8009ce4 <__multiply+0x7c>
 8009db0:	3e01      	subs	r6, #1
 8009db2:	e79b      	b.n	8009cec <__multiply+0x84>
 8009db4:	0800b114 	.word	0x0800b114
 8009db8:	0800b185 	.word	0x0800b185

08009dbc <__pow5mult>:
 8009dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dc0:	4615      	mov	r5, r2
 8009dc2:	f012 0203 	ands.w	r2, r2, #3
 8009dc6:	4607      	mov	r7, r0
 8009dc8:	460e      	mov	r6, r1
 8009dca:	d007      	beq.n	8009ddc <__pow5mult+0x20>
 8009dcc:	4c25      	ldr	r4, [pc, #148]	@ (8009e64 <__pow5mult+0xa8>)
 8009dce:	3a01      	subs	r2, #1
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009dd6:	f7ff fe55 	bl	8009a84 <__multadd>
 8009dda:	4606      	mov	r6, r0
 8009ddc:	10ad      	asrs	r5, r5, #2
 8009dde:	d03d      	beq.n	8009e5c <__pow5mult+0xa0>
 8009de0:	69fc      	ldr	r4, [r7, #28]
 8009de2:	b97c      	cbnz	r4, 8009e04 <__pow5mult+0x48>
 8009de4:	2010      	movs	r0, #16
 8009de6:	f7ff fd23 	bl	8009830 <malloc>
 8009dea:	4602      	mov	r2, r0
 8009dec:	61f8      	str	r0, [r7, #28]
 8009dee:	b928      	cbnz	r0, 8009dfc <__pow5mult+0x40>
 8009df0:	4b1d      	ldr	r3, [pc, #116]	@ (8009e68 <__pow5mult+0xac>)
 8009df2:	481e      	ldr	r0, [pc, #120]	@ (8009e6c <__pow5mult+0xb0>)
 8009df4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009df8:	f7fe fb2c 	bl	8008454 <__assert_func>
 8009dfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e00:	6004      	str	r4, [r0, #0]
 8009e02:	60c4      	str	r4, [r0, #12]
 8009e04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009e08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e0c:	b94c      	cbnz	r4, 8009e22 <__pow5mult+0x66>
 8009e0e:	f240 2171 	movw	r1, #625	@ 0x271
 8009e12:	4638      	mov	r0, r7
 8009e14:	f7ff ff12 	bl	8009c3c <__i2b>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e1e:	4604      	mov	r4, r0
 8009e20:	6003      	str	r3, [r0, #0]
 8009e22:	f04f 0900 	mov.w	r9, #0
 8009e26:	07eb      	lsls	r3, r5, #31
 8009e28:	d50a      	bpl.n	8009e40 <__pow5mult+0x84>
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4622      	mov	r2, r4
 8009e2e:	4638      	mov	r0, r7
 8009e30:	f7ff ff1a 	bl	8009c68 <__multiply>
 8009e34:	4631      	mov	r1, r6
 8009e36:	4680      	mov	r8, r0
 8009e38:	4638      	mov	r0, r7
 8009e3a:	f7ff fe01 	bl	8009a40 <_Bfree>
 8009e3e:	4646      	mov	r6, r8
 8009e40:	106d      	asrs	r5, r5, #1
 8009e42:	d00b      	beq.n	8009e5c <__pow5mult+0xa0>
 8009e44:	6820      	ldr	r0, [r4, #0]
 8009e46:	b938      	cbnz	r0, 8009e58 <__pow5mult+0x9c>
 8009e48:	4622      	mov	r2, r4
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	4638      	mov	r0, r7
 8009e4e:	f7ff ff0b 	bl	8009c68 <__multiply>
 8009e52:	6020      	str	r0, [r4, #0]
 8009e54:	f8c0 9000 	str.w	r9, [r0]
 8009e58:	4604      	mov	r4, r0
 8009e5a:	e7e4      	b.n	8009e26 <__pow5mult+0x6a>
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e62:	bf00      	nop
 8009e64:	0800b1e0 	.word	0x0800b1e0
 8009e68:	0800affa 	.word	0x0800affa
 8009e6c:	0800b185 	.word	0x0800b185

08009e70 <__lshift>:
 8009e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e74:	460c      	mov	r4, r1
 8009e76:	6849      	ldr	r1, [r1, #4]
 8009e78:	6923      	ldr	r3, [r4, #16]
 8009e7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e7e:	68a3      	ldr	r3, [r4, #8]
 8009e80:	4607      	mov	r7, r0
 8009e82:	4691      	mov	r9, r2
 8009e84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e88:	f108 0601 	add.w	r6, r8, #1
 8009e8c:	42b3      	cmp	r3, r6
 8009e8e:	db0b      	blt.n	8009ea8 <__lshift+0x38>
 8009e90:	4638      	mov	r0, r7
 8009e92:	f7ff fd95 	bl	80099c0 <_Balloc>
 8009e96:	4605      	mov	r5, r0
 8009e98:	b948      	cbnz	r0, 8009eae <__lshift+0x3e>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	4b28      	ldr	r3, [pc, #160]	@ (8009f40 <__lshift+0xd0>)
 8009e9e:	4829      	ldr	r0, [pc, #164]	@ (8009f44 <__lshift+0xd4>)
 8009ea0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009ea4:	f7fe fad6 	bl	8008454 <__assert_func>
 8009ea8:	3101      	adds	r1, #1
 8009eaa:	005b      	lsls	r3, r3, #1
 8009eac:	e7ee      	b.n	8009e8c <__lshift+0x1c>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f100 0114 	add.w	r1, r0, #20
 8009eb4:	f100 0210 	add.w	r2, r0, #16
 8009eb8:	4618      	mov	r0, r3
 8009eba:	4553      	cmp	r3, sl
 8009ebc:	db33      	blt.n	8009f26 <__lshift+0xb6>
 8009ebe:	6920      	ldr	r0, [r4, #16]
 8009ec0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ec4:	f104 0314 	add.w	r3, r4, #20
 8009ec8:	f019 091f 	ands.w	r9, r9, #31
 8009ecc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ed0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ed4:	d02b      	beq.n	8009f2e <__lshift+0xbe>
 8009ed6:	f1c9 0e20 	rsb	lr, r9, #32
 8009eda:	468a      	mov	sl, r1
 8009edc:	2200      	movs	r2, #0
 8009ede:	6818      	ldr	r0, [r3, #0]
 8009ee0:	fa00 f009 	lsl.w	r0, r0, r9
 8009ee4:	4310      	orrs	r0, r2
 8009ee6:	f84a 0b04 	str.w	r0, [sl], #4
 8009eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eee:	459c      	cmp	ip, r3
 8009ef0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ef4:	d8f3      	bhi.n	8009ede <__lshift+0x6e>
 8009ef6:	ebac 0304 	sub.w	r3, ip, r4
 8009efa:	3b15      	subs	r3, #21
 8009efc:	f023 0303 	bic.w	r3, r3, #3
 8009f00:	3304      	adds	r3, #4
 8009f02:	f104 0015 	add.w	r0, r4, #21
 8009f06:	4584      	cmp	ip, r0
 8009f08:	bf38      	it	cc
 8009f0a:	2304      	movcc	r3, #4
 8009f0c:	50ca      	str	r2, [r1, r3]
 8009f0e:	b10a      	cbz	r2, 8009f14 <__lshift+0xa4>
 8009f10:	f108 0602 	add.w	r6, r8, #2
 8009f14:	3e01      	subs	r6, #1
 8009f16:	4638      	mov	r0, r7
 8009f18:	612e      	str	r6, [r5, #16]
 8009f1a:	4621      	mov	r1, r4
 8009f1c:	f7ff fd90 	bl	8009a40 <_Bfree>
 8009f20:	4628      	mov	r0, r5
 8009f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f26:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	e7c5      	b.n	8009eba <__lshift+0x4a>
 8009f2e:	3904      	subs	r1, #4
 8009f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f34:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f38:	459c      	cmp	ip, r3
 8009f3a:	d8f9      	bhi.n	8009f30 <__lshift+0xc0>
 8009f3c:	e7ea      	b.n	8009f14 <__lshift+0xa4>
 8009f3e:	bf00      	nop
 8009f40:	0800b114 	.word	0x0800b114
 8009f44:	0800b185 	.word	0x0800b185

08009f48 <__mcmp>:
 8009f48:	690a      	ldr	r2, [r1, #16]
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	6900      	ldr	r0, [r0, #16]
 8009f4e:	1a80      	subs	r0, r0, r2
 8009f50:	b530      	push	{r4, r5, lr}
 8009f52:	d10e      	bne.n	8009f72 <__mcmp+0x2a>
 8009f54:	3314      	adds	r3, #20
 8009f56:	3114      	adds	r1, #20
 8009f58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009f5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009f60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f68:	4295      	cmp	r5, r2
 8009f6a:	d003      	beq.n	8009f74 <__mcmp+0x2c>
 8009f6c:	d205      	bcs.n	8009f7a <__mcmp+0x32>
 8009f6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f72:	bd30      	pop	{r4, r5, pc}
 8009f74:	42a3      	cmp	r3, r4
 8009f76:	d3f3      	bcc.n	8009f60 <__mcmp+0x18>
 8009f78:	e7fb      	b.n	8009f72 <__mcmp+0x2a>
 8009f7a:	2001      	movs	r0, #1
 8009f7c:	e7f9      	b.n	8009f72 <__mcmp+0x2a>
	...

08009f80 <__mdiff>:
 8009f80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f84:	4689      	mov	r9, r1
 8009f86:	4606      	mov	r6, r0
 8009f88:	4611      	mov	r1, r2
 8009f8a:	4648      	mov	r0, r9
 8009f8c:	4614      	mov	r4, r2
 8009f8e:	f7ff ffdb 	bl	8009f48 <__mcmp>
 8009f92:	1e05      	subs	r5, r0, #0
 8009f94:	d112      	bne.n	8009fbc <__mdiff+0x3c>
 8009f96:	4629      	mov	r1, r5
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f7ff fd11 	bl	80099c0 <_Balloc>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	b928      	cbnz	r0, 8009fae <__mdiff+0x2e>
 8009fa2:	4b3f      	ldr	r3, [pc, #252]	@ (800a0a0 <__mdiff+0x120>)
 8009fa4:	f240 2137 	movw	r1, #567	@ 0x237
 8009fa8:	483e      	ldr	r0, [pc, #248]	@ (800a0a4 <__mdiff+0x124>)
 8009faa:	f7fe fa53 	bl	8008454 <__assert_func>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	b003      	add	sp, #12
 8009fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fbc:	bfbc      	itt	lt
 8009fbe:	464b      	movlt	r3, r9
 8009fc0:	46a1      	movlt	r9, r4
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009fc8:	bfba      	itte	lt
 8009fca:	461c      	movlt	r4, r3
 8009fcc:	2501      	movlt	r5, #1
 8009fce:	2500      	movge	r5, #0
 8009fd0:	f7ff fcf6 	bl	80099c0 <_Balloc>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	b918      	cbnz	r0, 8009fe0 <__mdiff+0x60>
 8009fd8:	4b31      	ldr	r3, [pc, #196]	@ (800a0a0 <__mdiff+0x120>)
 8009fda:	f240 2145 	movw	r1, #581	@ 0x245
 8009fde:	e7e3      	b.n	8009fa8 <__mdiff+0x28>
 8009fe0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009fe4:	6926      	ldr	r6, [r4, #16]
 8009fe6:	60c5      	str	r5, [r0, #12]
 8009fe8:	f109 0310 	add.w	r3, r9, #16
 8009fec:	f109 0514 	add.w	r5, r9, #20
 8009ff0:	f104 0e14 	add.w	lr, r4, #20
 8009ff4:	f100 0b14 	add.w	fp, r0, #20
 8009ff8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009ffc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	46d9      	mov	r9, fp
 800a004:	f04f 0c00 	mov.w	ip, #0
 800a008:	9b01      	ldr	r3, [sp, #4]
 800a00a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a00e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	fa1f f38a 	uxth.w	r3, sl
 800a018:	4619      	mov	r1, r3
 800a01a:	b283      	uxth	r3, r0
 800a01c:	1acb      	subs	r3, r1, r3
 800a01e:	0c00      	lsrs	r0, r0, #16
 800a020:	4463      	add	r3, ip
 800a022:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a026:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a030:	4576      	cmp	r6, lr
 800a032:	f849 3b04 	str.w	r3, [r9], #4
 800a036:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a03a:	d8e5      	bhi.n	800a008 <__mdiff+0x88>
 800a03c:	1b33      	subs	r3, r6, r4
 800a03e:	3b15      	subs	r3, #21
 800a040:	f023 0303 	bic.w	r3, r3, #3
 800a044:	3415      	adds	r4, #21
 800a046:	3304      	adds	r3, #4
 800a048:	42a6      	cmp	r6, r4
 800a04a:	bf38      	it	cc
 800a04c:	2304      	movcc	r3, #4
 800a04e:	441d      	add	r5, r3
 800a050:	445b      	add	r3, fp
 800a052:	461e      	mov	r6, r3
 800a054:	462c      	mov	r4, r5
 800a056:	4544      	cmp	r4, r8
 800a058:	d30e      	bcc.n	800a078 <__mdiff+0xf8>
 800a05a:	f108 0103 	add.w	r1, r8, #3
 800a05e:	1b49      	subs	r1, r1, r5
 800a060:	f021 0103 	bic.w	r1, r1, #3
 800a064:	3d03      	subs	r5, #3
 800a066:	45a8      	cmp	r8, r5
 800a068:	bf38      	it	cc
 800a06a:	2100      	movcc	r1, #0
 800a06c:	440b      	add	r3, r1
 800a06e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a072:	b191      	cbz	r1, 800a09a <__mdiff+0x11a>
 800a074:	6117      	str	r7, [r2, #16]
 800a076:	e79d      	b.n	8009fb4 <__mdiff+0x34>
 800a078:	f854 1b04 	ldr.w	r1, [r4], #4
 800a07c:	46e6      	mov	lr, ip
 800a07e:	0c08      	lsrs	r0, r1, #16
 800a080:	fa1c fc81 	uxtah	ip, ip, r1
 800a084:	4471      	add	r1, lr
 800a086:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a08a:	b289      	uxth	r1, r1
 800a08c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a090:	f846 1b04 	str.w	r1, [r6], #4
 800a094:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a098:	e7dd      	b.n	800a056 <__mdiff+0xd6>
 800a09a:	3f01      	subs	r7, #1
 800a09c:	e7e7      	b.n	800a06e <__mdiff+0xee>
 800a09e:	bf00      	nop
 800a0a0:	0800b114 	.word	0x0800b114
 800a0a4:	0800b185 	.word	0x0800b185

0800a0a8 <__ulp>:
 800a0a8:	b082      	sub	sp, #8
 800a0aa:	ed8d 0b00 	vstr	d0, [sp]
 800a0ae:	9a01      	ldr	r2, [sp, #4]
 800a0b0:	4b0f      	ldr	r3, [pc, #60]	@ (800a0f0 <__ulp+0x48>)
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	dc08      	bgt.n	800a0ce <__ulp+0x26>
 800a0bc:	425b      	negs	r3, r3
 800a0be:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a0c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a0c6:	da04      	bge.n	800a0d2 <__ulp+0x2a>
 800a0c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a0cc:	4113      	asrs	r3, r2
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	e008      	b.n	800a0e4 <__ulp+0x3c>
 800a0d2:	f1a2 0314 	sub.w	r3, r2, #20
 800a0d6:	2b1e      	cmp	r3, #30
 800a0d8:	bfda      	itte	le
 800a0da:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a0de:	40da      	lsrle	r2, r3
 800a0e0:	2201      	movgt	r2, #1
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	4610      	mov	r0, r2
 800a0e8:	ec41 0b10 	vmov	d0, r0, r1
 800a0ec:	b002      	add	sp, #8
 800a0ee:	4770      	bx	lr
 800a0f0:	7ff00000 	.word	0x7ff00000

0800a0f4 <__b2d>:
 800a0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f8:	6906      	ldr	r6, [r0, #16]
 800a0fa:	f100 0814 	add.w	r8, r0, #20
 800a0fe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a102:	1f37      	subs	r7, r6, #4
 800a104:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a108:	4610      	mov	r0, r2
 800a10a:	f7ff fd4b 	bl	8009ba4 <__hi0bits>
 800a10e:	f1c0 0320 	rsb	r3, r0, #32
 800a112:	280a      	cmp	r0, #10
 800a114:	600b      	str	r3, [r1, #0]
 800a116:	491b      	ldr	r1, [pc, #108]	@ (800a184 <__b2d+0x90>)
 800a118:	dc15      	bgt.n	800a146 <__b2d+0x52>
 800a11a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a11e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a122:	45b8      	cmp	r8, r7
 800a124:	ea43 0501 	orr.w	r5, r3, r1
 800a128:	bf34      	ite	cc
 800a12a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a12e:	2300      	movcs	r3, #0
 800a130:	3015      	adds	r0, #21
 800a132:	fa02 f000 	lsl.w	r0, r2, r0
 800a136:	fa23 f30c 	lsr.w	r3, r3, ip
 800a13a:	4303      	orrs	r3, r0
 800a13c:	461c      	mov	r4, r3
 800a13e:	ec45 4b10 	vmov	d0, r4, r5
 800a142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a146:	45b8      	cmp	r8, r7
 800a148:	bf3a      	itte	cc
 800a14a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a14e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a152:	2300      	movcs	r3, #0
 800a154:	380b      	subs	r0, #11
 800a156:	d012      	beq.n	800a17e <__b2d+0x8a>
 800a158:	f1c0 0120 	rsb	r1, r0, #32
 800a15c:	fa23 f401 	lsr.w	r4, r3, r1
 800a160:	4082      	lsls	r2, r0
 800a162:	4322      	orrs	r2, r4
 800a164:	4547      	cmp	r7, r8
 800a166:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a16a:	bf8c      	ite	hi
 800a16c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a170:	2200      	movls	r2, #0
 800a172:	4083      	lsls	r3, r0
 800a174:	40ca      	lsrs	r2, r1
 800a176:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a17a:	4313      	orrs	r3, r2
 800a17c:	e7de      	b.n	800a13c <__b2d+0x48>
 800a17e:	ea42 0501 	orr.w	r5, r2, r1
 800a182:	e7db      	b.n	800a13c <__b2d+0x48>
 800a184:	3ff00000 	.word	0x3ff00000

0800a188 <__d2b>:
 800a188:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a18c:	460f      	mov	r7, r1
 800a18e:	2101      	movs	r1, #1
 800a190:	ec59 8b10 	vmov	r8, r9, d0
 800a194:	4616      	mov	r6, r2
 800a196:	f7ff fc13 	bl	80099c0 <_Balloc>
 800a19a:	4604      	mov	r4, r0
 800a19c:	b930      	cbnz	r0, 800a1ac <__d2b+0x24>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	4b23      	ldr	r3, [pc, #140]	@ (800a230 <__d2b+0xa8>)
 800a1a2:	4824      	ldr	r0, [pc, #144]	@ (800a234 <__d2b+0xac>)
 800a1a4:	f240 310f 	movw	r1, #783	@ 0x30f
 800a1a8:	f7fe f954 	bl	8008454 <__assert_func>
 800a1ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a1b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1b4:	b10d      	cbz	r5, 800a1ba <__d2b+0x32>
 800a1b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a1ba:	9301      	str	r3, [sp, #4]
 800a1bc:	f1b8 0300 	subs.w	r3, r8, #0
 800a1c0:	d023      	beq.n	800a20a <__d2b+0x82>
 800a1c2:	4668      	mov	r0, sp
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	f7ff fd0c 	bl	8009be2 <__lo0bits>
 800a1ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a1ce:	b1d0      	cbz	r0, 800a206 <__d2b+0x7e>
 800a1d0:	f1c0 0320 	rsb	r3, r0, #32
 800a1d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d8:	430b      	orrs	r3, r1
 800a1da:	40c2      	lsrs	r2, r0
 800a1dc:	6163      	str	r3, [r4, #20]
 800a1de:	9201      	str	r2, [sp, #4]
 800a1e0:	9b01      	ldr	r3, [sp, #4]
 800a1e2:	61a3      	str	r3, [r4, #24]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	bf0c      	ite	eq
 800a1e8:	2201      	moveq	r2, #1
 800a1ea:	2202      	movne	r2, #2
 800a1ec:	6122      	str	r2, [r4, #16]
 800a1ee:	b1a5      	cbz	r5, 800a21a <__d2b+0x92>
 800a1f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a1f4:	4405      	add	r5, r0
 800a1f6:	603d      	str	r5, [r7, #0]
 800a1f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a1fc:	6030      	str	r0, [r6, #0]
 800a1fe:	4620      	mov	r0, r4
 800a200:	b003      	add	sp, #12
 800a202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a206:	6161      	str	r1, [r4, #20]
 800a208:	e7ea      	b.n	800a1e0 <__d2b+0x58>
 800a20a:	a801      	add	r0, sp, #4
 800a20c:	f7ff fce9 	bl	8009be2 <__lo0bits>
 800a210:	9b01      	ldr	r3, [sp, #4]
 800a212:	6163      	str	r3, [r4, #20]
 800a214:	3020      	adds	r0, #32
 800a216:	2201      	movs	r2, #1
 800a218:	e7e8      	b.n	800a1ec <__d2b+0x64>
 800a21a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a21e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a222:	6038      	str	r0, [r7, #0]
 800a224:	6918      	ldr	r0, [r3, #16]
 800a226:	f7ff fcbd 	bl	8009ba4 <__hi0bits>
 800a22a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a22e:	e7e5      	b.n	800a1fc <__d2b+0x74>
 800a230:	0800b114 	.word	0x0800b114
 800a234:	0800b185 	.word	0x0800b185

0800a238 <__ratio>:
 800a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	b085      	sub	sp, #20
 800a23e:	e9cd 1000 	strd	r1, r0, [sp]
 800a242:	a902      	add	r1, sp, #8
 800a244:	f7ff ff56 	bl	800a0f4 <__b2d>
 800a248:	9800      	ldr	r0, [sp, #0]
 800a24a:	a903      	add	r1, sp, #12
 800a24c:	ec55 4b10 	vmov	r4, r5, d0
 800a250:	f7ff ff50 	bl	800a0f4 <__b2d>
 800a254:	9b01      	ldr	r3, [sp, #4]
 800a256:	6919      	ldr	r1, [r3, #16]
 800a258:	9b00      	ldr	r3, [sp, #0]
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	1ac9      	subs	r1, r1, r3
 800a25e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a262:	1a9b      	subs	r3, r3, r2
 800a264:	ec5b ab10 	vmov	sl, fp, d0
 800a268:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	bfce      	itee	gt
 800a270:	462a      	movgt	r2, r5
 800a272:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a276:	465a      	movle	r2, fp
 800a278:	462f      	mov	r7, r5
 800a27a:	46d9      	mov	r9, fp
 800a27c:	bfcc      	ite	gt
 800a27e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a282:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a286:	464b      	mov	r3, r9
 800a288:	4652      	mov	r2, sl
 800a28a:	4620      	mov	r0, r4
 800a28c:	4639      	mov	r1, r7
 800a28e:	f7f6 faed 	bl	800086c <__aeabi_ddiv>
 800a292:	ec41 0b10 	vmov	d0, r0, r1
 800a296:	b005      	add	sp, #20
 800a298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a29c <__copybits>:
 800a29c:	3901      	subs	r1, #1
 800a29e:	b570      	push	{r4, r5, r6, lr}
 800a2a0:	1149      	asrs	r1, r1, #5
 800a2a2:	6914      	ldr	r4, [r2, #16]
 800a2a4:	3101      	adds	r1, #1
 800a2a6:	f102 0314 	add.w	r3, r2, #20
 800a2aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a2ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a2b2:	1f05      	subs	r5, r0, #4
 800a2b4:	42a3      	cmp	r3, r4
 800a2b6:	d30c      	bcc.n	800a2d2 <__copybits+0x36>
 800a2b8:	1aa3      	subs	r3, r4, r2
 800a2ba:	3b11      	subs	r3, #17
 800a2bc:	f023 0303 	bic.w	r3, r3, #3
 800a2c0:	3211      	adds	r2, #17
 800a2c2:	42a2      	cmp	r2, r4
 800a2c4:	bf88      	it	hi
 800a2c6:	2300      	movhi	r3, #0
 800a2c8:	4418      	add	r0, r3
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	4288      	cmp	r0, r1
 800a2ce:	d305      	bcc.n	800a2dc <__copybits+0x40>
 800a2d0:	bd70      	pop	{r4, r5, r6, pc}
 800a2d2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a2d6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a2da:	e7eb      	b.n	800a2b4 <__copybits+0x18>
 800a2dc:	f840 3b04 	str.w	r3, [r0], #4
 800a2e0:	e7f4      	b.n	800a2cc <__copybits+0x30>

0800a2e2 <__any_on>:
 800a2e2:	f100 0214 	add.w	r2, r0, #20
 800a2e6:	6900      	ldr	r0, [r0, #16]
 800a2e8:	114b      	asrs	r3, r1, #5
 800a2ea:	4298      	cmp	r0, r3
 800a2ec:	b510      	push	{r4, lr}
 800a2ee:	db11      	blt.n	800a314 <__any_on+0x32>
 800a2f0:	dd0a      	ble.n	800a308 <__any_on+0x26>
 800a2f2:	f011 011f 	ands.w	r1, r1, #31
 800a2f6:	d007      	beq.n	800a308 <__any_on+0x26>
 800a2f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a2fc:	fa24 f001 	lsr.w	r0, r4, r1
 800a300:	fa00 f101 	lsl.w	r1, r0, r1
 800a304:	428c      	cmp	r4, r1
 800a306:	d10b      	bne.n	800a320 <__any_on+0x3e>
 800a308:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d803      	bhi.n	800a318 <__any_on+0x36>
 800a310:	2000      	movs	r0, #0
 800a312:	bd10      	pop	{r4, pc}
 800a314:	4603      	mov	r3, r0
 800a316:	e7f7      	b.n	800a308 <__any_on+0x26>
 800a318:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a31c:	2900      	cmp	r1, #0
 800a31e:	d0f5      	beq.n	800a30c <__any_on+0x2a>
 800a320:	2001      	movs	r0, #1
 800a322:	e7f6      	b.n	800a312 <__any_on+0x30>

0800a324 <__ascii_wctomb>:
 800a324:	4603      	mov	r3, r0
 800a326:	4608      	mov	r0, r1
 800a328:	b141      	cbz	r1, 800a33c <__ascii_wctomb+0x18>
 800a32a:	2aff      	cmp	r2, #255	@ 0xff
 800a32c:	d904      	bls.n	800a338 <__ascii_wctomb+0x14>
 800a32e:	228a      	movs	r2, #138	@ 0x8a
 800a330:	601a      	str	r2, [r3, #0]
 800a332:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a336:	4770      	bx	lr
 800a338:	700a      	strb	r2, [r1, #0]
 800a33a:	2001      	movs	r0, #1
 800a33c:	4770      	bx	lr

0800a33e <__ssputs_r>:
 800a33e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a342:	688e      	ldr	r6, [r1, #8]
 800a344:	461f      	mov	r7, r3
 800a346:	42be      	cmp	r6, r7
 800a348:	680b      	ldr	r3, [r1, #0]
 800a34a:	4682      	mov	sl, r0
 800a34c:	460c      	mov	r4, r1
 800a34e:	4690      	mov	r8, r2
 800a350:	d82d      	bhi.n	800a3ae <__ssputs_r+0x70>
 800a352:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a356:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a35a:	d026      	beq.n	800a3aa <__ssputs_r+0x6c>
 800a35c:	6965      	ldr	r5, [r4, #20]
 800a35e:	6909      	ldr	r1, [r1, #16]
 800a360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a364:	eba3 0901 	sub.w	r9, r3, r1
 800a368:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a36c:	1c7b      	adds	r3, r7, #1
 800a36e:	444b      	add	r3, r9
 800a370:	106d      	asrs	r5, r5, #1
 800a372:	429d      	cmp	r5, r3
 800a374:	bf38      	it	cc
 800a376:	461d      	movcc	r5, r3
 800a378:	0553      	lsls	r3, r2, #21
 800a37a:	d527      	bpl.n	800a3cc <__ssputs_r+0x8e>
 800a37c:	4629      	mov	r1, r5
 800a37e:	f7ff fa81 	bl	8009884 <_malloc_r>
 800a382:	4606      	mov	r6, r0
 800a384:	b360      	cbz	r0, 800a3e0 <__ssputs_r+0xa2>
 800a386:	6921      	ldr	r1, [r4, #16]
 800a388:	464a      	mov	r2, r9
 800a38a:	f7fe f846 	bl	800841a <memcpy>
 800a38e:	89a3      	ldrh	r3, [r4, #12]
 800a390:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a398:	81a3      	strh	r3, [r4, #12]
 800a39a:	6126      	str	r6, [r4, #16]
 800a39c:	6165      	str	r5, [r4, #20]
 800a39e:	444e      	add	r6, r9
 800a3a0:	eba5 0509 	sub.w	r5, r5, r9
 800a3a4:	6026      	str	r6, [r4, #0]
 800a3a6:	60a5      	str	r5, [r4, #8]
 800a3a8:	463e      	mov	r6, r7
 800a3aa:	42be      	cmp	r6, r7
 800a3ac:	d900      	bls.n	800a3b0 <__ssputs_r+0x72>
 800a3ae:	463e      	mov	r6, r7
 800a3b0:	6820      	ldr	r0, [r4, #0]
 800a3b2:	4632      	mov	r2, r6
 800a3b4:	4641      	mov	r1, r8
 800a3b6:	f000 f9d7 	bl	800a768 <memmove>
 800a3ba:	68a3      	ldr	r3, [r4, #8]
 800a3bc:	1b9b      	subs	r3, r3, r6
 800a3be:	60a3      	str	r3, [r4, #8]
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	4433      	add	r3, r6
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3cc:	462a      	mov	r2, r5
 800a3ce:	f000 fa10 	bl	800a7f2 <_realloc_r>
 800a3d2:	4606      	mov	r6, r0
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d1e0      	bne.n	800a39a <__ssputs_r+0x5c>
 800a3d8:	6921      	ldr	r1, [r4, #16]
 800a3da:	4650      	mov	r0, sl
 800a3dc:	f7fe fea4 	bl	8009128 <_free_r>
 800a3e0:	230c      	movs	r3, #12
 800a3e2:	f8ca 3000 	str.w	r3, [sl]
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3ec:	81a3      	strh	r3, [r4, #12]
 800a3ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3f2:	e7e9      	b.n	800a3c8 <__ssputs_r+0x8a>

0800a3f4 <_svfiprintf_r>:
 800a3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f8:	4698      	mov	r8, r3
 800a3fa:	898b      	ldrh	r3, [r1, #12]
 800a3fc:	061b      	lsls	r3, r3, #24
 800a3fe:	b09d      	sub	sp, #116	@ 0x74
 800a400:	4607      	mov	r7, r0
 800a402:	460d      	mov	r5, r1
 800a404:	4614      	mov	r4, r2
 800a406:	d510      	bpl.n	800a42a <_svfiprintf_r+0x36>
 800a408:	690b      	ldr	r3, [r1, #16]
 800a40a:	b973      	cbnz	r3, 800a42a <_svfiprintf_r+0x36>
 800a40c:	2140      	movs	r1, #64	@ 0x40
 800a40e:	f7ff fa39 	bl	8009884 <_malloc_r>
 800a412:	6028      	str	r0, [r5, #0]
 800a414:	6128      	str	r0, [r5, #16]
 800a416:	b930      	cbnz	r0, 800a426 <_svfiprintf_r+0x32>
 800a418:	230c      	movs	r3, #12
 800a41a:	603b      	str	r3, [r7, #0]
 800a41c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a420:	b01d      	add	sp, #116	@ 0x74
 800a422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a426:	2340      	movs	r3, #64	@ 0x40
 800a428:	616b      	str	r3, [r5, #20]
 800a42a:	2300      	movs	r3, #0
 800a42c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a42e:	2320      	movs	r3, #32
 800a430:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a434:	f8cd 800c 	str.w	r8, [sp, #12]
 800a438:	2330      	movs	r3, #48	@ 0x30
 800a43a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a5d8 <_svfiprintf_r+0x1e4>
 800a43e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a442:	f04f 0901 	mov.w	r9, #1
 800a446:	4623      	mov	r3, r4
 800a448:	469a      	mov	sl, r3
 800a44a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a44e:	b10a      	cbz	r2, 800a454 <_svfiprintf_r+0x60>
 800a450:	2a25      	cmp	r2, #37	@ 0x25
 800a452:	d1f9      	bne.n	800a448 <_svfiprintf_r+0x54>
 800a454:	ebba 0b04 	subs.w	fp, sl, r4
 800a458:	d00b      	beq.n	800a472 <_svfiprintf_r+0x7e>
 800a45a:	465b      	mov	r3, fp
 800a45c:	4622      	mov	r2, r4
 800a45e:	4629      	mov	r1, r5
 800a460:	4638      	mov	r0, r7
 800a462:	f7ff ff6c 	bl	800a33e <__ssputs_r>
 800a466:	3001      	adds	r0, #1
 800a468:	f000 80a7 	beq.w	800a5ba <_svfiprintf_r+0x1c6>
 800a46c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a46e:	445a      	add	r2, fp
 800a470:	9209      	str	r2, [sp, #36]	@ 0x24
 800a472:	f89a 3000 	ldrb.w	r3, [sl]
 800a476:	2b00      	cmp	r3, #0
 800a478:	f000 809f 	beq.w	800a5ba <_svfiprintf_r+0x1c6>
 800a47c:	2300      	movs	r3, #0
 800a47e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a482:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a486:	f10a 0a01 	add.w	sl, sl, #1
 800a48a:	9304      	str	r3, [sp, #16]
 800a48c:	9307      	str	r3, [sp, #28]
 800a48e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a492:	931a      	str	r3, [sp, #104]	@ 0x68
 800a494:	4654      	mov	r4, sl
 800a496:	2205      	movs	r2, #5
 800a498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a49c:	484e      	ldr	r0, [pc, #312]	@ (800a5d8 <_svfiprintf_r+0x1e4>)
 800a49e:	f7f5 fea7 	bl	80001f0 <memchr>
 800a4a2:	9a04      	ldr	r2, [sp, #16]
 800a4a4:	b9d8      	cbnz	r0, 800a4de <_svfiprintf_r+0xea>
 800a4a6:	06d0      	lsls	r0, r2, #27
 800a4a8:	bf44      	itt	mi
 800a4aa:	2320      	movmi	r3, #32
 800a4ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4b0:	0711      	lsls	r1, r2, #28
 800a4b2:	bf44      	itt	mi
 800a4b4:	232b      	movmi	r3, #43	@ 0x2b
 800a4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a4be:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4c0:	d015      	beq.n	800a4ee <_svfiprintf_r+0xfa>
 800a4c2:	9a07      	ldr	r2, [sp, #28]
 800a4c4:	4654      	mov	r4, sl
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	f04f 0c0a 	mov.w	ip, #10
 800a4cc:	4621      	mov	r1, r4
 800a4ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4d2:	3b30      	subs	r3, #48	@ 0x30
 800a4d4:	2b09      	cmp	r3, #9
 800a4d6:	d94b      	bls.n	800a570 <_svfiprintf_r+0x17c>
 800a4d8:	b1b0      	cbz	r0, 800a508 <_svfiprintf_r+0x114>
 800a4da:	9207      	str	r2, [sp, #28]
 800a4dc:	e014      	b.n	800a508 <_svfiprintf_r+0x114>
 800a4de:	eba0 0308 	sub.w	r3, r0, r8
 800a4e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	9304      	str	r3, [sp, #16]
 800a4ea:	46a2      	mov	sl, r4
 800a4ec:	e7d2      	b.n	800a494 <_svfiprintf_r+0xa0>
 800a4ee:	9b03      	ldr	r3, [sp, #12]
 800a4f0:	1d19      	adds	r1, r3, #4
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	9103      	str	r1, [sp, #12]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	bfbb      	ittet	lt
 800a4fa:	425b      	neglt	r3, r3
 800a4fc:	f042 0202 	orrlt.w	r2, r2, #2
 800a500:	9307      	strge	r3, [sp, #28]
 800a502:	9307      	strlt	r3, [sp, #28]
 800a504:	bfb8      	it	lt
 800a506:	9204      	strlt	r2, [sp, #16]
 800a508:	7823      	ldrb	r3, [r4, #0]
 800a50a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a50c:	d10a      	bne.n	800a524 <_svfiprintf_r+0x130>
 800a50e:	7863      	ldrb	r3, [r4, #1]
 800a510:	2b2a      	cmp	r3, #42	@ 0x2a
 800a512:	d132      	bne.n	800a57a <_svfiprintf_r+0x186>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	1d1a      	adds	r2, r3, #4
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	9203      	str	r2, [sp, #12]
 800a51c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a520:	3402      	adds	r4, #2
 800a522:	9305      	str	r3, [sp, #20]
 800a524:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a5e8 <_svfiprintf_r+0x1f4>
 800a528:	7821      	ldrb	r1, [r4, #0]
 800a52a:	2203      	movs	r2, #3
 800a52c:	4650      	mov	r0, sl
 800a52e:	f7f5 fe5f 	bl	80001f0 <memchr>
 800a532:	b138      	cbz	r0, 800a544 <_svfiprintf_r+0x150>
 800a534:	9b04      	ldr	r3, [sp, #16]
 800a536:	eba0 000a 	sub.w	r0, r0, sl
 800a53a:	2240      	movs	r2, #64	@ 0x40
 800a53c:	4082      	lsls	r2, r0
 800a53e:	4313      	orrs	r3, r2
 800a540:	3401      	adds	r4, #1
 800a542:	9304      	str	r3, [sp, #16]
 800a544:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a548:	4824      	ldr	r0, [pc, #144]	@ (800a5dc <_svfiprintf_r+0x1e8>)
 800a54a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a54e:	2206      	movs	r2, #6
 800a550:	f7f5 fe4e 	bl	80001f0 <memchr>
 800a554:	2800      	cmp	r0, #0
 800a556:	d036      	beq.n	800a5c6 <_svfiprintf_r+0x1d2>
 800a558:	4b21      	ldr	r3, [pc, #132]	@ (800a5e0 <_svfiprintf_r+0x1ec>)
 800a55a:	bb1b      	cbnz	r3, 800a5a4 <_svfiprintf_r+0x1b0>
 800a55c:	9b03      	ldr	r3, [sp, #12]
 800a55e:	3307      	adds	r3, #7
 800a560:	f023 0307 	bic.w	r3, r3, #7
 800a564:	3308      	adds	r3, #8
 800a566:	9303      	str	r3, [sp, #12]
 800a568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a56a:	4433      	add	r3, r6
 800a56c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a56e:	e76a      	b.n	800a446 <_svfiprintf_r+0x52>
 800a570:	fb0c 3202 	mla	r2, ip, r2, r3
 800a574:	460c      	mov	r4, r1
 800a576:	2001      	movs	r0, #1
 800a578:	e7a8      	b.n	800a4cc <_svfiprintf_r+0xd8>
 800a57a:	2300      	movs	r3, #0
 800a57c:	3401      	adds	r4, #1
 800a57e:	9305      	str	r3, [sp, #20]
 800a580:	4619      	mov	r1, r3
 800a582:	f04f 0c0a 	mov.w	ip, #10
 800a586:	4620      	mov	r0, r4
 800a588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a58c:	3a30      	subs	r2, #48	@ 0x30
 800a58e:	2a09      	cmp	r2, #9
 800a590:	d903      	bls.n	800a59a <_svfiprintf_r+0x1a6>
 800a592:	2b00      	cmp	r3, #0
 800a594:	d0c6      	beq.n	800a524 <_svfiprintf_r+0x130>
 800a596:	9105      	str	r1, [sp, #20]
 800a598:	e7c4      	b.n	800a524 <_svfiprintf_r+0x130>
 800a59a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a59e:	4604      	mov	r4, r0
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e7f0      	b.n	800a586 <_svfiprintf_r+0x192>
 800a5a4:	ab03      	add	r3, sp, #12
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	462a      	mov	r2, r5
 800a5aa:	4b0e      	ldr	r3, [pc, #56]	@ (800a5e4 <_svfiprintf_r+0x1f0>)
 800a5ac:	a904      	add	r1, sp, #16
 800a5ae:	4638      	mov	r0, r7
 800a5b0:	f7fc fefe 	bl	80073b0 <_printf_float>
 800a5b4:	1c42      	adds	r2, r0, #1
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	d1d6      	bne.n	800a568 <_svfiprintf_r+0x174>
 800a5ba:	89ab      	ldrh	r3, [r5, #12]
 800a5bc:	065b      	lsls	r3, r3, #25
 800a5be:	f53f af2d 	bmi.w	800a41c <_svfiprintf_r+0x28>
 800a5c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5c4:	e72c      	b.n	800a420 <_svfiprintf_r+0x2c>
 800a5c6:	ab03      	add	r3, sp, #12
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	462a      	mov	r2, r5
 800a5cc:	4b05      	ldr	r3, [pc, #20]	@ (800a5e4 <_svfiprintf_r+0x1f0>)
 800a5ce:	a904      	add	r1, sp, #16
 800a5d0:	4638      	mov	r0, r7
 800a5d2:	f7fd f985 	bl	80078e0 <_printf_i>
 800a5d6:	e7ed      	b.n	800a5b4 <_svfiprintf_r+0x1c0>
 800a5d8:	0800b2e0 	.word	0x0800b2e0
 800a5dc:	0800b2ea 	.word	0x0800b2ea
 800a5e0:	080073b1 	.word	0x080073b1
 800a5e4:	0800a33f 	.word	0x0800a33f
 800a5e8:	0800b2e6 	.word	0x0800b2e6

0800a5ec <__sflush_r>:
 800a5ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5f4:	0716      	lsls	r6, r2, #28
 800a5f6:	4605      	mov	r5, r0
 800a5f8:	460c      	mov	r4, r1
 800a5fa:	d454      	bmi.n	800a6a6 <__sflush_r+0xba>
 800a5fc:	684b      	ldr	r3, [r1, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	dc02      	bgt.n	800a608 <__sflush_r+0x1c>
 800a602:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a604:	2b00      	cmp	r3, #0
 800a606:	dd48      	ble.n	800a69a <__sflush_r+0xae>
 800a608:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a60a:	2e00      	cmp	r6, #0
 800a60c:	d045      	beq.n	800a69a <__sflush_r+0xae>
 800a60e:	2300      	movs	r3, #0
 800a610:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a614:	682f      	ldr	r7, [r5, #0]
 800a616:	6a21      	ldr	r1, [r4, #32]
 800a618:	602b      	str	r3, [r5, #0]
 800a61a:	d030      	beq.n	800a67e <__sflush_r+0x92>
 800a61c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a61e:	89a3      	ldrh	r3, [r4, #12]
 800a620:	0759      	lsls	r1, r3, #29
 800a622:	d505      	bpl.n	800a630 <__sflush_r+0x44>
 800a624:	6863      	ldr	r3, [r4, #4]
 800a626:	1ad2      	subs	r2, r2, r3
 800a628:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a62a:	b10b      	cbz	r3, 800a630 <__sflush_r+0x44>
 800a62c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a62e:	1ad2      	subs	r2, r2, r3
 800a630:	2300      	movs	r3, #0
 800a632:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a634:	6a21      	ldr	r1, [r4, #32]
 800a636:	4628      	mov	r0, r5
 800a638:	47b0      	blx	r6
 800a63a:	1c43      	adds	r3, r0, #1
 800a63c:	89a3      	ldrh	r3, [r4, #12]
 800a63e:	d106      	bne.n	800a64e <__sflush_r+0x62>
 800a640:	6829      	ldr	r1, [r5, #0]
 800a642:	291d      	cmp	r1, #29
 800a644:	d82b      	bhi.n	800a69e <__sflush_r+0xb2>
 800a646:	4a2a      	ldr	r2, [pc, #168]	@ (800a6f0 <__sflush_r+0x104>)
 800a648:	410a      	asrs	r2, r1
 800a64a:	07d6      	lsls	r6, r2, #31
 800a64c:	d427      	bmi.n	800a69e <__sflush_r+0xb2>
 800a64e:	2200      	movs	r2, #0
 800a650:	6062      	str	r2, [r4, #4]
 800a652:	04d9      	lsls	r1, r3, #19
 800a654:	6922      	ldr	r2, [r4, #16]
 800a656:	6022      	str	r2, [r4, #0]
 800a658:	d504      	bpl.n	800a664 <__sflush_r+0x78>
 800a65a:	1c42      	adds	r2, r0, #1
 800a65c:	d101      	bne.n	800a662 <__sflush_r+0x76>
 800a65e:	682b      	ldr	r3, [r5, #0]
 800a660:	b903      	cbnz	r3, 800a664 <__sflush_r+0x78>
 800a662:	6560      	str	r0, [r4, #84]	@ 0x54
 800a664:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a666:	602f      	str	r7, [r5, #0]
 800a668:	b1b9      	cbz	r1, 800a69a <__sflush_r+0xae>
 800a66a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a66e:	4299      	cmp	r1, r3
 800a670:	d002      	beq.n	800a678 <__sflush_r+0x8c>
 800a672:	4628      	mov	r0, r5
 800a674:	f7fe fd58 	bl	8009128 <_free_r>
 800a678:	2300      	movs	r3, #0
 800a67a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a67c:	e00d      	b.n	800a69a <__sflush_r+0xae>
 800a67e:	2301      	movs	r3, #1
 800a680:	4628      	mov	r0, r5
 800a682:	47b0      	blx	r6
 800a684:	4602      	mov	r2, r0
 800a686:	1c50      	adds	r0, r2, #1
 800a688:	d1c9      	bne.n	800a61e <__sflush_r+0x32>
 800a68a:	682b      	ldr	r3, [r5, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d0c6      	beq.n	800a61e <__sflush_r+0x32>
 800a690:	2b1d      	cmp	r3, #29
 800a692:	d001      	beq.n	800a698 <__sflush_r+0xac>
 800a694:	2b16      	cmp	r3, #22
 800a696:	d11e      	bne.n	800a6d6 <__sflush_r+0xea>
 800a698:	602f      	str	r7, [r5, #0]
 800a69a:	2000      	movs	r0, #0
 800a69c:	e022      	b.n	800a6e4 <__sflush_r+0xf8>
 800a69e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6a2:	b21b      	sxth	r3, r3
 800a6a4:	e01b      	b.n	800a6de <__sflush_r+0xf2>
 800a6a6:	690f      	ldr	r7, [r1, #16]
 800a6a8:	2f00      	cmp	r7, #0
 800a6aa:	d0f6      	beq.n	800a69a <__sflush_r+0xae>
 800a6ac:	0793      	lsls	r3, r2, #30
 800a6ae:	680e      	ldr	r6, [r1, #0]
 800a6b0:	bf08      	it	eq
 800a6b2:	694b      	ldreq	r3, [r1, #20]
 800a6b4:	600f      	str	r7, [r1, #0]
 800a6b6:	bf18      	it	ne
 800a6b8:	2300      	movne	r3, #0
 800a6ba:	eba6 0807 	sub.w	r8, r6, r7
 800a6be:	608b      	str	r3, [r1, #8]
 800a6c0:	f1b8 0f00 	cmp.w	r8, #0
 800a6c4:	dde9      	ble.n	800a69a <__sflush_r+0xae>
 800a6c6:	6a21      	ldr	r1, [r4, #32]
 800a6c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a6ca:	4643      	mov	r3, r8
 800a6cc:	463a      	mov	r2, r7
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	47b0      	blx	r6
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	dc08      	bgt.n	800a6e8 <__sflush_r+0xfc>
 800a6d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6de:	81a3      	strh	r3, [r4, #12]
 800a6e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6e8:	4407      	add	r7, r0
 800a6ea:	eba8 0800 	sub.w	r8, r8, r0
 800a6ee:	e7e7      	b.n	800a6c0 <__sflush_r+0xd4>
 800a6f0:	dfbffffe 	.word	0xdfbffffe

0800a6f4 <_fflush_r>:
 800a6f4:	b538      	push	{r3, r4, r5, lr}
 800a6f6:	690b      	ldr	r3, [r1, #16]
 800a6f8:	4605      	mov	r5, r0
 800a6fa:	460c      	mov	r4, r1
 800a6fc:	b913      	cbnz	r3, 800a704 <_fflush_r+0x10>
 800a6fe:	2500      	movs	r5, #0
 800a700:	4628      	mov	r0, r5
 800a702:	bd38      	pop	{r3, r4, r5, pc}
 800a704:	b118      	cbz	r0, 800a70e <_fflush_r+0x1a>
 800a706:	6a03      	ldr	r3, [r0, #32]
 800a708:	b90b      	cbnz	r3, 800a70e <_fflush_r+0x1a>
 800a70a:	f7fd fca9 	bl	8008060 <__sinit>
 800a70e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d0f3      	beq.n	800a6fe <_fflush_r+0xa>
 800a716:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a718:	07d0      	lsls	r0, r2, #31
 800a71a:	d404      	bmi.n	800a726 <_fflush_r+0x32>
 800a71c:	0599      	lsls	r1, r3, #22
 800a71e:	d402      	bmi.n	800a726 <_fflush_r+0x32>
 800a720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a722:	f7fd fe78 	bl	8008416 <__retarget_lock_acquire_recursive>
 800a726:	4628      	mov	r0, r5
 800a728:	4621      	mov	r1, r4
 800a72a:	f7ff ff5f 	bl	800a5ec <__sflush_r>
 800a72e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a730:	07da      	lsls	r2, r3, #31
 800a732:	4605      	mov	r5, r0
 800a734:	d4e4      	bmi.n	800a700 <_fflush_r+0xc>
 800a736:	89a3      	ldrh	r3, [r4, #12]
 800a738:	059b      	lsls	r3, r3, #22
 800a73a:	d4e1      	bmi.n	800a700 <_fflush_r+0xc>
 800a73c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a73e:	f7fd fe6b 	bl	8008418 <__retarget_lock_release_recursive>
 800a742:	e7dd      	b.n	800a700 <_fflush_r+0xc>

0800a744 <fiprintf>:
 800a744:	b40e      	push	{r1, r2, r3}
 800a746:	b503      	push	{r0, r1, lr}
 800a748:	4601      	mov	r1, r0
 800a74a:	ab03      	add	r3, sp, #12
 800a74c:	4805      	ldr	r0, [pc, #20]	@ (800a764 <fiprintf+0x20>)
 800a74e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a752:	6800      	ldr	r0, [r0, #0]
 800a754:	9301      	str	r3, [sp, #4]
 800a756:	f000 f8a3 	bl	800a8a0 <_vfiprintf_r>
 800a75a:	b002      	add	sp, #8
 800a75c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a760:	b003      	add	sp, #12
 800a762:	4770      	bx	lr
 800a764:	20000184 	.word	0x20000184

0800a768 <memmove>:
 800a768:	4288      	cmp	r0, r1
 800a76a:	b510      	push	{r4, lr}
 800a76c:	eb01 0402 	add.w	r4, r1, r2
 800a770:	d902      	bls.n	800a778 <memmove+0x10>
 800a772:	4284      	cmp	r4, r0
 800a774:	4623      	mov	r3, r4
 800a776:	d807      	bhi.n	800a788 <memmove+0x20>
 800a778:	1e43      	subs	r3, r0, #1
 800a77a:	42a1      	cmp	r1, r4
 800a77c:	d008      	beq.n	800a790 <memmove+0x28>
 800a77e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a782:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a786:	e7f8      	b.n	800a77a <memmove+0x12>
 800a788:	4402      	add	r2, r0
 800a78a:	4601      	mov	r1, r0
 800a78c:	428a      	cmp	r2, r1
 800a78e:	d100      	bne.n	800a792 <memmove+0x2a>
 800a790:	bd10      	pop	{r4, pc}
 800a792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a79a:	e7f7      	b.n	800a78c <memmove+0x24>

0800a79c <_sbrk_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	4d06      	ldr	r5, [pc, #24]	@ (800a7b8 <_sbrk_r+0x1c>)
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	4608      	mov	r0, r1
 800a7a6:	602b      	str	r3, [r5, #0]
 800a7a8:	f7f7 febc 	bl	8002524 <_sbrk>
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	d102      	bne.n	800a7b6 <_sbrk_r+0x1a>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	b103      	cbz	r3, 800a7b6 <_sbrk_r+0x1a>
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	20005098 	.word	0x20005098

0800a7bc <abort>:
 800a7bc:	b508      	push	{r3, lr}
 800a7be:	2006      	movs	r0, #6
 800a7c0:	f000 fa42 	bl	800ac48 <raise>
 800a7c4:	2001      	movs	r0, #1
 800a7c6:	f7f7 fe35 	bl	8002434 <_exit>

0800a7ca <_calloc_r>:
 800a7ca:	b570      	push	{r4, r5, r6, lr}
 800a7cc:	fba1 5402 	umull	r5, r4, r1, r2
 800a7d0:	b93c      	cbnz	r4, 800a7e2 <_calloc_r+0x18>
 800a7d2:	4629      	mov	r1, r5
 800a7d4:	f7ff f856 	bl	8009884 <_malloc_r>
 800a7d8:	4606      	mov	r6, r0
 800a7da:	b928      	cbnz	r0, 800a7e8 <_calloc_r+0x1e>
 800a7dc:	2600      	movs	r6, #0
 800a7de:	4630      	mov	r0, r6
 800a7e0:	bd70      	pop	{r4, r5, r6, pc}
 800a7e2:	220c      	movs	r2, #12
 800a7e4:	6002      	str	r2, [r0, #0]
 800a7e6:	e7f9      	b.n	800a7dc <_calloc_r+0x12>
 800a7e8:	462a      	mov	r2, r5
 800a7ea:	4621      	mov	r1, r4
 800a7ec:	f7fd fcd1 	bl	8008192 <memset>
 800a7f0:	e7f5      	b.n	800a7de <_calloc_r+0x14>

0800a7f2 <_realloc_r>:
 800a7f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f6:	4680      	mov	r8, r0
 800a7f8:	4615      	mov	r5, r2
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	b921      	cbnz	r1, 800a808 <_realloc_r+0x16>
 800a7fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a802:	4611      	mov	r1, r2
 800a804:	f7ff b83e 	b.w	8009884 <_malloc_r>
 800a808:	b92a      	cbnz	r2, 800a816 <_realloc_r+0x24>
 800a80a:	f7fe fc8d 	bl	8009128 <_free_r>
 800a80e:	2400      	movs	r4, #0
 800a810:	4620      	mov	r0, r4
 800a812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a816:	f000 fa33 	bl	800ac80 <_malloc_usable_size_r>
 800a81a:	4285      	cmp	r5, r0
 800a81c:	4606      	mov	r6, r0
 800a81e:	d802      	bhi.n	800a826 <_realloc_r+0x34>
 800a820:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a824:	d8f4      	bhi.n	800a810 <_realloc_r+0x1e>
 800a826:	4629      	mov	r1, r5
 800a828:	4640      	mov	r0, r8
 800a82a:	f7ff f82b 	bl	8009884 <_malloc_r>
 800a82e:	4607      	mov	r7, r0
 800a830:	2800      	cmp	r0, #0
 800a832:	d0ec      	beq.n	800a80e <_realloc_r+0x1c>
 800a834:	42b5      	cmp	r5, r6
 800a836:	462a      	mov	r2, r5
 800a838:	4621      	mov	r1, r4
 800a83a:	bf28      	it	cs
 800a83c:	4632      	movcs	r2, r6
 800a83e:	f7fd fdec 	bl	800841a <memcpy>
 800a842:	4621      	mov	r1, r4
 800a844:	4640      	mov	r0, r8
 800a846:	f7fe fc6f 	bl	8009128 <_free_r>
 800a84a:	463c      	mov	r4, r7
 800a84c:	e7e0      	b.n	800a810 <_realloc_r+0x1e>

0800a84e <__sfputc_r>:
 800a84e:	6893      	ldr	r3, [r2, #8]
 800a850:	3b01      	subs	r3, #1
 800a852:	2b00      	cmp	r3, #0
 800a854:	b410      	push	{r4}
 800a856:	6093      	str	r3, [r2, #8]
 800a858:	da08      	bge.n	800a86c <__sfputc_r+0x1e>
 800a85a:	6994      	ldr	r4, [r2, #24]
 800a85c:	42a3      	cmp	r3, r4
 800a85e:	db01      	blt.n	800a864 <__sfputc_r+0x16>
 800a860:	290a      	cmp	r1, #10
 800a862:	d103      	bne.n	800a86c <__sfputc_r+0x1e>
 800a864:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a868:	f000 b932 	b.w	800aad0 <__swbuf_r>
 800a86c:	6813      	ldr	r3, [r2, #0]
 800a86e:	1c58      	adds	r0, r3, #1
 800a870:	6010      	str	r0, [r2, #0]
 800a872:	7019      	strb	r1, [r3, #0]
 800a874:	4608      	mov	r0, r1
 800a876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <__sfputs_r>:
 800a87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87e:	4606      	mov	r6, r0
 800a880:	460f      	mov	r7, r1
 800a882:	4614      	mov	r4, r2
 800a884:	18d5      	adds	r5, r2, r3
 800a886:	42ac      	cmp	r4, r5
 800a888:	d101      	bne.n	800a88e <__sfputs_r+0x12>
 800a88a:	2000      	movs	r0, #0
 800a88c:	e007      	b.n	800a89e <__sfputs_r+0x22>
 800a88e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a892:	463a      	mov	r2, r7
 800a894:	4630      	mov	r0, r6
 800a896:	f7ff ffda 	bl	800a84e <__sfputc_r>
 800a89a:	1c43      	adds	r3, r0, #1
 800a89c:	d1f3      	bne.n	800a886 <__sfputs_r+0xa>
 800a89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a8a0 <_vfiprintf_r>:
 800a8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a4:	460d      	mov	r5, r1
 800a8a6:	b09d      	sub	sp, #116	@ 0x74
 800a8a8:	4614      	mov	r4, r2
 800a8aa:	4698      	mov	r8, r3
 800a8ac:	4606      	mov	r6, r0
 800a8ae:	b118      	cbz	r0, 800a8b8 <_vfiprintf_r+0x18>
 800a8b0:	6a03      	ldr	r3, [r0, #32]
 800a8b2:	b90b      	cbnz	r3, 800a8b8 <_vfiprintf_r+0x18>
 800a8b4:	f7fd fbd4 	bl	8008060 <__sinit>
 800a8b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8ba:	07d9      	lsls	r1, r3, #31
 800a8bc:	d405      	bmi.n	800a8ca <_vfiprintf_r+0x2a>
 800a8be:	89ab      	ldrh	r3, [r5, #12]
 800a8c0:	059a      	lsls	r2, r3, #22
 800a8c2:	d402      	bmi.n	800a8ca <_vfiprintf_r+0x2a>
 800a8c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8c6:	f7fd fda6 	bl	8008416 <__retarget_lock_acquire_recursive>
 800a8ca:	89ab      	ldrh	r3, [r5, #12]
 800a8cc:	071b      	lsls	r3, r3, #28
 800a8ce:	d501      	bpl.n	800a8d4 <_vfiprintf_r+0x34>
 800a8d0:	692b      	ldr	r3, [r5, #16]
 800a8d2:	b99b      	cbnz	r3, 800a8fc <_vfiprintf_r+0x5c>
 800a8d4:	4629      	mov	r1, r5
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	f000 f938 	bl	800ab4c <__swsetup_r>
 800a8dc:	b170      	cbz	r0, 800a8fc <_vfiprintf_r+0x5c>
 800a8de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8e0:	07dc      	lsls	r4, r3, #31
 800a8e2:	d504      	bpl.n	800a8ee <_vfiprintf_r+0x4e>
 800a8e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8e8:	b01d      	add	sp, #116	@ 0x74
 800a8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ee:	89ab      	ldrh	r3, [r5, #12]
 800a8f0:	0598      	lsls	r0, r3, #22
 800a8f2:	d4f7      	bmi.n	800a8e4 <_vfiprintf_r+0x44>
 800a8f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8f6:	f7fd fd8f 	bl	8008418 <__retarget_lock_release_recursive>
 800a8fa:	e7f3      	b.n	800a8e4 <_vfiprintf_r+0x44>
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800a900:	2320      	movs	r3, #32
 800a902:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a906:	f8cd 800c 	str.w	r8, [sp, #12]
 800a90a:	2330      	movs	r3, #48	@ 0x30
 800a90c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aabc <_vfiprintf_r+0x21c>
 800a910:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a914:	f04f 0901 	mov.w	r9, #1
 800a918:	4623      	mov	r3, r4
 800a91a:	469a      	mov	sl, r3
 800a91c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a920:	b10a      	cbz	r2, 800a926 <_vfiprintf_r+0x86>
 800a922:	2a25      	cmp	r2, #37	@ 0x25
 800a924:	d1f9      	bne.n	800a91a <_vfiprintf_r+0x7a>
 800a926:	ebba 0b04 	subs.w	fp, sl, r4
 800a92a:	d00b      	beq.n	800a944 <_vfiprintf_r+0xa4>
 800a92c:	465b      	mov	r3, fp
 800a92e:	4622      	mov	r2, r4
 800a930:	4629      	mov	r1, r5
 800a932:	4630      	mov	r0, r6
 800a934:	f7ff ffa2 	bl	800a87c <__sfputs_r>
 800a938:	3001      	adds	r0, #1
 800a93a:	f000 80a7 	beq.w	800aa8c <_vfiprintf_r+0x1ec>
 800a93e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a940:	445a      	add	r2, fp
 800a942:	9209      	str	r2, [sp, #36]	@ 0x24
 800a944:	f89a 3000 	ldrb.w	r3, [sl]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f000 809f 	beq.w	800aa8c <_vfiprintf_r+0x1ec>
 800a94e:	2300      	movs	r3, #0
 800a950:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a954:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a958:	f10a 0a01 	add.w	sl, sl, #1
 800a95c:	9304      	str	r3, [sp, #16]
 800a95e:	9307      	str	r3, [sp, #28]
 800a960:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a964:	931a      	str	r3, [sp, #104]	@ 0x68
 800a966:	4654      	mov	r4, sl
 800a968:	2205      	movs	r2, #5
 800a96a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a96e:	4853      	ldr	r0, [pc, #332]	@ (800aabc <_vfiprintf_r+0x21c>)
 800a970:	f7f5 fc3e 	bl	80001f0 <memchr>
 800a974:	9a04      	ldr	r2, [sp, #16]
 800a976:	b9d8      	cbnz	r0, 800a9b0 <_vfiprintf_r+0x110>
 800a978:	06d1      	lsls	r1, r2, #27
 800a97a:	bf44      	itt	mi
 800a97c:	2320      	movmi	r3, #32
 800a97e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a982:	0713      	lsls	r3, r2, #28
 800a984:	bf44      	itt	mi
 800a986:	232b      	movmi	r3, #43	@ 0x2b
 800a988:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a98c:	f89a 3000 	ldrb.w	r3, [sl]
 800a990:	2b2a      	cmp	r3, #42	@ 0x2a
 800a992:	d015      	beq.n	800a9c0 <_vfiprintf_r+0x120>
 800a994:	9a07      	ldr	r2, [sp, #28]
 800a996:	4654      	mov	r4, sl
 800a998:	2000      	movs	r0, #0
 800a99a:	f04f 0c0a 	mov.w	ip, #10
 800a99e:	4621      	mov	r1, r4
 800a9a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9a4:	3b30      	subs	r3, #48	@ 0x30
 800a9a6:	2b09      	cmp	r3, #9
 800a9a8:	d94b      	bls.n	800aa42 <_vfiprintf_r+0x1a2>
 800a9aa:	b1b0      	cbz	r0, 800a9da <_vfiprintf_r+0x13a>
 800a9ac:	9207      	str	r2, [sp, #28]
 800a9ae:	e014      	b.n	800a9da <_vfiprintf_r+0x13a>
 800a9b0:	eba0 0308 	sub.w	r3, r0, r8
 800a9b4:	fa09 f303 	lsl.w	r3, r9, r3
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	9304      	str	r3, [sp, #16]
 800a9bc:	46a2      	mov	sl, r4
 800a9be:	e7d2      	b.n	800a966 <_vfiprintf_r+0xc6>
 800a9c0:	9b03      	ldr	r3, [sp, #12]
 800a9c2:	1d19      	adds	r1, r3, #4
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	9103      	str	r1, [sp, #12]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	bfbb      	ittet	lt
 800a9cc:	425b      	neglt	r3, r3
 800a9ce:	f042 0202 	orrlt.w	r2, r2, #2
 800a9d2:	9307      	strge	r3, [sp, #28]
 800a9d4:	9307      	strlt	r3, [sp, #28]
 800a9d6:	bfb8      	it	lt
 800a9d8:	9204      	strlt	r2, [sp, #16]
 800a9da:	7823      	ldrb	r3, [r4, #0]
 800a9dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9de:	d10a      	bne.n	800a9f6 <_vfiprintf_r+0x156>
 800a9e0:	7863      	ldrb	r3, [r4, #1]
 800a9e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9e4:	d132      	bne.n	800aa4c <_vfiprintf_r+0x1ac>
 800a9e6:	9b03      	ldr	r3, [sp, #12]
 800a9e8:	1d1a      	adds	r2, r3, #4
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	9203      	str	r2, [sp, #12]
 800a9ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a9f2:	3402      	adds	r4, #2
 800a9f4:	9305      	str	r3, [sp, #20]
 800a9f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aacc <_vfiprintf_r+0x22c>
 800a9fa:	7821      	ldrb	r1, [r4, #0]
 800a9fc:	2203      	movs	r2, #3
 800a9fe:	4650      	mov	r0, sl
 800aa00:	f7f5 fbf6 	bl	80001f0 <memchr>
 800aa04:	b138      	cbz	r0, 800aa16 <_vfiprintf_r+0x176>
 800aa06:	9b04      	ldr	r3, [sp, #16]
 800aa08:	eba0 000a 	sub.w	r0, r0, sl
 800aa0c:	2240      	movs	r2, #64	@ 0x40
 800aa0e:	4082      	lsls	r2, r0
 800aa10:	4313      	orrs	r3, r2
 800aa12:	3401      	adds	r4, #1
 800aa14:	9304      	str	r3, [sp, #16]
 800aa16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa1a:	4829      	ldr	r0, [pc, #164]	@ (800aac0 <_vfiprintf_r+0x220>)
 800aa1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa20:	2206      	movs	r2, #6
 800aa22:	f7f5 fbe5 	bl	80001f0 <memchr>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	d03f      	beq.n	800aaaa <_vfiprintf_r+0x20a>
 800aa2a:	4b26      	ldr	r3, [pc, #152]	@ (800aac4 <_vfiprintf_r+0x224>)
 800aa2c:	bb1b      	cbnz	r3, 800aa76 <_vfiprintf_r+0x1d6>
 800aa2e:	9b03      	ldr	r3, [sp, #12]
 800aa30:	3307      	adds	r3, #7
 800aa32:	f023 0307 	bic.w	r3, r3, #7
 800aa36:	3308      	adds	r3, #8
 800aa38:	9303      	str	r3, [sp, #12]
 800aa3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa3c:	443b      	add	r3, r7
 800aa3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa40:	e76a      	b.n	800a918 <_vfiprintf_r+0x78>
 800aa42:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa46:	460c      	mov	r4, r1
 800aa48:	2001      	movs	r0, #1
 800aa4a:	e7a8      	b.n	800a99e <_vfiprintf_r+0xfe>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	3401      	adds	r4, #1
 800aa50:	9305      	str	r3, [sp, #20]
 800aa52:	4619      	mov	r1, r3
 800aa54:	f04f 0c0a 	mov.w	ip, #10
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa5e:	3a30      	subs	r2, #48	@ 0x30
 800aa60:	2a09      	cmp	r2, #9
 800aa62:	d903      	bls.n	800aa6c <_vfiprintf_r+0x1cc>
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d0c6      	beq.n	800a9f6 <_vfiprintf_r+0x156>
 800aa68:	9105      	str	r1, [sp, #20]
 800aa6a:	e7c4      	b.n	800a9f6 <_vfiprintf_r+0x156>
 800aa6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa70:	4604      	mov	r4, r0
 800aa72:	2301      	movs	r3, #1
 800aa74:	e7f0      	b.n	800aa58 <_vfiprintf_r+0x1b8>
 800aa76:	ab03      	add	r3, sp, #12
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	462a      	mov	r2, r5
 800aa7c:	4b12      	ldr	r3, [pc, #72]	@ (800aac8 <_vfiprintf_r+0x228>)
 800aa7e:	a904      	add	r1, sp, #16
 800aa80:	4630      	mov	r0, r6
 800aa82:	f7fc fc95 	bl	80073b0 <_printf_float>
 800aa86:	4607      	mov	r7, r0
 800aa88:	1c78      	adds	r0, r7, #1
 800aa8a:	d1d6      	bne.n	800aa3a <_vfiprintf_r+0x19a>
 800aa8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa8e:	07d9      	lsls	r1, r3, #31
 800aa90:	d405      	bmi.n	800aa9e <_vfiprintf_r+0x1fe>
 800aa92:	89ab      	ldrh	r3, [r5, #12]
 800aa94:	059a      	lsls	r2, r3, #22
 800aa96:	d402      	bmi.n	800aa9e <_vfiprintf_r+0x1fe>
 800aa98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa9a:	f7fd fcbd 	bl	8008418 <__retarget_lock_release_recursive>
 800aa9e:	89ab      	ldrh	r3, [r5, #12]
 800aaa0:	065b      	lsls	r3, r3, #25
 800aaa2:	f53f af1f 	bmi.w	800a8e4 <_vfiprintf_r+0x44>
 800aaa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aaa8:	e71e      	b.n	800a8e8 <_vfiprintf_r+0x48>
 800aaaa:	ab03      	add	r3, sp, #12
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	462a      	mov	r2, r5
 800aab0:	4b05      	ldr	r3, [pc, #20]	@ (800aac8 <_vfiprintf_r+0x228>)
 800aab2:	a904      	add	r1, sp, #16
 800aab4:	4630      	mov	r0, r6
 800aab6:	f7fc ff13 	bl	80078e0 <_printf_i>
 800aaba:	e7e4      	b.n	800aa86 <_vfiprintf_r+0x1e6>
 800aabc:	0800b2e0 	.word	0x0800b2e0
 800aac0:	0800b2ea 	.word	0x0800b2ea
 800aac4:	080073b1 	.word	0x080073b1
 800aac8:	0800a87d 	.word	0x0800a87d
 800aacc:	0800b2e6 	.word	0x0800b2e6

0800aad0 <__swbuf_r>:
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	460e      	mov	r6, r1
 800aad4:	4614      	mov	r4, r2
 800aad6:	4605      	mov	r5, r0
 800aad8:	b118      	cbz	r0, 800aae2 <__swbuf_r+0x12>
 800aada:	6a03      	ldr	r3, [r0, #32]
 800aadc:	b90b      	cbnz	r3, 800aae2 <__swbuf_r+0x12>
 800aade:	f7fd fabf 	bl	8008060 <__sinit>
 800aae2:	69a3      	ldr	r3, [r4, #24]
 800aae4:	60a3      	str	r3, [r4, #8]
 800aae6:	89a3      	ldrh	r3, [r4, #12]
 800aae8:	071a      	lsls	r2, r3, #28
 800aaea:	d501      	bpl.n	800aaf0 <__swbuf_r+0x20>
 800aaec:	6923      	ldr	r3, [r4, #16]
 800aaee:	b943      	cbnz	r3, 800ab02 <__swbuf_r+0x32>
 800aaf0:	4621      	mov	r1, r4
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f000 f82a 	bl	800ab4c <__swsetup_r>
 800aaf8:	b118      	cbz	r0, 800ab02 <__swbuf_r+0x32>
 800aafa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800aafe:	4638      	mov	r0, r7
 800ab00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab02:	6823      	ldr	r3, [r4, #0]
 800ab04:	6922      	ldr	r2, [r4, #16]
 800ab06:	1a98      	subs	r0, r3, r2
 800ab08:	6963      	ldr	r3, [r4, #20]
 800ab0a:	b2f6      	uxtb	r6, r6
 800ab0c:	4283      	cmp	r3, r0
 800ab0e:	4637      	mov	r7, r6
 800ab10:	dc05      	bgt.n	800ab1e <__swbuf_r+0x4e>
 800ab12:	4621      	mov	r1, r4
 800ab14:	4628      	mov	r0, r5
 800ab16:	f7ff fded 	bl	800a6f4 <_fflush_r>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d1ed      	bne.n	800aafa <__swbuf_r+0x2a>
 800ab1e:	68a3      	ldr	r3, [r4, #8]
 800ab20:	3b01      	subs	r3, #1
 800ab22:	60a3      	str	r3, [r4, #8]
 800ab24:	6823      	ldr	r3, [r4, #0]
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	6022      	str	r2, [r4, #0]
 800ab2a:	701e      	strb	r6, [r3, #0]
 800ab2c:	6962      	ldr	r2, [r4, #20]
 800ab2e:	1c43      	adds	r3, r0, #1
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d004      	beq.n	800ab3e <__swbuf_r+0x6e>
 800ab34:	89a3      	ldrh	r3, [r4, #12]
 800ab36:	07db      	lsls	r3, r3, #31
 800ab38:	d5e1      	bpl.n	800aafe <__swbuf_r+0x2e>
 800ab3a:	2e0a      	cmp	r6, #10
 800ab3c:	d1df      	bne.n	800aafe <__swbuf_r+0x2e>
 800ab3e:	4621      	mov	r1, r4
 800ab40:	4628      	mov	r0, r5
 800ab42:	f7ff fdd7 	bl	800a6f4 <_fflush_r>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d0d9      	beq.n	800aafe <__swbuf_r+0x2e>
 800ab4a:	e7d6      	b.n	800aafa <__swbuf_r+0x2a>

0800ab4c <__swsetup_r>:
 800ab4c:	b538      	push	{r3, r4, r5, lr}
 800ab4e:	4b29      	ldr	r3, [pc, #164]	@ (800abf4 <__swsetup_r+0xa8>)
 800ab50:	4605      	mov	r5, r0
 800ab52:	6818      	ldr	r0, [r3, #0]
 800ab54:	460c      	mov	r4, r1
 800ab56:	b118      	cbz	r0, 800ab60 <__swsetup_r+0x14>
 800ab58:	6a03      	ldr	r3, [r0, #32]
 800ab5a:	b90b      	cbnz	r3, 800ab60 <__swsetup_r+0x14>
 800ab5c:	f7fd fa80 	bl	8008060 <__sinit>
 800ab60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab64:	0719      	lsls	r1, r3, #28
 800ab66:	d422      	bmi.n	800abae <__swsetup_r+0x62>
 800ab68:	06da      	lsls	r2, r3, #27
 800ab6a:	d407      	bmi.n	800ab7c <__swsetup_r+0x30>
 800ab6c:	2209      	movs	r2, #9
 800ab6e:	602a      	str	r2, [r5, #0]
 800ab70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab74:	81a3      	strh	r3, [r4, #12]
 800ab76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab7a:	e033      	b.n	800abe4 <__swsetup_r+0x98>
 800ab7c:	0758      	lsls	r0, r3, #29
 800ab7e:	d512      	bpl.n	800aba6 <__swsetup_r+0x5a>
 800ab80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab82:	b141      	cbz	r1, 800ab96 <__swsetup_r+0x4a>
 800ab84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab88:	4299      	cmp	r1, r3
 800ab8a:	d002      	beq.n	800ab92 <__swsetup_r+0x46>
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	f7fe facb 	bl	8009128 <_free_r>
 800ab92:	2300      	movs	r3, #0
 800ab94:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab96:	89a3      	ldrh	r3, [r4, #12]
 800ab98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ab9c:	81a3      	strh	r3, [r4, #12]
 800ab9e:	2300      	movs	r3, #0
 800aba0:	6063      	str	r3, [r4, #4]
 800aba2:	6923      	ldr	r3, [r4, #16]
 800aba4:	6023      	str	r3, [r4, #0]
 800aba6:	89a3      	ldrh	r3, [r4, #12]
 800aba8:	f043 0308 	orr.w	r3, r3, #8
 800abac:	81a3      	strh	r3, [r4, #12]
 800abae:	6923      	ldr	r3, [r4, #16]
 800abb0:	b94b      	cbnz	r3, 800abc6 <__swsetup_r+0x7a>
 800abb2:	89a3      	ldrh	r3, [r4, #12]
 800abb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800abb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abbc:	d003      	beq.n	800abc6 <__swsetup_r+0x7a>
 800abbe:	4621      	mov	r1, r4
 800abc0:	4628      	mov	r0, r5
 800abc2:	f000 f88b 	bl	800acdc <__smakebuf_r>
 800abc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abca:	f013 0201 	ands.w	r2, r3, #1
 800abce:	d00a      	beq.n	800abe6 <__swsetup_r+0x9a>
 800abd0:	2200      	movs	r2, #0
 800abd2:	60a2      	str	r2, [r4, #8]
 800abd4:	6962      	ldr	r2, [r4, #20]
 800abd6:	4252      	negs	r2, r2
 800abd8:	61a2      	str	r2, [r4, #24]
 800abda:	6922      	ldr	r2, [r4, #16]
 800abdc:	b942      	cbnz	r2, 800abf0 <__swsetup_r+0xa4>
 800abde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800abe2:	d1c5      	bne.n	800ab70 <__swsetup_r+0x24>
 800abe4:	bd38      	pop	{r3, r4, r5, pc}
 800abe6:	0799      	lsls	r1, r3, #30
 800abe8:	bf58      	it	pl
 800abea:	6962      	ldrpl	r2, [r4, #20]
 800abec:	60a2      	str	r2, [r4, #8]
 800abee:	e7f4      	b.n	800abda <__swsetup_r+0x8e>
 800abf0:	2000      	movs	r0, #0
 800abf2:	e7f7      	b.n	800abe4 <__swsetup_r+0x98>
 800abf4:	20000184 	.word	0x20000184

0800abf8 <_raise_r>:
 800abf8:	291f      	cmp	r1, #31
 800abfa:	b538      	push	{r3, r4, r5, lr}
 800abfc:	4605      	mov	r5, r0
 800abfe:	460c      	mov	r4, r1
 800ac00:	d904      	bls.n	800ac0c <_raise_r+0x14>
 800ac02:	2316      	movs	r3, #22
 800ac04:	6003      	str	r3, [r0, #0]
 800ac06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac0a:	bd38      	pop	{r3, r4, r5, pc}
 800ac0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ac0e:	b112      	cbz	r2, 800ac16 <_raise_r+0x1e>
 800ac10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac14:	b94b      	cbnz	r3, 800ac2a <_raise_r+0x32>
 800ac16:	4628      	mov	r0, r5
 800ac18:	f000 f830 	bl	800ac7c <_getpid_r>
 800ac1c:	4622      	mov	r2, r4
 800ac1e:	4601      	mov	r1, r0
 800ac20:	4628      	mov	r0, r5
 800ac22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac26:	f000 b817 	b.w	800ac58 <_kill_r>
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d00a      	beq.n	800ac44 <_raise_r+0x4c>
 800ac2e:	1c59      	adds	r1, r3, #1
 800ac30:	d103      	bne.n	800ac3a <_raise_r+0x42>
 800ac32:	2316      	movs	r3, #22
 800ac34:	6003      	str	r3, [r0, #0]
 800ac36:	2001      	movs	r0, #1
 800ac38:	e7e7      	b.n	800ac0a <_raise_r+0x12>
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ac40:	4620      	mov	r0, r4
 800ac42:	4798      	blx	r3
 800ac44:	2000      	movs	r0, #0
 800ac46:	e7e0      	b.n	800ac0a <_raise_r+0x12>

0800ac48 <raise>:
 800ac48:	4b02      	ldr	r3, [pc, #8]	@ (800ac54 <raise+0xc>)
 800ac4a:	4601      	mov	r1, r0
 800ac4c:	6818      	ldr	r0, [r3, #0]
 800ac4e:	f7ff bfd3 	b.w	800abf8 <_raise_r>
 800ac52:	bf00      	nop
 800ac54:	20000184 	.word	0x20000184

0800ac58 <_kill_r>:
 800ac58:	b538      	push	{r3, r4, r5, lr}
 800ac5a:	4d07      	ldr	r5, [pc, #28]	@ (800ac78 <_kill_r+0x20>)
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	4604      	mov	r4, r0
 800ac60:	4608      	mov	r0, r1
 800ac62:	4611      	mov	r1, r2
 800ac64:	602b      	str	r3, [r5, #0]
 800ac66:	f7f7 fbd5 	bl	8002414 <_kill>
 800ac6a:	1c43      	adds	r3, r0, #1
 800ac6c:	d102      	bne.n	800ac74 <_kill_r+0x1c>
 800ac6e:	682b      	ldr	r3, [r5, #0]
 800ac70:	b103      	cbz	r3, 800ac74 <_kill_r+0x1c>
 800ac72:	6023      	str	r3, [r4, #0]
 800ac74:	bd38      	pop	{r3, r4, r5, pc}
 800ac76:	bf00      	nop
 800ac78:	20005098 	.word	0x20005098

0800ac7c <_getpid_r>:
 800ac7c:	f7f7 bbc2 	b.w	8002404 <_getpid>

0800ac80 <_malloc_usable_size_r>:
 800ac80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac84:	1f18      	subs	r0, r3, #4
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	bfbc      	itt	lt
 800ac8a:	580b      	ldrlt	r3, [r1, r0]
 800ac8c:	18c0      	addlt	r0, r0, r3
 800ac8e:	4770      	bx	lr

0800ac90 <__swhatbuf_r>:
 800ac90:	b570      	push	{r4, r5, r6, lr}
 800ac92:	460c      	mov	r4, r1
 800ac94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac98:	2900      	cmp	r1, #0
 800ac9a:	b096      	sub	sp, #88	@ 0x58
 800ac9c:	4615      	mov	r5, r2
 800ac9e:	461e      	mov	r6, r3
 800aca0:	da0d      	bge.n	800acbe <__swhatbuf_r+0x2e>
 800aca2:	89a3      	ldrh	r3, [r4, #12]
 800aca4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aca8:	f04f 0100 	mov.w	r1, #0
 800acac:	bf14      	ite	ne
 800acae:	2340      	movne	r3, #64	@ 0x40
 800acb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800acb4:	2000      	movs	r0, #0
 800acb6:	6031      	str	r1, [r6, #0]
 800acb8:	602b      	str	r3, [r5, #0]
 800acba:	b016      	add	sp, #88	@ 0x58
 800acbc:	bd70      	pop	{r4, r5, r6, pc}
 800acbe:	466a      	mov	r2, sp
 800acc0:	f000 f848 	bl	800ad54 <_fstat_r>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	dbec      	blt.n	800aca2 <__swhatbuf_r+0x12>
 800acc8:	9901      	ldr	r1, [sp, #4]
 800acca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800acce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800acd2:	4259      	negs	r1, r3
 800acd4:	4159      	adcs	r1, r3
 800acd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800acda:	e7eb      	b.n	800acb4 <__swhatbuf_r+0x24>

0800acdc <__smakebuf_r>:
 800acdc:	898b      	ldrh	r3, [r1, #12]
 800acde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ace0:	079d      	lsls	r5, r3, #30
 800ace2:	4606      	mov	r6, r0
 800ace4:	460c      	mov	r4, r1
 800ace6:	d507      	bpl.n	800acf8 <__smakebuf_r+0x1c>
 800ace8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800acec:	6023      	str	r3, [r4, #0]
 800acee:	6123      	str	r3, [r4, #16]
 800acf0:	2301      	movs	r3, #1
 800acf2:	6163      	str	r3, [r4, #20]
 800acf4:	b003      	add	sp, #12
 800acf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acf8:	ab01      	add	r3, sp, #4
 800acfa:	466a      	mov	r2, sp
 800acfc:	f7ff ffc8 	bl	800ac90 <__swhatbuf_r>
 800ad00:	9f00      	ldr	r7, [sp, #0]
 800ad02:	4605      	mov	r5, r0
 800ad04:	4639      	mov	r1, r7
 800ad06:	4630      	mov	r0, r6
 800ad08:	f7fe fdbc 	bl	8009884 <_malloc_r>
 800ad0c:	b948      	cbnz	r0, 800ad22 <__smakebuf_r+0x46>
 800ad0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad12:	059a      	lsls	r2, r3, #22
 800ad14:	d4ee      	bmi.n	800acf4 <__smakebuf_r+0x18>
 800ad16:	f023 0303 	bic.w	r3, r3, #3
 800ad1a:	f043 0302 	orr.w	r3, r3, #2
 800ad1e:	81a3      	strh	r3, [r4, #12]
 800ad20:	e7e2      	b.n	800ace8 <__smakebuf_r+0xc>
 800ad22:	89a3      	ldrh	r3, [r4, #12]
 800ad24:	6020      	str	r0, [r4, #0]
 800ad26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad2a:	81a3      	strh	r3, [r4, #12]
 800ad2c:	9b01      	ldr	r3, [sp, #4]
 800ad2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ad32:	b15b      	cbz	r3, 800ad4c <__smakebuf_r+0x70>
 800ad34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad38:	4630      	mov	r0, r6
 800ad3a:	f000 f81d 	bl	800ad78 <_isatty_r>
 800ad3e:	b128      	cbz	r0, 800ad4c <__smakebuf_r+0x70>
 800ad40:	89a3      	ldrh	r3, [r4, #12]
 800ad42:	f023 0303 	bic.w	r3, r3, #3
 800ad46:	f043 0301 	orr.w	r3, r3, #1
 800ad4a:	81a3      	strh	r3, [r4, #12]
 800ad4c:	89a3      	ldrh	r3, [r4, #12]
 800ad4e:	431d      	orrs	r5, r3
 800ad50:	81a5      	strh	r5, [r4, #12]
 800ad52:	e7cf      	b.n	800acf4 <__smakebuf_r+0x18>

0800ad54 <_fstat_r>:
 800ad54:	b538      	push	{r3, r4, r5, lr}
 800ad56:	4d07      	ldr	r5, [pc, #28]	@ (800ad74 <_fstat_r+0x20>)
 800ad58:	2300      	movs	r3, #0
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	4608      	mov	r0, r1
 800ad5e:	4611      	mov	r1, r2
 800ad60:	602b      	str	r3, [r5, #0]
 800ad62:	f7f7 fbb7 	bl	80024d4 <_fstat>
 800ad66:	1c43      	adds	r3, r0, #1
 800ad68:	d102      	bne.n	800ad70 <_fstat_r+0x1c>
 800ad6a:	682b      	ldr	r3, [r5, #0]
 800ad6c:	b103      	cbz	r3, 800ad70 <_fstat_r+0x1c>
 800ad6e:	6023      	str	r3, [r4, #0]
 800ad70:	bd38      	pop	{r3, r4, r5, pc}
 800ad72:	bf00      	nop
 800ad74:	20005098 	.word	0x20005098

0800ad78 <_isatty_r>:
 800ad78:	b538      	push	{r3, r4, r5, lr}
 800ad7a:	4d06      	ldr	r5, [pc, #24]	@ (800ad94 <_isatty_r+0x1c>)
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	4604      	mov	r4, r0
 800ad80:	4608      	mov	r0, r1
 800ad82:	602b      	str	r3, [r5, #0]
 800ad84:	f7f7 fbb6 	bl	80024f4 <_isatty>
 800ad88:	1c43      	adds	r3, r0, #1
 800ad8a:	d102      	bne.n	800ad92 <_isatty_r+0x1a>
 800ad8c:	682b      	ldr	r3, [r5, #0]
 800ad8e:	b103      	cbz	r3, 800ad92 <_isatty_r+0x1a>
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	bd38      	pop	{r3, r4, r5, pc}
 800ad94:	20005098 	.word	0x20005098

0800ad98 <_init>:
 800ad98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad9a:	bf00      	nop
 800ad9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad9e:	bc08      	pop	{r3}
 800ada0:	469e      	mov	lr, r3
 800ada2:	4770      	bx	lr

0800ada4 <_fini>:
 800ada4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada6:	bf00      	nop
 800ada8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adaa:	bc08      	pop	{r3}
 800adac:	469e      	mov	lr, r3
 800adae:	4770      	bx	lr
